"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import proto.rpc.webrtc.v1.signaling_pb2
import typing

class SignalingServiceStub:
    """A SignalingService provides the means to have one client "call" another
    client using the Session Description Protocol (SDP).
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    Call: grpc.UnaryStreamMultiCallable[
        proto.rpc.webrtc.v1.signaling_pb2.CallRequest,
        proto.rpc.webrtc.v1.signaling_pb2.CallResponse] = ...
    """Call makes an offer to a client that it expects an answer to. The host
    of the client in question should be identified in the rpc-host metadata
    field.
    """

    CallUpdate: grpc.UnaryUnaryMultiCallable[
        proto.rpc.webrtc.v1.signaling_pb2.CallUpdateRequest,
        proto.rpc.webrtc.v1.signaling_pb2.CallUpdateResponse] = ...
    """CallUpdate is used to send additional info in relation to a Call.
    The host of the client for the call in question should be identified
    in the rpc-host metadata field.
    In a world where https://github.com/grpc/grpc-web/issues/24 is fixed,
    this should be removed in favor of a bidirectional stream on Call.
    """

    Answer: grpc.StreamStreamMultiCallable[
        proto.rpc.webrtc.v1.signaling_pb2.AnswerResponse,
        proto.rpc.webrtc.v1.signaling_pb2.AnswerRequest] = ...
    """Answer sets up an answering service where the caller answers call offers
    and responds with answers.
    The host(s) to answer for should be in the rpc-host metadata field.
    """

    OptionalWebRTCConfig: grpc.UnaryUnaryMultiCallable[
        proto.rpc.webrtc.v1.signaling_pb2.OptionalWebRTCConfigRequest,
        proto.rpc.webrtc.v1.signaling_pb2.OptionalWebRTCConfigResponse] = ...
    """OptionalWebRTCConfig returns any WebRTC configuration the caller may want to use.
    The host to get a config for must be in the rpc-host metadata field.
    """


class SignalingServiceServicer(metaclass=abc.ABCMeta):
    """A SignalingService provides the means to have one client "call" another
    client using the Session Description Protocol (SDP).
    """
    @abc.abstractmethod
    def Call(self,
        request: proto.rpc.webrtc.v1.signaling_pb2.CallRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[proto.rpc.webrtc.v1.signaling_pb2.CallResponse]:
        """Call makes an offer to a client that it expects an answer to. The host
        of the client in question should be identified in the rpc-host metadata
        field.
        """
        pass

    @abc.abstractmethod
    def CallUpdate(self,
        request: proto.rpc.webrtc.v1.signaling_pb2.CallUpdateRequest,
        context: grpc.ServicerContext,
    ) -> proto.rpc.webrtc.v1.signaling_pb2.CallUpdateResponse:
        """CallUpdate is used to send additional info in relation to a Call.
        The host of the client for the call in question should be identified
        in the rpc-host metadata field.
        In a world where https://github.com/grpc/grpc-web/issues/24 is fixed,
        this should be removed in favor of a bidirectional stream on Call.
        """
        pass

    @abc.abstractmethod
    def Answer(self,
        request: typing.Iterator[proto.rpc.webrtc.v1.signaling_pb2.AnswerResponse],
        context: grpc.ServicerContext,
    ) -> typing.Iterator[proto.rpc.webrtc.v1.signaling_pb2.AnswerRequest]:
        """Answer sets up an answering service where the caller answers call offers
        and responds with answers.
        The host(s) to answer for should be in the rpc-host metadata field.
        """
        pass

    @abc.abstractmethod
    def OptionalWebRTCConfig(self,
        request: proto.rpc.webrtc.v1.signaling_pb2.OptionalWebRTCConfigRequest,
        context: grpc.ServicerContext,
    ) -> proto.rpc.webrtc.v1.signaling_pb2.OptionalWebRTCConfigResponse:
        """OptionalWebRTCConfig returns any WebRTC configuration the caller may want to use.
        The host to get a config for must be in the rpc-host metadata field.
        """
        pass


def add_SignalingServiceServicer_to_server(servicer: SignalingServiceServicer, server: grpc.Server) -> None: ...
