"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import proto.rpc.v1.auth_pb2

class AuthServiceStub:
    """An AuthService is intended to be used as a means to perform application level
    authentication. Its sole Authenticate method should be used prior to any
    other services that a gRPC server has to offer.
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    Authenticate: grpc.UnaryUnaryMultiCallable[
        proto.rpc.v1.auth_pb2.AuthenticateRequest,
        proto.rpc.v1.auth_pb2.AuthenticateResponse] = ...
    """Authenticate attempts to authenticate the caller. The resulting
    response contains an access token that should be used for future
    requests.
    """


class AuthServiceServicer(metaclass=abc.ABCMeta):
    """An AuthService is intended to be used as a means to perform application level
    authentication. Its sole Authenticate method should be used prior to any
    other services that a gRPC server has to offer.
    """
    @abc.abstractmethod
    def Authenticate(self,
        request: proto.rpc.v1.auth_pb2.AuthenticateRequest,
        context: grpc.ServicerContext,
    ) -> proto.rpc.v1.auth_pb2.AuthenticateResponse:
        """Authenticate attempts to authenticate the caller. The resulting
        response contains an access token that should be used for future
        requests.
        """
        pass


def add_AuthServiceServicer_to_server(servicer: AuthServiceServicer, server: grpc.Server) -> None: ...

class ExternalAuthServiceStub:
    """An ExternalAuthService is intended to be used as a means to perform application level
    authentication but for an external entity that it is responsible for handling auth for.
    An example of its use would be for a entity that only trusts an external source to
    perform authentication for it.
    Its sole AuthenticateTo method should be used prior to any other services that the external
    entity's gRPC server has to offer.
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    AuthenticateTo: grpc.UnaryUnaryMultiCallable[
        proto.rpc.v1.auth_pb2.AuthenticateToRequest,
        proto.rpc.v1.auth_pb2.AuthenticateToResponse] = ...
    """AuthenticateTo attempts to authenticate the caller on behalf of an entity.
    The resulting response contains an access token that should be used for future
    requests. This assumes that the caller is already authenticated to the
    server implementing this service.
    """


class ExternalAuthServiceServicer(metaclass=abc.ABCMeta):
    """An ExternalAuthService is intended to be used as a means to perform application level
    authentication but for an external entity that it is responsible for handling auth for.
    An example of its use would be for a entity that only trusts an external source to
    perform authentication for it.
    Its sole AuthenticateTo method should be used prior to any other services that the external
    entity's gRPC server has to offer.
    """
    @abc.abstractmethod
    def AuthenticateTo(self,
        request: proto.rpc.v1.auth_pb2.AuthenticateToRequest,
        context: grpc.ServicerContext,
    ) -> proto.rpc.v1.auth_pb2.AuthenticateToResponse:
        """AuthenticateTo attempts to authenticate the caller on behalf of an entity.
        The resulting response contains an access token that should be used for future
        requests. This assumes that the caller is already authenticated to the
        server implementing this service.
        """
        pass


def add_ExternalAuthServiceServicer_to_server(servicer: ExternalAuthServiceServicer, server: grpc.Server) -> None: ...
