"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class BuildProvenance(google.protobuf.message.Message):
    """Provenance of a build. Contains all information needed to verify the full
    details about the build from source to completion.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class BuildOptionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    PROJECT_ID_FIELD_NUMBER: builtins.int
    COMMANDS_FIELD_NUMBER: builtins.int
    BUILT_ARTIFACTS_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    CREATOR_FIELD_NUMBER: builtins.int
    LOGS_URI_FIELD_NUMBER: builtins.int
    SOURCE_PROVENANCE_FIELD_NUMBER: builtins.int
    TRIGGER_ID_FIELD_NUMBER: builtins.int
    BUILD_OPTIONS_FIELD_NUMBER: builtins.int
    BUILDER_VERSION_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """Required. Unique identifier of the build."""

    project_id: typing.Text = ...
    """ID of the project."""

    @property
    def commands(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Command]:
        """Commands requested by the build."""
        pass
    @property
    def built_artifacts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Artifact]:
        """Output of the build."""
        pass
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time at which the build was created."""
        pass
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time at which execution of the build was started."""
        pass
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time at which execution of the build was finished."""
        pass
    creator: typing.Text = ...
    """E-mail address of the user who initiated this build. Note that this was the
    user's e-mail address at the time the build was initiated; this address may
    not represent the same end-user for all time.
    """

    logs_uri: typing.Text = ...
    """URI where any logs for this provenance were written."""

    @property
    def source_provenance(self) -> global___Source:
        """Details of the Source input to the build."""
        pass
    trigger_id: typing.Text = ...
    """Trigger identifier if the build was triggered automatically; empty if not."""

    @property
    def build_options(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Special options applied to this build. This is a catch-all field where
        build providers can enter any desired additional details.
        """
        pass
    builder_version: typing.Text = ...
    """Version string of the builder at the time this build was executed."""

    def __init__(self,
        *,
        id : typing.Text = ...,
        project_id : typing.Text = ...,
        commands : typing.Optional[typing.Iterable[global___Command]] = ...,
        built_artifacts : typing.Optional[typing.Iterable[global___Artifact]] = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        start_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        end_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        creator : typing.Text = ...,
        logs_uri : typing.Text = ...,
        source_provenance : typing.Optional[global___Source] = ...,
        trigger_id : typing.Text = ...,
        build_options : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        builder_version : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time","end_time",b"end_time","source_provenance",b"source_provenance","start_time",b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["build_options",b"build_options","builder_version",b"builder_version","built_artifacts",b"built_artifacts","commands",b"commands","create_time",b"create_time","creator",b"creator","end_time",b"end_time","id",b"id","logs_uri",b"logs_uri","project_id",b"project_id","source_provenance",b"source_provenance","start_time",b"start_time","trigger_id",b"trigger_id"]) -> None: ...
global___BuildProvenance = BuildProvenance

class Source(google.protobuf.message.Message):
    """Source describes the location of the source used for the build."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class FileHashesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___FileHashes: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___FileHashes] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ARTIFACT_STORAGE_SOURCE_URI_FIELD_NUMBER: builtins.int
    FILE_HASHES_FIELD_NUMBER: builtins.int
    CONTEXT_FIELD_NUMBER: builtins.int
    ADDITIONAL_CONTEXTS_FIELD_NUMBER: builtins.int
    artifact_storage_source_uri: typing.Text = ...
    """If provided, the input binary artifacts for the build came from this
    location.
    """

    @property
    def file_hashes(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___FileHashes]:
        """Hash(es) of the build source, which can be used to verify that the original
        source integrity was maintained in the build.

        The keys to this map are file paths used as build source and the values
        contain the hash values for those files.

        If the build source came in a single package such as a gzipped tarfile
        (.tar.gz), the FileHash will be for the single path to that file.
        """
        pass
    @property
    def context(self) -> global___SourceContext:
        """If provided, the source code used for the build came from this location."""
        pass
    @property
    def additional_contexts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SourceContext]:
        """If provided, some of the source code used for the build may be found in
        these locations, in the case where the source repository had multiple
        remotes or submodules. This list will not include the context specified in
        the context field.
        """
        pass
    def __init__(self,
        *,
        artifact_storage_source_uri : typing.Text = ...,
        file_hashes : typing.Optional[typing.Mapping[typing.Text, global___FileHashes]] = ...,
        context : typing.Optional[global___SourceContext] = ...,
        additional_contexts : typing.Optional[typing.Iterable[global___SourceContext]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["context",b"context"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["additional_contexts",b"additional_contexts","artifact_storage_source_uri",b"artifact_storage_source_uri","context",b"context","file_hashes",b"file_hashes"]) -> None: ...
global___Source = Source

class FileHashes(google.protobuf.message.Message):
    """Container message for hashes of byte content of files, used in source
    messages to verify integrity of source input to the build.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FILE_HASH_FIELD_NUMBER: builtins.int
    @property
    def file_hash(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Hash]:
        """Required. Collection of file hashes."""
        pass
    def __init__(self,
        *,
        file_hash : typing.Optional[typing.Iterable[global___Hash]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["file_hash",b"file_hash"]) -> None: ...
global___FileHashes = FileHashes

class Hash(google.protobuf.message.Message):
    """Container message for hash values."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TYPE_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    type: typing.Text = ...
    """Required. The type of hash that was performed, e.g. "SHA-256"."""

    value: builtins.bytes = ...
    """Required. The hash value."""

    def __init__(self,
        *,
        type : typing.Text = ...,
        value : builtins.bytes = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["type",b"type","value",b"value"]) -> None: ...
global___Hash = Hash

class Command(google.protobuf.message.Message):
    """Command describes a step performed as part of the build pipeline."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    ENV_FIELD_NUMBER: builtins.int
    ARGS_FIELD_NUMBER: builtins.int
    DIR_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    WAIT_FOR_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Name of the command, as presented on the command line, or if the
    command is packaged as a Docker container, as presented to `docker pull`.
    """

    @property
    def env(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Environment variables set before running this command."""
        pass
    @property
    def args(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Command-line arguments used when executing this command."""
        pass
    dir: typing.Text = ...
    """Working directory (relative to project source root) used when running this
    command.
    """

    id: typing.Text = ...
    """Optional unique identifier for this command, used in wait_for to reference
    this command as a dependency.
    """

    @property
    def wait_for(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The ID(s) of the command(s) that this command depends on."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        env : typing.Optional[typing.Iterable[typing.Text]] = ...,
        args : typing.Optional[typing.Iterable[typing.Text]] = ...,
        dir : typing.Text = ...,
        id : typing.Text = ...,
        wait_for : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["args",b"args","dir",b"dir","env",b"env","id",b"id","name",b"name","wait_for",b"wait_for"]) -> None: ...
global___Command = Command

class Artifact(google.protobuf.message.Message):
    """Artifact describes a build product."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CHECKSUM_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    NAMES_FIELD_NUMBER: builtins.int
    checksum: typing.Text = ...
    """Hash or checksum value of a binary, or Docker Registry 2.0 digest of a
    container.
    """

    id: typing.Text = ...
    """Artifact ID, if any; for container images, this will be a URL by digest
    like `gcr.io/projectID/imagename@sha256:123456`.
    """

    @property
    def names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Related artifact names. This may be the path to a binary or jar file, or in
        the case of a container build, the name used to push the container image to
        Google Container Registry, as presented to `docker push`. Note that a
        single Artifact ID can have multiple names, for example if two tags are
        applied to one image.
        """
        pass
    def __init__(self,
        *,
        checksum : typing.Text = ...,
        id : typing.Text = ...,
        names : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["checksum",b"checksum","id",b"id","names",b"names"]) -> None: ...
global___Artifact = Artifact

class SourceContext(google.protobuf.message.Message):
    """A SourceContext is a reference to a tree of files. A SourceContext together
    with a path point to a unique revision of a single file or directory.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    CLOUD_REPO_FIELD_NUMBER: builtins.int
    GERRIT_FIELD_NUMBER: builtins.int
    GIT_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    @property
    def cloud_repo(self) -> global___CloudRepoSourceContext:
        """A SourceContext referring to a revision in a Google Cloud Source Repo."""
        pass
    @property
    def gerrit(self) -> global___GerritSourceContext:
        """A SourceContext referring to a Gerrit project."""
        pass
    @property
    def git(self) -> global___GitSourceContext:
        """A SourceContext referring to any third party Git repo (e.g., GitHub)."""
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Labels with user defined metadata."""
        pass
    def __init__(self,
        *,
        cloud_repo : typing.Optional[global___CloudRepoSourceContext] = ...,
        gerrit : typing.Optional[global___GerritSourceContext] = ...,
        git : typing.Optional[global___GitSourceContext] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cloud_repo",b"cloud_repo","context",b"context","gerrit",b"gerrit","git",b"git"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cloud_repo",b"cloud_repo","context",b"context","gerrit",b"gerrit","git",b"git","labels",b"labels"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["context",b"context"]) -> typing.Optional[typing_extensions.Literal["cloud_repo","gerrit","git"]]: ...
global___SourceContext = SourceContext

class AliasContext(google.protobuf.message.Message):
    """An alias to a repo revision."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Kind:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _KindEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Kind.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        KIND_UNSPECIFIED: AliasContext.Kind.ValueType = ...  # 0
        """Unknown."""

        FIXED: AliasContext.Kind.ValueType = ...  # 1
        """Git tag."""

        MOVABLE: AliasContext.Kind.ValueType = ...  # 2
        """Git branch."""

        OTHER: AliasContext.Kind.ValueType = ...  # 4
        """Used to specify non-standard aliases. For example, if a Git repo has a
        ref named "refs/foo/bar".
        """

    class Kind(_Kind, metaclass=_KindEnumTypeWrapper):
        """The type of an alias."""
        pass

    KIND_UNSPECIFIED: AliasContext.Kind.ValueType = ...  # 0
    """Unknown."""

    FIXED: AliasContext.Kind.ValueType = ...  # 1
    """Git tag."""

    MOVABLE: AliasContext.Kind.ValueType = ...  # 2
    """Git branch."""

    OTHER: AliasContext.Kind.ValueType = ...  # 4
    """Used to specify non-standard aliases. For example, if a Git repo has a
    ref named "refs/foo/bar".
    """


    KIND_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    kind: global___AliasContext.Kind.ValueType = ...
    """The alias kind."""

    name: typing.Text = ...
    """The alias name."""

    def __init__(self,
        *,
        kind : global___AliasContext.Kind.ValueType = ...,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["kind",b"kind","name",b"name"]) -> None: ...
global___AliasContext = AliasContext

class CloudRepoSourceContext(google.protobuf.message.Message):
    """A CloudRepoSourceContext denotes a particular revision in a Google Cloud
    Source Repo.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    REPO_ID_FIELD_NUMBER: builtins.int
    REVISION_ID_FIELD_NUMBER: builtins.int
    ALIAS_CONTEXT_FIELD_NUMBER: builtins.int
    @property
    def repo_id(self) -> global___RepoId:
        """The ID of the repo."""
        pass
    revision_id: typing.Text = ...
    """A revision ID."""

    @property
    def alias_context(self) -> global___AliasContext:
        """An alias, which may be a branch or tag."""
        pass
    def __init__(self,
        *,
        repo_id : typing.Optional[global___RepoId] = ...,
        revision_id : typing.Text = ...,
        alias_context : typing.Optional[global___AliasContext] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["alias_context",b"alias_context","repo_id",b"repo_id","revision",b"revision","revision_id",b"revision_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["alias_context",b"alias_context","repo_id",b"repo_id","revision",b"revision","revision_id",b"revision_id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["revision",b"revision"]) -> typing.Optional[typing_extensions.Literal["revision_id","alias_context"]]: ...
global___CloudRepoSourceContext = CloudRepoSourceContext

class GerritSourceContext(google.protobuf.message.Message):
    """A SourceContext referring to a Gerrit project."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    HOST_URI_FIELD_NUMBER: builtins.int
    GERRIT_PROJECT_FIELD_NUMBER: builtins.int
    REVISION_ID_FIELD_NUMBER: builtins.int
    ALIAS_CONTEXT_FIELD_NUMBER: builtins.int
    host_uri: typing.Text = ...
    """The URI of a running Gerrit instance."""

    gerrit_project: typing.Text = ...
    """The full project name within the host. Projects may be nested, so
    "project/subproject" is a valid project name. The "repo name" is the
    hostURI/project.
    """

    revision_id: typing.Text = ...
    """A revision (commit) ID."""

    @property
    def alias_context(self) -> global___AliasContext:
        """An alias, which may be a branch or tag."""
        pass
    def __init__(self,
        *,
        host_uri : typing.Text = ...,
        gerrit_project : typing.Text = ...,
        revision_id : typing.Text = ...,
        alias_context : typing.Optional[global___AliasContext] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["alias_context",b"alias_context","revision",b"revision","revision_id",b"revision_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["alias_context",b"alias_context","gerrit_project",b"gerrit_project","host_uri",b"host_uri","revision",b"revision","revision_id",b"revision_id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["revision",b"revision"]) -> typing.Optional[typing_extensions.Literal["revision_id","alias_context"]]: ...
global___GerritSourceContext = GerritSourceContext

class GitSourceContext(google.protobuf.message.Message):
    """A GitSourceContext denotes a particular revision in a third party Git
    repository (e.g., GitHub).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    URL_FIELD_NUMBER: builtins.int
    REVISION_ID_FIELD_NUMBER: builtins.int
    url: typing.Text = ...
    """Git repository URL."""

    revision_id: typing.Text = ...
    """Git commit hash."""

    def __init__(self,
        *,
        url : typing.Text = ...,
        revision_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["revision_id",b"revision_id","url",b"url"]) -> None: ...
global___GitSourceContext = GitSourceContext

class RepoId(google.protobuf.message.Message):
    """A unique identifier for a Cloud Repo."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_REPO_ID_FIELD_NUMBER: builtins.int
    UID_FIELD_NUMBER: builtins.int
    @property
    def project_repo_id(self) -> global___ProjectRepoId:
        """A combination of a project ID and a repo name."""
        pass
    uid: typing.Text = ...
    """A server-assigned, globally unique identifier."""

    def __init__(self,
        *,
        project_repo_id : typing.Optional[global___ProjectRepoId] = ...,
        uid : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["id",b"id","project_repo_id",b"project_repo_id","uid",b"uid"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id","project_repo_id",b"project_repo_id","uid",b"uid"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["id",b"id"]) -> typing.Optional[typing_extensions.Literal["project_repo_id","uid"]]: ...
global___RepoId = RepoId

class ProjectRepoId(google.protobuf.message.Message):
    """Selects a repo using a Google Cloud Platform project ID (e.g.,
    winged-cargo-31) and a repo name within that project.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    REPO_NAME_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """The ID of the project."""

    repo_name: typing.Text = ...
    """The name of the repo. Leave empty for the default repo."""

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        repo_name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["project_id",b"project_id","repo_name",b"repo_name"]) -> None: ...
global___ProjectRepoId = ProjectRepoId
