"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class SlsaProvenance(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class SlsaRecipe(google.protobuf.message.Message):
        """Steps taken to build the artifact.
        For a TaskRun, typically each container corresponds to one step in the
        recipe.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        TYPE_FIELD_NUMBER: builtins.int
        DEFINED_IN_MATERIAL_FIELD_NUMBER: builtins.int
        ENTRY_POINT_FIELD_NUMBER: builtins.int
        ARGUMENTS_FIELD_NUMBER: builtins.int
        ENVIRONMENT_FIELD_NUMBER: builtins.int
        type: typing.Text = ...
        """URI indicating what type of recipe was performed. It determines the
        meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and
        materials.
        """

        defined_in_material: builtins.int = ...
        """Index in materials containing the recipe steps that are not implied by
        recipe.type. For example, if the recipe type were "make", then this would
        point to the source containing the Makefile, not the make program itself.
        Set to -1 if the recipe doesn't come from a material, as zero is default
        unset value for int64.
        """

        entry_point: typing.Text = ...
        """String identifying the entry point into the build.
        This is often a path to a configuration file and/or a target label within
        that file. The syntax and meaning are defined by recipe.type. For
        example, if the recipe type were "make", then this would reference the
        directory in which to run make as well as which target to use.
        """

        @property
        def arguments(self) -> google.protobuf.any_pb2.Any:
            """Collection of all external inputs that influenced the build on top of
            recipe.definedInMaterial and recipe.entryPoint. For example, if the
            recipe type were "make", then this might be the flags passed to make
            aside from the target, which is captured in recipe.entryPoint. Depending
            on the recipe Type, the structure may be different.
            """
            pass
        @property
        def environment(self) -> google.protobuf.any_pb2.Any:
            """Any other builder-controlled inputs necessary for correctly evaluating
            the recipe. Usually only needed for reproducing the build but not
            evaluated as part of policy. Depending on the recipe Type, the structure
            may be different.
            """
            pass
        def __init__(self,
            *,
            type : typing.Text = ...,
            defined_in_material : builtins.int = ...,
            entry_point : typing.Text = ...,
            arguments : typing.Optional[google.protobuf.any_pb2.Any] = ...,
            environment : typing.Optional[google.protobuf.any_pb2.Any] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["arguments",b"arguments","environment",b"environment"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["arguments",b"arguments","defined_in_material",b"defined_in_material","entry_point",b"entry_point","environment",b"environment","type",b"type"]) -> None: ...

    class SlsaCompleteness(google.protobuf.message.Message):
        """Indicates that the builder claims certain fields in this message to be
        complete.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        ARGUMENTS_FIELD_NUMBER: builtins.int
        ENVIRONMENT_FIELD_NUMBER: builtins.int
        MATERIALS_FIELD_NUMBER: builtins.int
        arguments: builtins.bool = ...
        """If true, the builder claims that recipe.arguments is complete, meaning
        that all external inputs are properly captured in the recipe.
        """

        environment: builtins.bool = ...
        """If true, the builder claims that recipe.environment is claimed to be
        complete.
        """

        materials: builtins.bool = ...
        """If true, the builder claims that materials are complete, usually through
        some controls to prevent network access. Sometimes called "hermetic".
        """

        def __init__(self,
            *,
            arguments : builtins.bool = ...,
            environment : builtins.bool = ...,
            materials : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["arguments",b"arguments","environment",b"environment","materials",b"materials"]) -> None: ...

    class SlsaMetadata(google.protobuf.message.Message):
        """Other properties of the build."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        BUILD_INVOCATION_ID_FIELD_NUMBER: builtins.int
        BUILD_STARTED_ON_FIELD_NUMBER: builtins.int
        BUILD_FINISHED_ON_FIELD_NUMBER: builtins.int
        COMPLETENESS_FIELD_NUMBER: builtins.int
        REPRODUCIBLE_FIELD_NUMBER: builtins.int
        build_invocation_id: typing.Text = ...
        """Identifies the particular build invocation, which can be useful for
        finding associated logs or other ad-hoc analysis. The value SHOULD be
        globally unique, per in-toto Provenance spec.
        """

        @property
        def build_started_on(self) -> google.protobuf.timestamp_pb2.Timestamp:
            """The timestamp of when the build started."""
            pass
        @property
        def build_finished_on(self) -> google.protobuf.timestamp_pb2.Timestamp:
            """The timestamp of when the build completed."""
            pass
        @property
        def completeness(self) -> global___SlsaProvenance.SlsaCompleteness:
            """Indicates that the builder claims certain fields in this message to be
            complete.
            """
            pass
        reproducible: builtins.bool = ...
        """If true, the builder claims that running the recipe on materials will
        produce bit-for-bit identical output.
        """

        def __init__(self,
            *,
            build_invocation_id : typing.Text = ...,
            build_started_on : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
            build_finished_on : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
            completeness : typing.Optional[global___SlsaProvenance.SlsaCompleteness] = ...,
            reproducible : builtins.bool = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["build_finished_on",b"build_finished_on","build_started_on",b"build_started_on","completeness",b"completeness"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["build_finished_on",b"build_finished_on","build_invocation_id",b"build_invocation_id","build_started_on",b"build_started_on","completeness",b"completeness","reproducible",b"reproducible"]) -> None: ...

    class SlsaBuilder(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        ID_FIELD_NUMBER: builtins.int
        id: typing.Text = ...
        def __init__(self,
            *,
            id : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["id",b"id"]) -> None: ...

    class Material(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class DigestEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            value: typing.Text = ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        URI_FIELD_NUMBER: builtins.int
        DIGEST_FIELD_NUMBER: builtins.int
        uri: typing.Text = ...
        @property
        def digest(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]: ...
        def __init__(self,
            *,
            uri : typing.Text = ...,
            digest : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["digest",b"digest","uri",b"uri"]) -> None: ...

    BUILDER_FIELD_NUMBER: builtins.int
    RECIPE_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    MATERIALS_FIELD_NUMBER: builtins.int
    @property
    def builder(self) -> global___SlsaProvenance.SlsaBuilder:
        """required"""
        pass
    @property
    def recipe(self) -> global___SlsaProvenance.SlsaRecipe:
        """Identifies the configuration used for the build.
        When combined with materials, this SHOULD fully describe the build,
        such that re-running this recipe results in bit-for-bit identical output
        (if the build is reproducible).
        required
        """
        pass
    @property
    def metadata(self) -> global___SlsaProvenance.SlsaMetadata: ...
    @property
    def materials(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SlsaProvenance.Material]:
        """The collection of artifacts that influenced the build including sources,
        dependencies, build tools, base images, and so on. This is considered to be
        incomplete unless metadata.completeness.materials is true. Unset or null is
        equivalent to empty.
        """
        pass
    def __init__(self,
        *,
        builder : typing.Optional[global___SlsaProvenance.SlsaBuilder] = ...,
        recipe : typing.Optional[global___SlsaProvenance.SlsaRecipe] = ...,
        metadata : typing.Optional[global___SlsaProvenance.SlsaMetadata] = ...,
        materials : typing.Optional[typing.Iterable[global___SlsaProvenance.Material]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["builder",b"builder","metadata",b"metadata","recipe",b"recipe"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["builder",b"builder","materials",b"materials","metadata",b"metadata","recipe",b"recipe"]) -> None: ...
global___SlsaProvenance = SlsaProvenance
