"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.ads.googleads.v9.enums.batch_job_status_pb2
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class BatchJob(google.protobuf.message.Message):
    """Proto file describing the batch job resource.

    A list of mutates being processed asynchronously. The mutates are uploaded
    by the user. The mutates themselves aren't readable and the results of the
    job can only be read using BatchJobService.ListBatchJobResults.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class BatchJobMetadata(google.protobuf.message.Message):
        """Additional information about the batch job. This message is also used as
        metadata returned in batch job Long Running Operations.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        CREATION_DATE_TIME_FIELD_NUMBER: builtins.int
        START_DATE_TIME_FIELD_NUMBER: builtins.int
        COMPLETION_DATE_TIME_FIELD_NUMBER: builtins.int
        ESTIMATED_COMPLETION_RATIO_FIELD_NUMBER: builtins.int
        OPERATION_COUNT_FIELD_NUMBER: builtins.int
        EXECUTED_OPERATION_COUNT_FIELD_NUMBER: builtins.int
        creation_date_time: typing.Text = ...
        """Output only. The time when this batch job was created.
        Formatted as yyyy-mm-dd hh:mm:ss. Example: "2018-03-05 09:15:00"
        """

        start_date_time: typing.Text = ...
        """Output only. The time when this batch job started running.
        Formatted as yyyy-mm-dd hh:mm:ss. Example: "2018-03-05 09:15:30"
        """

        completion_date_time: typing.Text = ...
        """Output only. The time when this batch job was completed.
        Formatted as yyyy-MM-dd HH:mm:ss. Example: "2018-03-05 09:16:00"
        """

        estimated_completion_ratio: builtins.float = ...
        """Output only. The fraction (between 0.0 and 1.0) of mutates that have been processed.
        This is empty if the job hasn't started running yet.
        """

        operation_count: builtins.int = ...
        """Output only. The number of mutate operations in the batch job."""

        executed_operation_count: builtins.int = ...
        """Output only. The number of mutate operations executed by the batch job.
        Present only if the job has started running.
        """

        def __init__(self,
            *,
            creation_date_time : typing.Optional[typing.Text] = ...,
            start_date_time : typing.Optional[typing.Text] = ...,
            completion_date_time : typing.Optional[typing.Text] = ...,
            estimated_completion_ratio : typing.Optional[builtins.float] = ...,
            operation_count : typing.Optional[builtins.int] = ...,
            executed_operation_count : typing.Optional[builtins.int] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["_completion_date_time",b"_completion_date_time","_creation_date_time",b"_creation_date_time","_estimated_completion_ratio",b"_estimated_completion_ratio","_executed_operation_count",b"_executed_operation_count","_operation_count",b"_operation_count","_start_date_time",b"_start_date_time","completion_date_time",b"completion_date_time","creation_date_time",b"creation_date_time","estimated_completion_ratio",b"estimated_completion_ratio","executed_operation_count",b"executed_operation_count","operation_count",b"operation_count","start_date_time",b"start_date_time"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["_completion_date_time",b"_completion_date_time","_creation_date_time",b"_creation_date_time","_estimated_completion_ratio",b"_estimated_completion_ratio","_executed_operation_count",b"_executed_operation_count","_operation_count",b"_operation_count","_start_date_time",b"_start_date_time","completion_date_time",b"completion_date_time","creation_date_time",b"creation_date_time","estimated_completion_ratio",b"estimated_completion_ratio","executed_operation_count",b"executed_operation_count","operation_count",b"operation_count","start_date_time",b"start_date_time"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_completion_date_time",b"_completion_date_time"]) -> typing.Optional[typing_extensions.Literal["completion_date_time"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_creation_date_time",b"_creation_date_time"]) -> typing.Optional[typing_extensions.Literal["creation_date_time"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_estimated_completion_ratio",b"_estimated_completion_ratio"]) -> typing.Optional[typing_extensions.Literal["estimated_completion_ratio"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_executed_operation_count",b"_executed_operation_count"]) -> typing.Optional[typing_extensions.Literal["executed_operation_count"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_operation_count",b"_operation_count"]) -> typing.Optional[typing_extensions.Literal["operation_count"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_start_date_time",b"_start_date_time"]) -> typing.Optional[typing_extensions.Literal["start_date_time"]]: ...

    RESOURCE_NAME_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    NEXT_ADD_SEQUENCE_TOKEN_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    LONG_RUNNING_OPERATION_FIELD_NUMBER: builtins.int
    resource_name: typing.Text = ...
    """Immutable. The resource name of the batch job.
    Batch job resource names have the form:

    `customers/{customer_id}/batchJobs/{batch_job_id}`
    """

    id: builtins.int = ...
    """Output only. ID of this batch job."""

    next_add_sequence_token: typing.Text = ...
    """Output only. The next sequence token to use when adding operations. Only set when the
    batch job status is PENDING.
    """

    @property
    def metadata(self) -> global___BatchJob.BatchJobMetadata:
        """Output only. Contains additional information about this batch job."""
        pass
    status: google.ads.googleads.v9.enums.batch_job_status_pb2.BatchJobStatusEnum.BatchJobStatus.ValueType = ...
    """Output only. Status of this batch job."""

    long_running_operation: typing.Text = ...
    """Output only. The resource name of the long-running operation that can be used to poll
    for completion. Only set when the batch job status is RUNNING or DONE.
    """

    def __init__(self,
        *,
        resource_name : typing.Text = ...,
        id : typing.Optional[builtins.int] = ...,
        next_add_sequence_token : typing.Optional[typing.Text] = ...,
        metadata : typing.Optional[global___BatchJob.BatchJobMetadata] = ...,
        status : google.ads.googleads.v9.enums.batch_job_status_pb2.BatchJobStatusEnum.BatchJobStatus.ValueType = ...,
        long_running_operation : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_id",b"_id","_long_running_operation",b"_long_running_operation","_next_add_sequence_token",b"_next_add_sequence_token","id",b"id","long_running_operation",b"long_running_operation","metadata",b"metadata","next_add_sequence_token",b"next_add_sequence_token"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_id",b"_id","_long_running_operation",b"_long_running_operation","_next_add_sequence_token",b"_next_add_sequence_token","id",b"id","long_running_operation",b"long_running_operation","metadata",b"metadata","next_add_sequence_token",b"next_add_sequence_token","resource_name",b"resource_name","status",b"status"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_id",b"_id"]) -> typing.Optional[typing_extensions.Literal["id"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_long_running_operation",b"_long_running_operation"]) -> typing.Optional[typing_extensions.Literal["long_running_operation"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_next_add_sequence_token",b"_next_add_sequence_token"]) -> typing.Optional[typing_extensions.Literal["next_add_sequence_token"]]: ...
global___BatchJob = BatchJob
