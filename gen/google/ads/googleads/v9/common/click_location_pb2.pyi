"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class ClickLocation(google.protobuf.message.Message):
    """Proto file describing a ClickLocation.

    Location criteria associated with a click.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CITY_FIELD_NUMBER: builtins.int
    COUNTRY_FIELD_NUMBER: builtins.int
    METRO_FIELD_NUMBER: builtins.int
    MOST_SPECIFIC_FIELD_NUMBER: builtins.int
    REGION_FIELD_NUMBER: builtins.int
    city: typing.Text = ...
    """The city location criterion associated with the impression."""

    country: typing.Text = ...
    """The country location criterion associated with the impression."""

    metro: typing.Text = ...
    """The metro location criterion associated with the impression."""

    most_specific: typing.Text = ...
    """The most specific location criterion associated with the impression."""

    region: typing.Text = ...
    """The region location criterion associated with the impression."""

    def __init__(self,
        *,
        city : typing.Optional[typing.Text] = ...,
        country : typing.Optional[typing.Text] = ...,
        metro : typing.Optional[typing.Text] = ...,
        most_specific : typing.Optional[typing.Text] = ...,
        region : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_city",b"_city","_country",b"_country","_metro",b"_metro","_most_specific",b"_most_specific","_region",b"_region","city",b"city","country",b"country","metro",b"metro","most_specific",b"most_specific","region",b"region"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_city",b"_city","_country",b"_country","_metro",b"_metro","_most_specific",b"_most_specific","_region",b"_region","city",b"city","country",b"country","metro",b"metro","most_specific",b"most_specific","region",b"region"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_city",b"_city"]) -> typing.Optional[typing_extensions.Literal["city"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_country",b"_country"]) -> typing.Optional[typing_extensions.Literal["country"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_metro",b"_metro"]) -> typing.Optional[typing_extensions.Literal["metro"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_most_specific",b"_most_specific"]) -> typing.Optional[typing_extensions.Literal["most_specific"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_region",b"_region"]) -> typing.Optional[typing_extensions.Literal["region"]]: ...
global___ClickLocation = ClickLocation
