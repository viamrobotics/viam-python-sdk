"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.ads.googleads.v7.enums.keyword_match_type_pb2
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class KeywordPlanCampaignKeyword(google.protobuf.message.Message):
    """Proto file describing the keyword plan negative keyword resource.

    A Keyword Plan Campaign keyword.
    Only negative keywords are supported for Campaign Keyword.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESOURCE_NAME_FIELD_NUMBER: builtins.int
    KEYWORD_PLAN_CAMPAIGN_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    TEXT_FIELD_NUMBER: builtins.int
    MATCH_TYPE_FIELD_NUMBER: builtins.int
    NEGATIVE_FIELD_NUMBER: builtins.int
    resource_name: typing.Text = ...
    """Immutable. The resource name of the Keyword Plan Campaign keyword.
    KeywordPlanCampaignKeyword resource names have the form:

    `customers/{customer_id}/keywordPlanCampaignKeywords/{kp_campaign_keyword_id}`
    """

    keyword_plan_campaign: typing.Text = ...
    """The Keyword Plan campaign to which this negative keyword belongs."""

    id: builtins.int = ...
    """Output only. The ID of the Keyword Plan negative keyword."""

    text: typing.Text = ...
    """The keyword text."""

    match_type: google.ads.googleads.v7.enums.keyword_match_type_pb2.KeywordMatchTypeEnum.KeywordMatchType.ValueType = ...
    """The keyword match type."""

    negative: builtins.bool = ...
    """Immutable. If true, the keyword is negative.
    Must be set to true. Only negative campaign keywords are supported.
    """

    def __init__(self,
        *,
        resource_name : typing.Text = ...,
        keyword_plan_campaign : typing.Optional[typing.Text] = ...,
        id : typing.Optional[builtins.int] = ...,
        text : typing.Optional[typing.Text] = ...,
        match_type : google.ads.googleads.v7.enums.keyword_match_type_pb2.KeywordMatchTypeEnum.KeywordMatchType.ValueType = ...,
        negative : typing.Optional[builtins.bool] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_id",b"_id","_keyword_plan_campaign",b"_keyword_plan_campaign","_negative",b"_negative","_text",b"_text","id",b"id","keyword_plan_campaign",b"keyword_plan_campaign","negative",b"negative","text",b"text"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_id",b"_id","_keyword_plan_campaign",b"_keyword_plan_campaign","_negative",b"_negative","_text",b"_text","id",b"id","keyword_plan_campaign",b"keyword_plan_campaign","match_type",b"match_type","negative",b"negative","resource_name",b"resource_name","text",b"text"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_id",b"_id"]) -> typing.Optional[typing_extensions.Literal["id"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_keyword_plan_campaign",b"_keyword_plan_campaign"]) -> typing.Optional[typing_extensions.Literal["keyword_plan_campaign"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_negative",b"_negative"]) -> typing.Optional[typing_extensions.Literal["negative"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_text",b"_text"]) -> typing.Optional[typing_extensions.Literal["text"]]: ...
global___KeywordPlanCampaignKeyword = KeywordPlanCampaignKeyword
