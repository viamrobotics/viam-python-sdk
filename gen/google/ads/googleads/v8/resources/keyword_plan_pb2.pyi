"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.ads.googleads.v8.common.dates_pb2
import google.ads.googleads.v8.enums.keyword_plan_forecast_interval_pb2
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class KeywordPlan(google.protobuf.message.Message):
    """Proto file describing the keyword plan resource.

    A Keyword Planner plan.
    Max number of saved keyword plans: 10000.
    It's possible to remove plans if limit is reached.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESOURCE_NAME_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    FORECAST_PERIOD_FIELD_NUMBER: builtins.int
    resource_name: typing.Text = ...
    """Immutable. The resource name of the Keyword Planner plan.
    KeywordPlan resource names have the form:

    `customers/{customer_id}/keywordPlans/{kp_plan_id}`
    """

    id: builtins.int = ...
    """Output only. The ID of the keyword plan."""

    name: typing.Text = ...
    """The name of the keyword plan.

    This field is required and should not be empty when creating new keyword
    plans.
    """

    @property
    def forecast_period(self) -> global___KeywordPlanForecastPeriod:
        """The date period used for forecasting the plan."""
        pass
    def __init__(self,
        *,
        resource_name : typing.Text = ...,
        id : typing.Optional[builtins.int] = ...,
        name : typing.Optional[typing.Text] = ...,
        forecast_period : typing.Optional[global___KeywordPlanForecastPeriod] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_id",b"_id","_name",b"_name","forecast_period",b"forecast_period","id",b"id","name",b"name"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_id",b"_id","_name",b"_name","forecast_period",b"forecast_period","id",b"id","name",b"name","resource_name",b"resource_name"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_id",b"_id"]) -> typing.Optional[typing_extensions.Literal["id"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_name",b"_name"]) -> typing.Optional[typing_extensions.Literal["name"]]: ...
global___KeywordPlan = KeywordPlan

class KeywordPlanForecastPeriod(google.protobuf.message.Message):
    """The forecasting period associated with the keyword plan."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DATE_INTERVAL_FIELD_NUMBER: builtins.int
    DATE_RANGE_FIELD_NUMBER: builtins.int
    date_interval: google.ads.googleads.v8.enums.keyword_plan_forecast_interval_pb2.KeywordPlanForecastIntervalEnum.KeywordPlanForecastInterval.ValueType = ...
    """A future date range relative to the current date used for forecasting."""

    @property
    def date_range(self) -> google.ads.googleads.v8.common.dates_pb2.DateRange:
        """The custom date range used for forecasting.
        The start and end dates must be in the future. Otherwise, an error will
        be returned when the forecasting action is performed.
        The start and end dates are inclusive.
        """
        pass
    def __init__(self,
        *,
        date_interval : google.ads.googleads.v8.enums.keyword_plan_forecast_interval_pb2.KeywordPlanForecastIntervalEnum.KeywordPlanForecastInterval.ValueType = ...,
        date_range : typing.Optional[google.ads.googleads.v8.common.dates_pb2.DateRange] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["date_interval",b"date_interval","date_range",b"date_range","interval",b"interval"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["date_interval",b"date_interval","date_range",b"date_range","interval",b"interval"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["interval",b"interval"]) -> typing.Optional[typing_extensions.Literal["date_interval","date_range"]]: ...
global___KeywordPlanForecastPeriod = KeywordPlanForecastPeriod
