"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Index(google.protobuf.message.Message):
    """Datastore composite index definition."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _AncestorMode:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _AncestorModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_AncestorMode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        ANCESTOR_MODE_UNSPECIFIED: Index.AncestorMode.ValueType = ...  # 0
        """The ancestor mode is unspecified."""

        NONE: Index.AncestorMode.ValueType = ...  # 1
        """Do not include the entity's ancestors in the index."""

        ALL_ANCESTORS: Index.AncestorMode.ValueType = ...  # 2
        """Include all the entity's ancestors in the index."""

    class AncestorMode(_AncestorMode, metaclass=_AncestorModeEnumTypeWrapper):
        """For an ordered index, specifies whether each of the entity's ancestors
        will be included.
        """
        pass

    ANCESTOR_MODE_UNSPECIFIED: Index.AncestorMode.ValueType = ...  # 0
    """The ancestor mode is unspecified."""

    NONE: Index.AncestorMode.ValueType = ...  # 1
    """Do not include the entity's ancestors in the index."""

    ALL_ANCESTORS: Index.AncestorMode.ValueType = ...  # 2
    """Include all the entity's ancestors in the index."""


    class _Direction:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _DirectionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Direction.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        DIRECTION_UNSPECIFIED: Index.Direction.ValueType = ...  # 0
        """The direction is unspecified."""

        ASCENDING: Index.Direction.ValueType = ...  # 1
        """The property's values are indexed so as to support sequencing in
        ascending order and also query by <, >, <=, >=, and =.
        """

        DESCENDING: Index.Direction.ValueType = ...  # 2
        """The property's values are indexed so as to support sequencing in
        descending order and also query by <, >, <=, >=, and =.
        """

    class Direction(_Direction, metaclass=_DirectionEnumTypeWrapper):
        """The direction determines how a property is indexed."""
        pass

    DIRECTION_UNSPECIFIED: Index.Direction.ValueType = ...  # 0
    """The direction is unspecified."""

    ASCENDING: Index.Direction.ValueType = ...  # 1
    """The property's values are indexed so as to support sequencing in
    ascending order and also query by <, >, <=, >=, and =.
    """

    DESCENDING: Index.Direction.ValueType = ...  # 2
    """The property's values are indexed so as to support sequencing in
    descending order and also query by <, >, <=, >=, and =.
    """


    class _State:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_State.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        STATE_UNSPECIFIED: Index.State.ValueType = ...  # 0
        """The state is unspecified."""

        CREATING: Index.State.ValueType = ...  # 1
        """The index is being created, and cannot be used by queries.
        There is an active long-running operation for the index.
        The index is updated when writing an entity.
        Some index data may exist.
        """

        READY: Index.State.ValueType = ...  # 2
        """The index is ready to be used.
        The index is updated when writing an entity.
        The index is fully populated from all stored entities it applies to.
        """

        DELETING: Index.State.ValueType = ...  # 3
        """The index is being deleted, and cannot be used by queries.
        There is an active long-running operation for the index.
        The index is not updated when writing an entity.
        Some index data may exist.
        """

        ERROR: Index.State.ValueType = ...  # 4
        """The index was being created or deleted, but something went wrong.
        The index cannot by used by queries.
        There is no active long-running operation for the index,
        and the most recently finished long-running operation failed.
        The index is not updated when writing an entity.
        Some index data may exist.
        """

    class State(_State, metaclass=_StateEnumTypeWrapper):
        """The possible set of states of an index."""
        pass

    STATE_UNSPECIFIED: Index.State.ValueType = ...  # 0
    """The state is unspecified."""

    CREATING: Index.State.ValueType = ...  # 1
    """The index is being created, and cannot be used by queries.
    There is an active long-running operation for the index.
    The index is updated when writing an entity.
    Some index data may exist.
    """

    READY: Index.State.ValueType = ...  # 2
    """The index is ready to be used.
    The index is updated when writing an entity.
    The index is fully populated from all stored entities it applies to.
    """

    DELETING: Index.State.ValueType = ...  # 3
    """The index is being deleted, and cannot be used by queries.
    There is an active long-running operation for the index.
    The index is not updated when writing an entity.
    Some index data may exist.
    """

    ERROR: Index.State.ValueType = ...  # 4
    """The index was being created or deleted, but something went wrong.
    The index cannot by used by queries.
    There is no active long-running operation for the index,
    and the most recently finished long-running operation failed.
    The index is not updated when writing an entity.
    Some index data may exist.
    """


    class IndexedProperty(google.protobuf.message.Message):
        """A property of an index."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        NAME_FIELD_NUMBER: builtins.int
        DIRECTION_FIELD_NUMBER: builtins.int
        name: typing.Text = ...
        """Required. The property name to index."""

        direction: global___Index.Direction.ValueType = ...
        """Required. The indexed property's direction.  Must not be DIRECTION_UNSPECIFIED."""

        def __init__(self,
            *,
            name : typing.Text = ...,
            direction : global___Index.Direction.ValueType = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["direction",b"direction","name",b"name"]) -> None: ...

    PROJECT_ID_FIELD_NUMBER: builtins.int
    INDEX_ID_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    ANCESTOR_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Output only. Project ID."""

    index_id: typing.Text = ...
    """Output only. The resource ID of the index."""

    kind: typing.Text = ...
    """Required. The entity kind to which this index applies."""

    ancestor: global___Index.AncestorMode.ValueType = ...
    """Required. The index's ancestor mode.  Must not be ANCESTOR_MODE_UNSPECIFIED."""

    @property
    def properties(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Index.IndexedProperty]:
        """Required. An ordered sequence of property names and their index attributes."""
        pass
    state: global___Index.State.ValueType = ...
    """Output only. The state of the index."""

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        index_id : typing.Text = ...,
        kind : typing.Text = ...,
        ancestor : global___Index.AncestorMode.ValueType = ...,
        properties : typing.Optional[typing.Iterable[global___Index.IndexedProperty]] = ...,
        state : global___Index.State.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ancestor",b"ancestor","index_id",b"index_id","kind",b"kind","project_id",b"project_id","properties",b"properties","state",b"state"]) -> None: ...
global___Index = Index
