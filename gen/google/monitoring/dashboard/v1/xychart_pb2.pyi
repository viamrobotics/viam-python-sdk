"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.monitoring.dashboard.v1.metrics_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class XyChart(google.protobuf.message.Message):
    """A chart that displays data on a 2D (X and Y axes) plane."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class DataSet(google.protobuf.message.Message):
        """Groups a time series query definition with charting options."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _PlotType:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _PlotTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_PlotType.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            PLOT_TYPE_UNSPECIFIED: XyChart.DataSet.PlotType.ValueType = ...  # 0
            """Plot type is unspecified. The view will default to `LINE`."""

            LINE: XyChart.DataSet.PlotType.ValueType = ...  # 1
            """The data is plotted as a set of lines (one line per series)."""

            STACKED_AREA: XyChart.DataSet.PlotType.ValueType = ...  # 2
            """The data is plotted as a set of filled areas (one area per series),
            with the areas stacked vertically (the base of each area is the top of
            its predecessor, and the base of the first area is the X axis). Since
            the areas do not overlap, each is filled with a different opaque color.
            """

            STACKED_BAR: XyChart.DataSet.PlotType.ValueType = ...  # 3
            """The data is plotted as a set of rectangular boxes (one box per series),
            with the boxes stacked vertically (the base of each box is the top of
            its predecessor, and the base of the first box is the X axis). Since
            the boxes do not overlap, each is filled with a different opaque color.
            """

            HEATMAP: XyChart.DataSet.PlotType.ValueType = ...  # 4
            """The data is plotted as a heatmap. The series being plotted must have a
            `DISTRIBUTION` value type. The value of each bucket in the distribution
            is displayed as a color. This type is not currently available in the
            Stackdriver Monitoring application.
            """

        class PlotType(_PlotType, metaclass=_PlotTypeEnumTypeWrapper):
            """The types of plotting strategies for data sets."""
            pass

        PLOT_TYPE_UNSPECIFIED: XyChart.DataSet.PlotType.ValueType = ...  # 0
        """Plot type is unspecified. The view will default to `LINE`."""

        LINE: XyChart.DataSet.PlotType.ValueType = ...  # 1
        """The data is plotted as a set of lines (one line per series)."""

        STACKED_AREA: XyChart.DataSet.PlotType.ValueType = ...  # 2
        """The data is plotted as a set of filled areas (one area per series),
        with the areas stacked vertically (the base of each area is the top of
        its predecessor, and the base of the first area is the X axis). Since
        the areas do not overlap, each is filled with a different opaque color.
        """

        STACKED_BAR: XyChart.DataSet.PlotType.ValueType = ...  # 3
        """The data is plotted as a set of rectangular boxes (one box per series),
        with the boxes stacked vertically (the base of each box is the top of
        its predecessor, and the base of the first box is the X axis). Since
        the boxes do not overlap, each is filled with a different opaque color.
        """

        HEATMAP: XyChart.DataSet.PlotType.ValueType = ...  # 4
        """The data is plotted as a heatmap. The series being plotted must have a
        `DISTRIBUTION` value type. The value of each bucket in the distribution
        is displayed as a color. This type is not currently available in the
        Stackdriver Monitoring application.
        """


        TIME_SERIES_QUERY_FIELD_NUMBER: builtins.int
        PLOT_TYPE_FIELD_NUMBER: builtins.int
        LEGEND_TEMPLATE_FIELD_NUMBER: builtins.int
        MIN_ALIGNMENT_PERIOD_FIELD_NUMBER: builtins.int
        @property
        def time_series_query(self) -> google.monitoring.dashboard.v1.metrics_pb2.TimeSeriesQuery:
            """Required. Fields for querying time series data from the
            Stackdriver metrics API.
            """
            pass
        plot_type: global___XyChart.DataSet.PlotType.ValueType = ...
        """How this data should be plotted on the chart."""

        legend_template: typing.Text = ...
        """A template string for naming `TimeSeries` in the resulting data set.
        This should be a string with interpolations of the form `${label_name}`,
        which will resolve to the label's value.
        """

        @property
        def min_alignment_period(self) -> google.protobuf.duration_pb2.Duration:
            """Optional. The lower bound on data point frequency for this data set, implemented by
            specifying the minimum alignment period to use in a time series query
            For example, if the data is published once every 10 minutes, the
            `min_alignment_period` should be at least 10 minutes. It would not
            make sense to fetch and align data at one minute intervals.
            """
            pass
        def __init__(self,
            *,
            time_series_query : typing.Optional[google.monitoring.dashboard.v1.metrics_pb2.TimeSeriesQuery] = ...,
            plot_type : global___XyChart.DataSet.PlotType.ValueType = ...,
            legend_template : typing.Text = ...,
            min_alignment_period : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["min_alignment_period",b"min_alignment_period","time_series_query",b"time_series_query"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["legend_template",b"legend_template","min_alignment_period",b"min_alignment_period","plot_type",b"plot_type","time_series_query",b"time_series_query"]) -> None: ...

    class Axis(google.protobuf.message.Message):
        """A chart axis."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _Scale:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _ScaleEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Scale.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            SCALE_UNSPECIFIED: XyChart.Axis.Scale.ValueType = ...  # 0
            """Scale is unspecified. The view will default to `LINEAR`."""

            LINEAR: XyChart.Axis.Scale.ValueType = ...  # 1
            """Linear scale."""

            LOG10: XyChart.Axis.Scale.ValueType = ...  # 2
            """Logarithmic scale (base 10)."""

        class Scale(_Scale, metaclass=_ScaleEnumTypeWrapper):
            """Types of scales used in axes."""
            pass

        SCALE_UNSPECIFIED: XyChart.Axis.Scale.ValueType = ...  # 0
        """Scale is unspecified. The view will default to `LINEAR`."""

        LINEAR: XyChart.Axis.Scale.ValueType = ...  # 1
        """Linear scale."""

        LOG10: XyChart.Axis.Scale.ValueType = ...  # 2
        """Logarithmic scale (base 10)."""


        LABEL_FIELD_NUMBER: builtins.int
        SCALE_FIELD_NUMBER: builtins.int
        label: typing.Text = ...
        """The label of the axis."""

        scale: global___XyChart.Axis.Scale.ValueType = ...
        """The axis scale. By default, a linear scale is used."""

        def __init__(self,
            *,
            label : typing.Text = ...,
            scale : global___XyChart.Axis.Scale.ValueType = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["label",b"label","scale",b"scale"]) -> None: ...

    DATA_SETS_FIELD_NUMBER: builtins.int
    TIMESHIFT_DURATION_FIELD_NUMBER: builtins.int
    THRESHOLDS_FIELD_NUMBER: builtins.int
    X_AXIS_FIELD_NUMBER: builtins.int
    Y_AXIS_FIELD_NUMBER: builtins.int
    CHART_OPTIONS_FIELD_NUMBER: builtins.int
    @property
    def data_sets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___XyChart.DataSet]:
        """Required. The data displayed in this chart."""
        pass
    @property
    def timeshift_duration(self) -> google.protobuf.duration_pb2.Duration:
        """The duration used to display a comparison chart. A comparison chart
        simultaneously shows values from two similar-length time periods
        (e.g., week-over-week metrics).
        The duration must be positive, and it can only be applied to charts with
        data sets of LINE plot type.
        """
        pass
    @property
    def thresholds(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.monitoring.dashboard.v1.metrics_pb2.Threshold]:
        """Threshold lines drawn horizontally across the chart."""
        pass
    @property
    def x_axis(self) -> global___XyChart.Axis:
        """The properties applied to the X axis."""
        pass
    @property
    def y_axis(self) -> global___XyChart.Axis:
        """The properties applied to the Y axis."""
        pass
    @property
    def chart_options(self) -> global___ChartOptions:
        """Display options for the chart."""
        pass
    def __init__(self,
        *,
        data_sets : typing.Optional[typing.Iterable[global___XyChart.DataSet]] = ...,
        timeshift_duration : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        thresholds : typing.Optional[typing.Iterable[google.monitoring.dashboard.v1.metrics_pb2.Threshold]] = ...,
        x_axis : typing.Optional[global___XyChart.Axis] = ...,
        y_axis : typing.Optional[global___XyChart.Axis] = ...,
        chart_options : typing.Optional[global___ChartOptions] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["chart_options",b"chart_options","timeshift_duration",b"timeshift_duration","x_axis",b"x_axis","y_axis",b"y_axis"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["chart_options",b"chart_options","data_sets",b"data_sets","thresholds",b"thresholds","timeshift_duration",b"timeshift_duration","x_axis",b"x_axis","y_axis",b"y_axis"]) -> None: ...
global___XyChart = XyChart

class ChartOptions(google.protobuf.message.Message):
    """Options to control visual rendering of a chart."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Mode:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Mode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        MODE_UNSPECIFIED: ChartOptions.Mode.ValueType = ...  # 0
        """Mode is unspecified. The view will default to `COLOR`."""

        COLOR: ChartOptions.Mode.ValueType = ...  # 1
        """The chart distinguishes data series using different color. Line
        colors may get reused when there are many lines in the chart.
        """

        X_RAY: ChartOptions.Mode.ValueType = ...  # 2
        """The chart uses the Stackdriver x-ray mode, in which each
        data set is plotted using the same semi-transparent color.
        """

        STATS: ChartOptions.Mode.ValueType = ...  # 3
        """The chart displays statistics such as average, median, 95th percentile,
        and more.
        """

    class Mode(_Mode, metaclass=_ModeEnumTypeWrapper):
        """Chart mode options."""
        pass

    MODE_UNSPECIFIED: ChartOptions.Mode.ValueType = ...  # 0
    """Mode is unspecified. The view will default to `COLOR`."""

    COLOR: ChartOptions.Mode.ValueType = ...  # 1
    """The chart distinguishes data series using different color. Line
    colors may get reused when there are many lines in the chart.
    """

    X_RAY: ChartOptions.Mode.ValueType = ...  # 2
    """The chart uses the Stackdriver x-ray mode, in which each
    data set is plotted using the same semi-transparent color.
    """

    STATS: ChartOptions.Mode.ValueType = ...  # 3
    """The chart displays statistics such as average, median, 95th percentile,
    and more.
    """


    MODE_FIELD_NUMBER: builtins.int
    mode: global___ChartOptions.Mode.ValueType = ...
    """The chart mode."""

    def __init__(self,
        *,
        mode : global___ChartOptions.Mode.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["mode",b"mode"]) -> None: ...
global___ChartOptions = ChartOptions
