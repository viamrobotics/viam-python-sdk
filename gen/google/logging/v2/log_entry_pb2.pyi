"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.api.monitored_resource_pb2
import google.logging.type.http_request_pb2
import google.logging.type.log_severity_pb2
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.struct_pb2
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class LogEntry(google.protobuf.message.Message):
    """An individual entry in a log."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    LOG_NAME_FIELD_NUMBER: builtins.int
    RESOURCE_FIELD_NUMBER: builtins.int
    PROTO_PAYLOAD_FIELD_NUMBER: builtins.int
    TEXT_PAYLOAD_FIELD_NUMBER: builtins.int
    JSON_PAYLOAD_FIELD_NUMBER: builtins.int
    TIMESTAMP_FIELD_NUMBER: builtins.int
    RECEIVE_TIMESTAMP_FIELD_NUMBER: builtins.int
    SEVERITY_FIELD_NUMBER: builtins.int
    INSERT_ID_FIELD_NUMBER: builtins.int
    HTTP_REQUEST_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    OPERATION_FIELD_NUMBER: builtins.int
    TRACE_FIELD_NUMBER: builtins.int
    SPAN_ID_FIELD_NUMBER: builtins.int
    TRACE_SAMPLED_FIELD_NUMBER: builtins.int
    SOURCE_LOCATION_FIELD_NUMBER: builtins.int
    log_name: typing.Text = ...
    """Required. The resource name of the log to which this log entry belongs:

        "projects/[PROJECT_ID]/logs/[LOG_ID]"
        "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
        "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
        "folders/[FOLDER_ID]/logs/[LOG_ID]"

    A project number may be used in place of PROJECT_ID. The project number is
    translated to its corresponding PROJECT_ID internally and the `log_name`
    field will contain PROJECT_ID in queries and exports.

    `[LOG_ID]` must be URL-encoded within `log_name`. Example:
    `"organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity"`.
    `[LOG_ID]` must be less than 512 characters long and can only include the
    following characters: upper and lower case alphanumeric characters,
    forward-slash, underscore, hyphen, and period.

    For backward compatibility, if `log_name` begins with a forward-slash, such
    as `/projects/...`, then the log entry is ingested as usual but the
    forward-slash is removed. Listing the log entry will not show the leading
    slash and filtering for a log name with a leading slash will never return
    any results.
    """

    @property
    def resource(self) -> google.api.monitored_resource_pb2.MonitoredResource:
        """Required. The monitored resource that produced this log entry.

        Example: a log entry that reports a database error would be associated with
        the monitored resource designating the particular database that reported
        the error.
        """
        pass
    @property
    def proto_payload(self) -> google.protobuf.any_pb2.Any:
        """The log entry payload, represented as a protocol buffer. Some Google
        Cloud Platform services use this field for their log entry payloads.

        The following protocol buffer types are supported; user-defined types
        are not supported:

          "type.googleapis.com/google.cloud.audit.AuditLog"
          "type.googleapis.com/google.appengine.logging.v1.RequestLog"
        """
        pass
    text_payload: typing.Text = ...
    """The log entry payload, represented as a Unicode string (UTF-8)."""

    @property
    def json_payload(self) -> google.protobuf.struct_pb2.Struct:
        """The log entry payload, represented as a structure that is
        expressed as a JSON object.
        """
        pass
    @property
    def timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Optional. The time the event described by the log entry occurred. This time is used
        to compute the log entry's age and to enforce the logs retention period.
        If this field is omitted in a new log entry, then Logging assigns it the
        current time. Timestamps have nanosecond accuracy, but trailing zeros in
        the fractional seconds might be omitted when the timestamp is displayed.

        Incoming log entries must have timestamps that don't exceed the
        [logs retention
        period](https://cloud.google.com/logging/quotas#logs_retention_periods) in
        the past, and that don't exceed 24 hours in the future. Log entries outside
        those time boundaries aren't ingested by Logging.
        """
        pass
    @property
    def receive_timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time the log entry was received by Logging."""
        pass
    severity: google.logging.type.log_severity_pb2.LogSeverity.ValueType = ...
    """Optional. The severity of the log entry. The default value is `LogSeverity.DEFAULT`."""

    insert_id: typing.Text = ...
    """Optional. A unique identifier for the log entry. If you provide a value, then
    Logging considers other log entries in the same project, with the same
    `timestamp`, and with the same `insert_id` to be duplicates which are
    removed in a single query result. However, there are no guarantees of
    de-duplication in the export of logs.

    If the `insert_id` is omitted when writing a log entry, the Logging API
     assigns its own unique identifier in this field.

    In queries, the `insert_id` is also used to order log entries that have
    the same `log_name` and `timestamp` values.
    """

    @property
    def http_request(self) -> google.logging.type.http_request_pb2.HttpRequest:
        """Optional. Information about the HTTP request associated with this log entry, if
        applicable.
        """
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Optional. A set of user-defined (key, value) data that provides additional
        information about the log entry.
        """
        pass
    @property
    def operation(self) -> global___LogEntryOperation:
        """Optional. Information about an operation associated with the log entry, if
        applicable.
        """
        pass
    trace: typing.Text = ...
    """Optional. Resource name of the trace associated with the log entry, if any. If it
    contains a relative resource name, the name is assumed to be relative to
    `//tracing.googleapis.com`. Example:
    `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
    """

    span_id: typing.Text = ...
    """Optional. The span ID within the trace associated with the log entry.

    For Trace spans, this is the same format that the Trace API v2 uses: a
    16-character hexadecimal encoding of an 8-byte array, such as
    `000000000000004a`.
    """

    trace_sampled: builtins.bool = ...
    """Optional. The sampling decision of the trace associated with the log entry.

    True means that the trace resource name in the `trace` field was sampled
    for storage in a trace backend. False means that the trace was not sampled
    for storage when this log entry was written, or the sampling decision was
    unknown at the time. A non-sampled `trace` value is still useful as a
    request correlation identifier. The default is False.
    """

    @property
    def source_location(self) -> global___LogEntrySourceLocation:
        """Optional. Source code location information associated with the log entry, if any."""
        pass
    def __init__(self,
        *,
        log_name : typing.Text = ...,
        resource : typing.Optional[google.api.monitored_resource_pb2.MonitoredResource] = ...,
        proto_payload : typing.Optional[google.protobuf.any_pb2.Any] = ...,
        text_payload : typing.Text = ...,
        json_payload : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        timestamp : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        receive_timestamp : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        severity : google.logging.type.log_severity_pb2.LogSeverity.ValueType = ...,
        insert_id : typing.Text = ...,
        http_request : typing.Optional[google.logging.type.http_request_pb2.HttpRequest] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        operation : typing.Optional[global___LogEntryOperation] = ...,
        trace : typing.Text = ...,
        span_id : typing.Text = ...,
        trace_sampled : builtins.bool = ...,
        source_location : typing.Optional[global___LogEntrySourceLocation] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["http_request",b"http_request","json_payload",b"json_payload","operation",b"operation","payload",b"payload","proto_payload",b"proto_payload","receive_timestamp",b"receive_timestamp","resource",b"resource","source_location",b"source_location","text_payload",b"text_payload","timestamp",b"timestamp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["http_request",b"http_request","insert_id",b"insert_id","json_payload",b"json_payload","labels",b"labels","log_name",b"log_name","operation",b"operation","payload",b"payload","proto_payload",b"proto_payload","receive_timestamp",b"receive_timestamp","resource",b"resource","severity",b"severity","source_location",b"source_location","span_id",b"span_id","text_payload",b"text_payload","timestamp",b"timestamp","trace",b"trace","trace_sampled",b"trace_sampled"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["payload",b"payload"]) -> typing.Optional[typing_extensions.Literal["proto_payload","text_payload","json_payload"]]: ...
global___LogEntry = LogEntry

class LogEntryOperation(google.protobuf.message.Message):
    """Additional information about a potentially long-running operation with which
    a log entry is associated.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ID_FIELD_NUMBER: builtins.int
    PRODUCER_FIELD_NUMBER: builtins.int
    FIRST_FIELD_NUMBER: builtins.int
    LAST_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """Optional. An arbitrary operation identifier. Log entries with the same
    identifier are assumed to be part of the same operation.
    """

    producer: typing.Text = ...
    """Optional. An arbitrary producer identifier. The combination of `id` and
    `producer` must be globally unique. Examples for `producer`:
    `"MyDivision.MyBigCompany.com"`, `"github.com/MyProject/MyApplication"`.
    """

    first: builtins.bool = ...
    """Optional. Set this to True if this is the first log entry in the operation."""

    last: builtins.bool = ...
    """Optional. Set this to True if this is the last log entry in the operation."""

    def __init__(self,
        *,
        id : typing.Text = ...,
        producer : typing.Text = ...,
        first : builtins.bool = ...,
        last : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["first",b"first","id",b"id","last",b"last","producer",b"producer"]) -> None: ...
global___LogEntryOperation = LogEntryOperation

class LogEntrySourceLocation(google.protobuf.message.Message):
    """Additional information about the source code location that produced the log
    entry.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FILE_FIELD_NUMBER: builtins.int
    LINE_FIELD_NUMBER: builtins.int
    FUNCTION_FIELD_NUMBER: builtins.int
    file: typing.Text = ...
    """Optional. Source file name. Depending on the runtime environment, this
    might be a simple name or a fully-qualified name.
    """

    line: builtins.int = ...
    """Optional. Line within the source file. 1-based; 0 indicates no line number
    available.
    """

    function: typing.Text = ...
    """Optional. Human-readable name of the function or method being invoked, with
    optional context such as the class or package name. This information may be
    used in contexts such as the logs viewer, where a file and line number are
    less meaningful. The format can vary by language. For example:
    `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function`
    (Python).
    """

    def __init__(self,
        *,
        file : typing.Text = ...,
        line : builtins.int = ...,
        function : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["file",b"file","function",b"function","line",b"line"]) -> None: ...
global___LogEntrySourceLocation = LogEntrySourceLocation
