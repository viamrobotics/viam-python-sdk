"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _ManagementStatus:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _ManagementStatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ManagementStatus.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    MANAGEMENT_STATUS_UNSPECIFIED: ManagementStatus.ValueType = ...  # 0
    OK: ManagementStatus.ValueType = ...  # 1
    """Certificate was successfully obtained and inserted into the serving
    system.
    """

    PENDING: ManagementStatus.ValueType = ...  # 2
    """Certificate is under active attempts to acquire or renew."""

    FAILED_RETRYING_NOT_VISIBLE: ManagementStatus.ValueType = ...  # 4
    """Most recent renewal failed due to an invalid DNS setup and will be
    retried. Renewal attempts will continue to fail until the certificate
    domain's DNS configuration is fixed. The last successfully provisioned
    certificate may still be serving.
    """

    FAILED_PERMANENT: ManagementStatus.ValueType = ...  # 6
    """All renewal attempts have been exhausted, likely due to an invalid DNS
    setup.
    """

    FAILED_RETRYING_CAA_FORBIDDEN: ManagementStatus.ValueType = ...  # 7
    """Most recent renewal failed due to an explicit CAA record that does not
    include one of the in-use CAs (Google CA and Let's Encrypt). Renewals will
    continue to fail until the CAA is reconfigured. The last successfully
    provisioned certificate may still be serving.
    """

    FAILED_RETRYING_CAA_CHECKING: ManagementStatus.ValueType = ...  # 8
    """Most recent renewal failed due to a CAA retrieval failure. This means that
    the domain's DNS provider does not properly handle CAA records, failing
    requests for CAA records when no CAA records are defined. Renewals will
    continue to fail until the DNS provider is changed or a CAA record is
    added for the given domain. The last successfully provisioned certificate
    may still be serving.
    """

class ManagementStatus(_ManagementStatus, metaclass=_ManagementStatusEnumTypeWrapper):
    """State of certificate management. Refers to the most recent certificate
    acquisition or renewal attempt.
    """
    pass

MANAGEMENT_STATUS_UNSPECIFIED: ManagementStatus.ValueType = ...  # 0
OK: ManagementStatus.ValueType = ...  # 1
"""Certificate was successfully obtained and inserted into the serving
system.
"""

PENDING: ManagementStatus.ValueType = ...  # 2
"""Certificate is under active attempts to acquire or renew."""

FAILED_RETRYING_NOT_VISIBLE: ManagementStatus.ValueType = ...  # 4
"""Most recent renewal failed due to an invalid DNS setup and will be
retried. Renewal attempts will continue to fail until the certificate
domain's DNS configuration is fixed. The last successfully provisioned
certificate may still be serving.
"""

FAILED_PERMANENT: ManagementStatus.ValueType = ...  # 6
"""All renewal attempts have been exhausted, likely due to an invalid DNS
setup.
"""

FAILED_RETRYING_CAA_FORBIDDEN: ManagementStatus.ValueType = ...  # 7
"""Most recent renewal failed due to an explicit CAA record that does not
include one of the in-use CAs (Google CA and Let's Encrypt). Renewals will
continue to fail until the CAA is reconfigured. The last successfully
provisioned certificate may still be serving.
"""

FAILED_RETRYING_CAA_CHECKING: ManagementStatus.ValueType = ...  # 8
"""Most recent renewal failed due to a CAA retrieval failure. This means that
the domain's DNS provider does not properly handle CAA records, failing
requests for CAA records when no CAA records are defined. Renewals will
continue to fail until the DNS provider is changed or a CAA record is
added for the given domain. The last successfully provisioned certificate
may still be serving.
"""

global___ManagementStatus = ManagementStatus


class AuthorizedCertificate(google.protobuf.message.Message):
    """An SSL certificate that a user has been authorized to administer. A user
    is authorized to administer any certificate that applies to one of their
    authorized domains.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DOMAIN_NAMES_FIELD_NUMBER: builtins.int
    EXPIRE_TIME_FIELD_NUMBER: builtins.int
    CERTIFICATE_RAW_DATA_FIELD_NUMBER: builtins.int
    MANAGED_CERTIFICATE_FIELD_NUMBER: builtins.int
    VISIBLE_DOMAIN_MAPPINGS_FIELD_NUMBER: builtins.int
    DOMAIN_MAPPINGS_COUNT_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Full path to the `AuthorizedCertificate` resource in the API. Example:
    `apps/myapp/authorizedCertificates/12345`.

    @OutputOnly
    """

    id: typing.Text = ...
    """Relative name of the certificate. This is a unique value autogenerated
    on `AuthorizedCertificate` resource creation. Example: `12345`.

    @OutputOnly
    """

    display_name: typing.Text = ...
    """The user-specified display name of the certificate. This is not
    guaranteed to be unique. Example: `My Certificate`.
    """

    @property
    def domain_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Topmost applicable domains of this certificate. This certificate
        applies to these domains and their subdomains. Example: `example.com`.

        @OutputOnly
        """
        pass
    @property
    def expire_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time when this certificate expires. To update the renewal time on this
        certificate, upload an SSL certificate with a different expiration time
        using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().

        @OutputOnly
        """
        pass
    @property
    def certificate_raw_data(self) -> global___CertificateRawData:
        """The SSL certificate serving the `AuthorizedCertificate` resource. This
        must be obtained independently from a certificate authority.
        """
        pass
    @property
    def managed_certificate(self) -> global___ManagedCertificate:
        """Only applicable if this certificate is managed by App Engine. Managed
        certificates are tied to the lifecycle of a `DomainMapping` and cannot be
        updated or deleted via the `AuthorizedCertificates` API. If this
        certificate is manually administered by the user, this field will be empty.

        @OutputOnly
        """
        pass
    @property
    def visible_domain_mappings(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The full paths to user visible Domain Mapping resources that have this
        certificate mapped. Example: `apps/myapp/domainMappings/example.com`.

        This may not represent the full list of mapped domain mappings if the user
        does not have `VIEWER` permissions on all of the applications that have
        this certificate mapped. See `domain_mappings_count` for a complete count.

        Only returned by `GET` or `LIST` requests when specifically requested by
        the `view=FULL_CERTIFICATE` option.

        @OutputOnly
        """
        pass
    domain_mappings_count: builtins.int = ...
    """Aggregate count of the domain mappings with this certificate mapped. This
    count includes domain mappings on applications for which the user does not
    have `VIEWER` permissions.

    Only returned by `GET` or `LIST` requests when specifically requested by
    the `view=FULL_CERTIFICATE` option.

    @OutputOnly
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        id : typing.Text = ...,
        display_name : typing.Text = ...,
        domain_names : typing.Optional[typing.Iterable[typing.Text]] = ...,
        expire_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        certificate_raw_data : typing.Optional[global___CertificateRawData] = ...,
        managed_certificate : typing.Optional[global___ManagedCertificate] = ...,
        visible_domain_mappings : typing.Optional[typing.Iterable[typing.Text]] = ...,
        domain_mappings_count : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["certificate_raw_data",b"certificate_raw_data","expire_time",b"expire_time","managed_certificate",b"managed_certificate"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["certificate_raw_data",b"certificate_raw_data","display_name",b"display_name","domain_mappings_count",b"domain_mappings_count","domain_names",b"domain_names","expire_time",b"expire_time","id",b"id","managed_certificate",b"managed_certificate","name",b"name","visible_domain_mappings",b"visible_domain_mappings"]) -> None: ...
global___AuthorizedCertificate = AuthorizedCertificate

class CertificateRawData(google.protobuf.message.Message):
    """An SSL certificate obtained from a certificate authority."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PUBLIC_CERTIFICATE_FIELD_NUMBER: builtins.int
    PRIVATE_KEY_FIELD_NUMBER: builtins.int
    public_certificate: typing.Text = ...
    """PEM encoded x.509 public key certificate. This field is set once on
    certificate creation. Must include the header and footer. Example:
    <pre>
    -----BEGIN CERTIFICATE-----
    <certificate_value>
    -----END CERTIFICATE-----
    </pre>
    """

    private_key: typing.Text = ...
    """Unencrypted PEM encoded RSA private key. This field is set once on
    certificate creation and then encrypted. The key size must be 2048
    bits or fewer. Must include the header and footer. Example:
    <pre>
    -----BEGIN RSA PRIVATE KEY-----
    <unencrypted_key_value>
    -----END RSA PRIVATE KEY-----
    </pre>
    @InputOnly
    """

    def __init__(self,
        *,
        public_certificate : typing.Text = ...,
        private_key : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["private_key",b"private_key","public_certificate",b"public_certificate"]) -> None: ...
global___CertificateRawData = CertificateRawData

class ManagedCertificate(google.protobuf.message.Message):
    """A certificate managed by App Engine."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    LAST_RENEWAL_TIME_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    @property
    def last_renewal_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time at which the certificate was last renewed. The renewal process is
        fully managed. Certificate renewal will automatically occur before the
        certificate expires. Renewal errors can be tracked via `ManagementStatus`.

        @OutputOnly
        """
        pass
    status: global___ManagementStatus.ValueType = ...
    """Status of certificate management. Refers to the most recent certificate
    acquisition or renewal attempt.

    @OutputOnly
    """

    def __init__(self,
        *,
        last_renewal_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        status : global___ManagementStatus.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["last_renewal_time",b"last_renewal_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["last_renewal_time",b"last_renewal_time","status",b"status"]) -> None: ...
global___ManagedCertificate = ManagedCertificate
