# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/devtools/artifactregistry/v1/service.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.api.client_pb2
import google.devtools.artifactregistry.v1.artifact_pb2
import google.devtools.artifactregistry.v1.repository_pb2
import google.iam.v1.policy_pb2
import google.devtools.artifactregistry.v1.service_pb2


class ArtifactRegistryBase(abc.ABC):

    @abc.abstractmethod
    async def ListDockerImages(self, stream: 'grpclib.server.Stream[google.devtools.artifactregistry.v1.artifact_pb2.ListDockerImagesRequest, google.devtools.artifactregistry.v1.artifact_pb2.ListDockerImagesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListRepositories(self, stream: 'grpclib.server.Stream[google.devtools.artifactregistry.v1.repository_pb2.ListRepositoriesRequest, google.devtools.artifactregistry.v1.repository_pb2.ListRepositoriesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetRepository(self, stream: 'grpclib.server.Stream[google.devtools.artifactregistry.v1.repository_pb2.GetRepositoryRequest, google.devtools.artifactregistry.v1.repository_pb2.Repository]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.devtools.artifactregistry.v1.ArtifactRegistry/ListDockerImages': grpclib.const.Handler(
                self.ListDockerImages,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.devtools.artifactregistry.v1.artifact_pb2.ListDockerImagesRequest,
                google.devtools.artifactregistry.v1.artifact_pb2.ListDockerImagesResponse,
            ),
            '/google.devtools.artifactregistry.v1.ArtifactRegistry/ListRepositories': grpclib.const.Handler(
                self.ListRepositories,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.devtools.artifactregistry.v1.repository_pb2.ListRepositoriesRequest,
                google.devtools.artifactregistry.v1.repository_pb2.ListRepositoriesResponse,
            ),
            '/google.devtools.artifactregistry.v1.ArtifactRegistry/GetRepository': grpclib.const.Handler(
                self.GetRepository,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.devtools.artifactregistry.v1.repository_pb2.GetRepositoryRequest,
                google.devtools.artifactregistry.v1.repository_pb2.Repository,
            ),
        }


class ArtifactRegistryStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ListDockerImages = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.devtools.artifactregistry.v1.ArtifactRegistry/ListDockerImages',
            google.devtools.artifactregistry.v1.artifact_pb2.ListDockerImagesRequest,
            google.devtools.artifactregistry.v1.artifact_pb2.ListDockerImagesResponse,
        )
        self.ListRepositories = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.devtools.artifactregistry.v1.ArtifactRegistry/ListRepositories',
            google.devtools.artifactregistry.v1.repository_pb2.ListRepositoriesRequest,
            google.devtools.artifactregistry.v1.repository_pb2.ListRepositoriesResponse,
        )
        self.GetRepository = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.devtools.artifactregistry.v1.ArtifactRegistry/GetRepository',
            google.devtools.artifactregistry.v1.repository_pb2.GetRepositoryRequest,
            google.devtools.artifactregistry.v1.repository_pb2.Repository,
        )
