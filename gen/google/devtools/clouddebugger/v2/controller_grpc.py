# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/devtools/clouddebugger/v2/controller.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.api.client_pb2
import google.api.field_behavior_pb2
import google.devtools.clouddebugger.v2.data_pb2
import google.protobuf.empty_pb2
import google.devtools.clouddebugger.v2.controller_pb2


class Controller2Base(abc.ABC):

    @abc.abstractmethod
    async def RegisterDebuggee(self, stream: 'grpclib.server.Stream[google.devtools.clouddebugger.v2.controller_pb2.RegisterDebuggeeRequest, google.devtools.clouddebugger.v2.controller_pb2.RegisterDebuggeeResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListActiveBreakpoints(self, stream: 'grpclib.server.Stream[google.devtools.clouddebugger.v2.controller_pb2.ListActiveBreakpointsRequest, google.devtools.clouddebugger.v2.controller_pb2.ListActiveBreakpointsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateActiveBreakpoint(self, stream: 'grpclib.server.Stream[google.devtools.clouddebugger.v2.controller_pb2.UpdateActiveBreakpointRequest, google.devtools.clouddebugger.v2.controller_pb2.UpdateActiveBreakpointResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.devtools.clouddebugger.v2.Controller2/RegisterDebuggee': grpclib.const.Handler(
                self.RegisterDebuggee,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.devtools.clouddebugger.v2.controller_pb2.RegisterDebuggeeRequest,
                google.devtools.clouddebugger.v2.controller_pb2.RegisterDebuggeeResponse,
            ),
            '/google.devtools.clouddebugger.v2.Controller2/ListActiveBreakpoints': grpclib.const.Handler(
                self.ListActiveBreakpoints,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.devtools.clouddebugger.v2.controller_pb2.ListActiveBreakpointsRequest,
                google.devtools.clouddebugger.v2.controller_pb2.ListActiveBreakpointsResponse,
            ),
            '/google.devtools.clouddebugger.v2.Controller2/UpdateActiveBreakpoint': grpclib.const.Handler(
                self.UpdateActiveBreakpoint,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.devtools.clouddebugger.v2.controller_pb2.UpdateActiveBreakpointRequest,
                google.devtools.clouddebugger.v2.controller_pb2.UpdateActiveBreakpointResponse,
            ),
        }


class Controller2Stub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.RegisterDebuggee = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.devtools.clouddebugger.v2.Controller2/RegisterDebuggee',
            google.devtools.clouddebugger.v2.controller_pb2.RegisterDebuggeeRequest,
            google.devtools.clouddebugger.v2.controller_pb2.RegisterDebuggeeResponse,
        )
        self.ListActiveBreakpoints = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.devtools.clouddebugger.v2.Controller2/ListActiveBreakpoints',
            google.devtools.clouddebugger.v2.controller_pb2.ListActiveBreakpointsRequest,
            google.devtools.clouddebugger.v2.controller_pb2.ListActiveBreakpointsResponse,
        )
        self.UpdateActiveBreakpoint = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.devtools.clouddebugger.v2.Controller2/UpdateActiveBreakpoint',
            google.devtools.clouddebugger.v2.controller_pb2.UpdateActiveBreakpointRequest,
            google.devtools.clouddebugger.v2.controller_pb2.UpdateActiveBreakpointResponse,
        )
