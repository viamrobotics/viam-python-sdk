"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.devtools.source.v1.source_context_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class FormatMessage(google.protobuf.message.Message):
    """Represents a message with parameters."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FORMAT_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    format: typing.Text = ...
    """Format template for the message. The `format` uses placeholders `$0`,
    `$1`, etc. to reference parameters. `$$` can be used to denote the `$`
    character.

    Examples:

    *   `Failed to load '$0' which helps debug $1 the first time it
        is loaded.  Again, $0 is very important.`
    *   `Please pay $$10 to use $0 instead of $1.`
    """

    @property
    def parameters(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Optional parameters to be embedded into the message."""
        pass
    def __init__(self,
        *,
        format : typing.Text = ...,
        parameters : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["format",b"format","parameters",b"parameters"]) -> None: ...
global___FormatMessage = FormatMessage

class StatusMessage(google.protobuf.message.Message):
    """Represents a contextual status message.
    The message can indicate an error or informational status, and refer to
    specific parts of the containing object.
    For example, the `Breakpoint.status` field can indicate an error referring
    to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Reference:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ReferenceEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Reference.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        UNSPECIFIED: StatusMessage.Reference.ValueType = ...  # 0
        """Status doesn't refer to any particular input."""

        BREAKPOINT_SOURCE_LOCATION: StatusMessage.Reference.ValueType = ...  # 3
        """Status applies to the breakpoint and is related to its location."""

        BREAKPOINT_CONDITION: StatusMessage.Reference.ValueType = ...  # 4
        """Status applies to the breakpoint and is related to its condition."""

        BREAKPOINT_EXPRESSION: StatusMessage.Reference.ValueType = ...  # 7
        """Status applies to the breakpoint and is related to its expressions."""

        BREAKPOINT_AGE: StatusMessage.Reference.ValueType = ...  # 8
        """Status applies to the breakpoint and is related to its age."""

        VARIABLE_NAME: StatusMessage.Reference.ValueType = ...  # 5
        """Status applies to the entire variable."""

        VARIABLE_VALUE: StatusMessage.Reference.ValueType = ...  # 6
        """Status applies to variable value (variable name is valid)."""

    class Reference(_Reference, metaclass=_ReferenceEnumTypeWrapper):
        """Enumerates references to which the message applies."""
        pass

    UNSPECIFIED: StatusMessage.Reference.ValueType = ...  # 0
    """Status doesn't refer to any particular input."""

    BREAKPOINT_SOURCE_LOCATION: StatusMessage.Reference.ValueType = ...  # 3
    """Status applies to the breakpoint and is related to its location."""

    BREAKPOINT_CONDITION: StatusMessage.Reference.ValueType = ...  # 4
    """Status applies to the breakpoint and is related to its condition."""

    BREAKPOINT_EXPRESSION: StatusMessage.Reference.ValueType = ...  # 7
    """Status applies to the breakpoint and is related to its expressions."""

    BREAKPOINT_AGE: StatusMessage.Reference.ValueType = ...  # 8
    """Status applies to the breakpoint and is related to its age."""

    VARIABLE_NAME: StatusMessage.Reference.ValueType = ...  # 5
    """Status applies to the entire variable."""

    VARIABLE_VALUE: StatusMessage.Reference.ValueType = ...  # 6
    """Status applies to variable value (variable name is valid)."""


    IS_ERROR_FIELD_NUMBER: builtins.int
    REFERS_TO_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    is_error: builtins.bool = ...
    """Distinguishes errors from informational messages."""

    refers_to: global___StatusMessage.Reference.ValueType = ...
    """Reference to which the message applies."""

    @property
    def description(self) -> global___FormatMessage:
        """Status message text."""
        pass
    def __init__(self,
        *,
        is_error : builtins.bool = ...,
        refers_to : global___StatusMessage.Reference.ValueType = ...,
        description : typing.Optional[global___FormatMessage] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["description",b"description"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","is_error",b"is_error","refers_to",b"refers_to"]) -> None: ...
global___StatusMessage = StatusMessage

class SourceLocation(google.protobuf.message.Message):
    """Represents a location in the source code."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PATH_FIELD_NUMBER: builtins.int
    LINE_FIELD_NUMBER: builtins.int
    COLUMN_FIELD_NUMBER: builtins.int
    path: typing.Text = ...
    """Path to the source file within the source context of the target binary."""

    line: builtins.int = ...
    """Line inside the file. The first line in the file has the value `1`."""

    column: builtins.int = ...
    """Column within a line. The first column in a line as the value `1`.
    Agents that do not support setting breakpoints on specific columns ignore
    this field.
    """

    def __init__(self,
        *,
        path : typing.Text = ...,
        line : builtins.int = ...,
        column : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["column",b"column","line",b"line","path",b"path"]) -> None: ...
global___SourceLocation = SourceLocation

class Variable(google.protobuf.message.Message):
    """Represents a variable or an argument possibly of a compound object type.
    Note how the following variables are represented:

    1) A simple variable:

        int x = 5

        { name: "x", value: "5", type: "int" }  // Captured variable

    2) A compound object:

        struct T {
            int m1;
            int m2;
        };
        T x = { 3, 7 };

        {  // Captured variable
            name: "x",
            type: "T",
            members { name: "m1", value: "3", type: "int" },
            members { name: "m2", value: "7", type: "int" }
        }

    3) A pointer where the pointee was captured:

        T x = { 3, 7 };
        T* p = &x;

        {   // Captured variable
            name: "p",
            type: "T*",
            value: "0x00500500",
            members { name: "m1", value: "3", type: "int" },
            members { name: "m2", value: "7", type: "int" }
        }

    4) A pointer where the pointee was not captured:

        T* p = new T;

        {   // Captured variable
            name: "p",
            type: "T*",
            value: "0x00400400"
            status { is_error: true, description { format: "unavailable" } }
        }

    The status should describe the reason for the missing value,
    such as `<optimized out>`, `<inaccessible>`, `<pointers limit reached>`.

    Note that a null pointer should not have members.

    5) An unnamed value:

        int* p = new int(7);

        {   // Captured variable
            name: "p",
            value: "0x00500500",
            type: "int*",
            members { value: "7", type: "int" } }

    6) An unnamed pointer where the pointee was not captured:

        int* p = new int(7);
        int** pp = &p;

        {  // Captured variable
            name: "pp",
            value: "0x00500500",
            type: "int**",
            members {
                value: "0x00400400",
                type: "int*"
                status {
                    is_error: true,
                    description: { format: "unavailable" } }
                }
            }
        }

    To optimize computation, memory and network traffic, variables that
    repeat in the output multiple times can be stored once in a shared
    variable table and be referenced using the `var_table_index` field.  The
    variables stored in the shared table are nameless and are essentially
    a partition of the complete variable. To reconstruct the complete
    variable, merge the referencing variable with the referenced variable.

    When using the shared variable table, the following variables:

        T x = { 3, 7 };
        T* p = &x;
        T& r = x;

        { name: "x", var_table_index: 3, type: "T" }  // Captured variables
        { name: "p", value "0x00500500", type="T*", var_table_index: 3 }
        { name: "r", type="T&", var_table_index: 3 }

        {  // Shared variable table entry #3:
            members { name: "m1", value: "3", type: "int" },
            members { name: "m2", value: "7", type: "int" }
        }

    Note that the pointer address is stored with the referencing variable
    and not with the referenced variable. This allows the referenced variable
    to be shared between pointers and references.

    The type field is optional. The debugger agent may or may not support it.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    MEMBERS_FIELD_NUMBER: builtins.int
    VAR_TABLE_INDEX_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Name of the variable, if any."""

    value: typing.Text = ...
    """Simple value of the variable."""

    type: typing.Text = ...
    """Variable type (e.g. `MyClass`). If the variable is split with
    `var_table_index`, `type` goes next to `value`. The interpretation of
    a type is agent specific. It is recommended to include the dynamic type
    rather than a static type of an object.
    """

    @property
    def members(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Variable]:
        """Members contained or pointed to by the variable."""
        pass
    @property
    def var_table_index(self) -> google.protobuf.wrappers_pb2.Int32Value:
        """Reference to a variable in the shared variable table. More than
        one variable can reference the same variable in the table. The
        `var_table_index` field is an index into `variable_table` in Breakpoint.
        """
        pass
    @property
    def status(self) -> global___StatusMessage:
        """Status associated with the variable. This field will usually stay
        unset. A status of a single variable only applies to that variable or
        expression. The rest of breakpoint data still remains valid. Variables
        might be reported in error state even when breakpoint is not in final
        state.

        The message may refer to variable name with `refers_to` set to
        `VARIABLE_NAME`. Alternatively `refers_to` will be set to `VARIABLE_VALUE`.
        In either case variable value and members will be unset.

        Example of error message applied to name: `Invalid expression syntax`.

        Example of information message applied to value: `Not captured`.

        Examples of error message applied to value:

        *   `Malformed string`,
        *   `Field f not found in class C`
        *   `Null pointer dereference`
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        value : typing.Text = ...,
        type : typing.Text = ...,
        members : typing.Optional[typing.Iterable[global___Variable]] = ...,
        var_table_index : typing.Optional[google.protobuf.wrappers_pb2.Int32Value] = ...,
        status : typing.Optional[global___StatusMessage] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["status",b"status","var_table_index",b"var_table_index"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["members",b"members","name",b"name","status",b"status","type",b"type","value",b"value","var_table_index",b"var_table_index"]) -> None: ...
global___Variable = Variable

class StackFrame(google.protobuf.message.Message):
    """Represents a stack frame context."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FUNCTION_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    ARGUMENTS_FIELD_NUMBER: builtins.int
    LOCALS_FIELD_NUMBER: builtins.int
    function: typing.Text = ...
    """Demangled function name at the call site."""

    @property
    def location(self) -> global___SourceLocation:
        """Source location of the call site."""
        pass
    @property
    def arguments(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Variable]:
        """Set of arguments passed to this function.
        Note that this might not be populated for all stack frames.
        """
        pass
    @property
    def locals(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Variable]:
        """Set of local variables at the stack frame location.
        Note that this might not be populated for all stack frames.
        """
        pass
    def __init__(self,
        *,
        function : typing.Text = ...,
        location : typing.Optional[global___SourceLocation] = ...,
        arguments : typing.Optional[typing.Iterable[global___Variable]] = ...,
        locals : typing.Optional[typing.Iterable[global___Variable]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["location",b"location"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["arguments",b"arguments","function",b"function","locals",b"locals","location",b"location"]) -> None: ...
global___StackFrame = StackFrame

class Breakpoint(google.protobuf.message.Message):
    """Represents the breakpoint specification, status and results."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Action:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ActionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Action.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        CAPTURE: Breakpoint.Action.ValueType = ...  # 0
        """Capture stack frame and variables and update the breakpoint.
        The data is only captured once. After that the breakpoint is set
        in a final state.
        """

        LOG: Breakpoint.Action.ValueType = ...  # 1
        """Log each breakpoint hit. The breakpoint remains active until
        deleted or expired.
        """

    class Action(_Action, metaclass=_ActionEnumTypeWrapper):
        """Actions that can be taken when a breakpoint hits.
        Agents should reject breakpoints with unsupported or unknown action values.
        """
        pass

    CAPTURE: Breakpoint.Action.ValueType = ...  # 0
    """Capture stack frame and variables and update the breakpoint.
    The data is only captured once. After that the breakpoint is set
    in a final state.
    """

    LOG: Breakpoint.Action.ValueType = ...  # 1
    """Log each breakpoint hit. The breakpoint remains active until
    deleted or expired.
    """


    class _LogLevel:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _LogLevelEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_LogLevel.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        INFO: Breakpoint.LogLevel.ValueType = ...  # 0
        """Information log message."""

        WARNING: Breakpoint.LogLevel.ValueType = ...  # 1
        """Warning log message."""

        ERROR: Breakpoint.LogLevel.ValueType = ...  # 2
        """Error log message."""

    class LogLevel(_LogLevel, metaclass=_LogLevelEnumTypeWrapper):
        """Log severity levels."""
        pass

    INFO: Breakpoint.LogLevel.ValueType = ...  # 0
    """Information log message."""

    WARNING: Breakpoint.LogLevel.ValueType = ...  # 1
    """Warning log message."""

    ERROR: Breakpoint.LogLevel.ValueType = ...  # 2
    """Error log message."""


    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    ACTION_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    CONDITION_FIELD_NUMBER: builtins.int
    EXPRESSIONS_FIELD_NUMBER: builtins.int
    LOG_MESSAGE_FORMAT_FIELD_NUMBER: builtins.int
    LOG_LEVEL_FIELD_NUMBER: builtins.int
    IS_FINAL_STATE_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    FINAL_TIME_FIELD_NUMBER: builtins.int
    USER_EMAIL_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    STACK_FRAMES_FIELD_NUMBER: builtins.int
    EVALUATED_EXPRESSIONS_FIELD_NUMBER: builtins.int
    VARIABLE_TABLE_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """Breakpoint identifier, unique in the scope of the debuggee."""

    action: global___Breakpoint.Action.ValueType = ...
    """Action that the agent should perform when the code at the
    breakpoint location is hit.
    """

    @property
    def location(self) -> global___SourceLocation:
        """Breakpoint source location."""
        pass
    condition: typing.Text = ...
    """Condition that triggers the breakpoint.
    The condition is a compound boolean expression composed using expressions
    in a programming language at the source location.
    """

    @property
    def expressions(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """List of read-only expressions to evaluate at the breakpoint location.
        The expressions are composed using expressions in the programming language
        at the source location. If the breakpoint action is `LOG`, the evaluated
        expressions are included in log statements.
        """
        pass
    log_message_format: typing.Text = ...
    """Only relevant when action is `LOG`. Defines the message to log when
    the breakpoint hits. The message may include parameter placeholders `$0`,
    `$1`, etc. These placeholders are replaced with the evaluated value
    of the appropriate expression. Expressions not referenced in
    `log_message_format` are not logged.

    Example: `Message received, id = $0, count = $1` with
    `expressions` = `[ message.id, message.count ]`.
    """

    log_level: global___Breakpoint.LogLevel.ValueType = ...
    """Indicates the severity of the log. Only relevant when action is `LOG`."""

    is_final_state: builtins.bool = ...
    """When true, indicates that this is a final result and the
    breakpoint state will not change from here on.
    """

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time this breakpoint was created by the server in seconds resolution."""
        pass
    @property
    def final_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time this breakpoint was finalized as seen by the server in seconds
        resolution.
        """
        pass
    user_email: typing.Text = ...
    """E-mail address of the user that created this breakpoint"""

    @property
    def status(self) -> global___StatusMessage:
        """Breakpoint status.

        The status includes an error flag and a human readable message.
        This field is usually unset. The message can be either
        informational or an error message. Regardless, clients should always
        display the text message back to the user.

        Error status indicates complete failure of the breakpoint.

        Example (non-final state): `Still loading symbols...`

        Examples (final state):

        *   `Invalid line number` referring to location
        *   `Field f not found in class C` referring to condition
        """
        pass
    @property
    def stack_frames(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StackFrame]:
        """The stack at breakpoint time, where stack_frames[0] represents the most
        recently entered function.
        """
        pass
    @property
    def evaluated_expressions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Variable]:
        """Values of evaluated expressions at breakpoint time.
        The evaluated expressions appear in exactly the same order they
        are listed in the `expressions` field.
        The `name` field holds the original expression text, the `value` or
        `members` field holds the result of the evaluated expression.
        If the expression cannot be evaluated, the `status` inside the `Variable`
        will indicate an error and contain the error text.
        """
        pass
    @property
    def variable_table(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Variable]:
        """The `variable_table` exists to aid with computation, memory and network
        traffic optimization.  It enables storing a variable once and reference
        it from multiple variables, including variables stored in the
        `variable_table` itself.
        For example, the same `this` object, which may appear at many levels of
        the stack, can have all of its data stored once in this table.  The
        stack frame variables then would hold only a reference to it.

        The variable `var_table_index` field is an index into this repeated field.
        The stored objects are nameless and get their name from the referencing
        variable. The effective variable is a merge of the referencing variable
        and the referenced variable.
        """
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """A set of custom breakpoint properties, populated by the agent, to be
        displayed to the user.
        """
        pass
    def __init__(self,
        *,
        id : typing.Text = ...,
        action : global___Breakpoint.Action.ValueType = ...,
        location : typing.Optional[global___SourceLocation] = ...,
        condition : typing.Text = ...,
        expressions : typing.Optional[typing.Iterable[typing.Text]] = ...,
        log_message_format : typing.Text = ...,
        log_level : global___Breakpoint.LogLevel.ValueType = ...,
        is_final_state : builtins.bool = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        final_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        user_email : typing.Text = ...,
        status : typing.Optional[global___StatusMessage] = ...,
        stack_frames : typing.Optional[typing.Iterable[global___StackFrame]] = ...,
        evaluated_expressions : typing.Optional[typing.Iterable[global___Variable]] = ...,
        variable_table : typing.Optional[typing.Iterable[global___Variable]] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time","final_time",b"final_time","location",b"location","status",b"status"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["action",b"action","condition",b"condition","create_time",b"create_time","evaluated_expressions",b"evaluated_expressions","expressions",b"expressions","final_time",b"final_time","id",b"id","is_final_state",b"is_final_state","labels",b"labels","location",b"location","log_level",b"log_level","log_message_format",b"log_message_format","stack_frames",b"stack_frames","status",b"status","user_email",b"user_email","variable_table",b"variable_table"]) -> None: ...
global___Breakpoint = Breakpoint

class Debuggee(google.protobuf.message.Message):
    """Represents the debugged application. The application may include one or more
    replicated processes executing the same code. Each of these processes is
    attached with a debugger agent, carrying out the debugging commands.
    Agents attached to the same debuggee identify themselves as such by using
    exactly the same Debuggee message value when registering.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    PROJECT_FIELD_NUMBER: builtins.int
    UNIQUIFIER_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    IS_INACTIVE_FIELD_NUMBER: builtins.int
    AGENT_VERSION_FIELD_NUMBER: builtins.int
    IS_DISABLED_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    SOURCE_CONTEXTS_FIELD_NUMBER: builtins.int
    EXT_SOURCE_CONTEXTS_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """Unique identifier for the debuggee generated by the controller service."""

    project: typing.Text = ...
    """Project the debuggee is associated with.
    Use project number or id when registering a Google Cloud Platform project.
    """

    uniquifier: typing.Text = ...
    """Uniquifier to further distinguish the application.
    It is possible that different applications might have identical values in
    the debuggee message, thus, incorrectly identified as a single application
    by the Controller service. This field adds salt to further distinguish the
    application. Agents should consider seeding this field with value that
    identifies the code, binary, configuration and environment.
    """

    description: typing.Text = ...
    """Human readable description of the debuggee.
    Including a human-readable project name, environment name and version
    information is recommended.
    """

    is_inactive: builtins.bool = ...
    """If set to `true`, indicates that Controller service does not detect any
    activity from the debuggee agents and the application is possibly stopped.
    """

    agent_version: typing.Text = ...
    """Version ID of the agent.
    Schema: `domain/language-platform/vmajor.minor` (for example
    `google.com/java-gcp/v1.1`).
    """

    is_disabled: builtins.bool = ...
    """If set to `true`, indicates that the agent should disable itself and
    detach from the debuggee.
    """

    @property
    def status(self) -> global___StatusMessage:
        """Human readable message to be displayed to the user about this debuggee.
        Absence of this field indicates no status. The message can be either
        informational or an error status.
        """
        pass
    @property
    def source_contexts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.devtools.source.v1.source_context_pb2.SourceContext]:
        """References to the locations and revisions of the source code used in the
        deployed application.
        """
        pass
    @property
    def ext_source_contexts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.devtools.source.v1.source_context_pb2.ExtendedSourceContext]:
        """References to the locations and revisions of the source code used in the
        deployed application.
        """
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """A set of custom debuggee properties, populated by the agent, to be
        displayed to the user.
        """
        pass
    def __init__(self,
        *,
        id : typing.Text = ...,
        project : typing.Text = ...,
        uniquifier : typing.Text = ...,
        description : typing.Text = ...,
        is_inactive : builtins.bool = ...,
        agent_version : typing.Text = ...,
        is_disabled : builtins.bool = ...,
        status : typing.Optional[global___StatusMessage] = ...,
        source_contexts : typing.Optional[typing.Iterable[google.devtools.source.v1.source_context_pb2.SourceContext]] = ...,
        ext_source_contexts : typing.Optional[typing.Iterable[google.devtools.source.v1.source_context_pb2.ExtendedSourceContext]] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["status",b"status"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["agent_version",b"agent_version","description",b"description","ext_source_contexts",b"ext_source_contexts","id",b"id","is_disabled",b"is_disabled","is_inactive",b"is_inactive","labels",b"labels","project",b"project","source_contexts",b"source_contexts","status",b"status","uniquifier",b"uniquifier"]) -> None: ...
global___Debuggee = Debuggee
