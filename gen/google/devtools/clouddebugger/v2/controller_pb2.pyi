"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.devtools.clouddebugger.v2.data_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class RegisterDebuggeeRequest(google.protobuf.message.Message):
    """Request to register a debuggee."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DEBUGGEE_FIELD_NUMBER: builtins.int
    @property
    def debuggee(self) -> google.devtools.clouddebugger.v2.data_pb2.Debuggee:
        """Required. Debuggee information to register.
        The fields `project`, `uniquifier`, `description` and `agent_version`
        of the debuggee must be set.
        """
        pass
    def __init__(self,
        *,
        debuggee : typing.Optional[google.devtools.clouddebugger.v2.data_pb2.Debuggee] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["debuggee",b"debuggee"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["debuggee",b"debuggee"]) -> None: ...
global___RegisterDebuggeeRequest = RegisterDebuggeeRequest

class RegisterDebuggeeResponse(google.protobuf.message.Message):
    """Response for registering a debuggee."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DEBUGGEE_FIELD_NUMBER: builtins.int
    @property
    def debuggee(self) -> google.devtools.clouddebugger.v2.data_pb2.Debuggee:
        """Debuggee resource.
        The field `id` is guaranteed to be set (in addition to the echoed fields).
        If the field `is_disabled` is set to `true`, the agent should disable
        itself by removing all breakpoints and detaching from the application.
        It should however continue to poll `RegisterDebuggee` until reenabled.
        """
        pass
    def __init__(self,
        *,
        debuggee : typing.Optional[google.devtools.clouddebugger.v2.data_pb2.Debuggee] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["debuggee",b"debuggee"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["debuggee",b"debuggee"]) -> None: ...
global___RegisterDebuggeeResponse = RegisterDebuggeeResponse

class ListActiveBreakpointsRequest(google.protobuf.message.Message):
    """Request to list active breakpoints."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DEBUGGEE_ID_FIELD_NUMBER: builtins.int
    WAIT_TOKEN_FIELD_NUMBER: builtins.int
    SUCCESS_ON_TIMEOUT_FIELD_NUMBER: builtins.int
    debuggee_id: typing.Text = ...
    """Required. Identifies the debuggee."""

    wait_token: typing.Text = ...
    """A token that, if specified, blocks the method call until the list
    of active breakpoints has changed, or a server-selected timeout has
    expired. The value should be set from the `next_wait_token` field in
    the last response. The initial value should be set to `"init"`.
    """

    success_on_timeout: builtins.bool = ...
    """If set to `true` (recommended), returns `google.rpc.Code.OK` status and
    sets the `wait_expired` response field to `true` when the server-selected
    timeout has expired.

    If set to `false` (deprecated), returns `google.rpc.Code.ABORTED` status
    when the server-selected timeout has expired.
    """

    def __init__(self,
        *,
        debuggee_id : typing.Text = ...,
        wait_token : typing.Text = ...,
        success_on_timeout : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["debuggee_id",b"debuggee_id","success_on_timeout",b"success_on_timeout","wait_token",b"wait_token"]) -> None: ...
global___ListActiveBreakpointsRequest = ListActiveBreakpointsRequest

class ListActiveBreakpointsResponse(google.protobuf.message.Message):
    """Response for listing active breakpoints."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BREAKPOINTS_FIELD_NUMBER: builtins.int
    NEXT_WAIT_TOKEN_FIELD_NUMBER: builtins.int
    WAIT_EXPIRED_FIELD_NUMBER: builtins.int
    @property
    def breakpoints(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.devtools.clouddebugger.v2.data_pb2.Breakpoint]:
        """List of all active breakpoints.
        The fields `id` and `location` are guaranteed to be set on each breakpoint.
        """
        pass
    next_wait_token: typing.Text = ...
    """A token that can be used in the next method call to block until
    the list of breakpoints changes.
    """

    wait_expired: builtins.bool = ...
    """If set to `true`, indicates that there is no change to the
    list of active breakpoints and the server-selected timeout has expired.
    The `breakpoints` field would be empty and should be ignored.
    """

    def __init__(self,
        *,
        breakpoints : typing.Optional[typing.Iterable[google.devtools.clouddebugger.v2.data_pb2.Breakpoint]] = ...,
        next_wait_token : typing.Text = ...,
        wait_expired : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["breakpoints",b"breakpoints","next_wait_token",b"next_wait_token","wait_expired",b"wait_expired"]) -> None: ...
global___ListActiveBreakpointsResponse = ListActiveBreakpointsResponse

class UpdateActiveBreakpointRequest(google.protobuf.message.Message):
    """Request to update an active breakpoint."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DEBUGGEE_ID_FIELD_NUMBER: builtins.int
    BREAKPOINT_FIELD_NUMBER: builtins.int
    debuggee_id: typing.Text = ...
    """Required. Identifies the debuggee being debugged."""

    @property
    def breakpoint(self) -> google.devtools.clouddebugger.v2.data_pb2.Breakpoint:
        """Required. Updated breakpoint information.
        The field `id` must be set.
        The agent must echo all Breakpoint specification fields in the update.
        """
        pass
    def __init__(self,
        *,
        debuggee_id : typing.Text = ...,
        breakpoint : typing.Optional[google.devtools.clouddebugger.v2.data_pb2.Breakpoint] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["breakpoint",b"breakpoint"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["breakpoint",b"breakpoint","debuggee_id",b"debuggee_id"]) -> None: ...
global___UpdateActiveBreakpointRequest = UpdateActiveBreakpointRequest

class UpdateActiveBreakpointResponse(google.protobuf.message.Message):
    """Response for updating an active breakpoint.
    The message is defined to allow future extensions.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___UpdateActiveBreakpointResponse = UpdateActiveBreakpointResponse
