"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _OrchestratorOption:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _OrchestratorOptionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_OrchestratorOption.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    ORCHESTRATOR_OPTION_UNSPECIFIED: OrchestratorOption.ValueType = ...  # 0
    """Default value: the server will choose the mode. Currently implies that
    the test will run without the orchestrator. In the future,
    all instrumentation tests will be run with the orchestrator.
    Using the orchestrator is highly encouraged because of all the benefits it
    offers.
    """

    USE_ORCHESTRATOR: OrchestratorOption.ValueType = ...  # 1
    """Run test using orchestrator.
    ** Only compatible with AndroidJUnitRunner version 1.0 or higher! **
    Recommended.
    """

    DO_NOT_USE_ORCHESTRATOR: OrchestratorOption.ValueType = ...  # 2
    """Run test without using orchestrator."""

class OrchestratorOption(_OrchestratorOption, metaclass=_OrchestratorOptionEnumTypeWrapper):
    """Specifies how to execute the test."""
    pass

ORCHESTRATOR_OPTION_UNSPECIFIED: OrchestratorOption.ValueType = ...  # 0
"""Default value: the server will choose the mode. Currently implies that
the test will run without the orchestrator. In the future,
all instrumentation tests will be run with the orchestrator.
Using the orchestrator is highly encouraged because of all the benefits it
offers.
"""

USE_ORCHESTRATOR: OrchestratorOption.ValueType = ...  # 1
"""Run test using orchestrator.
** Only compatible with AndroidJUnitRunner version 1.0 or higher! **
Recommended.
"""

DO_NOT_USE_ORCHESTRATOR: OrchestratorOption.ValueType = ...  # 2
"""Run test without using orchestrator."""

global___OrchestratorOption = OrchestratorOption


class _RoboActionType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _RoboActionTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RoboActionType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    ACTION_TYPE_UNSPECIFIED: RoboActionType.ValueType = ...  # 0
    """DO NOT USE. For proto versioning only."""

    SINGLE_CLICK: RoboActionType.ValueType = ...  # 1
    """Direct Robo to click on the specified element. No-op if specified element
    is not clickable.
    """

    ENTER_TEXT: RoboActionType.ValueType = ...  # 2
    """Direct Robo to enter text on the specified element. No-op if specified
    element is not enabled or does not allow text entry.
    """

    IGNORE: RoboActionType.ValueType = ...  # 3
    """Direct Robo to ignore interactions with a specific element."""

class RoboActionType(_RoboActionType, metaclass=_RoboActionTypeEnumTypeWrapper):
    """Actions which Robo can perform on UI elements."""
    pass

ACTION_TYPE_UNSPECIFIED: RoboActionType.ValueType = ...  # 0
"""DO NOT USE. For proto versioning only."""

SINGLE_CLICK: RoboActionType.ValueType = ...  # 1
"""Direct Robo to click on the specified element. No-op if specified element
is not clickable.
"""

ENTER_TEXT: RoboActionType.ValueType = ...  # 2
"""Direct Robo to enter text on the specified element. No-op if specified
element is not enabled or does not allow text entry.
"""

IGNORE: RoboActionType.ValueType = ...  # 3
"""Direct Robo to ignore interactions with a specific element."""

global___RoboActionType = RoboActionType


class _InvalidMatrixDetails:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _InvalidMatrixDetailsEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_InvalidMatrixDetails.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    INVALID_MATRIX_DETAILS_UNSPECIFIED: InvalidMatrixDetails.ValueType = ...  # 0
    """Do not use. For proto versioning only."""

    DETAILS_UNAVAILABLE: InvalidMatrixDetails.ValueType = ...  # 1
    """The matrix is INVALID, but there are no further details available."""

    MALFORMED_APK: InvalidMatrixDetails.ValueType = ...  # 2
    """The input app APK could not be parsed."""

    MALFORMED_TEST_APK: InvalidMatrixDetails.ValueType = ...  # 3
    """The input test APK could not be parsed."""

    NO_MANIFEST: InvalidMatrixDetails.ValueType = ...  # 4
    """The AndroidManifest.xml could not be found."""

    NO_PACKAGE_NAME: InvalidMatrixDetails.ValueType = ...  # 5
    """The APK manifest does not declare a package name."""

    INVALID_PACKAGE_NAME: InvalidMatrixDetails.ValueType = ...  # 31
    """The APK application ID (aka package name) is invalid.
    See also
    https://developer.android.com/studio/build/application-id
    """

    TEST_SAME_AS_APP: InvalidMatrixDetails.ValueType = ...  # 6
    """The test package and app package are the same."""

    NO_INSTRUMENTATION: InvalidMatrixDetails.ValueType = ...  # 7
    """The test apk does not declare an instrumentation."""

    NO_SIGNATURE: InvalidMatrixDetails.ValueType = ...  # 20
    """The input app apk does not have a signature."""

    INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE: InvalidMatrixDetails.ValueType = ...  # 18
    """The test runner class specified by user or in the test APK's manifest file
    is not compatible with Android Test Orchestrator.
    Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
    higher.
    Orchestrator can be disabled by using DO_NOT_USE_ORCHESTRATOR
    OrchestratorOption.
    """

    NO_TEST_RUNNER_CLASS: InvalidMatrixDetails.ValueType = ...  # 19
    """The test APK does not contain the test runner class specified by user or in
    the manifest file.
    This can be caused by either of the following reasons:
    - the user provided a runner class name that's incorrect, or
    - the test runner isn't built into the test APK (might be in the app APK
    instead).
    """

    NO_LAUNCHER_ACTIVITY: InvalidMatrixDetails.ValueType = ...  # 8
    """A main launcher activity could not be found."""

    FORBIDDEN_PERMISSIONS: InvalidMatrixDetails.ValueType = ...  # 9
    """The app declares one or more permissions that are not allowed."""

    INVALID_ROBO_DIRECTIVES: InvalidMatrixDetails.ValueType = ...  # 10
    """There is a conflict in the provided robo_directives."""

    INVALID_RESOURCE_NAME: InvalidMatrixDetails.ValueType = ...  # 33
    """There is at least one invalid resource name in the provided
    robo directives
    """

    INVALID_DIRECTIVE_ACTION: InvalidMatrixDetails.ValueType = ...  # 34
    """Invalid definition of action in the robo directives
    (e.g. a click or ignore action includes an input text field)
    """

    TEST_LOOP_INTENT_FILTER_NOT_FOUND: InvalidMatrixDetails.ValueType = ...  # 12
    """There is no test loop intent filter, or the one that is given is
    not formatted correctly.
    """

    SCENARIO_LABEL_NOT_DECLARED: InvalidMatrixDetails.ValueType = ...  # 13
    """The request contains a scenario label that was not declared in the
    manifest.
    """

    SCENARIO_LABEL_MALFORMED: InvalidMatrixDetails.ValueType = ...  # 14
    """There was an error when parsing a label's value."""

    SCENARIO_NOT_DECLARED: InvalidMatrixDetails.ValueType = ...  # 15
    """The request contains a scenario number that was not declared in the
    manifest.
    """

    DEVICE_ADMIN_RECEIVER: InvalidMatrixDetails.ValueType = ...  # 17
    """Device administrator applications are not allowed."""

    MALFORMED_XC_TEST_ZIP: InvalidMatrixDetails.ValueType = ...  # 11
    """The zipped XCTest was malformed. The zip did not contain a single
    .xctestrun file and the contents of the DerivedData/Build/Products
    directory.
    """

    BUILT_FOR_IOS_SIMULATOR: InvalidMatrixDetails.ValueType = ...  # 24
    """The zipped XCTest was built for the iOS simulator rather than for a
    physical device.
    """

    NO_TESTS_IN_XC_TEST_ZIP: InvalidMatrixDetails.ValueType = ...  # 25
    """The .xctestrun file did not specify any test targets."""

    USE_DESTINATION_ARTIFACTS: InvalidMatrixDetails.ValueType = ...  # 26
    """One or more of the test targets defined in the .xctestrun file specifies
    "UseDestinationArtifacts", which is disallowed.
    """

    TEST_NOT_APP_HOSTED: InvalidMatrixDetails.ValueType = ...  # 28
    """XC tests which run on physical devices must have
    "IsAppHostedTestBundle" == "true" in the xctestrun file.
    """

    PLIST_CANNOT_BE_PARSED: InvalidMatrixDetails.ValueType = ...  # 30
    """An Info.plist file in the XCTest zip could not be parsed."""

    TEST_ONLY_APK: InvalidMatrixDetails.ValueType = ...  # 21
    """The APK is marked as "testOnly".
    Deprecated and not currently used.
    """

    MALFORMED_IPA: InvalidMatrixDetails.ValueType = ...  # 22
    """The input IPA could not be parsed."""

    MISSING_URL_SCHEME: InvalidMatrixDetails.ValueType = ...  # 35
    """The application doesn't register the game loop URL scheme."""

    MALFORMED_APP_BUNDLE: InvalidMatrixDetails.ValueType = ...  # 36
    """The iOS application bundle (.app) couldn't be processed."""

    NO_CODE_APK: InvalidMatrixDetails.ValueType = ...  # 23
    """APK contains no code.
    See also
    https://developer.android.com/guide/topics/manifest/application-element.html#code
    """

    INVALID_INPUT_APK: InvalidMatrixDetails.ValueType = ...  # 27
    """Either the provided input APK path was malformed,
    the APK file does not exist, or the user does not have permission to
    access the APK file.
    """

    INVALID_APK_PREVIEW_SDK: InvalidMatrixDetails.ValueType = ...  # 29
    """APK is built for a preview SDK which is unsupported"""

class InvalidMatrixDetails(_InvalidMatrixDetails, metaclass=_InvalidMatrixDetailsEnumTypeWrapper):
    """The detailed reason that a Matrix was deemed INVALID."""
    pass

INVALID_MATRIX_DETAILS_UNSPECIFIED: InvalidMatrixDetails.ValueType = ...  # 0
"""Do not use. For proto versioning only."""

DETAILS_UNAVAILABLE: InvalidMatrixDetails.ValueType = ...  # 1
"""The matrix is INVALID, but there are no further details available."""

MALFORMED_APK: InvalidMatrixDetails.ValueType = ...  # 2
"""The input app APK could not be parsed."""

MALFORMED_TEST_APK: InvalidMatrixDetails.ValueType = ...  # 3
"""The input test APK could not be parsed."""

NO_MANIFEST: InvalidMatrixDetails.ValueType = ...  # 4
"""The AndroidManifest.xml could not be found."""

NO_PACKAGE_NAME: InvalidMatrixDetails.ValueType = ...  # 5
"""The APK manifest does not declare a package name."""

INVALID_PACKAGE_NAME: InvalidMatrixDetails.ValueType = ...  # 31
"""The APK application ID (aka package name) is invalid.
See also
https://developer.android.com/studio/build/application-id
"""

TEST_SAME_AS_APP: InvalidMatrixDetails.ValueType = ...  # 6
"""The test package and app package are the same."""

NO_INSTRUMENTATION: InvalidMatrixDetails.ValueType = ...  # 7
"""The test apk does not declare an instrumentation."""

NO_SIGNATURE: InvalidMatrixDetails.ValueType = ...  # 20
"""The input app apk does not have a signature."""

INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE: InvalidMatrixDetails.ValueType = ...  # 18
"""The test runner class specified by user or in the test APK's manifest file
is not compatible with Android Test Orchestrator.
Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
higher.
Orchestrator can be disabled by using DO_NOT_USE_ORCHESTRATOR
OrchestratorOption.
"""

NO_TEST_RUNNER_CLASS: InvalidMatrixDetails.ValueType = ...  # 19
"""The test APK does not contain the test runner class specified by user or in
the manifest file.
This can be caused by either of the following reasons:
- the user provided a runner class name that's incorrect, or
- the test runner isn't built into the test APK (might be in the app APK
instead).
"""

NO_LAUNCHER_ACTIVITY: InvalidMatrixDetails.ValueType = ...  # 8
"""A main launcher activity could not be found."""

FORBIDDEN_PERMISSIONS: InvalidMatrixDetails.ValueType = ...  # 9
"""The app declares one or more permissions that are not allowed."""

INVALID_ROBO_DIRECTIVES: InvalidMatrixDetails.ValueType = ...  # 10
"""There is a conflict in the provided robo_directives."""

INVALID_RESOURCE_NAME: InvalidMatrixDetails.ValueType = ...  # 33
"""There is at least one invalid resource name in the provided
robo directives
"""

INVALID_DIRECTIVE_ACTION: InvalidMatrixDetails.ValueType = ...  # 34
"""Invalid definition of action in the robo directives
(e.g. a click or ignore action includes an input text field)
"""

TEST_LOOP_INTENT_FILTER_NOT_FOUND: InvalidMatrixDetails.ValueType = ...  # 12
"""There is no test loop intent filter, or the one that is given is
not formatted correctly.
"""

SCENARIO_LABEL_NOT_DECLARED: InvalidMatrixDetails.ValueType = ...  # 13
"""The request contains a scenario label that was not declared in the
manifest.
"""

SCENARIO_LABEL_MALFORMED: InvalidMatrixDetails.ValueType = ...  # 14
"""There was an error when parsing a label's value."""

SCENARIO_NOT_DECLARED: InvalidMatrixDetails.ValueType = ...  # 15
"""The request contains a scenario number that was not declared in the
manifest.
"""

DEVICE_ADMIN_RECEIVER: InvalidMatrixDetails.ValueType = ...  # 17
"""Device administrator applications are not allowed."""

MALFORMED_XC_TEST_ZIP: InvalidMatrixDetails.ValueType = ...  # 11
"""The zipped XCTest was malformed. The zip did not contain a single
.xctestrun file and the contents of the DerivedData/Build/Products
directory.
"""

BUILT_FOR_IOS_SIMULATOR: InvalidMatrixDetails.ValueType = ...  # 24
"""The zipped XCTest was built for the iOS simulator rather than for a
physical device.
"""

NO_TESTS_IN_XC_TEST_ZIP: InvalidMatrixDetails.ValueType = ...  # 25
"""The .xctestrun file did not specify any test targets."""

USE_DESTINATION_ARTIFACTS: InvalidMatrixDetails.ValueType = ...  # 26
"""One or more of the test targets defined in the .xctestrun file specifies
"UseDestinationArtifacts", which is disallowed.
"""

TEST_NOT_APP_HOSTED: InvalidMatrixDetails.ValueType = ...  # 28
"""XC tests which run on physical devices must have
"IsAppHostedTestBundle" == "true" in the xctestrun file.
"""

PLIST_CANNOT_BE_PARSED: InvalidMatrixDetails.ValueType = ...  # 30
"""An Info.plist file in the XCTest zip could not be parsed."""

TEST_ONLY_APK: InvalidMatrixDetails.ValueType = ...  # 21
"""The APK is marked as "testOnly".
Deprecated and not currently used.
"""

MALFORMED_IPA: InvalidMatrixDetails.ValueType = ...  # 22
"""The input IPA could not be parsed."""

MISSING_URL_SCHEME: InvalidMatrixDetails.ValueType = ...  # 35
"""The application doesn't register the game loop URL scheme."""

MALFORMED_APP_BUNDLE: InvalidMatrixDetails.ValueType = ...  # 36
"""The iOS application bundle (.app) couldn't be processed."""

NO_CODE_APK: InvalidMatrixDetails.ValueType = ...  # 23
"""APK contains no code.
See also
https://developer.android.com/guide/topics/manifest/application-element.html#code
"""

INVALID_INPUT_APK: InvalidMatrixDetails.ValueType = ...  # 27
"""Either the provided input APK path was malformed,
the APK file does not exist, or the user does not have permission to
access the APK file.
"""

INVALID_APK_PREVIEW_SDK: InvalidMatrixDetails.ValueType = ...  # 29
"""APK is built for a preview SDK which is unsupported"""

global___InvalidMatrixDetails = InvalidMatrixDetails


class _TestState:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _TestStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TestState.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    TEST_STATE_UNSPECIFIED: TestState.ValueType = ...  # 0
    """Do not use.  For proto versioning only."""

    VALIDATING: TestState.ValueType = ...  # 8
    """The execution or matrix is being validated."""

    PENDING: TestState.ValueType = ...  # 1
    """The execution or matrix is waiting for resources to become available."""

    RUNNING: TestState.ValueType = ...  # 2
    """The execution is currently being processed.

    Can only be set on an execution.
    """

    FINISHED: TestState.ValueType = ...  # 3
    """The execution or matrix has terminated normally.

    On a matrix this means that the matrix level processing completed normally,
    but individual executions may be in an ERROR state.
    """

    ERROR: TestState.ValueType = ...  # 4
    """The execution or matrix has stopped because it encountered an
    infrastructure failure.
    """

    UNSUPPORTED_ENVIRONMENT: TestState.ValueType = ...  # 5
    """The execution was not run because it corresponds to a unsupported
    environment.

    Can only be set on an execution.
    """

    INCOMPATIBLE_ENVIRONMENT: TestState.ValueType = ...  # 9
    """The execution was not run because the provided inputs are incompatible with
    the requested environment.

    Example: requested AndroidVersion is lower than APK's minSdkVersion

    Can only be set on an execution.
    """

    INCOMPATIBLE_ARCHITECTURE: TestState.ValueType = ...  # 10
    """The execution was not run because the provided inputs are incompatible with
    the requested architecture.

    Example: requested device does not support running the native code in
    the supplied APK

    Can only be set on an execution.
    """

    CANCELLED: TestState.ValueType = ...  # 6
    """The user cancelled the execution.

    Can only be set on an execution.
    """

    INVALID: TestState.ValueType = ...  # 7
    """The execution or matrix was not run because the provided inputs are not
    valid.

    Examples: input file is not of the expected type, is malformed/corrupt, or
    was flagged as malware
    """

class TestState(_TestState, metaclass=_TestStateEnumTypeWrapper):
    """The state (i.e., progress) of a test execution or matrix."""
    pass

TEST_STATE_UNSPECIFIED: TestState.ValueType = ...  # 0
"""Do not use.  For proto versioning only."""

VALIDATING: TestState.ValueType = ...  # 8
"""The execution or matrix is being validated."""

PENDING: TestState.ValueType = ...  # 1
"""The execution or matrix is waiting for resources to become available."""

RUNNING: TestState.ValueType = ...  # 2
"""The execution is currently being processed.

Can only be set on an execution.
"""

FINISHED: TestState.ValueType = ...  # 3
"""The execution or matrix has terminated normally.

On a matrix this means that the matrix level processing completed normally,
but individual executions may be in an ERROR state.
"""

ERROR: TestState.ValueType = ...  # 4
"""The execution or matrix has stopped because it encountered an
infrastructure failure.
"""

UNSUPPORTED_ENVIRONMENT: TestState.ValueType = ...  # 5
"""The execution was not run because it corresponds to a unsupported
environment.

Can only be set on an execution.
"""

INCOMPATIBLE_ENVIRONMENT: TestState.ValueType = ...  # 9
"""The execution was not run because the provided inputs are incompatible with
the requested environment.

Example: requested AndroidVersion is lower than APK's minSdkVersion

Can only be set on an execution.
"""

INCOMPATIBLE_ARCHITECTURE: TestState.ValueType = ...  # 10
"""The execution was not run because the provided inputs are incompatible with
the requested architecture.

Example: requested device does not support running the native code in
the supplied APK

Can only be set on an execution.
"""

CANCELLED: TestState.ValueType = ...  # 6
"""The user cancelled the execution.

Can only be set on an execution.
"""

INVALID: TestState.ValueType = ...  # 7
"""The execution or matrix was not run because the provided inputs are not
valid.

Examples: input file is not of the expected type, is malformed/corrupt, or
was flagged as malware
"""

global___TestState = TestState


class _OutcomeSummary:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _OutcomeSummaryEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_OutcomeSummary.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    OUTCOME_SUMMARY_UNSPECIFIED: OutcomeSummary.ValueType = ...  # 0
    """Do not use. For proto versioning only."""

    SUCCESS: OutcomeSummary.ValueType = ...  # 1
    """The test matrix run was successful, for instance:
    - All the test cases passed.
    - Robo did not detect a crash of the application under test.
    """

    FAILURE: OutcomeSummary.ValueType = ...  # 2
    """A run failed, for instance:
    - One or more test case failed.
    - A test timed out.
    - The application under test crashed.
    """

    INCONCLUSIVE: OutcomeSummary.ValueType = ...  # 3
    """Something unexpected happened. The run should still be considered
    unsuccessful but this is likely a transient problem and re-running the
    test might be successful.
    """

    SKIPPED: OutcomeSummary.ValueType = ...  # 4
    """All tests were skipped, for instance:
    - All device configurations were incompatible.
    """

class OutcomeSummary(_OutcomeSummary, metaclass=_OutcomeSummaryEnumTypeWrapper):
    """Outcome summary for a finished test matrix."""
    pass

OUTCOME_SUMMARY_UNSPECIFIED: OutcomeSummary.ValueType = ...  # 0
"""Do not use. For proto versioning only."""

SUCCESS: OutcomeSummary.ValueType = ...  # 1
"""The test matrix run was successful, for instance:
- All the test cases passed.
- Robo did not detect a crash of the application under test.
"""

FAILURE: OutcomeSummary.ValueType = ...  # 2
"""A run failed, for instance:
- One or more test case failed.
- A test timed out.
- The application under test crashed.
"""

INCONCLUSIVE: OutcomeSummary.ValueType = ...  # 3
"""Something unexpected happened. The run should still be considered
unsuccessful but this is likely a transient problem and re-running the
test might be successful.
"""

SKIPPED: OutcomeSummary.ValueType = ...  # 4
"""All tests were skipped, for instance:
- All device configurations were incompatible.
"""

global___OutcomeSummary = OutcomeSummary


class TestMatrix(google.protobuf.message.Message):
    """TestMatrix captures all details about a test. It contains the environment
    configuration, test specification, test executions and overall state and
    outcome.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEST_MATRIX_ID_FIELD_NUMBER: builtins.int
    PROJECT_ID_FIELD_NUMBER: builtins.int
    CLIENT_INFO_FIELD_NUMBER: builtins.int
    TEST_SPECIFICATION_FIELD_NUMBER: builtins.int
    ENVIRONMENT_MATRIX_FIELD_NUMBER: builtins.int
    TEST_EXECUTIONS_FIELD_NUMBER: builtins.int
    RESULT_STORAGE_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    TIMESTAMP_FIELD_NUMBER: builtins.int
    INVALID_MATRIX_DETAILS_FIELD_NUMBER: builtins.int
    FLAKY_TEST_ATTEMPTS_FIELD_NUMBER: builtins.int
    OUTCOME_SUMMARY_FIELD_NUMBER: builtins.int
    FAIL_FAST_FIELD_NUMBER: builtins.int
    test_matrix_id: typing.Text = ...
    """Output only. Unique id set by the service."""

    project_id: typing.Text = ...
    """The cloud project that owns the test matrix."""

    @property
    def client_info(self) -> global___ClientInfo:
        """Information about the client which invoked the test."""
        pass
    @property
    def test_specification(self) -> global___TestSpecification:
        """Required. How to run the test."""
        pass
    @property
    def environment_matrix(self) -> global___EnvironmentMatrix:
        """Required. The devices the tests are being executed on."""
        pass
    @property
    def test_executions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TestExecution]:
        """Output only. The list of test executions that the service creates for
        this matrix.
        """
        pass
    @property
    def result_storage(self) -> global___ResultStorage:
        """Required. Where the results for the matrix are written."""
        pass
    state: global___TestState.ValueType = ...
    """Output only. Indicates the current progress of the test matrix."""

    @property
    def timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time this test matrix was initially created."""
        pass
    invalid_matrix_details: global___InvalidMatrixDetails.ValueType = ...
    """Output only. Describes why the matrix is considered invalid.
    Only useful for matrices in the INVALID state.
    """

    flaky_test_attempts: builtins.int = ...
    """The number of times a TestExecution should be re-attempted if one or more
    of its test cases fail for any reason.
    The maximum number of reruns allowed is 10.

    Default is 0, which implies no reruns.
    """

    outcome_summary: global___OutcomeSummary.ValueType = ...
    """Output Only. The overall outcome of the test.
    Only set when the test matrix state is FINISHED.
    """

    fail_fast: builtins.bool = ...
    """If true, only a single attempt at most will be made to run each
    execution/shard in the matrix. Flaky test attempts are not affected.

    Normally, 2 or more attempts are made if a potential infrastructure issue
    is detected.

    This feature is for latency sensitive workloads. The incidence of
    execution failures may be significantly greater for fail-fast matrices
    and support is more limited because of that expectation.
    """

    def __init__(self,
        *,
        test_matrix_id : typing.Text = ...,
        project_id : typing.Text = ...,
        client_info : typing.Optional[global___ClientInfo] = ...,
        test_specification : typing.Optional[global___TestSpecification] = ...,
        environment_matrix : typing.Optional[global___EnvironmentMatrix] = ...,
        test_executions : typing.Optional[typing.Iterable[global___TestExecution]] = ...,
        result_storage : typing.Optional[global___ResultStorage] = ...,
        state : global___TestState.ValueType = ...,
        timestamp : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        invalid_matrix_details : global___InvalidMatrixDetails.ValueType = ...,
        flaky_test_attempts : builtins.int = ...,
        outcome_summary : global___OutcomeSummary.ValueType = ...,
        fail_fast : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["client_info",b"client_info","environment_matrix",b"environment_matrix","result_storage",b"result_storage","test_specification",b"test_specification","timestamp",b"timestamp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["client_info",b"client_info","environment_matrix",b"environment_matrix","fail_fast",b"fail_fast","flaky_test_attempts",b"flaky_test_attempts","invalid_matrix_details",b"invalid_matrix_details","outcome_summary",b"outcome_summary","project_id",b"project_id","result_storage",b"result_storage","state",b"state","test_executions",b"test_executions","test_matrix_id",b"test_matrix_id","test_specification",b"test_specification","timestamp",b"timestamp"]) -> None: ...
global___TestMatrix = TestMatrix

class TestExecution(google.protobuf.message.Message):
    """A single test executed in a single environment."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ID_FIELD_NUMBER: builtins.int
    MATRIX_ID_FIELD_NUMBER: builtins.int
    PROJECT_ID_FIELD_NUMBER: builtins.int
    TEST_SPECIFICATION_FIELD_NUMBER: builtins.int
    SHARD_FIELD_NUMBER: builtins.int
    ENVIRONMENT_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    TOOL_RESULTS_STEP_FIELD_NUMBER: builtins.int
    TIMESTAMP_FIELD_NUMBER: builtins.int
    TEST_DETAILS_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """Output only. Unique id set by the service."""

    matrix_id: typing.Text = ...
    """Output only. Id of the containing TestMatrix."""

    project_id: typing.Text = ...
    """Output only. The cloud project that owns the test execution."""

    @property
    def test_specification(self) -> global___TestSpecification:
        """Output only. How to run the test."""
        pass
    @property
    def shard(self) -> global___Shard:
        """Output only. Details about the shard."""
        pass
    @property
    def environment(self) -> global___Environment:
        """Output only. How the host machine(s) are configured."""
        pass
    state: global___TestState.ValueType = ...
    """Output only. Indicates the current progress of the test execution
    (e.g., FINISHED).
    """

    @property
    def tool_results_step(self) -> global___ToolResultsStep:
        """Output only. Where the results for this execution are written."""
        pass
    @property
    def timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time this test execution was initially created."""
        pass
    @property
    def test_details(self) -> global___TestDetails:
        """Output only. Additional details about the running test."""
        pass
    def __init__(self,
        *,
        id : typing.Text = ...,
        matrix_id : typing.Text = ...,
        project_id : typing.Text = ...,
        test_specification : typing.Optional[global___TestSpecification] = ...,
        shard : typing.Optional[global___Shard] = ...,
        environment : typing.Optional[global___Environment] = ...,
        state : global___TestState.ValueType = ...,
        tool_results_step : typing.Optional[global___ToolResultsStep] = ...,
        timestamp : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        test_details : typing.Optional[global___TestDetails] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["environment",b"environment","shard",b"shard","test_details",b"test_details","test_specification",b"test_specification","timestamp",b"timestamp","tool_results_step",b"tool_results_step"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["environment",b"environment","id",b"id","matrix_id",b"matrix_id","project_id",b"project_id","shard",b"shard","state",b"state","test_details",b"test_details","test_specification",b"test_specification","timestamp",b"timestamp","tool_results_step",b"tool_results_step"]) -> None: ...
global___TestExecution = TestExecution

class TestSpecification(google.protobuf.message.Message):
    """A description of how to run the test."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEST_TIMEOUT_FIELD_NUMBER: builtins.int
    TEST_SETUP_FIELD_NUMBER: builtins.int
    IOS_TEST_SETUP_FIELD_NUMBER: builtins.int
    ANDROID_INSTRUMENTATION_TEST_FIELD_NUMBER: builtins.int
    ANDROID_ROBO_TEST_FIELD_NUMBER: builtins.int
    ANDROID_TEST_LOOP_FIELD_NUMBER: builtins.int
    IOS_XC_TEST_FIELD_NUMBER: builtins.int
    IOS_TEST_LOOP_FIELD_NUMBER: builtins.int
    DISABLE_VIDEO_RECORDING_FIELD_NUMBER: builtins.int
    DISABLE_PERFORMANCE_METRICS_FIELD_NUMBER: builtins.int
    @property
    def test_timeout(self) -> google.protobuf.duration_pb2.Duration:
        """Max time a test execution is allowed to run before it is
        automatically cancelled.
        The default value is 5 min.
        """
        pass
    @property
    def test_setup(self) -> global___TestSetup:
        """Test setup requirements for Android e.g. files to install, bootstrap
        scripts.
        """
        pass
    @property
    def ios_test_setup(self) -> global___IosTestSetup:
        """Test setup requirements for iOS."""
        pass
    @property
    def android_instrumentation_test(self) -> global___AndroidInstrumentationTest:
        """An Android instrumentation test."""
        pass
    @property
    def android_robo_test(self) -> global___AndroidRoboTest:
        """An Android robo test."""
        pass
    @property
    def android_test_loop(self) -> global___AndroidTestLoop:
        """An Android Application with a Test Loop."""
        pass
    @property
    def ios_xc_test(self) -> global___IosXcTest:
        """An iOS XCTest, via an .xctestrun file."""
        pass
    @property
    def ios_test_loop(self) -> global___IosTestLoop:
        """An iOS application with a test loop."""
        pass
    disable_video_recording: builtins.bool = ...
    """Disables video recording. May reduce test latency."""

    disable_performance_metrics: builtins.bool = ...
    """Disables performance metrics recording. May reduce test latency."""

    def __init__(self,
        *,
        test_timeout : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        test_setup : typing.Optional[global___TestSetup] = ...,
        ios_test_setup : typing.Optional[global___IosTestSetup] = ...,
        android_instrumentation_test : typing.Optional[global___AndroidInstrumentationTest] = ...,
        android_robo_test : typing.Optional[global___AndroidRoboTest] = ...,
        android_test_loop : typing.Optional[global___AndroidTestLoop] = ...,
        ios_xc_test : typing.Optional[global___IosXcTest] = ...,
        ios_test_loop : typing.Optional[global___IosTestLoop] = ...,
        disable_video_recording : builtins.bool = ...,
        disable_performance_metrics : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["android_instrumentation_test",b"android_instrumentation_test","android_robo_test",b"android_robo_test","android_test_loop",b"android_test_loop","ios_test_loop",b"ios_test_loop","ios_test_setup",b"ios_test_setup","ios_xc_test",b"ios_xc_test","setup",b"setup","test",b"test","test_setup",b"test_setup","test_timeout",b"test_timeout"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["android_instrumentation_test",b"android_instrumentation_test","android_robo_test",b"android_robo_test","android_test_loop",b"android_test_loop","disable_performance_metrics",b"disable_performance_metrics","disable_video_recording",b"disable_video_recording","ios_test_loop",b"ios_test_loop","ios_test_setup",b"ios_test_setup","ios_xc_test",b"ios_xc_test","setup",b"setup","test",b"test","test_setup",b"test_setup","test_timeout",b"test_timeout"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["setup",b"setup"]) -> typing.Optional[typing_extensions.Literal["test_setup","ios_test_setup"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["test",b"test"]) -> typing.Optional[typing_extensions.Literal["android_instrumentation_test","android_robo_test","android_test_loop","ios_xc_test","ios_test_loop"]]: ...
global___TestSpecification = TestSpecification

class SystraceSetup(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DURATION_SECONDS_FIELD_NUMBER: builtins.int
    duration_seconds: builtins.int = ...
    """Systrace duration in seconds.
    Should be between 1 and 30 seconds. 0 disables systrace.
    """

    def __init__(self,
        *,
        duration_seconds : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["duration_seconds",b"duration_seconds"]) -> None: ...
global___SystraceSetup = SystraceSetup

class TestSetup(google.protobuf.message.Message):
    """A description of how to set up the Android device prior to running the test."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FILES_TO_PUSH_FIELD_NUMBER: builtins.int
    DIRECTORIES_TO_PULL_FIELD_NUMBER: builtins.int
    ADDITIONAL_APKS_FIELD_NUMBER: builtins.int
    ACCOUNT_FIELD_NUMBER: builtins.int
    NETWORK_PROFILE_FIELD_NUMBER: builtins.int
    ENVIRONMENT_VARIABLES_FIELD_NUMBER: builtins.int
    SYSTRACE_FIELD_NUMBER: builtins.int
    DONT_AUTOGRANT_PERMISSIONS_FIELD_NUMBER: builtins.int
    @property
    def files_to_push(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DeviceFile]:
        """List of files to push to the device before starting the test."""
        pass
    @property
    def directories_to_pull(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """List of directories on the device to upload to GCS at the end of the test;
        they must be absolute paths under /sdcard, /storage or /data/local/tmp.
        Path names are restricted to characters a-z A-Z 0-9 _ - . + and /

        Note: The paths /sdcard and /data will be made available and treated as
        implicit path substitutions. E.g. if /sdcard on a particular device does
        not map to external storage, the system will replace it with the external
        storage path prefix for that device.
        """
        pass
    @property
    def additional_apks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Apk]:
        """APKs to install in addition to those being directly tested.
        Currently capped at 100.
        """
        pass
    @property
    def account(self) -> global___Account:
        """The device will be logged in on this account for the duration of the test."""
        pass
    network_profile: typing.Text = ...
    """The network traffic profile used for running the test.
    Available network profiles can be queried by using the
    NETWORK_CONFIGURATION environment type when calling
    TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
    """

    @property
    def environment_variables(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EnvironmentVariable]:
        """Environment variables to set for the test (only applicable for
        instrumentation tests).
        """
        pass
    @property
    def systrace(self) -> global___SystraceSetup:
        """Systrace configuration for the run.
        If set a systrace will be taken, starting on test start and lasting for the
        configured duration. The systrace file thus obtained is put in the results
        bucket together with the other artifacts from the run.
        """
        pass
    dont_autogrant_permissions: builtins.bool = ...
    """Whether to prevent all runtime permissions to be granted at app install"""

    def __init__(self,
        *,
        files_to_push : typing.Optional[typing.Iterable[global___DeviceFile]] = ...,
        directories_to_pull : typing.Optional[typing.Iterable[typing.Text]] = ...,
        additional_apks : typing.Optional[typing.Iterable[global___Apk]] = ...,
        account : typing.Optional[global___Account] = ...,
        network_profile : typing.Text = ...,
        environment_variables : typing.Optional[typing.Iterable[global___EnvironmentVariable]] = ...,
        systrace : typing.Optional[global___SystraceSetup] = ...,
        dont_autogrant_permissions : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["account",b"account","systrace",b"systrace"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["account",b"account","additional_apks",b"additional_apks","directories_to_pull",b"directories_to_pull","dont_autogrant_permissions",b"dont_autogrant_permissions","environment_variables",b"environment_variables","files_to_push",b"files_to_push","network_profile",b"network_profile","systrace",b"systrace"]) -> None: ...
global___TestSetup = TestSetup

class IosTestSetup(google.protobuf.message.Message):
    """A description of how to set up an iOS device prior to running the test."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NETWORK_PROFILE_FIELD_NUMBER: builtins.int
    ADDITIONAL_IPAS_FIELD_NUMBER: builtins.int
    PUSH_FILES_FIELD_NUMBER: builtins.int
    PULL_DIRECTORIES_FIELD_NUMBER: builtins.int
    network_profile: typing.Text = ...
    """The network traffic profile used for running the test.
    Available network profiles can be queried by using the
    NETWORK_CONFIGURATION environment type when calling
    TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
    """

    @property
    def additional_ipas(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___FileReference]:
        """iOS apps to install in addition to those being directly tested."""
        pass
    @property
    def push_files(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IosDeviceFile]:
        """List of files to push to the device before starting the test."""
        pass
    @property
    def pull_directories(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IosDeviceFile]:
        """List of directories on the device to upload to Cloud Storage at the end of
        the test.

        Directories should either be in a shared directory
        (e.g. /private/var/mobile/Media) or within an accessible directory inside
        the app's filesystem (e.g. /Documents) by specifying the bundle id.
        """
        pass
    def __init__(self,
        *,
        network_profile : typing.Text = ...,
        additional_ipas : typing.Optional[typing.Iterable[global___FileReference]] = ...,
        push_files : typing.Optional[typing.Iterable[global___IosDeviceFile]] = ...,
        pull_directories : typing.Optional[typing.Iterable[global___IosDeviceFile]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["additional_ipas",b"additional_ipas","network_profile",b"network_profile","pull_directories",b"pull_directories","push_files",b"push_files"]) -> None: ...
global___IosTestSetup = IosTestSetup

class EnvironmentVariable(google.protobuf.message.Message):
    """A key-value pair passed as an environment variable to the test."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    KEY_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    key: typing.Text = ...
    """Key for the environment variable."""

    value: typing.Text = ...
    """Value for the environment variable."""

    def __init__(self,
        *,
        key : typing.Text = ...,
        value : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...
global___EnvironmentVariable = EnvironmentVariable

class Account(google.protobuf.message.Message):
    """Identifies an account and how to log into it."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GOOGLE_AUTO_FIELD_NUMBER: builtins.int
    @property
    def google_auto(self) -> global___GoogleAuto:
        """An automatic google login account."""
        pass
    def __init__(self,
        *,
        google_auto : typing.Optional[global___GoogleAuto] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["account_type",b"account_type","google_auto",b"google_auto"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["account_type",b"account_type","google_auto",b"google_auto"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["account_type",b"account_type"]) -> typing.Optional[typing_extensions.Literal["google_auto"]]: ...
global___Account = Account

class GoogleAuto(google.protobuf.message.Message):
    """Enables automatic Google account login.
    If set, the service automatically generates a Google test account and adds
    it to the device, before executing the test. Note that test accounts might be
    reused.
    Many applications show their full set of functionalities when an account is
    present on the device. Logging into the device with these generated accounts
    allows testing more functionalities.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___GoogleAuto = GoogleAuto

class Apk(google.protobuf.message.Message):
    """An Android package file to install."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    LOCATION_FIELD_NUMBER: builtins.int
    PACKAGE_NAME_FIELD_NUMBER: builtins.int
    @property
    def location(self) -> global___FileReference:
        """The path to an APK to be installed on the device before the test begins."""
        pass
    package_name: typing.Text = ...
    """The java package for the APK to be installed.
    Value is determined by examining the application's manifest.
    """

    def __init__(self,
        *,
        location : typing.Optional[global___FileReference] = ...,
        package_name : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["location",b"location"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["location",b"location","package_name",b"package_name"]) -> None: ...
global___Apk = Apk

class AppBundle(google.protobuf.message.Message):
    """An Android App Bundle file format, containing a BundleConfig.pb file,
    a base module directory, zero or more dynamic feature module directories.
    <p>See https://developer.android.com/guide/app-bundle/build for guidance on
    building App Bundles.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BUNDLE_LOCATION_FIELD_NUMBER: builtins.int
    @property
    def bundle_location(self) -> global___FileReference:
        """.aab file representing the app bundle under test."""
        pass
    def __init__(self,
        *,
        bundle_location : typing.Optional[global___FileReference] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bundle",b"bundle","bundle_location",b"bundle_location"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bundle",b"bundle","bundle_location",b"bundle_location"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["bundle",b"bundle"]) -> typing.Optional[typing_extensions.Literal["bundle_location"]]: ...
global___AppBundle = AppBundle

class DeviceFile(google.protobuf.message.Message):
    """A single device file description."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    OBB_FILE_FIELD_NUMBER: builtins.int
    REGULAR_FILE_FIELD_NUMBER: builtins.int
    @property
    def obb_file(self) -> global___ObbFile:
        """A reference to an opaque binary blob file."""
        pass
    @property
    def regular_file(self) -> global___RegularFile:
        """A reference to a regular file."""
        pass
    def __init__(self,
        *,
        obb_file : typing.Optional[global___ObbFile] = ...,
        regular_file : typing.Optional[global___RegularFile] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["device_file",b"device_file","obb_file",b"obb_file","regular_file",b"regular_file"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["device_file",b"device_file","obb_file",b"obb_file","regular_file",b"regular_file"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["device_file",b"device_file"]) -> typing.Optional[typing_extensions.Literal["obb_file","regular_file"]]: ...
global___DeviceFile = DeviceFile

class ObbFile(google.protobuf.message.Message):
    """An opaque binary blob file to install on the device before the test starts."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    OBB_FILE_NAME_FIELD_NUMBER: builtins.int
    OBB_FIELD_NUMBER: builtins.int
    obb_file_name: typing.Text = ...
    """Required. OBB file name which must conform to the format as specified by
    Android
    e.g. [main|patch].0300110.com.example.android.obb
    which will be installed into
      \\<shared-storage\\>/Android/obb/\\<package-name\\>/
    on the device.
    """

    @property
    def obb(self) -> global___FileReference:
        """Required. Opaque Binary Blob (OBB) file(s) to install on the device."""
        pass
    def __init__(self,
        *,
        obb_file_name : typing.Text = ...,
        obb : typing.Optional[global___FileReference] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["obb",b"obb"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["obb",b"obb","obb_file_name",b"obb_file_name"]) -> None: ...
global___ObbFile = ObbFile

class RegularFile(google.protobuf.message.Message):
    """A file or directory to install on the device before the test starts."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONTENT_FIELD_NUMBER: builtins.int
    DEVICE_PATH_FIELD_NUMBER: builtins.int
    @property
    def content(self) -> global___FileReference:
        """Required. The source file."""
        pass
    device_path: typing.Text = ...
    """Required. Where to put the content on the device. Must be an absolute,
    allowlisted path. If the file exists, it will be replaced.
    The following device-side directories and any of their subdirectories are
    allowlisted:
    <p>${EXTERNAL_STORAGE}, /sdcard, or /storage</p>
    <p>${ANDROID_DATA}/local/tmp, or /data/local/tmp</p>
    <p>Specifying a path outside of these directory trees is invalid.

    <p> The paths /sdcard and /data will be made available and treated as
    implicit path substitutions. E.g. if /sdcard on a particular device does
    not map to external storage, the system will replace it with the external
    storage path prefix for that device and copy the file there.

    <p> It is strongly advised to use the <a href=
    "http://developer.android.com/reference/android/os/Environment.html">
    Environment API</a> in app and test code to access files on the device in a
    portable way.
    """

    def __init__(self,
        *,
        content : typing.Optional[global___FileReference] = ...,
        device_path : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["content",b"content"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["content",b"content","device_path",b"device_path"]) -> None: ...
global___RegularFile = RegularFile

class IosDeviceFile(google.protobuf.message.Message):
    """A file or directory to install on the device before the test starts."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONTENT_FIELD_NUMBER: builtins.int
    BUNDLE_ID_FIELD_NUMBER: builtins.int
    DEVICE_PATH_FIELD_NUMBER: builtins.int
    @property
    def content(self) -> global___FileReference:
        """The source file"""
        pass
    bundle_id: typing.Text = ...
    """The bundle id of the app where this file lives.

    iOS apps sandbox their own filesystem, so app files must specify which app
    installed on the device.
    """

    device_path: typing.Text = ...
    """Location of the file on the device, inside the app's sandboxed filesystem"""

    def __init__(self,
        *,
        content : typing.Optional[global___FileReference] = ...,
        bundle_id : typing.Text = ...,
        device_path : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["content",b"content"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bundle_id",b"bundle_id","content",b"content","device_path",b"device_path"]) -> None: ...
global___IosDeviceFile = IosDeviceFile

class AndroidTestLoop(google.protobuf.message.Message):
    """A test of an Android Application with a Test Loop.
    The intent \\<intent-name\\> will be implicitly added, since Games is the only
    user of this api, for the time being.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    APP_APK_FIELD_NUMBER: builtins.int
    APP_BUNDLE_FIELD_NUMBER: builtins.int
    APP_PACKAGE_ID_FIELD_NUMBER: builtins.int
    SCENARIOS_FIELD_NUMBER: builtins.int
    SCENARIO_LABELS_FIELD_NUMBER: builtins.int
    @property
    def app_apk(self) -> global___FileReference:
        """The APK for the application under test."""
        pass
    @property
    def app_bundle(self) -> global___AppBundle:
        """A multi-apk app bundle for the application under test."""
        pass
    app_package_id: typing.Text = ...
    """The java package for the application under test.
    The default is determined by examining the application's manifest.
    """

    @property
    def scenarios(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """The list of scenarios that should be run during the test.
        The default is all test loops, derived from the application's
        manifest.
        """
        pass
    @property
    def scenario_labels(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The list of scenario labels that should be run during the test.
        The scenario labels should map to labels defined in the application's
        manifest. For example, player_experience and
        com.google.test.loops.player_experience add all of the loops labeled in the
        manifest with the com.google.test.loops.player_experience name to the
        execution.
        Scenarios can also be specified in the scenarios field.
        """
        pass
    def __init__(self,
        *,
        app_apk : typing.Optional[global___FileReference] = ...,
        app_bundle : typing.Optional[global___AppBundle] = ...,
        app_package_id : typing.Text = ...,
        scenarios : typing.Optional[typing.Iterable[builtins.int]] = ...,
        scenario_labels : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["app_apk",b"app_apk","app_bundle",b"app_bundle","app_under_test",b"app_under_test"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["app_apk",b"app_apk","app_bundle",b"app_bundle","app_package_id",b"app_package_id","app_under_test",b"app_under_test","scenario_labels",b"scenario_labels","scenarios",b"scenarios"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["app_under_test",b"app_under_test"]) -> typing.Optional[typing_extensions.Literal["app_apk","app_bundle"]]: ...
global___AndroidTestLoop = AndroidTestLoop

class IosXcTest(google.protobuf.message.Message):
    """A test of an iOS application that uses the XCTest framework.
    Xcode supports the option to "build for testing", which generates an
    .xctestrun file that contains a test specification (arguments, test methods,
    etc). This test type accepts a zip file containing the .xctestrun file and
    the corresponding contents of the Build/Products directory that contains all
    the binaries needed to run the tests.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TESTS_ZIP_FIELD_NUMBER: builtins.int
    XCTESTRUN_FIELD_NUMBER: builtins.int
    XCODE_VERSION_FIELD_NUMBER: builtins.int
    APP_BUNDLE_ID_FIELD_NUMBER: builtins.int
    TEST_SPECIAL_ENTITLEMENTS_FIELD_NUMBER: builtins.int
    @property
    def tests_zip(self) -> global___FileReference:
        """Required. The .zip containing the .xctestrun file and the contents of the
        DerivedData/Build/Products directory.
        The .xctestrun file in this zip is ignored if the xctestrun field is
        specified.
        """
        pass
    @property
    def xctestrun(self) -> global___FileReference:
        """An .xctestrun file that will override the .xctestrun file in the
        tests zip. Because the .xctestrun file contains environment variables along
        with test methods to run and/or ignore, this can be useful for sharding
        tests. Default is taken from the tests zip.
        """
        pass
    xcode_version: typing.Text = ...
    """The Xcode version that should be used for the test.
    Use the TestEnvironmentDiscoveryService to get supported options.
    Defaults to the latest Xcode version Firebase Test Lab supports.
    """

    app_bundle_id: typing.Text = ...
    """Output only. The bundle id for the application under test."""

    test_special_entitlements: builtins.bool = ...
    """The option to test special app entitlements. Setting this would re-sign the
    app having special entitlements with an explicit application-identifier.
    Currently supports testing aps-environment entitlement.
    """

    def __init__(self,
        *,
        tests_zip : typing.Optional[global___FileReference] = ...,
        xctestrun : typing.Optional[global___FileReference] = ...,
        xcode_version : typing.Text = ...,
        app_bundle_id : typing.Text = ...,
        test_special_entitlements : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["tests_zip",b"tests_zip","xctestrun",b"xctestrun"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["app_bundle_id",b"app_bundle_id","test_special_entitlements",b"test_special_entitlements","tests_zip",b"tests_zip","xcode_version",b"xcode_version","xctestrun",b"xctestrun"]) -> None: ...
global___IosXcTest = IosXcTest

class IosTestLoop(google.protobuf.message.Message):
    """A test of an iOS application that implements one or more game loop scenarios.
    This test type accepts an archived application (.ipa file) and a list of
    integer scenarios that will be executed on the app sequentially.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    APP_IPA_FIELD_NUMBER: builtins.int
    SCENARIOS_FIELD_NUMBER: builtins.int
    APP_BUNDLE_ID_FIELD_NUMBER: builtins.int
    @property
    def app_ipa(self) -> global___FileReference:
        """Required. The .ipa of the application to test."""
        pass
    @property
    def scenarios(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """The list of scenarios that should be run during the test. Defaults to the
        single scenario 0 if unspecified.
        """
        pass
    app_bundle_id: typing.Text = ...
    """Output only. The bundle id for the application under test."""

    def __init__(self,
        *,
        app_ipa : typing.Optional[global___FileReference] = ...,
        scenarios : typing.Optional[typing.Iterable[builtins.int]] = ...,
        app_bundle_id : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["app_ipa",b"app_ipa"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["app_bundle_id",b"app_bundle_id","app_ipa",b"app_ipa","scenarios",b"scenarios"]) -> None: ...
global___IosTestLoop = IosTestLoop

class AndroidInstrumentationTest(google.protobuf.message.Message):
    """A test of an Android application that can control an Android component
    independently of its normal lifecycle.
    Android instrumentation tests run an application APK and test APK inside the
    same process on a virtual or physical AndroidDevice.  They also specify
    a test runner class, such as com.google.GoogleTestRunner, which can vary
    on the specific instrumentation framework chosen.

    See <http://developer.android.com/tools/testing/testing_android.html> for
    more information on types of Android tests.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    APP_APK_FIELD_NUMBER: builtins.int
    APP_BUNDLE_FIELD_NUMBER: builtins.int
    TEST_APK_FIELD_NUMBER: builtins.int
    APP_PACKAGE_ID_FIELD_NUMBER: builtins.int
    TEST_PACKAGE_ID_FIELD_NUMBER: builtins.int
    TEST_RUNNER_CLASS_FIELD_NUMBER: builtins.int
    TEST_TARGETS_FIELD_NUMBER: builtins.int
    ORCHESTRATOR_OPTION_FIELD_NUMBER: builtins.int
    SHARDING_OPTION_FIELD_NUMBER: builtins.int
    @property
    def app_apk(self) -> global___FileReference:
        """The APK for the application under test."""
        pass
    @property
    def app_bundle(self) -> global___AppBundle:
        """A multi-apk app bundle for the application under test."""
        pass
    @property
    def test_apk(self) -> global___FileReference:
        """Required. The APK containing the test code to be executed."""
        pass
    app_package_id: typing.Text = ...
    """The java package for the application under test.
    The default value is determined by examining the application's manifest.
    """

    test_package_id: typing.Text = ...
    """The java package for the test to be executed.
    The default value is determined by examining the application's manifest.
    """

    test_runner_class: typing.Text = ...
    """The InstrumentationTestRunner class.
    The default value is determined by examining the application's manifest.
    """

    @property
    def test_targets(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Each target must be fully qualified with the package name or class name,
        in one of these formats:
         - "package package_name"
         - "class package_name.class_name"
         - "class package_name.class_name#method_name"

        If empty, all targets in the module will be run.
        """
        pass
    orchestrator_option: global___OrchestratorOption.ValueType = ...
    """The option of whether running each test within its own invocation of
    instrumentation with Android Test Orchestrator or not.
    ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
    higher! **
    Orchestrator offers the following benefits:
     - No shared state
     - Crashes are isolated
     - Logs are scoped per test

    See
    <https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator>
    for more information about Android Test Orchestrator.

    If not set, the test will be run without the orchestrator.
    """

    @property
    def sharding_option(self) -> global___ShardingOption:
        """The option to run tests in multiple shards in parallel."""
        pass
    def __init__(self,
        *,
        app_apk : typing.Optional[global___FileReference] = ...,
        app_bundle : typing.Optional[global___AppBundle] = ...,
        test_apk : typing.Optional[global___FileReference] = ...,
        app_package_id : typing.Text = ...,
        test_package_id : typing.Text = ...,
        test_runner_class : typing.Text = ...,
        test_targets : typing.Optional[typing.Iterable[typing.Text]] = ...,
        orchestrator_option : global___OrchestratorOption.ValueType = ...,
        sharding_option : typing.Optional[global___ShardingOption] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["app_apk",b"app_apk","app_bundle",b"app_bundle","app_under_test",b"app_under_test","sharding_option",b"sharding_option","test_apk",b"test_apk"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["app_apk",b"app_apk","app_bundle",b"app_bundle","app_package_id",b"app_package_id","app_under_test",b"app_under_test","orchestrator_option",b"orchestrator_option","sharding_option",b"sharding_option","test_apk",b"test_apk","test_package_id",b"test_package_id","test_runner_class",b"test_runner_class","test_targets",b"test_targets"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["app_under_test",b"app_under_test"]) -> typing.Optional[typing_extensions.Literal["app_apk","app_bundle"]]: ...
global___AndroidInstrumentationTest = AndroidInstrumentationTest

class AndroidRoboTest(google.protobuf.message.Message):
    """A test of an android application that explores the application on a virtual
    or physical Android Device, finding culprits and crashes as it goes.
    Next tag: 30
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    APP_APK_FIELD_NUMBER: builtins.int
    APP_BUNDLE_FIELD_NUMBER: builtins.int
    APP_PACKAGE_ID_FIELD_NUMBER: builtins.int
    APP_INITIAL_ACTIVITY_FIELD_NUMBER: builtins.int
    MAX_DEPTH_FIELD_NUMBER: builtins.int
    MAX_STEPS_FIELD_NUMBER: builtins.int
    ROBO_DIRECTIVES_FIELD_NUMBER: builtins.int
    ROBO_SCRIPT_FIELD_NUMBER: builtins.int
    STARTING_INTENTS_FIELD_NUMBER: builtins.int
    @property
    def app_apk(self) -> global___FileReference:
        """The APK for the application under test."""
        pass
    @property
    def app_bundle(self) -> global___AppBundle:
        """A multi-apk app bundle for the application under test."""
        pass
    app_package_id: typing.Text = ...
    """The java package for the application under test.
    The default value is determined by examining the application's manifest.
    """

    app_initial_activity: typing.Text = ...
    """The initial activity that should be used to start the app."""

    max_depth: builtins.int = ...
    """The max depth of the traversal stack Robo can explore. Needs to be at least
    2 to make Robo explore the app beyond the first activity.
    Default is 50.
    """

    max_steps: builtins.int = ...
    """The max number of steps Robo can execute.
    Default is no limit.
    """

    @property
    def robo_directives(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RoboDirective]:
        """A set of directives Robo should apply during the crawl.
        This allows users to customize the crawl. For example, the username and
        password for a test account can be provided.
        """
        pass
    @property
    def robo_script(self) -> global___FileReference:
        """A JSON file with a sequence of actions Robo should perform as a prologue
        for the crawl.
        """
        pass
    @property
    def starting_intents(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RoboStartingIntent]:
        """The intents used to launch the app for the crawl.
        If none are provided, then the main launcher activity is launched.
        If some are provided, then only those provided are launched (the main
        launcher activity must be provided explicitly).
        """
        pass
    def __init__(self,
        *,
        app_apk : typing.Optional[global___FileReference] = ...,
        app_bundle : typing.Optional[global___AppBundle] = ...,
        app_package_id : typing.Text = ...,
        app_initial_activity : typing.Text = ...,
        max_depth : builtins.int = ...,
        max_steps : builtins.int = ...,
        robo_directives : typing.Optional[typing.Iterable[global___RoboDirective]] = ...,
        robo_script : typing.Optional[global___FileReference] = ...,
        starting_intents : typing.Optional[typing.Iterable[global___RoboStartingIntent]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["app_apk",b"app_apk","app_bundle",b"app_bundle","app_under_test",b"app_under_test","robo_script",b"robo_script"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["app_apk",b"app_apk","app_bundle",b"app_bundle","app_initial_activity",b"app_initial_activity","app_package_id",b"app_package_id","app_under_test",b"app_under_test","max_depth",b"max_depth","max_steps",b"max_steps","robo_directives",b"robo_directives","robo_script",b"robo_script","starting_intents",b"starting_intents"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["app_under_test",b"app_under_test"]) -> typing.Optional[typing_extensions.Literal["app_apk","app_bundle"]]: ...
global___AndroidRoboTest = AndroidRoboTest

class RoboDirective(google.protobuf.message.Message):
    """Directs Robo to interact with a specific UI element if it is encountered
    during the crawl. Currently, Robo can perform text entry or element click.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESOURCE_NAME_FIELD_NUMBER: builtins.int
    INPUT_TEXT_FIELD_NUMBER: builtins.int
    ACTION_TYPE_FIELD_NUMBER: builtins.int
    resource_name: typing.Text = ...
    """Required. The android resource name of the target UI element.
    For example,
       in Java: R.string.foo
       in xml: @string/foo
    Only the "foo" part is needed.
    Reference doc:
    https://developer.android.com/guide/topics/resources/accessing-resources.html
    """

    input_text: typing.Text = ...
    """The text that Robo is directed to set. If left empty, the directive will be
    treated as a CLICK on the element matching the resource_name.
    """

    action_type: global___RoboActionType.ValueType = ...
    """Required. The type of action that Robo should perform on the specified
    element.
    """

    def __init__(self,
        *,
        resource_name : typing.Text = ...,
        input_text : typing.Text = ...,
        action_type : global___RoboActionType.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["action_type",b"action_type","input_text",b"input_text","resource_name",b"resource_name"]) -> None: ...
global___RoboDirective = RoboDirective

class RoboStartingIntent(google.protobuf.message.Message):
    """Message for specifying the start activities to crawl."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    LAUNCHER_ACTIVITY_FIELD_NUMBER: builtins.int
    START_ACTIVITY_FIELD_NUMBER: builtins.int
    TIMEOUT_FIELD_NUMBER: builtins.int
    @property
    def launcher_activity(self) -> global___LauncherActivityIntent:
        """An intent that starts the main launcher activity."""
        pass
    @property
    def start_activity(self) -> global___StartActivityIntent:
        """An intent that starts an activity with specific details."""
        pass
    @property
    def timeout(self) -> google.protobuf.duration_pb2.Duration:
        """Timeout in seconds for each intent."""
        pass
    def __init__(self,
        *,
        launcher_activity : typing.Optional[global___LauncherActivityIntent] = ...,
        start_activity : typing.Optional[global___StartActivityIntent] = ...,
        timeout : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["launcher_activity",b"launcher_activity","start_activity",b"start_activity","starting_intent",b"starting_intent","timeout",b"timeout"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["launcher_activity",b"launcher_activity","start_activity",b"start_activity","starting_intent",b"starting_intent","timeout",b"timeout"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["starting_intent",b"starting_intent"]) -> typing.Optional[typing_extensions.Literal["launcher_activity","start_activity"]]: ...
global___RoboStartingIntent = RoboStartingIntent

class LauncherActivityIntent(google.protobuf.message.Message):
    """Specifies an intent that starts the main launcher activity."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___LauncherActivityIntent = LauncherActivityIntent

class StartActivityIntent(google.protobuf.message.Message):
    """A starting intent specified by an action, uri, and categories."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ACTION_FIELD_NUMBER: builtins.int
    URI_FIELD_NUMBER: builtins.int
    CATEGORIES_FIELD_NUMBER: builtins.int
    action: typing.Text = ...
    """Action name.
    Required for START_ACTIVITY.
    """

    uri: typing.Text = ...
    """URI for the action."""

    @property
    def categories(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Intent categories to set on the intent."""
        pass
    def __init__(self,
        *,
        action : typing.Text = ...,
        uri : typing.Text = ...,
        categories : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["action",b"action","categories",b"categories","uri",b"uri"]) -> None: ...
global___StartActivityIntent = StartActivityIntent

class EnvironmentMatrix(google.protobuf.message.Message):
    """The matrix of environments in which the test is to be executed."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANDROID_MATRIX_FIELD_NUMBER: builtins.int
    ANDROID_DEVICE_LIST_FIELD_NUMBER: builtins.int
    IOS_DEVICE_LIST_FIELD_NUMBER: builtins.int
    @property
    def android_matrix(self) -> global___AndroidMatrix:
        """A matrix of Android devices."""
        pass
    @property
    def android_device_list(self) -> global___AndroidDeviceList:
        """A list of Android devices; the test will be run only on the specified
        devices.
        """
        pass
    @property
    def ios_device_list(self) -> global___IosDeviceList:
        """A list of iOS devices."""
        pass
    def __init__(self,
        *,
        android_matrix : typing.Optional[global___AndroidMatrix] = ...,
        android_device_list : typing.Optional[global___AndroidDeviceList] = ...,
        ios_device_list : typing.Optional[global___IosDeviceList] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["android_device_list",b"android_device_list","android_matrix",b"android_matrix","environment_matrix",b"environment_matrix","ios_device_list",b"ios_device_list"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["android_device_list",b"android_device_list","android_matrix",b"android_matrix","environment_matrix",b"environment_matrix","ios_device_list",b"ios_device_list"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["environment_matrix",b"environment_matrix"]) -> typing.Optional[typing_extensions.Literal["android_matrix","android_device_list","ios_device_list"]]: ...
global___EnvironmentMatrix = EnvironmentMatrix

class AndroidDeviceList(google.protobuf.message.Message):
    """A list of Android device configurations in which the test is to be executed."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANDROID_DEVICES_FIELD_NUMBER: builtins.int
    @property
    def android_devices(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AndroidDevice]:
        """Required. A list of Android devices."""
        pass
    def __init__(self,
        *,
        android_devices : typing.Optional[typing.Iterable[global___AndroidDevice]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["android_devices",b"android_devices"]) -> None: ...
global___AndroidDeviceList = AndroidDeviceList

class IosDeviceList(google.protobuf.message.Message):
    """A list of iOS device configurations in which the test is to be executed."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    IOS_DEVICES_FIELD_NUMBER: builtins.int
    @property
    def ios_devices(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IosDevice]:
        """Required. A list of iOS devices."""
        pass
    def __init__(self,
        *,
        ios_devices : typing.Optional[typing.Iterable[global___IosDevice]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ios_devices",b"ios_devices"]) -> None: ...
global___IosDeviceList = IosDeviceList

class AndroidMatrix(google.protobuf.message.Message):
    """A set of Android device configuration permutations is defined by the
    the cross-product of the given axes. Internally, the given AndroidMatrix
    will be expanded into a set of AndroidDevices.

    Only supported permutations will be instantiated.  Invalid permutations
    (e.g., incompatible models/versions) are ignored.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANDROID_MODEL_IDS_FIELD_NUMBER: builtins.int
    ANDROID_VERSION_IDS_FIELD_NUMBER: builtins.int
    LOCALES_FIELD_NUMBER: builtins.int
    ORIENTATIONS_FIELD_NUMBER: builtins.int
    @property
    def android_model_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Required. The ids of the set of Android device to be used.
        Use the TestEnvironmentDiscoveryService to get supported options.
        """
        pass
    @property
    def android_version_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Required. The ids of the set of Android OS version to be used.
        Use the TestEnvironmentDiscoveryService to get supported options.
        """
        pass
    @property
    def locales(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Required. The set of locales the test device will enable for testing.
        Use the TestEnvironmentDiscoveryService to get supported options.
        """
        pass
    @property
    def orientations(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Required. The set of orientations to test with.
        Use the TestEnvironmentDiscoveryService to get supported options.
        """
        pass
    def __init__(self,
        *,
        android_model_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        android_version_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        locales : typing.Optional[typing.Iterable[typing.Text]] = ...,
        orientations : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["android_model_ids",b"android_model_ids","android_version_ids",b"android_version_ids","locales",b"locales","orientations",b"orientations"]) -> None: ...
global___AndroidMatrix = AndroidMatrix

class ClientInfo(google.protobuf.message.Message):
    """Information about the client which invoked the test."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    CLIENT_INFO_DETAILS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Client name, such as gcloud."""

    @property
    def client_info_details(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ClientInfoDetail]:
        """The list of detailed information about client."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        client_info_details : typing.Optional[typing.Iterable[global___ClientInfoDetail]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["client_info_details",b"client_info_details","name",b"name"]) -> None: ...
global___ClientInfo = ClientInfo

class ClientInfoDetail(google.protobuf.message.Message):
    """Key-value pair of detailed information about the client which invoked the
    test. Examples: {'Version', '1.0'}, {'Release Track', 'BETA'}.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    KEY_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    key: typing.Text = ...
    """Required. The key of detailed client information."""

    value: typing.Text = ...
    """Required. The value of detailed client information."""

    def __init__(self,
        *,
        key : typing.Text = ...,
        value : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...
global___ClientInfoDetail = ClientInfoDetail

class ResultStorage(google.protobuf.message.Message):
    """Locations where the results of running the test are stored."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GOOGLE_CLOUD_STORAGE_FIELD_NUMBER: builtins.int
    TOOL_RESULTS_HISTORY_FIELD_NUMBER: builtins.int
    TOOL_RESULTS_EXECUTION_FIELD_NUMBER: builtins.int
    RESULTS_URL_FIELD_NUMBER: builtins.int
    @property
    def google_cloud_storage(self) -> global___GoogleCloudStorage:
        """Required."""
        pass
    @property
    def tool_results_history(self) -> global___ToolResultsHistory:
        """The tool results history that contains the tool results execution that
        results are written to.

        If not provided, the service will choose an appropriate value.
        """
        pass
    @property
    def tool_results_execution(self) -> global___ToolResultsExecution:
        """Output only. The tool results execution that results are written to."""
        pass
    results_url: typing.Text = ...
    """Output only. URL to the results in the Firebase Web Console."""

    def __init__(self,
        *,
        google_cloud_storage : typing.Optional[global___GoogleCloudStorage] = ...,
        tool_results_history : typing.Optional[global___ToolResultsHistory] = ...,
        tool_results_execution : typing.Optional[global___ToolResultsExecution] = ...,
        results_url : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["google_cloud_storage",b"google_cloud_storage","tool_results_execution",b"tool_results_execution","tool_results_history",b"tool_results_history"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["google_cloud_storage",b"google_cloud_storage","results_url",b"results_url","tool_results_execution",b"tool_results_execution","tool_results_history",b"tool_results_history"]) -> None: ...
global___ResultStorage = ResultStorage

class ToolResultsHistory(google.protobuf.message.Message):
    """Represents a tool results history resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    HISTORY_ID_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Required. The cloud project that owns the tool results history."""

    history_id: typing.Text = ...
    """Required. A tool results history ID."""

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        history_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["history_id",b"history_id","project_id",b"project_id"]) -> None: ...
global___ToolResultsHistory = ToolResultsHistory

class ToolResultsExecution(google.protobuf.message.Message):
    """Represents a tool results execution resource.

    This has the results of a TestMatrix.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    HISTORY_ID_FIELD_NUMBER: builtins.int
    EXECUTION_ID_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Output only. The cloud project that owns the tool results execution."""

    history_id: typing.Text = ...
    """Output only. A tool results history ID."""

    execution_id: typing.Text = ...
    """Output only. A tool results execution ID."""

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        history_id : typing.Text = ...,
        execution_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["execution_id",b"execution_id","history_id",b"history_id","project_id",b"project_id"]) -> None: ...
global___ToolResultsExecution = ToolResultsExecution

class ToolResultsStep(google.protobuf.message.Message):
    """Represents a tool results step resource.

    This has the results of a TestExecution.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    HISTORY_ID_FIELD_NUMBER: builtins.int
    EXECUTION_ID_FIELD_NUMBER: builtins.int
    STEP_ID_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Output only. The cloud project that owns the tool results step."""

    history_id: typing.Text = ...
    """Output only. A tool results history ID."""

    execution_id: typing.Text = ...
    """Output only. A tool results execution ID."""

    step_id: typing.Text = ...
    """Output only. A tool results step ID."""

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        history_id : typing.Text = ...,
        execution_id : typing.Text = ...,
        step_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["execution_id",b"execution_id","history_id",b"history_id","project_id",b"project_id","step_id",b"step_id"]) -> None: ...
global___ToolResultsStep = ToolResultsStep

class GoogleCloudStorage(google.protobuf.message.Message):
    """A storage location within Google cloud storage (GCS)."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GCS_PATH_FIELD_NUMBER: builtins.int
    gcs_path: typing.Text = ...
    """Required. The path to a directory in GCS that will
    eventually contain the results for this test.
    The requesting user must have write access on the bucket in the supplied
    path.
    """

    def __init__(self,
        *,
        gcs_path : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["gcs_path",b"gcs_path"]) -> None: ...
global___GoogleCloudStorage = GoogleCloudStorage

class FileReference(google.protobuf.message.Message):
    """A reference to a file, used for user inputs."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GCS_PATH_FIELD_NUMBER: builtins.int
    gcs_path: typing.Text = ...
    """A path to a file in Google Cloud Storage.
    Example: gs://build-app-1414623860166/app%40debug-unaligned.apk
    These paths are expected to be url encoded (percent encoding)
    """

    def __init__(self,
        *,
        gcs_path : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["file",b"file","gcs_path",b"gcs_path"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["file",b"file","gcs_path",b"gcs_path"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["file",b"file"]) -> typing.Optional[typing_extensions.Literal["gcs_path"]]: ...
global___FileReference = FileReference

class Environment(google.protobuf.message.Message):
    """The environment in which the test is run."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANDROID_DEVICE_FIELD_NUMBER: builtins.int
    IOS_DEVICE_FIELD_NUMBER: builtins.int
    @property
    def android_device(self) -> global___AndroidDevice:
        """An Android device which must be used with an Android test."""
        pass
    @property
    def ios_device(self) -> global___IosDevice:
        """An iOS device which must be used with an iOS test."""
        pass
    def __init__(self,
        *,
        android_device : typing.Optional[global___AndroidDevice] = ...,
        ios_device : typing.Optional[global___IosDevice] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["android_device",b"android_device","environment",b"environment","ios_device",b"ios_device"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["android_device",b"android_device","environment",b"environment","ios_device",b"ios_device"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["environment",b"environment"]) -> typing.Optional[typing_extensions.Literal["android_device","ios_device"]]: ...
global___Environment = Environment

class AndroidDevice(google.protobuf.message.Message):
    """A single Android device."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANDROID_MODEL_ID_FIELD_NUMBER: builtins.int
    ANDROID_VERSION_ID_FIELD_NUMBER: builtins.int
    LOCALE_FIELD_NUMBER: builtins.int
    ORIENTATION_FIELD_NUMBER: builtins.int
    android_model_id: typing.Text = ...
    """Required. The id of the Android device to be used.
    Use the TestEnvironmentDiscoveryService to get supported options.
    """

    android_version_id: typing.Text = ...
    """Required. The id of the Android OS version to be used.
    Use the TestEnvironmentDiscoveryService to get supported options.
    """

    locale: typing.Text = ...
    """Required. The locale the test device used for testing.
    Use the TestEnvironmentDiscoveryService to get supported options.
    """

    orientation: typing.Text = ...
    """Required. How the device is oriented during the test.
    Use the TestEnvironmentDiscoveryService to get supported options.
    """

    def __init__(self,
        *,
        android_model_id : typing.Text = ...,
        android_version_id : typing.Text = ...,
        locale : typing.Text = ...,
        orientation : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["android_model_id",b"android_model_id","android_version_id",b"android_version_id","locale",b"locale","orientation",b"orientation"]) -> None: ...
global___AndroidDevice = AndroidDevice

class IosDevice(google.protobuf.message.Message):
    """A single iOS device."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    IOS_MODEL_ID_FIELD_NUMBER: builtins.int
    IOS_VERSION_ID_FIELD_NUMBER: builtins.int
    LOCALE_FIELD_NUMBER: builtins.int
    ORIENTATION_FIELD_NUMBER: builtins.int
    ios_model_id: typing.Text = ...
    """Required. The id of the iOS device to be used.
    Use the TestEnvironmentDiscoveryService to get supported options.
    """

    ios_version_id: typing.Text = ...
    """Required. The id of the iOS major software version to be used.
    Use the TestEnvironmentDiscoveryService to get supported options.
    """

    locale: typing.Text = ...
    """Required. The locale the test device used for testing.
    Use the TestEnvironmentDiscoveryService to get supported options.
    """

    orientation: typing.Text = ...
    """Required. How the device is oriented during the test.
    Use the TestEnvironmentDiscoveryService to get supported options.
    """

    def __init__(self,
        *,
        ios_model_id : typing.Text = ...,
        ios_version_id : typing.Text = ...,
        locale : typing.Text = ...,
        orientation : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ios_model_id",b"ios_model_id","ios_version_id",b"ios_version_id","locale",b"locale","orientation",b"orientation"]) -> None: ...
global___IosDevice = IosDevice

class TestDetails(google.protobuf.message.Message):
    """Additional details about the progress of the running test."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROGRESS_MESSAGES_FIELD_NUMBER: builtins.int
    ERROR_MESSAGE_FIELD_NUMBER: builtins.int
    @property
    def progress_messages(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Output only. Human-readable, detailed descriptions of the test's progress.
        For example: "Provisioning a device", "Starting Test".

        During the course of execution new data may be appended
        to the end of progress_messages.
        """
        pass
    error_message: typing.Text = ...
    """Output only. If the TestState is ERROR, then this string will contain
    human-readable details about the error.
    """

    def __init__(self,
        *,
        progress_messages : typing.Optional[typing.Iterable[typing.Text]] = ...,
        error_message : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["error_message",b"error_message","progress_messages",b"progress_messages"]) -> None: ...
global___TestDetails = TestDetails

class InvalidRequestDetail(google.protobuf.message.Message):
    """Details behind an invalid request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Reason:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ReasonEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Reason.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        REASON_UNSPECIFIED: InvalidRequestDetail.Reason.ValueType = ...  # 0
        """No reason has been specified - the default."""

        REQUEST_INVALID: InvalidRequestDetail.Reason.ValueType = ...  # 1
        """The request is not valid."""

        RESOURCE_TOO_BIG: InvalidRequestDetail.Reason.ValueType = ...  # 2
        """One or more of the resources specified in the request is too large."""

        RESOURCE_NOT_FOUND: InvalidRequestDetail.Reason.ValueType = ...  # 3
        """One or more resources specified in the request cannot be found."""

        UNSUPPORTED: InvalidRequestDetail.Reason.ValueType = ...  # 4
        """This request is not (currently) supported."""

        NOT_IMPLEMENTED: InvalidRequestDetail.Reason.ValueType = ...  # 5
        """This request is not currently implemented."""

    class Reason(_Reason, metaclass=_ReasonEnumTypeWrapper):
        """Possible invalid request reasons."""
        pass

    REASON_UNSPECIFIED: InvalidRequestDetail.Reason.ValueType = ...  # 0
    """No reason has been specified - the default."""

    REQUEST_INVALID: InvalidRequestDetail.Reason.ValueType = ...  # 1
    """The request is not valid."""

    RESOURCE_TOO_BIG: InvalidRequestDetail.Reason.ValueType = ...  # 2
    """One or more of the resources specified in the request is too large."""

    RESOURCE_NOT_FOUND: InvalidRequestDetail.Reason.ValueType = ...  # 3
    """One or more resources specified in the request cannot be found."""

    UNSUPPORTED: InvalidRequestDetail.Reason.ValueType = ...  # 4
    """This request is not (currently) supported."""

    NOT_IMPLEMENTED: InvalidRequestDetail.Reason.ValueType = ...  # 5
    """This request is not currently implemented."""


    REASON_FIELD_NUMBER: builtins.int
    reason: global___InvalidRequestDetail.Reason.ValueType = ...
    """The reason behind the error."""

    def __init__(self,
        *,
        reason : global___InvalidRequestDetail.Reason.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["reason",b"reason"]) -> None: ...
global___InvalidRequestDetail = InvalidRequestDetail

class ShardingOption(google.protobuf.message.Message):
    """Options for enabling sharding."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    UNIFORM_SHARDING_FIELD_NUMBER: builtins.int
    MANUAL_SHARDING_FIELD_NUMBER: builtins.int
    @property
    def uniform_sharding(self) -> global___UniformSharding:
        """Uniformly shards test cases given a total number of shards."""
        pass
    @property
    def manual_sharding(self) -> global___ManualSharding:
        """Shards test cases into the specified groups of packages, classes, and/or
        methods.
        """
        pass
    def __init__(self,
        *,
        uniform_sharding : typing.Optional[global___UniformSharding] = ...,
        manual_sharding : typing.Optional[global___ManualSharding] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["manual_sharding",b"manual_sharding","option",b"option","uniform_sharding",b"uniform_sharding"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["manual_sharding",b"manual_sharding","option",b"option","uniform_sharding",b"uniform_sharding"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["option",b"option"]) -> typing.Optional[typing_extensions.Literal["uniform_sharding","manual_sharding"]]: ...
global___ShardingOption = ShardingOption

class UniformSharding(google.protobuf.message.Message):
    """Uniformly shards test cases given a total number of shards.

    For Instrumentation test, it will be translated to "-e numShard" "-e
    shardIndex" AndroidJUnitRunner arguments. With uniform sharding enabled,
    specifying these sharding arguments via environment_variables is invalid.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NUM_SHARDS_FIELD_NUMBER: builtins.int
    num_shards: builtins.int = ...
    """Required. Total number of shards. When any physical devices are selected,
    the number must be >= 1 and <= 50. When no physical devices are selected,
    the number must be >= 1 and <= 500.
    """

    def __init__(self,
        *,
        num_shards : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["num_shards",b"num_shards"]) -> None: ...
global___UniformSharding = UniformSharding

class ManualSharding(google.protobuf.message.Message):
    """Shards test cases into the specified groups of packages, classes, and/or
    methods.

    With manual sharding enabled, specifying test targets via
    environment_variables or in InstrumentationTest is invalid.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEST_TARGETS_FOR_SHARD_FIELD_NUMBER: builtins.int
    @property
    def test_targets_for_shard(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TestTargetsForShard]:
        """Required. Group of packages, classes, and/or test methods to be run for
        each shard. When any physical devices are selected,  the number of
        test_targets_for_shard must be >= 1 and <= 50. When no physical devices are
        selected, the number must be >= 1 and <= 500.
        """
        pass
    def __init__(self,
        *,
        test_targets_for_shard : typing.Optional[typing.Iterable[global___TestTargetsForShard]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["test_targets_for_shard",b"test_targets_for_shard"]) -> None: ...
global___ManualSharding = ManualSharding

class TestTargetsForShard(google.protobuf.message.Message):
    """Test targets for a shard."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEST_TARGETS_FIELD_NUMBER: builtins.int
    @property
    def test_targets(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Group of packages, classes, and/or test methods to be run for each shard.
        The targets need to be specified in AndroidJUnitRunner argument format. For
        example, "package com.my.packages" "class com.my.package.MyClass".

        The number of shard_test_targets must be greater than 0.
        """
        pass
    def __init__(self,
        *,
        test_targets : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["test_targets",b"test_targets"]) -> None: ...
global___TestTargetsForShard = TestTargetsForShard

class Shard(google.protobuf.message.Message):
    """Output only. Details about the shard."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SHARD_INDEX_FIELD_NUMBER: builtins.int
    NUM_SHARDS_FIELD_NUMBER: builtins.int
    TEST_TARGETS_FOR_SHARD_FIELD_NUMBER: builtins.int
    shard_index: builtins.int = ...
    """Output only. The index of the shard among all the shards."""

    num_shards: builtins.int = ...
    """Output only. The total number of shards."""

    @property
    def test_targets_for_shard(self) -> global___TestTargetsForShard:
        """Output only. Test targets for each shard."""
        pass
    def __init__(self,
        *,
        shard_index : builtins.int = ...,
        num_shards : builtins.int = ...,
        test_targets_for_shard : typing.Optional[global___TestTargetsForShard] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["test_targets_for_shard",b"test_targets_for_shard"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["num_shards",b"num_shards","shard_index",b"shard_index","test_targets_for_shard",b"test_targets_for_shard"]) -> None: ...
global___Shard = Shard

class CreateTestMatrixRequest(google.protobuf.message.Message):
    """Request to submit a matrix of tests for execution."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    TEST_MATRIX_FIELD_NUMBER: builtins.int
    REQUEST_ID_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """The GCE project under which this job will run."""

    @property
    def test_matrix(self) -> global___TestMatrix:
        """The matrix of tests that the user wants to run."""
        pass
    request_id: typing.Text = ...
    """A string id used to detect duplicated requests.
    Ids are automatically scoped to a project, so
    users should ensure the ID is unique per-project.
    A UUID is recommended.

    Optional, but strongly recommended.
    """

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        test_matrix : typing.Optional[global___TestMatrix] = ...,
        request_id : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["test_matrix",b"test_matrix"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["project_id",b"project_id","request_id",b"request_id","test_matrix",b"test_matrix"]) -> None: ...
global___CreateTestMatrixRequest = CreateTestMatrixRequest

class GetTestMatrixRequest(google.protobuf.message.Message):
    """Request to get the Test Matrix with the given id."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    TEST_MATRIX_ID_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Cloud project that owns the test matrix."""

    test_matrix_id: typing.Text = ...
    """Unique test matrix id which was assigned by the service."""

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        test_matrix_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["project_id",b"project_id","test_matrix_id",b"test_matrix_id"]) -> None: ...
global___GetTestMatrixRequest = GetTestMatrixRequest

class CancelTestMatrixRequest(google.protobuf.message.Message):
    """Request to stop running all of the tests in the specified matrix."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    TEST_MATRIX_ID_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Cloud project that owns the test."""

    test_matrix_id: typing.Text = ...
    """Test matrix that will be canceled."""

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        test_matrix_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["project_id",b"project_id","test_matrix_id",b"test_matrix_id"]) -> None: ...
global___CancelTestMatrixRequest = CancelTestMatrixRequest

class CancelTestMatrixResponse(google.protobuf.message.Message):
    """Response containing the current state of the specified test matrix."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEST_STATE_FIELD_NUMBER: builtins.int
    test_state: global___TestState.ValueType = ...
    """The current rolled-up state of the test matrix.
    If this state is already final, then the cancelation request will
    have no effect.
    """

    def __init__(self,
        *,
        test_state : global___TestState.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["test_state",b"test_state"]) -> None: ...
global___CancelTestMatrixResponse = CancelTestMatrixResponse
