"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.devtools.resultstore.v2.common_pb2
import google.devtools.resultstore.v2.file_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _TargetType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _TargetTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TargetType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    TARGET_TYPE_UNSPECIFIED: TargetType.ValueType = ...  # 0
    """Unspecified by the build system."""

    APPLICATION: TargetType.ValueType = ...  # 1
    """An application e.g. ios_application."""

    BINARY: TargetType.ValueType = ...  # 2
    """A binary target e.g. cc_binary."""

    LIBRARY: TargetType.ValueType = ...  # 3
    """A library target e.g. java_library"""

    PACKAGE: TargetType.ValueType = ...  # 4
    """A package"""

    TEST: TargetType.ValueType = ...  # 5
    """Any test target, in bazel that means a rule with a '_test' suffix."""

class TargetType(_TargetType, metaclass=_TargetTypeEnumTypeWrapper):
    """These correspond to the suffix of the rule name. Eg cc_test has type TEST."""
    pass

TARGET_TYPE_UNSPECIFIED: TargetType.ValueType = ...  # 0
"""Unspecified by the build system."""

APPLICATION: TargetType.ValueType = ...  # 1
"""An application e.g. ios_application."""

BINARY: TargetType.ValueType = ...  # 2
"""A binary target e.g. cc_binary."""

LIBRARY: TargetType.ValueType = ...  # 3
"""A library target e.g. java_library"""

PACKAGE: TargetType.ValueType = ...  # 4
"""A package"""

TEST: TargetType.ValueType = ...  # 5
"""Any test target, in bazel that means a rule with a '_test' suffix."""

global___TargetType = TargetType


class _TestSize:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _TestSizeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TestSize.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    TEST_SIZE_UNSPECIFIED: TestSize.ValueType = ...  # 0
    """Unspecified by the user."""

    SMALL: TestSize.ValueType = ...  # 1
    """Unit test taking less than 1 minute."""

    MEDIUM: TestSize.ValueType = ...  # 2
    """Integration tests taking less than 5 minutes."""

    LARGE: TestSize.ValueType = ...  # 3
    """End-to-end tests taking less than 15 minutes."""

    ENORMOUS: TestSize.ValueType = ...  # 4
    """Even bigger than LARGE."""

    OTHER_SIZE: TestSize.ValueType = ...  # 5
    """Something that doesn't fit into the above categories."""

class TestSize(_TestSize, metaclass=_TestSizeEnumTypeWrapper):
    """Indicates how big the user indicated the test action was."""
    pass

TEST_SIZE_UNSPECIFIED: TestSize.ValueType = ...  # 0
"""Unspecified by the user."""

SMALL: TestSize.ValueType = ...  # 1
"""Unit test taking less than 1 minute."""

MEDIUM: TestSize.ValueType = ...  # 2
"""Integration tests taking less than 5 minutes."""

LARGE: TestSize.ValueType = ...  # 3
"""End-to-end tests taking less than 15 minutes."""

ENORMOUS: TestSize.ValueType = ...  # 4
"""Even bigger than LARGE."""

OTHER_SIZE: TestSize.ValueType = ...  # 5
"""Something that doesn't fit into the above categories."""

global___TestSize = TestSize


class Target(google.protobuf.message.Message):
    """Each Target represents data for a given target in a given Invocation.
    ConfiguredTarget and Action resources under each Target contain the bulk of
    the data.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Id(google.protobuf.message.Message):
        """The resource ID components that identify the Target."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        INVOCATION_ID_FIELD_NUMBER: builtins.int
        TARGET_ID_FIELD_NUMBER: builtins.int
        invocation_id: typing.Text = ...
        """The Invocation ID."""

        target_id: typing.Text = ...
        """The Target ID."""

        def __init__(self,
            *,
            invocation_id : typing.Text = ...,
            target_id : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["invocation_id",b"invocation_id","target_id",b"target_id"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    STATUS_ATTRIBUTES_FIELD_NUMBER: builtins.int
    TIMING_FIELD_NUMBER: builtins.int
    TARGET_ATTRIBUTES_FIELD_NUMBER: builtins.int
    TEST_ATTRIBUTES_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    FILES_FIELD_NUMBER: builtins.int
    VISIBLE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The resource name.  Its format must be:
    invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}
    """

    @property
    def id(self) -> global___Target.Id:
        """The resource ID components that identify the Target. They must match the
        resource name after proper encoding.
        """
        pass
    @property
    def status_attributes(self) -> google.devtools.resultstore.v2.common_pb2.StatusAttributes:
        """This is the aggregate status of the target."""
        pass
    @property
    def timing(self) -> google.devtools.resultstore.v2.common_pb2.Timing:
        """When this target started and its duration."""
        pass
    @property
    def target_attributes(self) -> global___TargetAttributes:
        """Attributes that apply to all targets."""
        pass
    @property
    def test_attributes(self) -> global___TestAttributes:
        """Attributes that apply to all test actions under this target."""
        pass
    @property
    def properties(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.devtools.resultstore.v2.common_pb2.Property]:
        """Arbitrary name-value pairs.
        This is implemented as a multi-map. Multiple properties are allowed with
        the same key. Properties will be returned in lexicographical order by key.
        """
        pass
    @property
    def files(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.devtools.resultstore.v2.file_pb2.File]:
        """A list of file references for target level files.
        The file IDs must be unique within this list. Duplicate file IDs will
        result in an error. Files will be returned in lexicographical order by ID.
        Use this field to specify outputs not related to a configuration.
        """
        pass
    visible: builtins.bool = ...
    """Provides a hint to clients as to whether to display the Target to users.
    If true then clients likely want to display the Target by default.
    Once set to true, this may not be set back to false.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        id : typing.Optional[global___Target.Id] = ...,
        status_attributes : typing.Optional[google.devtools.resultstore.v2.common_pb2.StatusAttributes] = ...,
        timing : typing.Optional[google.devtools.resultstore.v2.common_pb2.Timing] = ...,
        target_attributes : typing.Optional[global___TargetAttributes] = ...,
        test_attributes : typing.Optional[global___TestAttributes] = ...,
        properties : typing.Optional[typing.Iterable[google.devtools.resultstore.v2.common_pb2.Property]] = ...,
        files : typing.Optional[typing.Iterable[google.devtools.resultstore.v2.file_pb2.File]] = ...,
        visible : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["id",b"id","status_attributes",b"status_attributes","target_attributes",b"target_attributes","test_attributes",b"test_attributes","timing",b"timing"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["files",b"files","id",b"id","name",b"name","properties",b"properties","status_attributes",b"status_attributes","target_attributes",b"target_attributes","test_attributes",b"test_attributes","timing",b"timing","visible",b"visible"]) -> None: ...
global___Target = Target

class TargetAttributes(google.protobuf.message.Message):
    """Attributes that apply to all targets."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TYPE_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    TAGS_FIELD_NUMBER: builtins.int
    type: global___TargetType.ValueType = ...
    """If known, indicates the type of this target.  In bazel this corresponds
    to the rule-suffix.
    """

    language: google.devtools.resultstore.v2.common_pb2.Language.ValueType = ...
    """If known, the main language of this target, e.g. java, cc, python, etc."""

    @property
    def tags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The tags attribute of the build rule. These should be short, descriptive
        words, and there should only be a few of them.
        This is implemented as a set. All tags will be unique. Any duplicate tags
        will be ignored. Tags will be returned in lexicographical order.
        """
        pass
    def __init__(self,
        *,
        type : global___TargetType.ValueType = ...,
        language : google.devtools.resultstore.v2.common_pb2.Language.ValueType = ...,
        tags : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["language",b"language","tags",b"tags","type",b"type"]) -> None: ...
global___TargetAttributes = TargetAttributes

class TestAttributes(google.protobuf.message.Message):
    """Attributes that apply only to test actions under this target."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SIZE_FIELD_NUMBER: builtins.int
    size: global___TestSize.ValueType = ...
    """Indicates how big the user indicated the test action was."""

    def __init__(self,
        *,
        size : global___TestSize.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["size",b"size"]) -> None: ...
global___TestAttributes = TestAttributes
