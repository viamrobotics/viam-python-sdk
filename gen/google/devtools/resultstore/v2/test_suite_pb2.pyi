"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.devtools.resultstore.v2.common_pb2
import google.devtools.resultstore.v2.file_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class TestSuite(google.protobuf.message.Message):
    """The result of running a test suite, as reported in a <testsuite> element of
    an XML log.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SUITE_NAME_FIELD_NUMBER: builtins.int
    TESTS_FIELD_NUMBER: builtins.int
    FAILURES_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    TIMING_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    FILES_FIELD_NUMBER: builtins.int
    suite_name: typing.Text = ...
    """The full name of this suite, as reported in the name attribute. For Java
    tests, this is normally the fully qualified class name. Eg.
    "com.google.common.hash.BloomFilterTest".
    """

    @property
    def tests(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Test]:
        """The results of the test cases and test suites contained in this suite,
        as reported in the <testcase> and <testsuite> elements contained within
        this <testsuite>.
        """
        pass
    @property
    def failures(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TestFailure]:
        """Failures reported in <failure> elements within this <testsuite>."""
        pass
    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TestError]:
        """Errors reported in <error> elements within this <testsuite>."""
        pass
    @property
    def timing(self) -> google.devtools.resultstore.v2.common_pb2.Timing:
        """The timing for the entire TestSuite, as reported by the time attribute."""
        pass
    @property
    def properties(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.devtools.resultstore.v2.common_pb2.Property]:
        """Arbitrary name-value pairs, as reported in custom attributes or in a
        <properties> element within this <testsuite>. Multiple properties are
        allowed with the same key. Properties will be returned in lexicographical
        order by key.
        """
        pass
    @property
    def files(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.devtools.resultstore.v2.file_pb2.File]:
        """Files produced by this test suite, as reported by undeclared output
        annotations.
        The file IDs must be unique within this list. Duplicate file IDs will
        result in an error. Files will be returned in lexicographical order by ID.
        """
        pass
    def __init__(self,
        *,
        suite_name : typing.Text = ...,
        tests : typing.Optional[typing.Iterable[global___Test]] = ...,
        failures : typing.Optional[typing.Iterable[global___TestFailure]] = ...,
        errors : typing.Optional[typing.Iterable[global___TestError]] = ...,
        timing : typing.Optional[google.devtools.resultstore.v2.common_pb2.Timing] = ...,
        properties : typing.Optional[typing.Iterable[google.devtools.resultstore.v2.common_pb2.Property]] = ...,
        files : typing.Optional[typing.Iterable[google.devtools.resultstore.v2.file_pb2.File]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["timing",b"timing"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["errors",b"errors","failures",b"failures","files",b"files","properties",b"properties","suite_name",b"suite_name","tests",b"tests","timing",b"timing"]) -> None: ...
global___TestSuite = TestSuite

class Test(google.protobuf.message.Message):
    """The result of running a test case or test suite. JUnit3 TestDecorators are
    represented as a TestSuite with a single test.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEST_CASE_FIELD_NUMBER: builtins.int
    TEST_SUITE_FIELD_NUMBER: builtins.int
    @property
    def test_case(self) -> global___TestCase:
        """When this contains just a single TestCase"""
        pass
    @property
    def test_suite(self) -> global___TestSuite:
        """When this contains a TestSuite of test cases."""
        pass
    def __init__(self,
        *,
        test_case : typing.Optional[global___TestCase] = ...,
        test_suite : typing.Optional[global___TestSuite] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["test_case",b"test_case","test_suite",b"test_suite","test_type",b"test_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["test_case",b"test_case","test_suite",b"test_suite","test_type",b"test_type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["test_type",b"test_type"]) -> typing.Optional[typing_extensions.Literal["test_case","test_suite"]]: ...
global___Test = Test

class TestCase(google.protobuf.message.Message):
    """The result of running a test case, as reported in a <testcase> element of
    an XML log.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Result:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ResultEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Result.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        RESULT_UNSPECIFIED: TestCase.Result.ValueType = ...  # 0
        """The implicit default enum value. Do not use."""

        COMPLETED: TestCase.Result.ValueType = ...  # 1
        """Test case ran to completion. Look for failures or errors to determine
        whether it passed, failed, or errored.
        """

        INTERRUPTED: TestCase.Result.ValueType = ...  # 2
        """Test case started but did not complete because the test harness received
        a signal and decided to stop running tests.
        """

        CANCELLED: TestCase.Result.ValueType = ...  # 3
        """Test case was not started because the test harness received a SIGINT or
        timed out.
        """

        FILTERED: TestCase.Result.ValueType = ...  # 4
        """Test case was not run because the user or process running the test
        specified a filter that excluded this test case.
        """

        SKIPPED: TestCase.Result.ValueType = ...  # 5
        """Test case was not run to completion because the test case decided it
        should not be run (eg. due to a failed assumption in a JUnit4 test).
        Per-test setup or tear-down may or may not have run.
        """

        SUPPRESSED: TestCase.Result.ValueType = ...  # 6
        """The test framework did not run the test case because it was labeled as
        suppressed.  Eg. if someone temporarily disables a failing test.
        """

    class Result(_Result, metaclass=_ResultEnumTypeWrapper):
        """The result of running a test case."""
        pass

    RESULT_UNSPECIFIED: TestCase.Result.ValueType = ...  # 0
    """The implicit default enum value. Do not use."""

    COMPLETED: TestCase.Result.ValueType = ...  # 1
    """Test case ran to completion. Look for failures or errors to determine
    whether it passed, failed, or errored.
    """

    INTERRUPTED: TestCase.Result.ValueType = ...  # 2
    """Test case started but did not complete because the test harness received
    a signal and decided to stop running tests.
    """

    CANCELLED: TestCase.Result.ValueType = ...  # 3
    """Test case was not started because the test harness received a SIGINT or
    timed out.
    """

    FILTERED: TestCase.Result.ValueType = ...  # 4
    """Test case was not run because the user or process running the test
    specified a filter that excluded this test case.
    """

    SKIPPED: TestCase.Result.ValueType = ...  # 5
    """Test case was not run to completion because the test case decided it
    should not be run (eg. due to a failed assumption in a JUnit4 test).
    Per-test setup or tear-down may or may not have run.
    """

    SUPPRESSED: TestCase.Result.ValueType = ...  # 6
    """The test framework did not run the test case because it was labeled as
    suppressed.  Eg. if someone temporarily disables a failing test.
    """


    CASE_NAME_FIELD_NUMBER: builtins.int
    CLASS_NAME_FIELD_NUMBER: builtins.int
    RESULT_FIELD_NUMBER: builtins.int
    FAILURES_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    TIMING_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    FILES_FIELD_NUMBER: builtins.int
    case_name: typing.Text = ...
    """The name of the test case, as reported in the name attribute. For Java,
    this is normally the method name. Eg. "testBasic".
    """

    class_name: typing.Text = ...
    """The name of the class in which the test case was defined, as reported in
    the classname attribute. For Java, this is normally the fully qualified
    class name. Eg. "com.google.common.hash.BloomFilterTest".
    """

    result: global___TestCase.Result.ValueType = ...
    """An enum reported in the result attribute that is used in conjunction with
    failures and errors below to report the outcome.
    """

    @property
    def failures(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TestFailure]:
        """Failures reported in <failure> elements within this <testcase>."""
        pass
    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TestError]:
        """Errors reported in <error> elements within this <testcase>."""
        pass
    @property
    def timing(self) -> google.devtools.resultstore.v2.common_pb2.Timing:
        """The timing for the TestCase, as reported by the time attribute."""
        pass
    @property
    def properties(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.devtools.resultstore.v2.common_pb2.Property]:
        """Arbitrary name-value pairs, as reported in custom attributes or in a
        <properties> element within this <testcase>. Multiple properties are
        allowed with the same key. Properties will be returned in lexicographical
        order by key.
        """
        pass
    @property
    def files(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.devtools.resultstore.v2.file_pb2.File]:
        """Files produced by this test case, as reported by undeclared output
        annotations.
        The file IDs must be unique within this list. Duplicate file IDs will
        result in an error. Files will be returned in lexicographical order by ID.
        """
        pass
    def __init__(self,
        *,
        case_name : typing.Text = ...,
        class_name : typing.Text = ...,
        result : global___TestCase.Result.ValueType = ...,
        failures : typing.Optional[typing.Iterable[global___TestFailure]] = ...,
        errors : typing.Optional[typing.Iterable[global___TestError]] = ...,
        timing : typing.Optional[google.devtools.resultstore.v2.common_pb2.Timing] = ...,
        properties : typing.Optional[typing.Iterable[google.devtools.resultstore.v2.common_pb2.Property]] = ...,
        files : typing.Optional[typing.Iterable[google.devtools.resultstore.v2.file_pb2.File]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["timing",b"timing"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["case_name",b"case_name","class_name",b"class_name","errors",b"errors","failures",b"failures","files",b"files","properties",b"properties","result",b"result","timing",b"timing"]) -> None: ...
global___TestCase = TestCase

class TestFailure(google.protobuf.message.Message):
    """Represents a violated assertion, as reported in a <failure> element within a
    <testcase>. Some languages allow assertions to be made without stopping the
    test case when they're violated, leading to multiple TestFailures. For Java,
    multiple TestFailures are used to represent a chained exception.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FAILURE_MESSAGE_FIELD_NUMBER: builtins.int
    EXCEPTION_TYPE_FIELD_NUMBER: builtins.int
    STACK_TRACE_FIELD_NUMBER: builtins.int
    EXPECTED_FIELD_NUMBER: builtins.int
    ACTUAL_FIELD_NUMBER: builtins.int
    failure_message: typing.Text = ...
    """The exception message reported in the message attribute. Typically short,
    but may be multi-line. Eg. "Expected 'foo' but was 'bar'".
    """

    exception_type: typing.Text = ...
    """The type of the exception being thrown, reported in the type attribute.
    Eg: "org.junit.ComparisonFailure"
    """

    stack_trace: typing.Text = ...
    """The stack trace reported as the content of the <failure> element, often in
    a CDATA block. This contains one line for each stack frame, each including
    a method/function name, a class/file name, and a line number. Most recent
    call is usually first, but not for Python stack traces. May contain the
    exception_type and message.
    """

    @property
    def expected(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The expected values.

        These values can be diffed against the actual values. Often, there is just
        one actual and one expected value. If there is more than one, they should
        be compared as an unordered collection.
        """
        pass
    @property
    def actual(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The actual values.

        These values can be diffed against the expected values. Often, there is
        just one actual and one expected value. If there is more than one, they
        should be compared as an unordered collection.
        """
        pass
    def __init__(self,
        *,
        failure_message : typing.Text = ...,
        exception_type : typing.Text = ...,
        stack_trace : typing.Text = ...,
        expected : typing.Optional[typing.Iterable[typing.Text]] = ...,
        actual : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["actual",b"actual","exception_type",b"exception_type","expected",b"expected","failure_message",b"failure_message","stack_trace",b"stack_trace"]) -> None: ...
global___TestFailure = TestFailure

class TestError(google.protobuf.message.Message):
    """Represents an exception that prevented a test case from completing, as
    reported in an <error> element within a <testcase>. For Java, multiple
    TestErrors are used to represent a chained exception.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ERROR_MESSAGE_FIELD_NUMBER: builtins.int
    EXCEPTION_TYPE_FIELD_NUMBER: builtins.int
    STACK_TRACE_FIELD_NUMBER: builtins.int
    error_message: typing.Text = ...
    """The exception message, as reported in the message attribute. Typically
    short, but may be multi-line. Eg. "argument cannot be null".
    """

    exception_type: typing.Text = ...
    """The type of the exception being thrown, reported in the type attribute.
    For Java, this is a fully qualified Throwable class name.
    Eg: "java.lang.IllegalArgumentException"
    """

    stack_trace: typing.Text = ...
    """The stack trace reported as the content of the <error> element, often in
    a CDATA block. This contains one line for each stack frame, each including
    a method/function name, a class/file name, and a line number. Most recent
    call is usually first, but not for Python stack traces. May contain the
    exception_type and message.
    """

    def __init__(self,
        *,
        error_message : typing.Text = ...,
        exception_type : typing.Text = ...,
        stack_trace : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["error_message",b"error_message","exception_type",b"exception_type","stack_trace",b"stack_trace"]) -> None: ...
global___TestError = TestError
