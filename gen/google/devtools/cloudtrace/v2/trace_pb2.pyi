"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
import google.rpc.status_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Span(google.protobuf.message.Message):
    """A span represents a single operation within a trace. Spans can be
    nested to form a trace tree. Often, a trace contains a root span
    that describes the end-to-end latency, and one or more subspans for
    its sub-operations. A trace can also contain multiple root spans,
    or none at all. Spans do not need to be contiguous&mdash;there may be
    gaps or overlaps between spans in a trace.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _SpanKind:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _SpanKindEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SpanKind.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        SPAN_KIND_UNSPECIFIED: Span.SpanKind.ValueType = ...  # 0
        """Unspecified. Do NOT use as default.
        Implementations MAY assume SpanKind.INTERNAL to be default.
        """

        INTERNAL: Span.SpanKind.ValueType = ...  # 1
        """Indicates that the span is used internally. Default value."""

        SERVER: Span.SpanKind.ValueType = ...  # 2
        """Indicates that the span covers server-side handling of an RPC or other
        remote network request.
        """

        CLIENT: Span.SpanKind.ValueType = ...  # 3
        """Indicates that the span covers the client-side wrapper around an RPC or
        other remote request.
        """

        PRODUCER: Span.SpanKind.ValueType = ...  # 4
        """Indicates that the span describes producer sending a message to a broker.
        Unlike client and  server, there is no direct critical path latency
        relationship between producer and consumer spans (e.g. publishing a
        message to a pubsub service).
        """

        CONSUMER: Span.SpanKind.ValueType = ...  # 5
        """Indicates that the span describes consumer receiving a message from a
        broker. Unlike client and  server, there is no direct critical path
        latency relationship between producer and consumer spans (e.g. receiving
        a message from a pubsub service subscription).
        """

    class SpanKind(_SpanKind, metaclass=_SpanKindEnumTypeWrapper):
        """Type of span. Can be used to specify additional relationships between spans
        in addition to a parent/child relationship.
        """
        pass

    SPAN_KIND_UNSPECIFIED: Span.SpanKind.ValueType = ...  # 0
    """Unspecified. Do NOT use as default.
    Implementations MAY assume SpanKind.INTERNAL to be default.
    """

    INTERNAL: Span.SpanKind.ValueType = ...  # 1
    """Indicates that the span is used internally. Default value."""

    SERVER: Span.SpanKind.ValueType = ...  # 2
    """Indicates that the span covers server-side handling of an RPC or other
    remote network request.
    """

    CLIENT: Span.SpanKind.ValueType = ...  # 3
    """Indicates that the span covers the client-side wrapper around an RPC or
    other remote request.
    """

    PRODUCER: Span.SpanKind.ValueType = ...  # 4
    """Indicates that the span describes producer sending a message to a broker.
    Unlike client and  server, there is no direct critical path latency
    relationship between producer and consumer spans (e.g. publishing a
    message to a pubsub service).
    """

    CONSUMER: Span.SpanKind.ValueType = ...  # 5
    """Indicates that the span describes consumer receiving a message from a
    broker. Unlike client and  server, there is no direct critical path
    latency relationship between producer and consumer spans (e.g. receiving
    a message from a pubsub service subscription).
    """


    class Attributes(google.protobuf.message.Message):
        """A set of attributes, each in the format `[KEY]:[VALUE]`."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class AttributeMapEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            @property
            def value(self) -> global___AttributeValue: ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Optional[global___AttributeValue] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        ATTRIBUTE_MAP_FIELD_NUMBER: builtins.int
        DROPPED_ATTRIBUTES_COUNT_FIELD_NUMBER: builtins.int
        @property
        def attribute_map(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___AttributeValue]:
            """The set of attributes. Each attribute's key can be up to 128 bytes
            long. The value can be a string up to 256 bytes, a signed 64-bit integer,
            or the Boolean values `true` and `false`. For example:

                "/instance_id": { "string_value": { "value": "my-instance" } }
                "/http/request_bytes": { "int_value": 300 }
                "abc.com/myattribute": { "bool_value": false }
            """
            pass
        dropped_attributes_count: builtins.int = ...
        """The number of attributes that were discarded. Attributes can be discarded
        because their keys are too long or because there are too many attributes.
        If this value is 0 then all attributes are valid.
        """

        def __init__(self,
            *,
            attribute_map : typing.Optional[typing.Mapping[typing.Text, global___AttributeValue]] = ...,
            dropped_attributes_count : builtins.int = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["attribute_map",b"attribute_map","dropped_attributes_count",b"dropped_attributes_count"]) -> None: ...

    class TimeEvent(google.protobuf.message.Message):
        """A time-stamped annotation or message event in the Span."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class Annotation(google.protobuf.message.Message):
            """Text annotation with a set of attributes."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            DESCRIPTION_FIELD_NUMBER: builtins.int
            ATTRIBUTES_FIELD_NUMBER: builtins.int
            @property
            def description(self) -> global___TruncatableString:
                """A user-supplied message describing the event. The maximum length for
                the description is 256 bytes.
                """
                pass
            @property
            def attributes(self) -> global___Span.Attributes:
                """A set of attributes on the annotation. You can have up to 4 attributes
                per Annotation.
                """
                pass
            def __init__(self,
                *,
                description : typing.Optional[global___TruncatableString] = ...,
                attributes : typing.Optional[global___Span.Attributes] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["attributes",b"attributes","description",b"description"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["attributes",b"attributes","description",b"description"]) -> None: ...

        class MessageEvent(google.protobuf.message.Message):
            """An event describing a message sent/received between Spans."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            class _Type:
                ValueType = typing.NewType('ValueType', builtins.int)
                V: typing_extensions.TypeAlias = ValueType
            class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Type.ValueType], builtins.type):
                DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
                TYPE_UNSPECIFIED: Span.TimeEvent.MessageEvent.Type.ValueType = ...  # 0
                """Unknown event type."""

                SENT: Span.TimeEvent.MessageEvent.Type.ValueType = ...  # 1
                """Indicates a sent message."""

                RECEIVED: Span.TimeEvent.MessageEvent.Type.ValueType = ...  # 2
                """Indicates a received message."""

            class Type(_Type, metaclass=_TypeEnumTypeWrapper):
                """Indicates whether the message was sent or received."""
                pass

            TYPE_UNSPECIFIED: Span.TimeEvent.MessageEvent.Type.ValueType = ...  # 0
            """Unknown event type."""

            SENT: Span.TimeEvent.MessageEvent.Type.ValueType = ...  # 1
            """Indicates a sent message."""

            RECEIVED: Span.TimeEvent.MessageEvent.Type.ValueType = ...  # 2
            """Indicates a received message."""


            TYPE_FIELD_NUMBER: builtins.int
            ID_FIELD_NUMBER: builtins.int
            UNCOMPRESSED_SIZE_BYTES_FIELD_NUMBER: builtins.int
            COMPRESSED_SIZE_BYTES_FIELD_NUMBER: builtins.int
            type: global___Span.TimeEvent.MessageEvent.Type.ValueType = ...
            """Type of MessageEvent. Indicates whether the message was sent or
            received.
            """

            id: builtins.int = ...
            """An identifier for the MessageEvent's message that can be used to match
            SENT and RECEIVED MessageEvents. It is recommended to be unique within
            a Span.
            """

            uncompressed_size_bytes: builtins.int = ...
            """The number of uncompressed bytes sent or received."""

            compressed_size_bytes: builtins.int = ...
            """The number of compressed bytes sent or received. If missing assumed to
            be the same size as uncompressed.
            """

            def __init__(self,
                *,
                type : global___Span.TimeEvent.MessageEvent.Type.ValueType = ...,
                id : builtins.int = ...,
                uncompressed_size_bytes : builtins.int = ...,
                compressed_size_bytes : builtins.int = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["compressed_size_bytes",b"compressed_size_bytes","id",b"id","type",b"type","uncompressed_size_bytes",b"uncompressed_size_bytes"]) -> None: ...

        TIME_FIELD_NUMBER: builtins.int
        ANNOTATION_FIELD_NUMBER: builtins.int
        MESSAGE_EVENT_FIELD_NUMBER: builtins.int
        @property
        def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
            """The timestamp indicating the time the event occurred."""
            pass
        @property
        def annotation(self) -> global___Span.TimeEvent.Annotation:
            """Text annotation with a set of attributes."""
            pass
        @property
        def message_event(self) -> global___Span.TimeEvent.MessageEvent:
            """An event describing a message sent/received between Spans."""
            pass
        def __init__(self,
            *,
            time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
            annotation : typing.Optional[global___Span.TimeEvent.Annotation] = ...,
            message_event : typing.Optional[global___Span.TimeEvent.MessageEvent] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["annotation",b"annotation","message_event",b"message_event","time",b"time","value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["annotation",b"annotation","message_event",b"message_event","time",b"time","value",b"value"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["value",b"value"]) -> typing.Optional[typing_extensions.Literal["annotation","message_event"]]: ...

    class TimeEvents(google.protobuf.message.Message):
        """A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation
        on the span, consisting of either user-supplied key:value pairs, or
        details of a message sent/received between Spans.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        TIME_EVENT_FIELD_NUMBER: builtins.int
        DROPPED_ANNOTATIONS_COUNT_FIELD_NUMBER: builtins.int
        DROPPED_MESSAGE_EVENTS_COUNT_FIELD_NUMBER: builtins.int
        @property
        def time_event(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Span.TimeEvent]:
            """A collection of `TimeEvent`s."""
            pass
        dropped_annotations_count: builtins.int = ...
        """The number of dropped annotations in all the included time events.
        If the value is 0, then no annotations were dropped.
        """

        dropped_message_events_count: builtins.int = ...
        """The number of dropped message events in all the included time events.
        If the value is 0, then no message events were dropped.
        """

        def __init__(self,
            *,
            time_event : typing.Optional[typing.Iterable[global___Span.TimeEvent]] = ...,
            dropped_annotations_count : builtins.int = ...,
            dropped_message_events_count : builtins.int = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["dropped_annotations_count",b"dropped_annotations_count","dropped_message_events_count",b"dropped_message_events_count","time_event",b"time_event"]) -> None: ...

    class Link(google.protobuf.message.Message):
        """A pointer from the current span to another span in the same trace or in a
        different trace. For example, this can be used in batching operations,
        where a single batch handler processes multiple requests from different
        traces or when the handler receives a request from a different project.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _Type:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Type.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            TYPE_UNSPECIFIED: Span.Link.Type.ValueType = ...  # 0
            """The relationship of the two spans is unknown."""

            CHILD_LINKED_SPAN: Span.Link.Type.ValueType = ...  # 1
            """The linked span is a child of the current span."""

            PARENT_LINKED_SPAN: Span.Link.Type.ValueType = ...  # 2
            """The linked span is a parent of the current span."""

        class Type(_Type, metaclass=_TypeEnumTypeWrapper):
            """The relationship of the current span relative to the linked span: child,
            parent, or unspecified.
            """
            pass

        TYPE_UNSPECIFIED: Span.Link.Type.ValueType = ...  # 0
        """The relationship of the two spans is unknown."""

        CHILD_LINKED_SPAN: Span.Link.Type.ValueType = ...  # 1
        """The linked span is a child of the current span."""

        PARENT_LINKED_SPAN: Span.Link.Type.ValueType = ...  # 2
        """The linked span is a parent of the current span."""


        TRACE_ID_FIELD_NUMBER: builtins.int
        SPAN_ID_FIELD_NUMBER: builtins.int
        TYPE_FIELD_NUMBER: builtins.int
        ATTRIBUTES_FIELD_NUMBER: builtins.int
        trace_id: typing.Text = ...
        """The [TRACE_ID] for a trace within a project."""

        span_id: typing.Text = ...
        """The [SPAN_ID] for a span within a trace."""

        type: global___Span.Link.Type.ValueType = ...
        """The relationship of the current span relative to the linked span."""

        @property
        def attributes(self) -> global___Span.Attributes:
            """A set of attributes on the link. You have have up to  32 attributes per
            link.
            """
            pass
        def __init__(self,
            *,
            trace_id : typing.Text = ...,
            span_id : typing.Text = ...,
            type : global___Span.Link.Type.ValueType = ...,
            attributes : typing.Optional[global___Span.Attributes] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["attributes",b"attributes"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["attributes",b"attributes","span_id",b"span_id","trace_id",b"trace_id","type",b"type"]) -> None: ...

    class Links(google.protobuf.message.Message):
        """A collection of links, which are references from this span to a span
        in the same or different trace.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        LINK_FIELD_NUMBER: builtins.int
        DROPPED_LINKS_COUNT_FIELD_NUMBER: builtins.int
        @property
        def link(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Span.Link]:
            """A collection of links."""
            pass
        dropped_links_count: builtins.int = ...
        """The number of dropped links after the maximum size was enforced. If
        this value is 0, then no links were dropped.
        """

        def __init__(self,
            *,
            link : typing.Optional[typing.Iterable[global___Span.Link]] = ...,
            dropped_links_count : builtins.int = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["dropped_links_count",b"dropped_links_count","link",b"link"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    SPAN_ID_FIELD_NUMBER: builtins.int
    PARENT_SPAN_ID_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    ATTRIBUTES_FIELD_NUMBER: builtins.int
    STACK_TRACE_FIELD_NUMBER: builtins.int
    TIME_EVENTS_FIELD_NUMBER: builtins.int
    LINKS_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    SAME_PROCESS_AS_PARENT_SPAN_FIELD_NUMBER: builtins.int
    CHILD_SPAN_COUNT_FIELD_NUMBER: builtins.int
    SPAN_KIND_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the span in the following format:

        projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/[SPAN_ID]

    [TRACE_ID] is a unique identifier for a trace within a project;
    it is a 32-character hexadecimal encoding of a 16-byte array.

    [SPAN_ID] is a unique identifier for a span within a trace; it
    is a 16-character hexadecimal encoding of an 8-byte array.
    """

    span_id: typing.Text = ...
    """Required. The [SPAN_ID] portion of the span's resource name."""

    parent_span_id: typing.Text = ...
    """The [SPAN_ID] of this span's parent span. If this is a root span,
    then this field must be empty.
    """

    @property
    def display_name(self) -> global___TruncatableString:
        """Required. A description of the span's operation (up to 128 bytes).
        Stackdriver Trace displays the description in the
        Google Cloud Platform Console.
        For example, the display name can be a qualified method name or a file name
        and a line number where the operation is called. A best practice is to use
        the same display name within an application and at the same call point.
        This makes it easier to correlate spans in different traces.
        """
        pass
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Required. The start time of the span. On the client side, this is the time kept by
        the local machine where the span execution starts. On the server side, this
        is the time when the server's application handler starts running.
        """
        pass
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Required. The end time of the span. On the client side, this is the time kept by
        the local machine where the span execution ends. On the server side, this
        is the time when the server application handler stops running.
        """
        pass
    @property
    def attributes(self) -> global___Span.Attributes:
        """A set of attributes on the span. You can have up to 32 attributes per
        span.
        """
        pass
    @property
    def stack_trace(self) -> global___StackTrace:
        """Stack trace captured at the start of the span."""
        pass
    @property
    def time_events(self) -> global___Span.TimeEvents:
        """A set of time events. You can have up to 32 annotations and 128 message
        events per span.
        """
        pass
    @property
    def links(self) -> global___Span.Links:
        """Links associated with the span. You can have up to 128 links per Span."""
        pass
    @property
    def status(self) -> google.rpc.status_pb2.Status:
        """Optional. The final status for this span."""
        pass
    @property
    def same_process_as_parent_span(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Optional. Set this parameter to indicate whether this span is in
        the same process as its parent. If you do not set this parameter,
        Stackdriver Trace is unable to take advantage of this helpful
        information.
        """
        pass
    @property
    def child_span_count(self) -> google.protobuf.wrappers_pb2.Int32Value:
        """Optional. The number of child spans that were generated while this span
        was active. If set, allows implementation to detect missing child spans.
        """
        pass
    span_kind: global___Span.SpanKind.ValueType = ...
    """Optional. Distinguishes between spans generated in a particular context. For example,
    two spans with the same name may be distinguished using `CLIENT` (caller)
    and `SERVER` (callee) to identify an RPC call.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        span_id : typing.Text = ...,
        parent_span_id : typing.Text = ...,
        display_name : typing.Optional[global___TruncatableString] = ...,
        start_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        end_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        attributes : typing.Optional[global___Span.Attributes] = ...,
        stack_trace : typing.Optional[global___StackTrace] = ...,
        time_events : typing.Optional[global___Span.TimeEvents] = ...,
        links : typing.Optional[global___Span.Links] = ...,
        status : typing.Optional[google.rpc.status_pb2.Status] = ...,
        same_process_as_parent_span : typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        child_span_count : typing.Optional[google.protobuf.wrappers_pb2.Int32Value] = ...,
        span_kind : global___Span.SpanKind.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["attributes",b"attributes","child_span_count",b"child_span_count","display_name",b"display_name","end_time",b"end_time","links",b"links","same_process_as_parent_span",b"same_process_as_parent_span","stack_trace",b"stack_trace","start_time",b"start_time","status",b"status","time_events",b"time_events"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["attributes",b"attributes","child_span_count",b"child_span_count","display_name",b"display_name","end_time",b"end_time","links",b"links","name",b"name","parent_span_id",b"parent_span_id","same_process_as_parent_span",b"same_process_as_parent_span","span_id",b"span_id","span_kind",b"span_kind","stack_trace",b"stack_trace","start_time",b"start_time","status",b"status","time_events",b"time_events"]) -> None: ...
global___Span = Span

class AttributeValue(google.protobuf.message.Message):
    """The allowed types for [VALUE] in a `[KEY]:[VALUE]` attribute."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    STRING_VALUE_FIELD_NUMBER: builtins.int
    INT_VALUE_FIELD_NUMBER: builtins.int
    BOOL_VALUE_FIELD_NUMBER: builtins.int
    @property
    def string_value(self) -> global___TruncatableString:
        """A string up to 256 bytes long."""
        pass
    int_value: builtins.int = ...
    """A 64-bit signed integer."""

    bool_value: builtins.bool = ...
    """A Boolean value represented by `true` or `false`."""

    def __init__(self,
        *,
        string_value : typing.Optional[global___TruncatableString] = ...,
        int_value : builtins.int = ...,
        bool_value : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bool_value",b"bool_value","int_value",b"int_value","string_value",b"string_value","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bool_value",b"bool_value","int_value",b"int_value","string_value",b"string_value","value",b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["value",b"value"]) -> typing.Optional[typing_extensions.Literal["string_value","int_value","bool_value"]]: ...
global___AttributeValue = AttributeValue

class StackTrace(google.protobuf.message.Message):
    """A call stack appearing in a trace."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class StackFrame(google.protobuf.message.Message):
        """Represents a single stack frame in a stack trace."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        FUNCTION_NAME_FIELD_NUMBER: builtins.int
        ORIGINAL_FUNCTION_NAME_FIELD_NUMBER: builtins.int
        FILE_NAME_FIELD_NUMBER: builtins.int
        LINE_NUMBER_FIELD_NUMBER: builtins.int
        COLUMN_NUMBER_FIELD_NUMBER: builtins.int
        LOAD_MODULE_FIELD_NUMBER: builtins.int
        SOURCE_VERSION_FIELD_NUMBER: builtins.int
        @property
        def function_name(self) -> global___TruncatableString:
            """The fully-qualified name that uniquely identifies the function or
            method that is active in this frame (up to 1024 bytes).
            """
            pass
        @property
        def original_function_name(self) -> global___TruncatableString:
            """An un-mangled function name, if `function_name` is
            [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
            be fully-qualified (up to 1024 bytes).
            """
            pass
        @property
        def file_name(self) -> global___TruncatableString:
            """The name of the source file where the function call appears (up to 256
            bytes).
            """
            pass
        line_number: builtins.int = ...
        """The line number in `file_name` where the function call appears."""

        column_number: builtins.int = ...
        """The column number where the function call appears, if available.
        This is important in JavaScript because of its anonymous functions.
        """

        @property
        def load_module(self) -> global___Module:
            """The binary module from where the code was loaded."""
            pass
        @property
        def source_version(self) -> global___TruncatableString:
            """The version of the deployed source code (up to 128 bytes)."""
            pass
        def __init__(self,
            *,
            function_name : typing.Optional[global___TruncatableString] = ...,
            original_function_name : typing.Optional[global___TruncatableString] = ...,
            file_name : typing.Optional[global___TruncatableString] = ...,
            line_number : builtins.int = ...,
            column_number : builtins.int = ...,
            load_module : typing.Optional[global___Module] = ...,
            source_version : typing.Optional[global___TruncatableString] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["file_name",b"file_name","function_name",b"function_name","load_module",b"load_module","original_function_name",b"original_function_name","source_version",b"source_version"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["column_number",b"column_number","file_name",b"file_name","function_name",b"function_name","line_number",b"line_number","load_module",b"load_module","original_function_name",b"original_function_name","source_version",b"source_version"]) -> None: ...

    class StackFrames(google.protobuf.message.Message):
        """A collection of stack frames, which can be truncated."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        FRAME_FIELD_NUMBER: builtins.int
        DROPPED_FRAMES_COUNT_FIELD_NUMBER: builtins.int
        @property
        def frame(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StackTrace.StackFrame]:
            """Stack frames in this call stack."""
            pass
        dropped_frames_count: builtins.int = ...
        """The number of stack frames that were dropped because there
        were too many stack frames.
        If this value is 0, then no stack frames were dropped.
        """

        def __init__(self,
            *,
            frame : typing.Optional[typing.Iterable[global___StackTrace.StackFrame]] = ...,
            dropped_frames_count : builtins.int = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["dropped_frames_count",b"dropped_frames_count","frame",b"frame"]) -> None: ...

    STACK_FRAMES_FIELD_NUMBER: builtins.int
    STACK_TRACE_HASH_ID_FIELD_NUMBER: builtins.int
    @property
    def stack_frames(self) -> global___StackTrace.StackFrames:
        """Stack frames in this stack trace. A maximum of 128 frames are allowed."""
        pass
    stack_trace_hash_id: builtins.int = ...
    """The hash ID is used to conserve network bandwidth for duplicate
    stack traces within a single trace.

    Often multiple spans will have identical stack traces.
    The first occurrence of a stack trace should contain both the
    `stackFrame` content and a value in `stackTraceHashId`.

    Subsequent spans within the same request can refer
    to that stack trace by only setting `stackTraceHashId`.
    """

    def __init__(self,
        *,
        stack_frames : typing.Optional[global___StackTrace.StackFrames] = ...,
        stack_trace_hash_id : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["stack_frames",b"stack_frames"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["stack_frames",b"stack_frames","stack_trace_hash_id",b"stack_trace_hash_id"]) -> None: ...
global___StackTrace = StackTrace

class Module(google.protobuf.message.Message):
    """Binary module."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    MODULE_FIELD_NUMBER: builtins.int
    BUILD_ID_FIELD_NUMBER: builtins.int
    @property
    def module(self) -> global___TruncatableString:
        """For example: main binary, kernel modules, and dynamic libraries
        such as libc.so, sharedlib.so (up to 256 bytes).
        """
        pass
    @property
    def build_id(self) -> global___TruncatableString:
        """A unique identifier for the module, usually a hash of its
        contents (up to 128 bytes).
        """
        pass
    def __init__(self,
        *,
        module : typing.Optional[global___TruncatableString] = ...,
        build_id : typing.Optional[global___TruncatableString] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["build_id",b"build_id","module",b"module"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["build_id",b"build_id","module",b"module"]) -> None: ...
global___Module = Module

class TruncatableString(google.protobuf.message.Message):
    """Represents a string that might be shortened to a specified length."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VALUE_FIELD_NUMBER: builtins.int
    TRUNCATED_BYTE_COUNT_FIELD_NUMBER: builtins.int
    value: typing.Text = ...
    """The shortened string. For example, if the original string is 500
    bytes long and the limit of the string is 128 bytes, then
    `value` contains the first 128 bytes of the 500-byte string.

    Truncation always happens on a UTF8 character boundary. If there
    are multi-byte characters in the string, then the length of the
    shortened string might be less than the size limit.
    """

    truncated_byte_count: builtins.int = ...
    """The number of bytes removed from the original string. If this
    value is 0, then the string was not shortened.
    """

    def __init__(self,
        *,
        value : typing.Text = ...,
        truncated_byte_count : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["truncated_byte_count",b"truncated_byte_count","value",b"value"]) -> None: ...
global___TruncatableString = TruncatableString
