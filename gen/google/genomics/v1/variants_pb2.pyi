"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _InfoMergeOperation:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _InfoMergeOperationEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_InfoMergeOperation.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    INFO_MERGE_OPERATION_UNSPECIFIED: InfoMergeOperation.ValueType = ...  # 0
    IGNORE_NEW: InfoMergeOperation.ValueType = ...  # 1
    """By default, Variant info fields are persisted if the Variant doesn't
    already exist in the variantset.  If the Variant is equivalent to a
    Variant already in the variantset, the incoming Variant's info field
    is ignored in favor of that of the already persisted Variant.
    """

    MOVE_TO_CALLS: InfoMergeOperation.ValueType = ...  # 2
    """This operation removes an info field from the incoming Variant
    and persists this info field in each of the incoming Variant's Calls.
    """

class InfoMergeOperation(_InfoMergeOperation, metaclass=_InfoMergeOperationEnumTypeWrapper):
    """Operations to be performed during import on Variant info fields.
    These operations are set for each info field in the info_merge_config
    map of ImportVariantsRequest, which is plumbed down to the
    MergeVariantRequests generated by the import job.
    """
    pass

INFO_MERGE_OPERATION_UNSPECIFIED: InfoMergeOperation.ValueType = ...  # 0
IGNORE_NEW: InfoMergeOperation.ValueType = ...  # 1
"""By default, Variant info fields are persisted if the Variant doesn't
already exist in the variantset.  If the Variant is equivalent to a
Variant already in the variantset, the incoming Variant's info field
is ignored in favor of that of the already persisted Variant.
"""

MOVE_TO_CALLS: InfoMergeOperation.ValueType = ...  # 2
"""This operation removes an info field from the incoming Variant
and persists this info field in each of the incoming Variant's Calls.
"""

global___InfoMergeOperation = InfoMergeOperation


class VariantSetMetadata(google.protobuf.message.Message):
    """Metadata describes a single piece of variant call metadata.
    These data include a top level key and either a single value string (value)
    or a list of key-value pairs (info.)
    Value and info are mutually exclusive.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Type:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        TYPE_UNSPECIFIED: VariantSetMetadata.Type.ValueType = ...  # 0
        INTEGER: VariantSetMetadata.Type.ValueType = ...  # 1
        FLOAT: VariantSetMetadata.Type.ValueType = ...  # 2
        FLAG: VariantSetMetadata.Type.ValueType = ...  # 3
        CHARACTER: VariantSetMetadata.Type.ValueType = ...  # 4
        STRING: VariantSetMetadata.Type.ValueType = ...  # 5
    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        pass

    TYPE_UNSPECIFIED: VariantSetMetadata.Type.ValueType = ...  # 0
    INTEGER: VariantSetMetadata.Type.ValueType = ...  # 1
    FLOAT: VariantSetMetadata.Type.ValueType = ...  # 2
    FLAG: VariantSetMetadata.Type.ValueType = ...  # 3
    CHARACTER: VariantSetMetadata.Type.ValueType = ...  # 4
    STRING: VariantSetMetadata.Type.ValueType = ...  # 5

    class InfoEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> google.protobuf.struct_pb2.ListValue: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[google.protobuf.struct_pb2.ListValue] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    KEY_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    NUMBER_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    INFO_FIELD_NUMBER: builtins.int
    key: typing.Text = ...
    """The top-level key."""

    value: typing.Text = ...
    """The value field for simple metadata"""

    id: typing.Text = ...
    """User-provided ID field, not enforced by this API.
    Two or more pieces of structured metadata with identical
    id and key fields are considered equivalent.
    """

    type: global___VariantSetMetadata.Type.ValueType = ...
    """The type of data. Possible types include: Integer, Float,
    Flag, Character, and String.
    """

    number: typing.Text = ...
    """The number of values that can be included in a field described by this
    metadata.
    """

    description: typing.Text = ...
    """A textual description of this metadata."""

    @property
    def info(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, google.protobuf.struct_pb2.ListValue]:
        """Remaining structured metadata key-value pairs. This must be of the form
        map<string, string[]> (string key mapping to a list of string values).
        """
        pass
    def __init__(self,
        *,
        key : typing.Text = ...,
        value : typing.Text = ...,
        id : typing.Text = ...,
        type : global___VariantSetMetadata.Type.ValueType = ...,
        number : typing.Text = ...,
        description : typing.Text = ...,
        info : typing.Optional[typing.Mapping[typing.Text, google.protobuf.struct_pb2.ListValue]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","id",b"id","info",b"info","key",b"key","number",b"number","type",b"type","value",b"value"]) -> None: ...
global___VariantSetMetadata = VariantSetMetadata

class VariantSet(google.protobuf.message.Message):
    """A variant set is a collection of call sets and variants. It contains summary
    statistics of those contents. A variant set belongs to a dataset.

    For more genomics resource definitions, see [Fundamentals of Google
    Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DATASET_ID_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    REFERENCE_SET_ID_FIELD_NUMBER: builtins.int
    REFERENCE_BOUNDS_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    dataset_id: typing.Text = ...
    """The dataset to which this variant set belongs."""

    id: typing.Text = ...
    """The server-generated variant set ID, unique across all variant sets."""

    reference_set_id: typing.Text = ...
    """The reference set to which the variant set is mapped. The reference set
    describes the alignment provenance of the variant set, while the
    `referenceBounds` describe the shape of the actual variant data. The
    reference set's reference names are a superset of those found in the
    `referenceBounds`.

    For example, given a variant set that is mapped to the GRCh38 reference set
    and contains a single variant on reference 'X', `referenceBounds` would
    contain only an entry for 'X', while the associated reference set
    enumerates all possible references: '1', '2', 'X', 'Y', 'MT', etc.
    """

    @property
    def reference_bounds(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ReferenceBound]:
        """A list of all references used by the variants in a variant set
        with associated coordinate upper bounds for each one.
        """
        pass
    @property
    def metadata(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___VariantSetMetadata]:
        """The metadata associated with this variant set."""
        pass
    name: typing.Text = ...
    """User-specified, mutable name."""

    description: typing.Text = ...
    """A textual description of this variant set."""

    def __init__(self,
        *,
        dataset_id : typing.Text = ...,
        id : typing.Text = ...,
        reference_set_id : typing.Text = ...,
        reference_bounds : typing.Optional[typing.Iterable[global___ReferenceBound]] = ...,
        metadata : typing.Optional[typing.Iterable[global___VariantSetMetadata]] = ...,
        name : typing.Text = ...,
        description : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dataset_id",b"dataset_id","description",b"description","id",b"id","metadata",b"metadata","name",b"name","reference_bounds",b"reference_bounds","reference_set_id",b"reference_set_id"]) -> None: ...
global___VariantSet = VariantSet

class Variant(google.protobuf.message.Message):
    """A variant represents a change in DNA sequence relative to a reference
    sequence. For example, a variant could represent a SNP or an insertion.
    Variants belong to a variant set.

    For more genomics resource definitions, see [Fundamentals of Google
    Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)

    Each of the calls on a variant represent a determination of genotype with
    respect to that variant. For example, a call might assign probability of 0.32
    to the occurrence of a SNP named rs1234 in a sample named NA12345. A call
    belongs to a call set, which contains related calls typically from one
    sample.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class InfoEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> google.protobuf.struct_pb2.ListValue: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[google.protobuf.struct_pb2.ListValue] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    VARIANT_SET_ID_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    NAMES_FIELD_NUMBER: builtins.int
    CREATED_FIELD_NUMBER: builtins.int
    REFERENCE_NAME_FIELD_NUMBER: builtins.int
    START_FIELD_NUMBER: builtins.int
    END_FIELD_NUMBER: builtins.int
    REFERENCE_BASES_FIELD_NUMBER: builtins.int
    ALTERNATE_BASES_FIELD_NUMBER: builtins.int
    QUALITY_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    INFO_FIELD_NUMBER: builtins.int
    CALLS_FIELD_NUMBER: builtins.int
    variant_set_id: typing.Text = ...
    """The ID of the variant set this variant belongs to."""

    id: typing.Text = ...
    """The server-generated variant ID, unique across all variants."""

    @property
    def names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Names for the variant, for example a RefSNP ID."""
        pass
    created: builtins.int = ...
    """The date this variant was created, in milliseconds from the epoch."""

    reference_name: typing.Text = ...
    """The reference on which this variant occurs.
    (such as `chr20` or `X`)
    """

    start: builtins.int = ...
    """The position at which this variant occurs (0-based).
    This corresponds to the first base of the string of reference bases.
    """

    end: builtins.int = ...
    """The end position (0-based) of this variant. This corresponds to the first
    base after the last base in the reference allele. So, the length of
    the reference allele is (end - start). This is useful for variants
    that don't explicitly give alternate bases, for example large deletions.
    """

    reference_bases: typing.Text = ...
    """The reference bases for this variant. They start at the given
    position.
    """

    @property
    def alternate_bases(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The bases that appear instead of the reference bases."""
        pass
    quality: builtins.float = ...
    """A measure of how likely this variant is to be real.
    A higher value is better.
    """

    @property
    def filter(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A list of filters (normally quality filters) this variant has failed.
        `PASS` indicates this variant has passed all filters.
        """
        pass
    @property
    def info(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, google.protobuf.struct_pb2.ListValue]:
        """A map of additional variant information. This must be of the form
        map<string, string[]> (string key mapping to a list of string values).
        """
        pass
    @property
    def calls(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___VariantCall]:
        """The variant calls for this particular variant. Each one represents the
        determination of genotype with respect to this variant.
        """
        pass
    def __init__(self,
        *,
        variant_set_id : typing.Text = ...,
        id : typing.Text = ...,
        names : typing.Optional[typing.Iterable[typing.Text]] = ...,
        created : builtins.int = ...,
        reference_name : typing.Text = ...,
        start : builtins.int = ...,
        end : builtins.int = ...,
        reference_bases : typing.Text = ...,
        alternate_bases : typing.Optional[typing.Iterable[typing.Text]] = ...,
        quality : builtins.float = ...,
        filter : typing.Optional[typing.Iterable[typing.Text]] = ...,
        info : typing.Optional[typing.Mapping[typing.Text, google.protobuf.struct_pb2.ListValue]] = ...,
        calls : typing.Optional[typing.Iterable[global___VariantCall]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["alternate_bases",b"alternate_bases","calls",b"calls","created",b"created","end",b"end","filter",b"filter","id",b"id","info",b"info","names",b"names","quality",b"quality","reference_bases",b"reference_bases","reference_name",b"reference_name","start",b"start","variant_set_id",b"variant_set_id"]) -> None: ...
global___Variant = Variant

class VariantCall(google.protobuf.message.Message):
    """A call represents the determination of genotype with respect to a particular
    variant. It may include associated information such as quality and phasing.
    For example, a call might assign a probability of 0.32 to the occurrence of
    a SNP named rs1234 in a call set with the name NA12345.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class InfoEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> google.protobuf.struct_pb2.ListValue: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[google.protobuf.struct_pb2.ListValue] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    CALL_SET_ID_FIELD_NUMBER: builtins.int
    CALL_SET_NAME_FIELD_NUMBER: builtins.int
    GENOTYPE_FIELD_NUMBER: builtins.int
    PHASESET_FIELD_NUMBER: builtins.int
    GENOTYPE_LIKELIHOOD_FIELD_NUMBER: builtins.int
    INFO_FIELD_NUMBER: builtins.int
    call_set_id: typing.Text = ...
    """The ID of the call set this variant call belongs to."""

    call_set_name: typing.Text = ...
    """The name of the call set this variant call belongs to."""

    @property
    def genotype(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """The genotype of this variant call. Each value represents either the value
        of the `referenceBases` field or a 1-based index into
        `alternateBases`. If a variant had a `referenceBases`
        value of `T` and an `alternateBases`
        value of `["A", "C"]`, and the `genotype` was
        `[2, 1]`, that would mean the call
        represented the heterozygous value `CA` for this variant.
        If the `genotype` was instead `[0, 1]`, the
        represented value would be `TA`. Ordering of the
        genotype values is important if the `phaseset` is present.
        If a genotype is not called (that is, a `.` is present in the
        GT string) -1 is returned.
        """
        pass
    phaseset: typing.Text = ...
    """If this field is present, this variant call's genotype ordering implies
    the phase of the bases and is consistent with any other variant calls in
    the same reference sequence which have the same phaseset value.
    When importing data from VCF, if the genotype data was phased but no
    phase set was specified this field will be set to `*`.
    """

    @property
    def genotype_likelihood(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """The genotype likelihoods for this variant call. Each array entry
        represents how likely a specific genotype is for this call. The value
        ordering is defined by the GL tag in the VCF spec.
        If Phred-scaled genotype likelihood scores (PL) are available and
        log10(P) genotype likelihood scores (GL) are not, PL scores are converted
        to GL scores.  If both are available, PL scores are stored in `info`.
        """
        pass
    @property
    def info(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, google.protobuf.struct_pb2.ListValue]:
        """A map of additional variant call information. This must be of the form
        map<string, string[]> (string key mapping to a list of string values).
        """
        pass
    def __init__(self,
        *,
        call_set_id : typing.Text = ...,
        call_set_name : typing.Text = ...,
        genotype : typing.Optional[typing.Iterable[builtins.int]] = ...,
        phaseset : typing.Text = ...,
        genotype_likelihood : typing.Optional[typing.Iterable[builtins.float]] = ...,
        info : typing.Optional[typing.Mapping[typing.Text, google.protobuf.struct_pb2.ListValue]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["call_set_id",b"call_set_id","call_set_name",b"call_set_name","genotype",b"genotype","genotype_likelihood",b"genotype_likelihood","info",b"info","phaseset",b"phaseset"]) -> None: ...
global___VariantCall = VariantCall

class CallSet(google.protobuf.message.Message):
    """A call set is a collection of variant calls, typically for one sample. It
    belongs to a variant set.

    For more genomics resource definitions, see [Fundamentals of Google
    Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class InfoEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> google.protobuf.struct_pb2.ListValue: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[google.protobuf.struct_pb2.ListValue] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    SAMPLE_ID_FIELD_NUMBER: builtins.int
    VARIANT_SET_IDS_FIELD_NUMBER: builtins.int
    CREATED_FIELD_NUMBER: builtins.int
    INFO_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """The server-generated call set ID, unique across all call sets."""

    name: typing.Text = ...
    """The call set name."""

    sample_id: typing.Text = ...
    """The sample ID this call set corresponds to."""

    @property
    def variant_set_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The IDs of the variant sets this call set belongs to. This field must
        have exactly length one, as a call set belongs to a single variant set.
        This field is repeated for compatibility with the
        [GA4GH 0.5.1
        API](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variants.avdl#L76).
        """
        pass
    created: builtins.int = ...
    """The date this call set was created in milliseconds from the epoch."""

    @property
    def info(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, google.protobuf.struct_pb2.ListValue]:
        """A map of additional call set information. This must be of the form
        map<string, string[]> (string key mapping to a list of string values).
        """
        pass
    def __init__(self,
        *,
        id : typing.Text = ...,
        name : typing.Text = ...,
        sample_id : typing.Text = ...,
        variant_set_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        created : builtins.int = ...,
        info : typing.Optional[typing.Mapping[typing.Text, google.protobuf.struct_pb2.ListValue]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["created",b"created","id",b"id","info",b"info","name",b"name","sample_id",b"sample_id","variant_set_ids",b"variant_set_ids"]) -> None: ...
global___CallSet = CallSet

class ReferenceBound(google.protobuf.message.Message):
    """ReferenceBound records an upper bound for the starting coordinate of
    variants in a particular reference.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    REFERENCE_NAME_FIELD_NUMBER: builtins.int
    UPPER_BOUND_FIELD_NUMBER: builtins.int
    reference_name: typing.Text = ...
    """The name of the reference associated with this reference bound."""

    upper_bound: builtins.int = ...
    """An upper bound (inclusive) on the starting coordinate of any
    variant in the reference sequence.
    """

    def __init__(self,
        *,
        reference_name : typing.Text = ...,
        upper_bound : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["reference_name",b"reference_name","upper_bound",b"upper_bound"]) -> None: ...
global___ReferenceBound = ReferenceBound

class ImportVariantsRequest(google.protobuf.message.Message):
    """The variant data import request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Format:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _FormatEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Format.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        FORMAT_UNSPECIFIED: ImportVariantsRequest.Format.ValueType = ...  # 0
        FORMAT_VCF: ImportVariantsRequest.Format.ValueType = ...  # 1
        """VCF (Variant Call Format). The VCF files may be gzip compressed. gVCF is
        also supported.
        """

        FORMAT_COMPLETE_GENOMICS: ImportVariantsRequest.Format.ValueType = ...  # 2
        """Complete Genomics masterVarBeta format. The masterVarBeta files may
        be bzip2 compressed.
        """

    class Format(_Format, metaclass=_FormatEnumTypeWrapper):
        pass

    FORMAT_UNSPECIFIED: ImportVariantsRequest.Format.ValueType = ...  # 0
    FORMAT_VCF: ImportVariantsRequest.Format.ValueType = ...  # 1
    """VCF (Variant Call Format). The VCF files may be gzip compressed. gVCF is
    also supported.
    """

    FORMAT_COMPLETE_GENOMICS: ImportVariantsRequest.Format.ValueType = ...  # 2
    """Complete Genomics masterVarBeta format. The masterVarBeta files may
    be bzip2 compressed.
    """


    class InfoMergeConfigEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: global___InfoMergeOperation.ValueType = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : global___InfoMergeOperation.ValueType = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    VARIANT_SET_ID_FIELD_NUMBER: builtins.int
    SOURCE_URIS_FIELD_NUMBER: builtins.int
    FORMAT_FIELD_NUMBER: builtins.int
    NORMALIZE_REFERENCE_NAMES_FIELD_NUMBER: builtins.int
    INFO_MERGE_CONFIG_FIELD_NUMBER: builtins.int
    variant_set_id: typing.Text = ...
    """Required. The variant set to which variant data should be imported."""

    @property
    def source_uris(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A list of URIs referencing variant files in Google Cloud Storage. URIs can
        include wildcards [as described
        here](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames).
        Note that recursive wildcards ('**') are not supported.
        """
        pass
    format: global___ImportVariantsRequest.Format.ValueType = ...
    """The format of the variant data being imported. If unspecified, defaults to
    to `VCF`.
    """

    normalize_reference_names: builtins.bool = ...
    """Convert reference names to the canonical representation.
    hg19 haploytypes (those reference names containing "_hap")
    are not modified in any way.
    All other reference names are modified according to the following rules:
    The reference name is capitalized.
    The "chr" prefix is dropped for all autosomes and sex chromsomes.
    For example "chr17" becomes "17" and "chrX" becomes "X".
    All mitochondrial chromosomes ("chrM", "chrMT", etc) become "MT".
    """

    @property
    def info_merge_config(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, global___InfoMergeOperation.ValueType]:
        """A mapping between info field keys and the InfoMergeOperations to
        be performed on them. This is plumbed down to the MergeVariantRequests
        generated by the resulting import job.
        """
        pass
    def __init__(self,
        *,
        variant_set_id : typing.Text = ...,
        source_uris : typing.Optional[typing.Iterable[typing.Text]] = ...,
        format : global___ImportVariantsRequest.Format.ValueType = ...,
        normalize_reference_names : builtins.bool = ...,
        info_merge_config : typing.Optional[typing.Mapping[typing.Text, global___InfoMergeOperation.ValueType]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["format",b"format","info_merge_config",b"info_merge_config","normalize_reference_names",b"normalize_reference_names","source_uris",b"source_uris","variant_set_id",b"variant_set_id"]) -> None: ...
global___ImportVariantsRequest = ImportVariantsRequest

class ImportVariantsResponse(google.protobuf.message.Message):
    """The variant data import response."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CALL_SET_IDS_FIELD_NUMBER: builtins.int
    @property
    def call_set_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """IDs of the call sets created during the import."""
        pass
    def __init__(self,
        *,
        call_set_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["call_set_ids",b"call_set_ids"]) -> None: ...
global___ImportVariantsResponse = ImportVariantsResponse

class CreateVariantSetRequest(google.protobuf.message.Message):
    """The CreateVariantSet request"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VARIANT_SET_FIELD_NUMBER: builtins.int
    @property
    def variant_set(self) -> global___VariantSet:
        """Required. The variant set to be created. Must have a valid `datasetId`."""
        pass
    def __init__(self,
        *,
        variant_set : typing.Optional[global___VariantSet] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["variant_set",b"variant_set"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["variant_set",b"variant_set"]) -> None: ...
global___CreateVariantSetRequest = CreateVariantSetRequest

class ExportVariantSetRequest(google.protobuf.message.Message):
    """The variant data export request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Format:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _FormatEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Format.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        FORMAT_UNSPECIFIED: ExportVariantSetRequest.Format.ValueType = ...  # 0
        FORMAT_BIGQUERY: ExportVariantSetRequest.Format.ValueType = ...  # 1
        """Export the data to Google BigQuery."""

    class Format(_Format, metaclass=_FormatEnumTypeWrapper):
        pass

    FORMAT_UNSPECIFIED: ExportVariantSetRequest.Format.ValueType = ...  # 0
    FORMAT_BIGQUERY: ExportVariantSetRequest.Format.ValueType = ...  # 1
    """Export the data to Google BigQuery."""


    VARIANT_SET_ID_FIELD_NUMBER: builtins.int
    CALL_SET_IDS_FIELD_NUMBER: builtins.int
    PROJECT_ID_FIELD_NUMBER: builtins.int
    FORMAT_FIELD_NUMBER: builtins.int
    BIGQUERY_DATASET_FIELD_NUMBER: builtins.int
    BIGQUERY_TABLE_FIELD_NUMBER: builtins.int
    variant_set_id: typing.Text = ...
    """Required. The ID of the variant set that contains variant data which
    should be exported. The caller must have READ access to this variant set.
    """

    @property
    def call_set_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """If provided, only variant call information from the specified call sets
        will be exported. By default all variant calls are exported.
        """
        pass
    project_id: typing.Text = ...
    """Required. The Google Cloud project ID that owns the destination
    BigQuery dataset. The caller must have WRITE access to this project.  This
    project will also own the resulting export job.
    """

    format: global___ExportVariantSetRequest.Format.ValueType = ...
    """The format for the exported data."""

    bigquery_dataset: typing.Text = ...
    """Required. The BigQuery dataset to export data to. This dataset must already
    exist. Note that this is distinct from the Genomics concept of "dataset".
    """

    bigquery_table: typing.Text = ...
    """Required. The BigQuery table to export data to.
    If the table doesn't exist, it will be created. If it already exists, it
    will be overwritten.
    """

    def __init__(self,
        *,
        variant_set_id : typing.Text = ...,
        call_set_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        project_id : typing.Text = ...,
        format : global___ExportVariantSetRequest.Format.ValueType = ...,
        bigquery_dataset : typing.Text = ...,
        bigquery_table : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["bigquery_dataset",b"bigquery_dataset","bigquery_table",b"bigquery_table","call_set_ids",b"call_set_ids","format",b"format","project_id",b"project_id","variant_set_id",b"variant_set_id"]) -> None: ...
global___ExportVariantSetRequest = ExportVariantSetRequest

class GetVariantSetRequest(google.protobuf.message.Message):
    """The variant set request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VARIANT_SET_ID_FIELD_NUMBER: builtins.int
    variant_set_id: typing.Text = ...
    """Required. The ID of the variant set."""

    def __init__(self,
        *,
        variant_set_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["variant_set_id",b"variant_set_id"]) -> None: ...
global___GetVariantSetRequest = GetVariantSetRequest

class SearchVariantSetsRequest(google.protobuf.message.Message):
    """The search variant sets request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DATASET_IDS_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    @property
    def dataset_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Exactly one dataset ID must be provided here. Only variant sets which
        belong to this dataset will be returned.
        """
        pass
    page_token: typing.Text = ...
    """The continuation token, which is used to page through large result sets.
    To get the next page of results, set this parameter to the value of
    `nextPageToken` from the previous response.
    """

    page_size: builtins.int = ...
    """The maximum number of results to return in a single page. If unspecified,
    defaults to 1024.
    """

    def __init__(self,
        *,
        dataset_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        page_token : typing.Text = ...,
        page_size : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dataset_ids",b"dataset_ids","page_size",b"page_size","page_token",b"page_token"]) -> None: ...
global___SearchVariantSetsRequest = SearchVariantSetsRequest

class SearchVariantSetsResponse(google.protobuf.message.Message):
    """The search variant sets response."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VARIANT_SETS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def variant_sets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___VariantSet]:
        """The variant sets belonging to the requested dataset."""
        pass
    next_page_token: typing.Text = ...
    """The continuation token, which is used to page through large result sets.
    Provide this value in a subsequent request to return the next page of
    results. This field will be empty if there aren't any additional results.
    """

    def __init__(self,
        *,
        variant_sets : typing.Optional[typing.Iterable[global___VariantSet]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","variant_sets",b"variant_sets"]) -> None: ...
global___SearchVariantSetsResponse = SearchVariantSetsResponse

class DeleteVariantSetRequest(google.protobuf.message.Message):
    """The delete variant set request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VARIANT_SET_ID_FIELD_NUMBER: builtins.int
    variant_set_id: typing.Text = ...
    """The ID of the variant set to be deleted."""

    def __init__(self,
        *,
        variant_set_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["variant_set_id",b"variant_set_id"]) -> None: ...
global___DeleteVariantSetRequest = DeleteVariantSetRequest

class UpdateVariantSetRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VARIANT_SET_ID_FIELD_NUMBER: builtins.int
    VARIANT_SET_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    variant_set_id: typing.Text = ...
    """The ID of the variant to be updated (must already exist)."""

    @property
    def variant_set(self) -> global___VariantSet:
        """The new variant data. Only the variant_set.metadata will be considered
        for update.
        """
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """An optional mask specifying which fields to update. Supported fields:

        * [metadata][google.genomics.v1.VariantSet.metadata].
        * [name][google.genomics.v1.VariantSet.name].
        * [description][google.genomics.v1.VariantSet.description].

        Leaving `updateMask` unset is equivalent to specifying all mutable
        fields.
        """
        pass
    def __init__(self,
        *,
        variant_set_id : typing.Text = ...,
        variant_set : typing.Optional[global___VariantSet] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["update_mask",b"update_mask","variant_set",b"variant_set"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["update_mask",b"update_mask","variant_set",b"variant_set","variant_set_id",b"variant_set_id"]) -> None: ...
global___UpdateVariantSetRequest = UpdateVariantSetRequest

class SearchVariantsRequest(google.protobuf.message.Message):
    """The variant search request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VARIANT_SET_IDS_FIELD_NUMBER: builtins.int
    VARIANT_NAME_FIELD_NUMBER: builtins.int
    CALL_SET_IDS_FIELD_NUMBER: builtins.int
    REFERENCE_NAME_FIELD_NUMBER: builtins.int
    START_FIELD_NUMBER: builtins.int
    END_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    MAX_CALLS_FIELD_NUMBER: builtins.int
    @property
    def variant_set_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """At most one variant set ID must be provided. Only variants from this
        variant set will be returned. If omitted, a call set id must be included in
        the request.
        """
        pass
    variant_name: typing.Text = ...
    """Only return variants which have exactly this name."""

    @property
    def call_set_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Only return variant calls which belong to call sets with these ids.
        Leaving this blank returns all variant calls. If a variant has no
        calls belonging to any of these call sets, it won't be returned at all.
        """
        pass
    reference_name: typing.Text = ...
    """Required. Only return variants in this reference sequence."""

    start: builtins.int = ...
    """The beginning of the window (0-based, inclusive) for which
    overlapping variants should be returned. If unspecified, defaults to 0.
    """

    end: builtins.int = ...
    """The end of the window, 0-based exclusive. If unspecified or 0, defaults to
    the length of the reference.
    """

    page_token: typing.Text = ...
    """The continuation token, which is used to page through large result sets.
    To get the next page of results, set this parameter to the value of
    `nextPageToken` from the previous response.
    """

    page_size: builtins.int = ...
    """The maximum number of variants to return in a single page. If unspecified,
    defaults to 5000. The maximum value is 10000.
    """

    max_calls: builtins.int = ...
    """The maximum number of calls to return in a single page. Note that this
    limit may be exceeded in the event that a matching variant contains more
    calls than the requested maximum. If unspecified, defaults to 5000. The
    maximum value is 10000.
    """

    def __init__(self,
        *,
        variant_set_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        variant_name : typing.Text = ...,
        call_set_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        reference_name : typing.Text = ...,
        start : builtins.int = ...,
        end : builtins.int = ...,
        page_token : typing.Text = ...,
        page_size : builtins.int = ...,
        max_calls : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["call_set_ids",b"call_set_ids","end",b"end","max_calls",b"max_calls","page_size",b"page_size","page_token",b"page_token","reference_name",b"reference_name","start",b"start","variant_name",b"variant_name","variant_set_ids",b"variant_set_ids"]) -> None: ...
global___SearchVariantsRequest = SearchVariantsRequest

class SearchVariantsResponse(google.protobuf.message.Message):
    """The variant search response."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VARIANTS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def variants(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Variant]:
        """The list of matching Variants."""
        pass
    next_page_token: typing.Text = ...
    """The continuation token, which is used to page through large result sets.
    Provide this value in a subsequent request to return the next page of
    results. This field will be empty if there aren't any additional results.
    """

    def __init__(self,
        *,
        variants : typing.Optional[typing.Iterable[global___Variant]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","variants",b"variants"]) -> None: ...
global___SearchVariantsResponse = SearchVariantsResponse

class CreateVariantRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VARIANT_FIELD_NUMBER: builtins.int
    @property
    def variant(self) -> global___Variant:
        """The variant to be created."""
        pass
    def __init__(self,
        *,
        variant : typing.Optional[global___Variant] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["variant",b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["variant",b"variant"]) -> None: ...
global___CreateVariantRequest = CreateVariantRequest

class UpdateVariantRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VARIANT_ID_FIELD_NUMBER: builtins.int
    VARIANT_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    variant_id: typing.Text = ...
    """The ID of the variant to be updated."""

    @property
    def variant(self) -> global___Variant:
        """The new variant data."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """An optional mask specifying which fields to update. At this time, mutable
        fields are [names][google.genomics.v1.Variant.names] and
        [info][google.genomics.v1.Variant.info]. Acceptable values are "names" and
        "info". If unspecified, all mutable fields will be updated.
        """
        pass
    def __init__(self,
        *,
        variant_id : typing.Text = ...,
        variant : typing.Optional[global___Variant] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["update_mask",b"update_mask","variant",b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["update_mask",b"update_mask","variant",b"variant","variant_id",b"variant_id"]) -> None: ...
global___UpdateVariantRequest = UpdateVariantRequest

class DeleteVariantRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VARIANT_ID_FIELD_NUMBER: builtins.int
    variant_id: typing.Text = ...
    """The ID of the variant to be deleted."""

    def __init__(self,
        *,
        variant_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["variant_id",b"variant_id"]) -> None: ...
global___DeleteVariantRequest = DeleteVariantRequest

class GetVariantRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VARIANT_ID_FIELD_NUMBER: builtins.int
    variant_id: typing.Text = ...
    """The ID of the variant."""

    def __init__(self,
        *,
        variant_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["variant_id",b"variant_id"]) -> None: ...
global___GetVariantRequest = GetVariantRequest

class MergeVariantsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class InfoMergeConfigEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: global___InfoMergeOperation.ValueType = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : global___InfoMergeOperation.ValueType = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    VARIANT_SET_ID_FIELD_NUMBER: builtins.int
    VARIANTS_FIELD_NUMBER: builtins.int
    INFO_MERGE_CONFIG_FIELD_NUMBER: builtins.int
    variant_set_id: typing.Text = ...
    """The destination variant set."""

    @property
    def variants(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Variant]:
        """The variants to be merged with existing variants."""
        pass
    @property
    def info_merge_config(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, global___InfoMergeOperation.ValueType]:
        """A mapping between info field keys and the InfoMergeOperations to
        be performed on them.
        """
        pass
    def __init__(self,
        *,
        variant_set_id : typing.Text = ...,
        variants : typing.Optional[typing.Iterable[global___Variant]] = ...,
        info_merge_config : typing.Optional[typing.Mapping[typing.Text, global___InfoMergeOperation.ValueType]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["info_merge_config",b"info_merge_config","variant_set_id",b"variant_set_id","variants",b"variants"]) -> None: ...
global___MergeVariantsRequest = MergeVariantsRequest

class SearchCallSetsRequest(google.protobuf.message.Message):
    """The call set search request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VARIANT_SET_IDS_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    @property
    def variant_set_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Restrict the query to call sets within the given variant sets. At least one
        ID must be provided.
        """
        pass
    name: typing.Text = ...
    """Only return call sets for which a substring of the name matches this
    string.
    """

    page_token: typing.Text = ...
    """The continuation token, which is used to page through large result sets.
    To get the next page of results, set this parameter to the value of
    `nextPageToken` from the previous response.
    """

    page_size: builtins.int = ...
    """The maximum number of results to return in a single page. If unspecified,
    defaults to 1024.
    """

    def __init__(self,
        *,
        variant_set_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        name : typing.Text = ...,
        page_token : typing.Text = ...,
        page_size : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","page_size",b"page_size","page_token",b"page_token","variant_set_ids",b"variant_set_ids"]) -> None: ...
global___SearchCallSetsRequest = SearchCallSetsRequest

class SearchCallSetsResponse(google.protobuf.message.Message):
    """The call set search response."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CALL_SETS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def call_sets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CallSet]:
        """The list of matching call sets."""
        pass
    next_page_token: typing.Text = ...
    """The continuation token, which is used to page through large result sets.
    Provide this value in a subsequent request to return the next page of
    results. This field will be empty if there aren't any additional results.
    """

    def __init__(self,
        *,
        call_sets : typing.Optional[typing.Iterable[global___CallSet]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["call_sets",b"call_sets","next_page_token",b"next_page_token"]) -> None: ...
global___SearchCallSetsResponse = SearchCallSetsResponse

class CreateCallSetRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CALL_SET_FIELD_NUMBER: builtins.int
    @property
    def call_set(self) -> global___CallSet:
        """The call set to be created."""
        pass
    def __init__(self,
        *,
        call_set : typing.Optional[global___CallSet] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["call_set",b"call_set"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["call_set",b"call_set"]) -> None: ...
global___CreateCallSetRequest = CreateCallSetRequest

class UpdateCallSetRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CALL_SET_ID_FIELD_NUMBER: builtins.int
    CALL_SET_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    call_set_id: typing.Text = ...
    """The ID of the call set to be updated."""

    @property
    def call_set(self) -> global___CallSet:
        """The new call set data."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """An optional mask specifying which fields to update. At this time, the only
        mutable field is [name][google.genomics.v1.CallSet.name]. The only
        acceptable value is "name". If unspecified, all mutable fields will be
        updated.
        """
        pass
    def __init__(self,
        *,
        call_set_id : typing.Text = ...,
        call_set : typing.Optional[global___CallSet] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["call_set",b"call_set","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["call_set",b"call_set","call_set_id",b"call_set_id","update_mask",b"update_mask"]) -> None: ...
global___UpdateCallSetRequest = UpdateCallSetRequest

class DeleteCallSetRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CALL_SET_ID_FIELD_NUMBER: builtins.int
    call_set_id: typing.Text = ...
    """The ID of the call set to be deleted."""

    def __init__(self,
        *,
        call_set_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["call_set_id",b"call_set_id"]) -> None: ...
global___DeleteCallSetRequest = DeleteCallSetRequest

class GetCallSetRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CALL_SET_ID_FIELD_NUMBER: builtins.int
    call_set_id: typing.Text = ...
    """The ID of the call set."""

    def __init__(self,
        *,
        call_set_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["call_set_id",b"call_set_id"]) -> None: ...
global___GetCallSetRequest = GetCallSetRequest

class StreamVariantsRequest(google.protobuf.message.Message):
    """The stream variants request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    VARIANT_SET_ID_FIELD_NUMBER: builtins.int
    CALL_SET_IDS_FIELD_NUMBER: builtins.int
    REFERENCE_NAME_FIELD_NUMBER: builtins.int
    START_FIELD_NUMBER: builtins.int
    END_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """The Google Cloud project ID which will be billed
    for this access. The caller must have WRITE access to this project.
    Required.
    """

    variant_set_id: typing.Text = ...
    """The variant set ID from which to stream variants."""

    @property
    def call_set_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Only return variant calls which belong to call sets with these IDs.
        Leaving this blank returns all variant calls.
        """
        pass
    reference_name: typing.Text = ...
    """Required. Only return variants in this reference sequence."""

    start: builtins.int = ...
    """The beginning of the window (0-based, inclusive) for which
    overlapping variants should be returned.
    """

    end: builtins.int = ...
    """The end of the window (0-based, exclusive) for which overlapping
    variants should be returned.
    """

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        variant_set_id : typing.Text = ...,
        call_set_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        reference_name : typing.Text = ...,
        start : builtins.int = ...,
        end : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["call_set_ids",b"call_set_ids","end",b"end","project_id",b"project_id","reference_name",b"reference_name","start",b"start","variant_set_id",b"variant_set_id"]) -> None: ...
global___StreamVariantsRequest = StreamVariantsRequest

class StreamVariantsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VARIANTS_FIELD_NUMBER: builtins.int
    @property
    def variants(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Variant]: ...
    def __init__(self,
        *,
        variants : typing.Optional[typing.Iterable[global___Variant]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["variants",b"variants"]) -> None: ...
global___StreamVariantsResponse = StreamVariantsResponse
