"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class CigarUnit(google.protobuf.message.Message):
    """A single CIGAR operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Operation:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _OperationEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Operation.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        OPERATION_UNSPECIFIED: CigarUnit.Operation.ValueType = ...  # 0
        ALIGNMENT_MATCH: CigarUnit.Operation.ValueType = ...  # 1
        """An alignment match indicates that a sequence can be aligned to the
        reference without evidence of an INDEL. Unlike the
        `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators,
        the `ALIGNMENT_MATCH` operator does not indicate whether the
        reference and read sequences are an exact match. This operator is
        equivalent to SAM's `M`.
        """

        INSERT: CigarUnit.Operation.ValueType = ...  # 2
        """The insert operator indicates that the read contains evidence of bases
        being inserted into the reference. This operator is equivalent to SAM's
        `I`.
        """

        DELETE: CigarUnit.Operation.ValueType = ...  # 3
        """The delete operator indicates that the read contains evidence of bases
        being deleted from the reference. This operator is equivalent to SAM's
        `D`.
        """

        SKIP: CigarUnit.Operation.ValueType = ...  # 4
        """The skip operator indicates that this read skips a long segment of the
        reference, but the bases have not been deleted. This operator is commonly
        used when working with RNA-seq data, where reads may skip long segments
        of the reference between exons. This operator is equivalent to SAM's
        `N`.
        """

        CLIP_SOFT: CigarUnit.Operation.ValueType = ...  # 5
        """The soft clip operator indicates that bases at the start/end of a read
        have not been considered during alignment. This may occur if the majority
        of a read maps, except for low quality bases at the start/end of a read.
        This operator is equivalent to SAM's `S`. Bases that are soft
        clipped will still be stored in the read.
        """

        CLIP_HARD: CigarUnit.Operation.ValueType = ...  # 6
        """The hard clip operator indicates that bases at the start/end of a read
        have been omitted from this alignment. This may occur if this linear
        alignment is part of a chimeric alignment, or if the read has been
        trimmed (for example, during error correction or to trim poly-A tails for
        RNA-seq). This operator is equivalent to SAM's `H`.
        """

        PAD: CigarUnit.Operation.ValueType = ...  # 7
        """The pad operator indicates that there is padding in an alignment. This
        operator is equivalent to SAM's `P`.
        """

        SEQUENCE_MATCH: CigarUnit.Operation.ValueType = ...  # 8
        """This operator indicates that this portion of the aligned sequence exactly
        matches the reference. This operator is equivalent to SAM's `=`.
        """

        SEQUENCE_MISMATCH: CigarUnit.Operation.ValueType = ...  # 9
        """This operator indicates that this portion of the aligned sequence is an
        alignment match to the reference, but a sequence mismatch. This can
        indicate a SNP or a read error. This operator is equivalent to SAM's
        `X`.
        """

    class Operation(_Operation, metaclass=_OperationEnumTypeWrapper):
        """Describes the different types of CIGAR alignment operations that exist.
        Used wherever CIGAR alignments are used.
        """
        pass

    OPERATION_UNSPECIFIED: CigarUnit.Operation.ValueType = ...  # 0
    ALIGNMENT_MATCH: CigarUnit.Operation.ValueType = ...  # 1
    """An alignment match indicates that a sequence can be aligned to the
    reference without evidence of an INDEL. Unlike the
    `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators,
    the `ALIGNMENT_MATCH` operator does not indicate whether the
    reference and read sequences are an exact match. This operator is
    equivalent to SAM's `M`.
    """

    INSERT: CigarUnit.Operation.ValueType = ...  # 2
    """The insert operator indicates that the read contains evidence of bases
    being inserted into the reference. This operator is equivalent to SAM's
    `I`.
    """

    DELETE: CigarUnit.Operation.ValueType = ...  # 3
    """The delete operator indicates that the read contains evidence of bases
    being deleted from the reference. This operator is equivalent to SAM's
    `D`.
    """

    SKIP: CigarUnit.Operation.ValueType = ...  # 4
    """The skip operator indicates that this read skips a long segment of the
    reference, but the bases have not been deleted. This operator is commonly
    used when working with RNA-seq data, where reads may skip long segments
    of the reference between exons. This operator is equivalent to SAM's
    `N`.
    """

    CLIP_SOFT: CigarUnit.Operation.ValueType = ...  # 5
    """The soft clip operator indicates that bases at the start/end of a read
    have not been considered during alignment. This may occur if the majority
    of a read maps, except for low quality bases at the start/end of a read.
    This operator is equivalent to SAM's `S`. Bases that are soft
    clipped will still be stored in the read.
    """

    CLIP_HARD: CigarUnit.Operation.ValueType = ...  # 6
    """The hard clip operator indicates that bases at the start/end of a read
    have been omitted from this alignment. This may occur if this linear
    alignment is part of a chimeric alignment, or if the read has been
    trimmed (for example, during error correction or to trim poly-A tails for
    RNA-seq). This operator is equivalent to SAM's `H`.
    """

    PAD: CigarUnit.Operation.ValueType = ...  # 7
    """The pad operator indicates that there is padding in an alignment. This
    operator is equivalent to SAM's `P`.
    """

    SEQUENCE_MATCH: CigarUnit.Operation.ValueType = ...  # 8
    """This operator indicates that this portion of the aligned sequence exactly
    matches the reference. This operator is equivalent to SAM's `=`.
    """

    SEQUENCE_MISMATCH: CigarUnit.Operation.ValueType = ...  # 9
    """This operator indicates that this portion of the aligned sequence is an
    alignment match to the reference, but a sequence mismatch. This can
    indicate a SNP or a read error. This operator is equivalent to SAM's
    `X`.
    """


    OPERATION_FIELD_NUMBER: builtins.int
    OPERATION_LENGTH_FIELD_NUMBER: builtins.int
    REFERENCE_SEQUENCE_FIELD_NUMBER: builtins.int
    operation: global___CigarUnit.Operation.ValueType = ...
    operation_length: builtins.int = ...
    """The number of genomic bases that the operation runs for. Required."""

    reference_sequence: typing.Text = ...
    """`referenceSequence` is only used at mismatches
    (`SEQUENCE_MISMATCH`) and deletions (`DELETE`).
    Filling this field replaces SAM's MD tag. If the relevant information is
    not available, this field is unset.
    """

    def __init__(self,
        *,
        operation : global___CigarUnit.Operation.ValueType = ...,
        operation_length : builtins.int = ...,
        reference_sequence : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["operation",b"operation","operation_length",b"operation_length","reference_sequence",b"reference_sequence"]) -> None: ...
global___CigarUnit = CigarUnit
