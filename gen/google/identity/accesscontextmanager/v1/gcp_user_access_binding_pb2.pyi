"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class GcpUserAccessBinding(google.protobuf.message.Message):
    """Restricts access to Cloud Console and Google Cloud APIs for a set of users
    using Context-Aware Access.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    GROUP_KEY_FIELD_NUMBER: builtins.int
    ACCESS_LEVELS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Immutable. Assigned by the server during creation. The last segment has an arbitrary
    length and has only URI unreserved characters (as defined by
    [RFC 3986 Section 2.3](https://tools.ietf.org/html/rfc3986#section-2.3)).
    Should not be specified by the client during creation.
    Example: "organizations/256/gcpUserAccessBindings/b3-BhcX_Ud5N"
    """

    group_key: typing.Text = ...
    """Required. Immutable. Google Group id whose members are subject to this binding's restrictions.
    See "id" in the [G Suite Directory API's Groups resource]
    (https://developers.google.com/admin-sdk/directory/v1/reference/groups#resource).
    If a group's email address/alias is changed, this resource will continue
    to point at the changed group. This field does not accept group email
    addresses or aliases.
    Example: "01d520gv4vjcrht"
    """

    @property
    def access_levels(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Required. Access level that a user must have to be granted access. Only one access
        level is supported, not multiple. This repeated field must have exactly
        one element.
        Example: "accessPolicies/9522/accessLevels/device_trusted"
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        group_key : typing.Text = ...,
        access_levels : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["access_levels",b"access_levels","group_key",b"group_key","name",b"name"]) -> None: ...
global___GcpUserAccessBinding = GcpUserAccessBinding
