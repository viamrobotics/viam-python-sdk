"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.maps.routes.v1.custom_route_pb2
import google.maps.routes.v1.fallback_info_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class ComputeCustomRoutesResponse(google.protobuf.message.Message):
    """ComputeCustomRoutes response message."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class FallbackInfo(google.protobuf.message.Message):
        """Encapsulates fallback info for ComputeCustomRoutes. ComputeCustomRoutes
        performs two types of fallbacks:

        1. If it cannot compute the route using the routing_preference requested by
        the customer, it will fallback to another routing mode. In this case
        fallback_routing_mode and routing_mode_fallback_reason are used to
        communicate the fallback routing mode used, as well as the reason for
        fallback.

        2. If it cannot compute a 'best' route for the route objective specified by
        the customer, it might fallback to another objective.
        fallback_route_objective is used to communicate the fallback route
        objective.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _FallbackRouteObjective:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _FallbackRouteObjectiveEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_FallbackRouteObjective.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            FALLBACK_ROUTE_OBJECTIVE_UNSPECIFIED: ComputeCustomRoutesResponse.FallbackInfo.FallbackRouteObjective.ValueType = ...  # 0
            """Fallback route objective unspecified."""

            FALLBACK_RATECARD_WITHOUT_TOLL_PRICE_DATA: ComputeCustomRoutesResponse.FallbackInfo.FallbackRouteObjective.ValueType = ...  # 1
            """If customer requests RateCard and sets include_tolls to true, and
            Google does not have toll price data for the route, the API falls back
            to RateCard without considering toll price.
            """

        class FallbackRouteObjective(_FallbackRouteObjective, metaclass=_FallbackRouteObjectiveEnumTypeWrapper):
            """RouteObjective used for the response."""
            pass

        FALLBACK_ROUTE_OBJECTIVE_UNSPECIFIED: ComputeCustomRoutesResponse.FallbackInfo.FallbackRouteObjective.ValueType = ...  # 0
        """Fallback route objective unspecified."""

        FALLBACK_RATECARD_WITHOUT_TOLL_PRICE_DATA: ComputeCustomRoutesResponse.FallbackInfo.FallbackRouteObjective.ValueType = ...  # 1
        """If customer requests RateCard and sets include_tolls to true, and
        Google does not have toll price data for the route, the API falls back
        to RateCard without considering toll price.
        """


        ROUTING_MODE_FIELD_NUMBER: builtins.int
        ROUTING_MODE_REASON_FIELD_NUMBER: builtins.int
        ROUTE_OBJECTIVE_FIELD_NUMBER: builtins.int
        routing_mode: google.maps.routes.v1.fallback_info_pb2.FallbackRoutingMode.ValueType = ...
        """Routing mode used for the response. If fallback was triggered, the mode
        may be different from routing preference set in the original client
        request.
        """

        routing_mode_reason: google.maps.routes.v1.fallback_info_pb2.FallbackReason.ValueType = ...
        """The reason why fallback response was used instead of the original
        response.
        This field is only populated when the fallback mode is triggered and
        the fallback response is returned.
        """

        route_objective: global___ComputeCustomRoutesResponse.FallbackInfo.FallbackRouteObjective.ValueType = ...
        """The route objective used for the response. If fallback was triggered, the
        objective may be different from the route objective provided in the
        original client request.
        """

        def __init__(self,
            *,
            routing_mode : google.maps.routes.v1.fallback_info_pb2.FallbackRoutingMode.ValueType = ...,
            routing_mode_reason : google.maps.routes.v1.fallback_info_pb2.FallbackReason.ValueType = ...,
            route_objective : global___ComputeCustomRoutesResponse.FallbackInfo.FallbackRouteObjective.ValueType = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["route_objective",b"route_objective","routing_mode",b"routing_mode","routing_mode_reason",b"routing_mode_reason"]) -> None: ...

    ROUTES_FIELD_NUMBER: builtins.int
    FASTEST_ROUTE_FIELD_NUMBER: builtins.int
    SHORTEST_ROUTE_FIELD_NUMBER: builtins.int
    FALLBACK_INFO_FIELD_NUMBER: builtins.int
    @property
    def routes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.maps.routes.v1.custom_route_pb2.CustomRoute]:
        """The ‘best’ routes for the input route objective."""
        pass
    @property
    def fastest_route(self) -> google.maps.routes.v1.custom_route_pb2.CustomRoute:
        """The fastest reference route."""
        pass
    @property
    def shortest_route(self) -> google.maps.routes.v1.custom_route_pb2.CustomRoute:
        """The shortest reference route."""
        pass
    @property
    def fallback_info(self) -> global___ComputeCustomRoutesResponse.FallbackInfo:
        """Fallback info for custom routes."""
        pass
    def __init__(self,
        *,
        routes : typing.Optional[typing.Iterable[google.maps.routes.v1.custom_route_pb2.CustomRoute]] = ...,
        fastest_route : typing.Optional[google.maps.routes.v1.custom_route_pb2.CustomRoute] = ...,
        shortest_route : typing.Optional[google.maps.routes.v1.custom_route_pb2.CustomRoute] = ...,
        fallback_info : typing.Optional[global___ComputeCustomRoutesResponse.FallbackInfo] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["fallback_info",b"fallback_info","fastest_route",b"fastest_route","shortest_route",b"shortest_route"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["fallback_info",b"fallback_info","fastest_route",b"fastest_route","routes",b"routes","shortest_route",b"shortest_route"]) -> None: ...
global___ComputeCustomRoutesResponse = ComputeCustomRoutesResponse
