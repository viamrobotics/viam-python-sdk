"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.datacatalog.v1.timestamps_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class GcsFilesetSpec(google.protobuf.message.Message):
    """Describes a Cloud Storage fileset entry."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FILE_PATTERNS_FIELD_NUMBER: builtins.int
    SAMPLE_GCS_FILE_SPECS_FIELD_NUMBER: builtins.int
    @property
    def file_patterns(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Required. Patterns to identify a set of files in Google Cloud Storage.

        For more information, see [Wildcard Names]
        (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames).

        Note: Currently, bucket wildcards are not supported.

        Examples of valid `file_patterns`:

         * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir`
                                     directory
         * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir`
                                      and all subdirectories
         * `gs://bucket_name/file*`: matches files prefixed by `file` in
                                     `bucket_name`
         * `gs://bucket_name/??.txt`: matches files with two characters followed by
                                      `.txt` in `bucket_name`
         * `gs://bucket_name/[aeiou].txt`: matches files that contain a single
                                           vowel character followed by `.txt` in
                                           `bucket_name`
         * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ...
                                         or `m` followed by `.txt` in `bucket_name`
         * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match
                                     the `a/*/b` pattern, such as `a/c/b`, `a/d/b`
         * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`

        You can combine wildcards to match complex sets of files, for example:

        `gs://bucket_name/[a-m]??.j*g`
        """
        pass
    @property
    def sample_gcs_file_specs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GcsFileSpec]:
        """Output only. Sample files contained in this fileset, not all files
        contained in this fileset are represented here.
        """
        pass
    def __init__(self,
        *,
        file_patterns : typing.Optional[typing.Iterable[typing.Text]] = ...,
        sample_gcs_file_specs : typing.Optional[typing.Iterable[global___GcsFileSpec]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["file_patterns",b"file_patterns","sample_gcs_file_specs",b"sample_gcs_file_specs"]) -> None: ...
global___GcsFilesetSpec = GcsFilesetSpec

class GcsFileSpec(google.protobuf.message.Message):
    """Specification of a single file in Cloud Storage."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FILE_PATH_FIELD_NUMBER: builtins.int
    GCS_TIMESTAMPS_FIELD_NUMBER: builtins.int
    SIZE_BYTES_FIELD_NUMBER: builtins.int
    file_path: typing.Text = ...
    """Required. Full file path. Example: `gs://bucket_name/a/b.txt`."""

    @property
    def gcs_timestamps(self) -> google.cloud.datacatalog.v1.timestamps_pb2.SystemTimestamps:
        """Output only. Creation, modification, and expiration timestamps of a Cloud Storage file."""
        pass
    size_bytes: builtins.int = ...
    """Output only. File size in bytes."""

    def __init__(self,
        *,
        file_path : typing.Text = ...,
        gcs_timestamps : typing.Optional[google.cloud.datacatalog.v1.timestamps_pb2.SystemTimestamps] = ...,
        size_bytes : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["gcs_timestamps",b"gcs_timestamps"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["file_path",b"file_path","gcs_timestamps",b"gcs_timestamps","size_bytes",b"size_bytes"]) -> None: ...
global___GcsFileSpec = GcsFileSpec
