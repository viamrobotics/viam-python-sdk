"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Tag(google.protobuf.message.Message):
    """Tags are used to attach custom metadata to Data Catalog resources. Tags
    conform to the specifications within their tag template.

    See [Data Catalog
    IAM](https://cloud.google.com/data-catalog/docs/concepts/iam) for information
    on the permissions needed to create or view tags.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class FieldsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___TagField: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___TagField] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    TEMPLATE_FIELD_NUMBER: builtins.int
    TEMPLATE_DISPLAY_NAME_FIELD_NUMBER: builtins.int
    COLUMN_FIELD_NUMBER: builtins.int
    FIELDS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The resource name of the tag in URL format. Example:

    * projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id}

    where `tag_id` is a system-generated identifier.
    Note that this Tag may not actually be stored in the location in this name.
    """

    template: typing.Text = ...
    """Required. The resource name of the tag template that this tag uses. Example:

    * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}

    This field cannot be modified after creation.
    """

    template_display_name: typing.Text = ...
    """Output only. The display name of the tag template."""

    column: typing.Text = ...
    """Resources like Entry can have schemas associated with them. This scope
    allows users to attach tags to an individual column based on that schema.

    For attaching a tag to a nested column, use `.` to separate the column
    names. Example:

    * `outer_column.inner_column`
    """

    @property
    def fields(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___TagField]:
        """Required. This maps the ID of a tag field to the value of and additional information
        about that field. Valid field IDs are defined by the tag's template. A tag
        must have at least 1 field and at most 500 fields.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        template : typing.Text = ...,
        template_display_name : typing.Text = ...,
        column : typing.Text = ...,
        fields : typing.Optional[typing.Mapping[typing.Text, global___TagField]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["column",b"column","scope",b"scope"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["column",b"column","fields",b"fields","name",b"name","scope",b"scope","template",b"template","template_display_name",b"template_display_name"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["scope",b"scope"]) -> typing.Optional[typing_extensions.Literal["column"]]: ...
global___Tag = Tag

class TagField(google.protobuf.message.Message):
    """Contains the value and supporting information for a field within
    a [Tag][google.cloud.datacatalog.v1beta1.Tag].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class EnumValue(google.protobuf.message.Message):
        """Holds an enum value."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        DISPLAY_NAME_FIELD_NUMBER: builtins.int
        display_name: typing.Text = ...
        """The display name of the enum value."""

        def __init__(self,
            *,
            display_name : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name"]) -> None: ...

    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DOUBLE_VALUE_FIELD_NUMBER: builtins.int
    STRING_VALUE_FIELD_NUMBER: builtins.int
    BOOL_VALUE_FIELD_NUMBER: builtins.int
    TIMESTAMP_VALUE_FIELD_NUMBER: builtins.int
    ENUM_VALUE_FIELD_NUMBER: builtins.int
    ORDER_FIELD_NUMBER: builtins.int
    display_name: typing.Text = ...
    """Output only. The display name of this field."""

    double_value: builtins.float = ...
    """Holds the value for a tag field with double type."""

    string_value: typing.Text = ...
    """Holds the value for a tag field with string type."""

    bool_value: builtins.bool = ...
    """Holds the value for a tag field with boolean type."""

    @property
    def timestamp_value(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Holds the value for a tag field with timestamp type."""
        pass
    @property
    def enum_value(self) -> global___TagField.EnumValue:
        """Holds the value for a tag field with enum type. This value must be
        one of the allowed values in the definition of this enum.
        """
        pass
    order: builtins.int = ...
    """Output only. The order of this field with respect to other fields in this tag. It can be
    set in [Tag][google.cloud.datacatalog.v1beta1.TagTemplateField.order]. For
    example, a higher value can indicate a more important field. The value can
    be negative. Multiple fields can have the same order, and field orders
    within a tag do not have to be sequential.
    """

    def __init__(self,
        *,
        display_name : typing.Text = ...,
        double_value : builtins.float = ...,
        string_value : typing.Text = ...,
        bool_value : builtins.bool = ...,
        timestamp_value : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        enum_value : typing.Optional[global___TagField.EnumValue] = ...,
        order : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bool_value",b"bool_value","double_value",b"double_value","enum_value",b"enum_value","kind",b"kind","string_value",b"string_value","timestamp_value",b"timestamp_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bool_value",b"bool_value","display_name",b"display_name","double_value",b"double_value","enum_value",b"enum_value","kind",b"kind","order",b"order","string_value",b"string_value","timestamp_value",b"timestamp_value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["kind",b"kind"]) -> typing.Optional[typing_extensions.Literal["double_value","string_value","bool_value","timestamp_value","enum_value"]]: ...
global___TagField = TagField

class TagTemplate(google.protobuf.message.Message):
    """A tag template defines a tag, which can have one or more typed fields.
    The template is used to create and attach the tag to GCP resources.
    [Tag template
    roles](https://cloud.google.com/iam/docs/understanding-roles#data-catalog-roles)
    provide permissions to create, edit, and use the template. See, for example,
    the [TagTemplate
    User](https://cloud.google.com/data-catalog/docs/how-to/template-user) role,
    which includes permission to use the tag template to tag resources.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class FieldsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___TagTemplateField: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___TagTemplateField] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    FIELDS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The resource name of the tag template in URL format. Example:

    * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}

    Note that this TagTemplate and its child resources may not actually be
    stored in the location in this name.
    """

    display_name: typing.Text = ...
    """The display name for this template. Defaults to an empty string."""

    @property
    def fields(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___TagTemplateField]:
        """Required. Map of tag template field IDs to the settings for the field.
        This map is an exhaustive list of the allowed fields. This map must contain
        at least one field and at most 500 fields.

        The keys to this map are tag template field IDs. Field IDs can contain
        letters (both uppercase and lowercase), numbers (0-9) and underscores (_).
        Field IDs must be at least 1 character long and at most
        64 characters long. Field IDs must start with a letter or underscore.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        fields : typing.Optional[typing.Mapping[typing.Text, global___TagTemplateField]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name","fields",b"fields","name",b"name"]) -> None: ...
global___TagTemplate = TagTemplate

class TagTemplateField(google.protobuf.message.Message):
    """The template for an individual field within a tag template."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    IS_REQUIRED_FIELD_NUMBER: builtins.int
    ORDER_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. The resource name of the tag template field in URL format. Example:

    * projects/{project_id}/locations/{location}/tagTemplates/{tag_template}/fields/{field}

    Note that this TagTemplateField may not actually be stored in the location
    in this name.
    """

    display_name: typing.Text = ...
    """The display name for this field. Defaults to an empty string."""

    @property
    def type(self) -> global___FieldType:
        """Required. The type of value this tag field can contain."""
        pass
    is_required: builtins.bool = ...
    """Whether this is a required field. Defaults to false."""

    order: builtins.int = ...
    """The order of this field with respect to other fields in this tag
    template.  A higher value indicates a more important field. The value can
    be negative. Multiple fields can have the same order, and field orders
    within a tag do not have to be sequential.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        type : typing.Optional[global___FieldType] = ...,
        is_required : builtins.bool = ...,
        order : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["type",b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name","is_required",b"is_required","name",b"name","order",b"order","type",b"type"]) -> None: ...
global___TagTemplateField = TagTemplateField

class FieldType(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _PrimitiveType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _PrimitiveTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_PrimitiveType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        PRIMITIVE_TYPE_UNSPECIFIED: FieldType.PrimitiveType.ValueType = ...  # 0
        """This is the default invalid value for a type."""

        DOUBLE: FieldType.PrimitiveType.ValueType = ...  # 1
        """A double precision number."""

        STRING: FieldType.PrimitiveType.ValueType = ...  # 2
        """An UTF-8 string."""

        BOOL: FieldType.PrimitiveType.ValueType = ...  # 3
        """A boolean value."""

        TIMESTAMP: FieldType.PrimitiveType.ValueType = ...  # 4
        """A timestamp."""

    class PrimitiveType(_PrimitiveType, metaclass=_PrimitiveTypeEnumTypeWrapper):
        pass

    PRIMITIVE_TYPE_UNSPECIFIED: FieldType.PrimitiveType.ValueType = ...  # 0
    """This is the default invalid value for a type."""

    DOUBLE: FieldType.PrimitiveType.ValueType = ...  # 1
    """A double precision number."""

    STRING: FieldType.PrimitiveType.ValueType = ...  # 2
    """An UTF-8 string."""

    BOOL: FieldType.PrimitiveType.ValueType = ...  # 3
    """A boolean value."""

    TIMESTAMP: FieldType.PrimitiveType.ValueType = ...  # 4
    """A timestamp."""


    class EnumType(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class EnumValue(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            DISPLAY_NAME_FIELD_NUMBER: builtins.int
            display_name: typing.Text = ...
            """Required. The display name of the enum value. Must not be an empty string."""

            def __init__(self,
                *,
                display_name : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name"]) -> None: ...

        ALLOWED_VALUES_FIELD_NUMBER: builtins.int
        @property
        def allowed_values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___FieldType.EnumType.EnumValue]:
            """Required on create; optional on update. The set of allowed values for
            this enum. This set must not be empty, the display names of the values in
            this set must not be empty and the display names of the values must be
            case-insensitively unique within this set. Currently, enum values can
            only be added to the list of allowed values. Deletion and renaming of
            enum values are not supported. Can have up to 500 allowed values.
            """
            pass
        def __init__(self,
            *,
            allowed_values : typing.Optional[typing.Iterable[global___FieldType.EnumType.EnumValue]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["allowed_values",b"allowed_values"]) -> None: ...

    PRIMITIVE_TYPE_FIELD_NUMBER: builtins.int
    ENUM_TYPE_FIELD_NUMBER: builtins.int
    primitive_type: global___FieldType.PrimitiveType.ValueType = ...
    """Represents primitive types - string, bool etc."""

    @property
    def enum_type(self) -> global___FieldType.EnumType:
        """Represents an enum type."""
        pass
    def __init__(self,
        *,
        primitive_type : global___FieldType.PrimitiveType.ValueType = ...,
        enum_type : typing.Optional[global___FieldType.EnumType] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["enum_type",b"enum_type","primitive_type",b"primitive_type","type_decl",b"type_decl"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["enum_type",b"enum_type","primitive_type",b"primitive_type","type_decl",b"type_decl"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["type_decl",b"type_decl"]) -> typing.Optional[typing_extensions.Literal["primitive_type","enum_type"]]: ...
global___FieldType = FieldType
