"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.iam.v1.policy_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.type.expr_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _AccessState:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _AccessStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_AccessState.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    ACCESS_STATE_UNSPECIFIED: AccessState.ValueType = ...  # 0
    """Reserved for future use."""

    GRANTED: AccessState.ValueType = ...  # 1
    """The member has the permission."""

    NOT_GRANTED: AccessState.ValueType = ...  # 2
    """The member does not have the permission."""

    UNKNOWN_CONDITIONAL: AccessState.ValueType = ...  # 3
    """The member has the permission only if a condition expression evaluates to
    `true`.
    """

    UNKNOWN_INFO_DENIED: AccessState.ValueType = ...  # 4
    """The sender of the request does not have access to all of the policies that
    Policy Troubleshooter needs to evaluate.
    """

class AccessState(_AccessState, metaclass=_AccessStateEnumTypeWrapper):
    """Whether a member has a permission for a resource."""
    pass

ACCESS_STATE_UNSPECIFIED: AccessState.ValueType = ...  # 0
"""Reserved for future use."""

GRANTED: AccessState.ValueType = ...  # 1
"""The member has the permission."""

NOT_GRANTED: AccessState.ValueType = ...  # 2
"""The member does not have the permission."""

UNKNOWN_CONDITIONAL: AccessState.ValueType = ...  # 3
"""The member has the permission only if a condition expression evaluates to
`true`.
"""

UNKNOWN_INFO_DENIED: AccessState.ValueType = ...  # 4
"""The sender of the request does not have access to all of the policies that
Policy Troubleshooter needs to evaluate.
"""

global___AccessState = AccessState


class _HeuristicRelevance:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _HeuristicRelevanceEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_HeuristicRelevance.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    HEURISTIC_RELEVANCE_UNSPECIFIED: HeuristicRelevance.ValueType = ...  # 0
    """Reserved for future use."""

    NORMAL: HeuristicRelevance.ValueType = ...  # 1
    """The data point has a limited effect on the result. Changing the data point
    is unlikely to affect the overall determination.
    """

    HIGH: HeuristicRelevance.ValueType = ...  # 2
    """The data point has a strong effect on the result. Changing the data point
    is likely to affect the overall determination.
    """

class HeuristicRelevance(_HeuristicRelevance, metaclass=_HeuristicRelevanceEnumTypeWrapper):
    """The extent to which a single data point contributes to an overall
    determination.
    """
    pass

HEURISTIC_RELEVANCE_UNSPECIFIED: HeuristicRelevance.ValueType = ...  # 0
"""Reserved for future use."""

NORMAL: HeuristicRelevance.ValueType = ...  # 1
"""The data point has a limited effect on the result. Changing the data point
is unlikely to affect the overall determination.
"""

HIGH: HeuristicRelevance.ValueType = ...  # 2
"""The data point has a strong effect on the result. Changing the data point
is likely to affect the overall determination.
"""

global___HeuristicRelevance = HeuristicRelevance


class AccessTuple(google.protobuf.message.Message):
    """Information about the member, resource, and permission to check."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PRINCIPAL_FIELD_NUMBER: builtins.int
    FULL_RESOURCE_NAME_FIELD_NUMBER: builtins.int
    PERMISSION_FIELD_NUMBER: builtins.int
    principal: typing.Text = ...
    """Required. The member, or principal, whose access you want to check, in the form of
    the email address that represents that member. For example,
    `alice@example.com` or
    `my-service-account@my-project.iam.gserviceaccount.com`.

    The member must be a Google Account or a service account. Other types of
    members are not supported.
    """

    full_resource_name: typing.Text = ...
    """Required. The full resource name that identifies the resource. For example,
    `//compute.googleapis.com/projects/my-project/zones/us-central1-a/instances/my-instance`.

    For examples of full resource names for Google Cloud services, see
    https://cloud.google.com/iam/help/troubleshooter/full-resource-names.
    """

    permission: typing.Text = ...
    """Required. The IAM permission to check for the specified member and resource.

    For a complete list of IAM permissions, see
    https://cloud.google.com/iam/help/permissions/reference.

    For a complete list of predefined IAM roles and the permissions in each
    role, see https://cloud.google.com/iam/help/roles/reference.
    """

    def __init__(self,
        *,
        principal : typing.Text = ...,
        full_resource_name : typing.Text = ...,
        permission : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["full_resource_name",b"full_resource_name","permission",b"permission","principal",b"principal"]) -> None: ...
global___AccessTuple = AccessTuple

class ExplainedPolicy(google.protobuf.message.Message):
    """Details about how a specific IAM [Policy][google.iam.v1.Policy] contributed
    to the access check.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ACCESS_FIELD_NUMBER: builtins.int
    FULL_RESOURCE_NAME_FIELD_NUMBER: builtins.int
    POLICY_FIELD_NUMBER: builtins.int
    BINDING_EXPLANATIONS_FIELD_NUMBER: builtins.int
    RELEVANCE_FIELD_NUMBER: builtins.int
    access: global___AccessState.ValueType = ...
    """Indicates whether _this policy_ provides the specified permission to the
    specified member for the specified resource.

    This field does _not_ indicate whether the member actually has the
    permission for the resource. There might be another policy that overrides
    this policy. To determine whether the member actually has the permission,
    use the `access` field in the
    [TroubleshootIamPolicyResponse][IamChecker.TroubleshootIamPolicyResponse].
    """

    full_resource_name: typing.Text = ...
    """The full resource name that identifies the resource. For example,
    `//compute.googleapis.com/projects/my-project/zones/us-central1-a/instances/my-instance`.

    If the sender of the request does not have access to the policy, this field
    is omitted.

    For examples of full resource names for Google Cloud services, see
    https://cloud.google.com/iam/help/troubleshooter/full-resource-names.
    """

    @property
    def policy(self) -> google.iam.v1.policy_pb2.Policy:
        """The IAM policy attached to the resource.

        If the sender of the request does not have access to the policy, this field
        is empty.
        """
        pass
    @property
    def binding_explanations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___BindingExplanation]:
        """Details about how each binding in the policy affects the member's ability,
        or inability, to use the permission for the resource.

        If the sender of the request does not have access to the policy, this field
        is omitted.
        """
        pass
    relevance: global___HeuristicRelevance.ValueType = ...
    """The relevance of this policy to the overall determination in the
    [TroubleshootIamPolicyResponse][IamChecker.TroubleshootIamPolicyResponse].

    If the sender of the request does not have access to the policy, this field
    is omitted.
    """

    def __init__(self,
        *,
        access : global___AccessState.ValueType = ...,
        full_resource_name : typing.Text = ...,
        policy : typing.Optional[google.iam.v1.policy_pb2.Policy] = ...,
        binding_explanations : typing.Optional[typing.Iterable[global___BindingExplanation]] = ...,
        relevance : global___HeuristicRelevance.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["policy",b"policy"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["access",b"access","binding_explanations",b"binding_explanations","full_resource_name",b"full_resource_name","policy",b"policy","relevance",b"relevance"]) -> None: ...
global___ExplainedPolicy = ExplainedPolicy

class BindingExplanation(google.protobuf.message.Message):
    """Details about how a binding in a policy affects a member's ability to use a
    permission.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _RolePermission:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _RolePermissionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RolePermission.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        ROLE_PERMISSION_UNSPECIFIED: BindingExplanation.RolePermission.ValueType = ...  # 0
        """Reserved for future use."""

        ROLE_PERMISSION_INCLUDED: BindingExplanation.RolePermission.ValueType = ...  # 1
        """The permission is included in the role."""

        ROLE_PERMISSION_NOT_INCLUDED: BindingExplanation.RolePermission.ValueType = ...  # 2
        """The permission is not included in the role."""

        ROLE_PERMISSION_UNKNOWN_INFO_DENIED: BindingExplanation.RolePermission.ValueType = ...  # 3
        """The sender of the request is not allowed to access the binding."""

    class RolePermission(_RolePermission, metaclass=_RolePermissionEnumTypeWrapper):
        """Whether a role includes a specific permission."""
        pass

    ROLE_PERMISSION_UNSPECIFIED: BindingExplanation.RolePermission.ValueType = ...  # 0
    """Reserved for future use."""

    ROLE_PERMISSION_INCLUDED: BindingExplanation.RolePermission.ValueType = ...  # 1
    """The permission is included in the role."""

    ROLE_PERMISSION_NOT_INCLUDED: BindingExplanation.RolePermission.ValueType = ...  # 2
    """The permission is not included in the role."""

    ROLE_PERMISSION_UNKNOWN_INFO_DENIED: BindingExplanation.RolePermission.ValueType = ...  # 3
    """The sender of the request is not allowed to access the binding."""


    class _Membership:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _MembershipEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Membership.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        MEMBERSHIP_UNSPECIFIED: BindingExplanation.Membership.ValueType = ...  # 0
        """Reserved for future use."""

        MEMBERSHIP_INCLUDED: BindingExplanation.Membership.ValueType = ...  # 1
        """The binding includes the member. The member can be included directly
        or indirectly. For example:

        * A member is included directly if that member is listed in the binding.
        * A member is included indirectly if that member is in a Google group or
          G Suite domain that is listed in the binding.
        """

        MEMBERSHIP_NOT_INCLUDED: BindingExplanation.Membership.ValueType = ...  # 2
        """The binding does not include the member."""

        MEMBERSHIP_UNKNOWN_INFO_DENIED: BindingExplanation.Membership.ValueType = ...  # 3
        """The sender of the request is not allowed to access the binding."""

        MEMBERSHIP_UNKNOWN_UNSUPPORTED: BindingExplanation.Membership.ValueType = ...  # 4
        """The member is an unsupported type. Only Google Accounts and service
        accounts are supported.
        """

    class Membership(_Membership, metaclass=_MembershipEnumTypeWrapper):
        """Whether the binding includes the member."""
        pass

    MEMBERSHIP_UNSPECIFIED: BindingExplanation.Membership.ValueType = ...  # 0
    """Reserved for future use."""

    MEMBERSHIP_INCLUDED: BindingExplanation.Membership.ValueType = ...  # 1
    """The binding includes the member. The member can be included directly
    or indirectly. For example:

    * A member is included directly if that member is listed in the binding.
    * A member is included indirectly if that member is in a Google group or
      G Suite domain that is listed in the binding.
    """

    MEMBERSHIP_NOT_INCLUDED: BindingExplanation.Membership.ValueType = ...  # 2
    """The binding does not include the member."""

    MEMBERSHIP_UNKNOWN_INFO_DENIED: BindingExplanation.Membership.ValueType = ...  # 3
    """The sender of the request is not allowed to access the binding."""

    MEMBERSHIP_UNKNOWN_UNSUPPORTED: BindingExplanation.Membership.ValueType = ...  # 4
    """The member is an unsupported type. Only Google Accounts and service
    accounts are supported.
    """


    class AnnotatedMembership(google.protobuf.message.Message):
        """Details about whether the binding includes the member."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        MEMBERSHIP_FIELD_NUMBER: builtins.int
        RELEVANCE_FIELD_NUMBER: builtins.int
        membership: global___BindingExplanation.Membership.ValueType = ...
        """Indicates whether the binding includes the member."""

        relevance: global___HeuristicRelevance.ValueType = ...
        """The relevance of the member's status to the overall determination for the
        binding.
        """

        def __init__(self,
            *,
            membership : global___BindingExplanation.Membership.ValueType = ...,
            relevance : global___HeuristicRelevance.ValueType = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["membership",b"membership","relevance",b"relevance"]) -> None: ...

    class MembershipsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___BindingExplanation.AnnotatedMembership: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___BindingExplanation.AnnotatedMembership] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ACCESS_FIELD_NUMBER: builtins.int
    ROLE_FIELD_NUMBER: builtins.int
    ROLE_PERMISSION_FIELD_NUMBER: builtins.int
    ROLE_PERMISSION_RELEVANCE_FIELD_NUMBER: builtins.int
    MEMBERSHIPS_FIELD_NUMBER: builtins.int
    RELEVANCE_FIELD_NUMBER: builtins.int
    CONDITION_FIELD_NUMBER: builtins.int
    access: global___AccessState.ValueType = ...
    """Required. Indicates whether _this binding_ provides the specified permission to the
    specified member for the specified resource.

    This field does _not_ indicate whether the member actually has the
    permission for the resource. There might be another binding that overrides
    this binding. To determine whether the member actually has the permission,
    use the `access` field in the
    [TroubleshootIamPolicyResponse][IamChecker.TroubleshootIamPolicyResponse].
    """

    role: typing.Text = ...
    """The role that this binding grants. For example,
    `roles/compute.serviceAgent`.

    For a complete list of predefined IAM roles, as well as the permissions in
    each role, see https://cloud.google.com/iam/help/roles/reference.
    """

    role_permission: global___BindingExplanation.RolePermission.ValueType = ...
    """Indicates whether the role granted by this binding contains the specified
    permission.
    """

    role_permission_relevance: global___HeuristicRelevance.ValueType = ...
    """The relevance of the permission's existence, or nonexistence, in the role
    to the overall determination for the entire policy.
    """

    @property
    def memberships(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___BindingExplanation.AnnotatedMembership]:
        """Indicates whether each member in the binding includes the member specified
        in the request, either directly or indirectly. Each key identifies a member
        in the binding, and each value indicates whether the member in the binding
        includes the member in the request.

        For example, suppose that a binding includes the following members:

        * `user:alice@example.com`
        * `group:product-eng@example.com`

        You want to troubleshoot access for `user:bob@example.com`. This user is a
        member of the group `group:product-eng@example.com`.

        For the first member in the binding, the key is `user:alice@example.com`,
        and the `membership` field in the value is set to
        `MEMBERSHIP_NOT_INCLUDED`.

        For the second member in the binding, the key is
        `group:product-eng@example.com`, and the `membership` field in the value is
        set to `MEMBERSHIP_INCLUDED`.
        """
        pass
    relevance: global___HeuristicRelevance.ValueType = ...
    """The relevance of this binding to the overall determination for the entire
    policy.
    """

    @property
    def condition(self) -> google.type.expr_pb2.Expr:
        """A condition expression that prevents access unless the expression evaluates
        to `true`.

        To learn about IAM Conditions, see
        http://cloud.google.com/iam/help/conditions/overview.
        """
        pass
    def __init__(self,
        *,
        access : global___AccessState.ValueType = ...,
        role : typing.Text = ...,
        role_permission : global___BindingExplanation.RolePermission.ValueType = ...,
        role_permission_relevance : global___HeuristicRelevance.ValueType = ...,
        memberships : typing.Optional[typing.Mapping[typing.Text, global___BindingExplanation.AnnotatedMembership]] = ...,
        relevance : global___HeuristicRelevance.ValueType = ...,
        condition : typing.Optional[google.type.expr_pb2.Expr] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["condition",b"condition"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["access",b"access","condition",b"condition","memberships",b"memberships","relevance",b"relevance","role",b"role","role_permission",b"role_permission","role_permission_relevance",b"role_permission_relevance"]) -> None: ...
global___BindingExplanation = BindingExplanation
