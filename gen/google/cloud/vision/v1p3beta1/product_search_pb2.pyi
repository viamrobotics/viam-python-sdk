"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.vision.v1p3beta1.geometry_pb2
import google.cloud.vision.v1p3beta1.product_search_service_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _ProductSearchCategory:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _ProductSearchCategoryEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ProductSearchCategory.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    PRODUCT_SEARCH_CATEGORY_UNSPECIFIED: ProductSearchCategory.ValueType = ...  # 0
    """Default value used when a category is not specified."""

    SHOES: ProductSearchCategory.ValueType = ...  # 1
    """Shoes category."""

    BAGS: ProductSearchCategory.ValueType = ...  # 2
    """Bags category."""

class ProductSearchCategory(_ProductSearchCategory, metaclass=_ProductSearchCategoryEnumTypeWrapper):
    """Supported product search categories."""
    pass

PRODUCT_SEARCH_CATEGORY_UNSPECIFIED: ProductSearchCategory.ValueType = ...  # 0
"""Default value used when a category is not specified."""

SHOES: ProductSearchCategory.ValueType = ...  # 1
"""Shoes category."""

BAGS: ProductSearchCategory.ValueType = ...  # 2
"""Bags category."""

global___ProductSearchCategory = ProductSearchCategory


class _ProductSearchResultsView:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _ProductSearchResultsViewEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ProductSearchResultsView.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    BASIC: ProductSearchResultsView.ValueType = ...  # 0
    """Product search results contain only `product_category` and `product_id`.
    Default value.
    """

    FULL: ProductSearchResultsView.ValueType = ...  # 1
    """Product search results contain `product_category`, `product_id`,
    `image_uri`, and `score`.
    """

class ProductSearchResultsView(_ProductSearchResultsView, metaclass=_ProductSearchResultsViewEnumTypeWrapper):
    """Specifies the fields to include in product search results."""
    pass

BASIC: ProductSearchResultsView.ValueType = ...  # 0
"""Product search results contain only `product_category` and `product_id`.
Default value.
"""

FULL: ProductSearchResultsView.ValueType = ...  # 1
"""Product search results contain `product_category`, `product_id`,
`image_uri`, and `score`.
"""

global___ProductSearchResultsView = ProductSearchResultsView


class ProductSearchParams(google.protobuf.message.Message):
    """Parameters for a product search request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CATALOG_NAME_FIELD_NUMBER: builtins.int
    CATEGORY_FIELD_NUMBER: builtins.int
    PRODUCT_CATEGORY_FIELD_NUMBER: builtins.int
    NORMALIZED_BOUNDING_POLY_FIELD_NUMBER: builtins.int
    BOUNDING_POLY_FIELD_NUMBER: builtins.int
    VIEW_FIELD_NUMBER: builtins.int
    PRODUCT_SET_FIELD_NUMBER: builtins.int
    PRODUCT_CATEGORIES_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    catalog_name: typing.Text = ...
    """The resource name of the catalog to search.

    Format is: `productSearch/catalogs/CATALOG_NAME`.
    """

    category: global___ProductSearchCategory.ValueType = ...
    """The category to search in.
    Optional. It is inferred by the system if it is not specified.
    [Deprecated] Use `product_category`.
    """

    product_category: typing.Text = ...
    """The product category to search in.
    Optional. It is inferred by the system if it is not specified.
    Supported values are `bag`, `shoe`, `sunglasses`, `dress`, `outerwear`,
    `skirt`, `top`, `shorts`, and `pants`.
    """

    @property
    def normalized_bounding_poly(self) -> google.cloud.vision.v1p3beta1.geometry_pb2.NormalizedBoundingPoly:
        """The bounding polygon around the area of interest in the image.
        Optional. If it is not specified, system discretion will be applied.
        [Deprecated] Use `bounding_poly`.
        """
        pass
    @property
    def bounding_poly(self) -> google.cloud.vision.v1p3beta1.geometry_pb2.BoundingPoly:
        """The bounding polygon around the area of interest in the image.
        Optional. If it is not specified, system discretion will be applied.
        """
        pass
    view: global___ProductSearchResultsView.ValueType = ...
    """Specifies the verbosity of the  product search results.
    Optional. Defaults to `BASIC`.
    """

    product_set: typing.Text = ...
    """The resource name of a
    [ProductSet][google.cloud.vision.v1p3beta1.ProductSet] to be searched for
    similar images.

    Format is:
    `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`.
    """

    @property
    def product_categories(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The list of product categories to search in. Currently, we only consider
        the first category, and either "homegoods" or "apparel" should be
        specified.
        """
        pass
    filter: typing.Text = ...
    """The filtering expression. This can be used to restrict search results based
    on Product labels. We currently support an AND of OR of key-value
    expressions, where each expression within an OR must have the same key.

    For example, "(color = red OR color = blue) AND brand = Google" is
    acceptable, but not "(color = red OR brand = Google)" or "color: red".
    """

    def __init__(self,
        *,
        catalog_name : typing.Text = ...,
        category : global___ProductSearchCategory.ValueType = ...,
        product_category : typing.Text = ...,
        normalized_bounding_poly : typing.Optional[google.cloud.vision.v1p3beta1.geometry_pb2.NormalizedBoundingPoly] = ...,
        bounding_poly : typing.Optional[google.cloud.vision.v1p3beta1.geometry_pb2.BoundingPoly] = ...,
        view : global___ProductSearchResultsView.ValueType = ...,
        product_set : typing.Text = ...,
        product_categories : typing.Optional[typing.Iterable[typing.Text]] = ...,
        filter : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bounding_poly",b"bounding_poly","normalized_bounding_poly",b"normalized_bounding_poly"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bounding_poly",b"bounding_poly","catalog_name",b"catalog_name","category",b"category","filter",b"filter","normalized_bounding_poly",b"normalized_bounding_poly","product_categories",b"product_categories","product_category",b"product_category","product_set",b"product_set","view",b"view"]) -> None: ...
global___ProductSearchParams = ProductSearchParams

class ProductSearchResults(google.protobuf.message.Message):
    """Results for a product search request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ProductInfo(google.protobuf.message.Message):
        """Information about a product."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        PRODUCT_ID_FIELD_NUMBER: builtins.int
        IMAGE_URI_FIELD_NUMBER: builtins.int
        SCORE_FIELD_NUMBER: builtins.int
        product_id: typing.Text = ...
        """Product ID."""

        image_uri: typing.Text = ...
        """The URI of the image which matched the query image.

        This field is returned only if `view` is set to `FULL` in
        the request.
        """

        score: builtins.float = ...
        """A confidence level on the match, ranging from 0 (no confidence) to
        1 (full confidence).

        This field is returned only if `view` is set to `FULL` in
        the request.
        """

        def __init__(self,
            *,
            product_id : typing.Text = ...,
            image_uri : typing.Text = ...,
            score : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["image_uri",b"image_uri","product_id",b"product_id","score",b"score"]) -> None: ...

    class Result(google.protobuf.message.Message):
        """Information about a product."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        PRODUCT_FIELD_NUMBER: builtins.int
        SCORE_FIELD_NUMBER: builtins.int
        IMAGE_FIELD_NUMBER: builtins.int
        @property
        def product(self) -> google.cloud.vision.v1p3beta1.product_search_service_pb2.Product:
            """The Product."""
            pass
        score: builtins.float = ...
        """A confidence level on the match, ranging from 0 (no confidence) to
        1 (full confidence).

        This field is returned only if `view` is set to `FULL` in
        the request.
        """

        image: typing.Text = ...
        """The resource name of the image from the product that is the closest match
        to the query.
        """

        def __init__(self,
            *,
            product : typing.Optional[google.cloud.vision.v1p3beta1.product_search_service_pb2.Product] = ...,
            score : builtins.float = ...,
            image : typing.Text = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["product",b"product"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["image",b"image","product",b"product","score",b"score"]) -> None: ...

    CATEGORY_FIELD_NUMBER: builtins.int
    PRODUCT_CATEGORY_FIELD_NUMBER: builtins.int
    INDEX_TIME_FIELD_NUMBER: builtins.int
    PRODUCTS_FIELD_NUMBER: builtins.int
    RESULTS_FIELD_NUMBER: builtins.int
    category: global___ProductSearchCategory.ValueType = ...
    """Product category.
    [Deprecated] Use `product_category`.
    """

    product_category: typing.Text = ...
    """Product category.
    Supported values are `bag` and `shoe`.
    [Deprecated] `product_category` is provided in each Product.
    """

    @property
    def index_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Timestamp of the index which provided these results. Changes made after
        this time are not reflected in the current results.
        """
        pass
    @property
    def products(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ProductSearchResults.ProductInfo]:
        """List of detected products."""
        pass
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ProductSearchResults.Result]:
        """List of results, one for each product match."""
        pass
    def __init__(self,
        *,
        category : global___ProductSearchCategory.ValueType = ...,
        product_category : typing.Text = ...,
        index_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        products : typing.Optional[typing.Iterable[global___ProductSearchResults.ProductInfo]] = ...,
        results : typing.Optional[typing.Iterable[global___ProductSearchResults.Result]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["index_time",b"index_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["category",b"category","index_time",b"index_time","product_category",b"product_category","products",b"products","results",b"results"]) -> None: ...
global___ProductSearchResults = ProductSearchResults
