# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/cloud/bigquery/connection/v1/connection.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.api.client_pb2
import google.api.field_behavior_pb2
import google.api.resource_pb2
import google.iam.v1.iam_policy_pb2
import google.iam.v1.policy_pb2
import google.protobuf.empty_pb2
import google.protobuf.field_mask_pb2
import google.protobuf.wrappers_pb2
import google.cloud.bigquery.connection.v1.connection_pb2


class ConnectionServiceBase(abc.ABC):

    @abc.abstractmethod
    async def CreateConnection(self, stream: 'grpclib.server.Stream[google.cloud.bigquery.connection.v1.connection_pb2.CreateConnectionRequest, google.cloud.bigquery.connection.v1.connection_pb2.Connection]') -> None:
        pass

    @abc.abstractmethod
    async def GetConnection(self, stream: 'grpclib.server.Stream[google.cloud.bigquery.connection.v1.connection_pb2.GetConnectionRequest, google.cloud.bigquery.connection.v1.connection_pb2.Connection]') -> None:
        pass

    @abc.abstractmethod
    async def ListConnections(self, stream: 'grpclib.server.Stream[google.cloud.bigquery.connection.v1.connection_pb2.ListConnectionsRequest, google.cloud.bigquery.connection.v1.connection_pb2.ListConnectionsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateConnection(self, stream: 'grpclib.server.Stream[google.cloud.bigquery.connection.v1.connection_pb2.UpdateConnectionRequest, google.cloud.bigquery.connection.v1.connection_pb2.Connection]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteConnection(self, stream: 'grpclib.server.Stream[google.cloud.bigquery.connection.v1.connection_pb2.DeleteConnectionRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.iam.v1.iam_policy_pb2.GetIamPolicyRequest, google.iam.v1.policy_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.iam.v1.iam_policy_pb2.SetIamPolicyRequest, google.iam.v1.policy_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.iam.v1.iam_policy_pb2.TestIamPermissionsRequest, google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.bigquery.connection.v1.ConnectionService/CreateConnection': grpclib.const.Handler(
                self.CreateConnection,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.bigquery.connection.v1.connection_pb2.CreateConnectionRequest,
                google.cloud.bigquery.connection.v1.connection_pb2.Connection,
            ),
            '/google.cloud.bigquery.connection.v1.ConnectionService/GetConnection': grpclib.const.Handler(
                self.GetConnection,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.bigquery.connection.v1.connection_pb2.GetConnectionRequest,
                google.cloud.bigquery.connection.v1.connection_pb2.Connection,
            ),
            '/google.cloud.bigquery.connection.v1.ConnectionService/ListConnections': grpclib.const.Handler(
                self.ListConnections,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.bigquery.connection.v1.connection_pb2.ListConnectionsRequest,
                google.cloud.bigquery.connection.v1.connection_pb2.ListConnectionsResponse,
            ),
            '/google.cloud.bigquery.connection.v1.ConnectionService/UpdateConnection': grpclib.const.Handler(
                self.UpdateConnection,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.bigquery.connection.v1.connection_pb2.UpdateConnectionRequest,
                google.cloud.bigquery.connection.v1.connection_pb2.Connection,
            ),
            '/google.cloud.bigquery.connection.v1.ConnectionService/DeleteConnection': grpclib.const.Handler(
                self.DeleteConnection,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.bigquery.connection.v1.connection_pb2.DeleteConnectionRequest,
                google.protobuf.empty_pb2.Empty,
            ),
            '/google.cloud.bigquery.connection.v1.ConnectionService/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.iam.v1.iam_policy_pb2.GetIamPolicyRequest,
                google.iam.v1.policy_pb2.Policy,
            ),
            '/google.cloud.bigquery.connection.v1.ConnectionService/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.iam.v1.iam_policy_pb2.SetIamPolicyRequest,
                google.iam.v1.policy_pb2.Policy,
            ),
            '/google.cloud.bigquery.connection.v1.ConnectionService/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.iam.v1.iam_policy_pb2.TestIamPermissionsRequest,
                google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse,
            ),
        }


class ConnectionServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.CreateConnection = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.connection.v1.ConnectionService/CreateConnection',
            google.cloud.bigquery.connection.v1.connection_pb2.CreateConnectionRequest,
            google.cloud.bigquery.connection.v1.connection_pb2.Connection,
        )
        self.GetConnection = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.connection.v1.ConnectionService/GetConnection',
            google.cloud.bigquery.connection.v1.connection_pb2.GetConnectionRequest,
            google.cloud.bigquery.connection.v1.connection_pb2.Connection,
        )
        self.ListConnections = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.connection.v1.ConnectionService/ListConnections',
            google.cloud.bigquery.connection.v1.connection_pb2.ListConnectionsRequest,
            google.cloud.bigquery.connection.v1.connection_pb2.ListConnectionsResponse,
        )
        self.UpdateConnection = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.connection.v1.ConnectionService/UpdateConnection',
            google.cloud.bigquery.connection.v1.connection_pb2.UpdateConnectionRequest,
            google.cloud.bigquery.connection.v1.connection_pb2.Connection,
        )
        self.DeleteConnection = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.connection.v1.ConnectionService/DeleteConnection',
            google.cloud.bigquery.connection.v1.connection_pb2.DeleteConnectionRequest,
            google.protobuf.empty_pb2.Empty,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.connection.v1.ConnectionService/GetIamPolicy',
            google.iam.v1.iam_policy_pb2.GetIamPolicyRequest,
            google.iam.v1.policy_pb2.Policy,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.connection.v1.ConnectionService/SetIamPolicy',
            google.iam.v1.iam_policy_pb2.SetIamPolicyRequest,
            google.iam.v1.policy_pb2.Policy,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.connection.v1.ConnectionService/TestIamPermissions',
            google.iam.v1.iam_policy_pb2.TestIamPermissionsRequest,
            google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse,
        )
