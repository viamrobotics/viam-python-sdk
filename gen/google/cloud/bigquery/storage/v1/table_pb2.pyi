"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class TableSchema(google.protobuf.message.Message):
    """Schema of a table."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FIELDS_FIELD_NUMBER: builtins.int
    @property
    def fields(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TableFieldSchema]:
        """Describes the fields in a table."""
        pass
    def __init__(self,
        *,
        fields : typing.Optional[typing.Iterable[global___TableFieldSchema]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["fields",b"fields"]) -> None: ...
global___TableSchema = TableSchema

class TableFieldSchema(google.protobuf.message.Message):
    """TableFieldSchema defines a single field/column within a table schema."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Type:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        TYPE_UNSPECIFIED: TableFieldSchema.Type.ValueType = ...  # 0
        """Illegal value"""

        STRING: TableFieldSchema.Type.ValueType = ...  # 1
        """64K, UTF8"""

        INT64: TableFieldSchema.Type.ValueType = ...  # 2
        """64-bit signed"""

        DOUBLE: TableFieldSchema.Type.ValueType = ...  # 3
        """64-bit IEEE floating point"""

        STRUCT: TableFieldSchema.Type.ValueType = ...  # 4
        """Aggregate type"""

        BYTES: TableFieldSchema.Type.ValueType = ...  # 5
        """64K, Binary"""

        BOOL: TableFieldSchema.Type.ValueType = ...  # 6
        """2-valued"""

        TIMESTAMP: TableFieldSchema.Type.ValueType = ...  # 7
        """64-bit signed usec since UTC epoch"""

        DATE: TableFieldSchema.Type.ValueType = ...  # 8
        """Civil date - Year, Month, Day"""

        TIME: TableFieldSchema.Type.ValueType = ...  # 9
        """Civil time - Hour, Minute, Second, Microseconds"""

        DATETIME: TableFieldSchema.Type.ValueType = ...  # 10
        """Combination of civil date and civil time"""

        GEOGRAPHY: TableFieldSchema.Type.ValueType = ...  # 11
        """Geography object"""

        NUMERIC: TableFieldSchema.Type.ValueType = ...  # 12
        """Numeric value"""

        BIGNUMERIC: TableFieldSchema.Type.ValueType = ...  # 13
        """BigNumeric value"""

        INTERVAL: TableFieldSchema.Type.ValueType = ...  # 14
        """Interval"""

        JSON: TableFieldSchema.Type.ValueType = ...  # 15
        """JSON, String"""

    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        pass

    TYPE_UNSPECIFIED: TableFieldSchema.Type.ValueType = ...  # 0
    """Illegal value"""

    STRING: TableFieldSchema.Type.ValueType = ...  # 1
    """64K, UTF8"""

    INT64: TableFieldSchema.Type.ValueType = ...  # 2
    """64-bit signed"""

    DOUBLE: TableFieldSchema.Type.ValueType = ...  # 3
    """64-bit IEEE floating point"""

    STRUCT: TableFieldSchema.Type.ValueType = ...  # 4
    """Aggregate type"""

    BYTES: TableFieldSchema.Type.ValueType = ...  # 5
    """64K, Binary"""

    BOOL: TableFieldSchema.Type.ValueType = ...  # 6
    """2-valued"""

    TIMESTAMP: TableFieldSchema.Type.ValueType = ...  # 7
    """64-bit signed usec since UTC epoch"""

    DATE: TableFieldSchema.Type.ValueType = ...  # 8
    """Civil date - Year, Month, Day"""

    TIME: TableFieldSchema.Type.ValueType = ...  # 9
    """Civil time - Hour, Minute, Second, Microseconds"""

    DATETIME: TableFieldSchema.Type.ValueType = ...  # 10
    """Combination of civil date and civil time"""

    GEOGRAPHY: TableFieldSchema.Type.ValueType = ...  # 11
    """Geography object"""

    NUMERIC: TableFieldSchema.Type.ValueType = ...  # 12
    """Numeric value"""

    BIGNUMERIC: TableFieldSchema.Type.ValueType = ...  # 13
    """BigNumeric value"""

    INTERVAL: TableFieldSchema.Type.ValueType = ...  # 14
    """Interval"""

    JSON: TableFieldSchema.Type.ValueType = ...  # 15
    """JSON, String"""


    class _Mode:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Mode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        MODE_UNSPECIFIED: TableFieldSchema.Mode.ValueType = ...  # 0
        """Illegal value"""

        NULLABLE: TableFieldSchema.Mode.ValueType = ...  # 1
        REQUIRED: TableFieldSchema.Mode.ValueType = ...  # 2
        REPEATED: TableFieldSchema.Mode.ValueType = ...  # 3
    class Mode(_Mode, metaclass=_ModeEnumTypeWrapper):
        pass

    MODE_UNSPECIFIED: TableFieldSchema.Mode.ValueType = ...  # 0
    """Illegal value"""

    NULLABLE: TableFieldSchema.Mode.ValueType = ...  # 1
    REQUIRED: TableFieldSchema.Mode.ValueType = ...  # 2
    REPEATED: TableFieldSchema.Mode.ValueType = ...  # 3

    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    MODE_FIELD_NUMBER: builtins.int
    FIELDS_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    MAX_LENGTH_FIELD_NUMBER: builtins.int
    PRECISION_FIELD_NUMBER: builtins.int
    SCALE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The field name. The name must contain only letters (a-z, A-Z),
    numbers (0-9), or underscores (_), and must start with a letter or
    underscore. The maximum length is 128 characters.
    """

    type: global___TableFieldSchema.Type.ValueType = ...
    """Required. The field data type."""

    mode: global___TableFieldSchema.Mode.ValueType = ...
    """Optional. The field mode. The default value is NULLABLE."""

    @property
    def fields(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TableFieldSchema]:
        """Optional. Describes the nested schema fields if the type property is set to STRUCT."""
        pass
    description: typing.Text = ...
    """Optional. The field description. The maximum length is 1,024 characters."""

    max_length: builtins.int = ...
    """Optional. Maximum length of values of this field for STRINGS or BYTES.

    If max_length is not specified, no maximum length constraint is imposed
    on this field.

    If type = "STRING", then max_length represents the maximum UTF-8
    length of strings in this field.

    If type = "BYTES", then max_length represents the maximum number of
    bytes in this field.

    It is invalid to set this field if type is not "STRING" or "BYTES".
    """

    precision: builtins.int = ...
    """Optional. Precision (maximum number of total digits in base 10) and scale
    (maximum number of digits in the fractional part in base 10) constraints
    for values of this field for NUMERIC or BIGNUMERIC.

    It is invalid to set precision or scale if type is not "NUMERIC" or
    "BIGNUMERIC".

    If precision and scale are not specified, no value range constraint is
    imposed on this field insofar as values are permitted by the type.

    Values of this NUMERIC or BIGNUMERIC field must be in this range when:

    * Precision (P) and scale (S) are specified:
      [-10^(P-S) + 10^(-S), 10^(P-S) - 10^(-S)]
    * Precision (P) is specified but not scale (and thus scale is
      interpreted to be equal to zero):
      [-10^P + 1, 10^P - 1].

    Acceptable values for precision and scale if both are specified:

    * If type = "NUMERIC":
      1 <= precision - scale <= 29 and 0 <= scale <= 9.
    * If type = "BIGNUMERIC":
      1 <= precision - scale <= 38 and 0 <= scale <= 38.

    Acceptable values for precision if only precision is specified but not
    scale (and thus scale is interpreted to be equal to zero):

    * If type = "NUMERIC": 1 <= precision <= 29.
    * If type = "BIGNUMERIC": 1 <= precision <= 38.

    If scale is specified but not precision, then it is invalid.
    """

    scale: builtins.int = ...
    """Optional. See documentation for precision."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        type : global___TableFieldSchema.Type.ValueType = ...,
        mode : global___TableFieldSchema.Mode.ValueType = ...,
        fields : typing.Optional[typing.Iterable[global___TableFieldSchema]] = ...,
        description : typing.Text = ...,
        max_length : builtins.int = ...,
        precision : builtins.int = ...,
        scale : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","fields",b"fields","max_length",b"max_length","mode",b"mode","name",b"name","precision",b"precision","scale",b"scale","type",b"type"]) -> None: ...
global___TableFieldSchema = TableFieldSchema
