"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class TableReadOptions(google.protobuf.message.Message):
    """Options dictating how we read a table."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SELECTED_FIELDS_FIELD_NUMBER: builtins.int
    ROW_RESTRICTION_FIELD_NUMBER: builtins.int
    @property
    def selected_fields(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Optional. Names of the fields in the table that should be read. If empty,
        all fields will be read. If the specified field is a nested field, all the
        sub-fields in the field will be selected. The output field order is
        unrelated to the order of fields in selected_fields.
        """
        pass
    row_restriction: typing.Text = ...
    """Optional. SQL text filtering statement, similar to a WHERE clause in
    a query. Aggregates are not supported.

    Examples: "int_field > 5"
              "date_field = CAST('2014-9-27' as DATE)"
              "nullable_field is not NULL"
              "st_equals(geo_field, st_geofromtext("POINT(2, 2)"))"
              "numeric_field BETWEEN 1.0 AND 5.0"
    """

    def __init__(self,
        *,
        selected_fields : typing.Optional[typing.Iterable[typing.Text]] = ...,
        row_restriction : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["row_restriction",b"row_restriction","selected_fields",b"selected_fields"]) -> None: ...
global___TableReadOptions = TableReadOptions
