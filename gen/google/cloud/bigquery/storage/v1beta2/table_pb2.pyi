"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class TableSchema(google.protobuf.message.Message):
    """Schema of a table"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FIELDS_FIELD_NUMBER: builtins.int
    @property
    def fields(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TableFieldSchema]:
        """Describes the fields in a table."""
        pass
    def __init__(self,
        *,
        fields : typing.Optional[typing.Iterable[global___TableFieldSchema]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["fields",b"fields"]) -> None: ...
global___TableSchema = TableSchema

class TableFieldSchema(google.protobuf.message.Message):
    """A field in TableSchema"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Type:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        TYPE_UNSPECIFIED: TableFieldSchema.Type.ValueType = ...  # 0
        """Illegal value"""

        STRING: TableFieldSchema.Type.ValueType = ...  # 1
        """64K, UTF8"""

        INT64: TableFieldSchema.Type.ValueType = ...  # 2
        """64-bit signed"""

        DOUBLE: TableFieldSchema.Type.ValueType = ...  # 3
        """64-bit IEEE floating point"""

        STRUCT: TableFieldSchema.Type.ValueType = ...  # 4
        """Aggregate type"""

        BYTES: TableFieldSchema.Type.ValueType = ...  # 5
        """64K, Binary"""

        BOOL: TableFieldSchema.Type.ValueType = ...  # 6
        """2-valued"""

        TIMESTAMP: TableFieldSchema.Type.ValueType = ...  # 7
        """64-bit signed usec since UTC epoch"""

        DATE: TableFieldSchema.Type.ValueType = ...  # 8
        """Civil date - Year, Month, Day"""

        TIME: TableFieldSchema.Type.ValueType = ...  # 9
        """Civil time - Hour, Minute, Second, Microseconds"""

        DATETIME: TableFieldSchema.Type.ValueType = ...  # 10
        """Combination of civil date and civil time"""

        GEOGRAPHY: TableFieldSchema.Type.ValueType = ...  # 11
        """Geography object"""

        NUMERIC: TableFieldSchema.Type.ValueType = ...  # 12
        """Numeric value"""

        BIGNUMERIC: TableFieldSchema.Type.ValueType = ...  # 13
        """BigNumeric value"""

        INTERVAL: TableFieldSchema.Type.ValueType = ...  # 14
        """Interval"""

        JSON: TableFieldSchema.Type.ValueType = ...  # 15
        """JSON, String"""

    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        pass

    TYPE_UNSPECIFIED: TableFieldSchema.Type.ValueType = ...  # 0
    """Illegal value"""

    STRING: TableFieldSchema.Type.ValueType = ...  # 1
    """64K, UTF8"""

    INT64: TableFieldSchema.Type.ValueType = ...  # 2
    """64-bit signed"""

    DOUBLE: TableFieldSchema.Type.ValueType = ...  # 3
    """64-bit IEEE floating point"""

    STRUCT: TableFieldSchema.Type.ValueType = ...  # 4
    """Aggregate type"""

    BYTES: TableFieldSchema.Type.ValueType = ...  # 5
    """64K, Binary"""

    BOOL: TableFieldSchema.Type.ValueType = ...  # 6
    """2-valued"""

    TIMESTAMP: TableFieldSchema.Type.ValueType = ...  # 7
    """64-bit signed usec since UTC epoch"""

    DATE: TableFieldSchema.Type.ValueType = ...  # 8
    """Civil date - Year, Month, Day"""

    TIME: TableFieldSchema.Type.ValueType = ...  # 9
    """Civil time - Hour, Minute, Second, Microseconds"""

    DATETIME: TableFieldSchema.Type.ValueType = ...  # 10
    """Combination of civil date and civil time"""

    GEOGRAPHY: TableFieldSchema.Type.ValueType = ...  # 11
    """Geography object"""

    NUMERIC: TableFieldSchema.Type.ValueType = ...  # 12
    """Numeric value"""

    BIGNUMERIC: TableFieldSchema.Type.ValueType = ...  # 13
    """BigNumeric value"""

    INTERVAL: TableFieldSchema.Type.ValueType = ...  # 14
    """Interval"""

    JSON: TableFieldSchema.Type.ValueType = ...  # 15
    """JSON, String"""


    class _Mode:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Mode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        MODE_UNSPECIFIED: TableFieldSchema.Mode.ValueType = ...  # 0
        """Illegal value"""

        NULLABLE: TableFieldSchema.Mode.ValueType = ...  # 1
        REQUIRED: TableFieldSchema.Mode.ValueType = ...  # 2
        REPEATED: TableFieldSchema.Mode.ValueType = ...  # 3
    class Mode(_Mode, metaclass=_ModeEnumTypeWrapper):
        pass

    MODE_UNSPECIFIED: TableFieldSchema.Mode.ValueType = ...  # 0
    """Illegal value"""

    NULLABLE: TableFieldSchema.Mode.ValueType = ...  # 1
    REQUIRED: TableFieldSchema.Mode.ValueType = ...  # 2
    REPEATED: TableFieldSchema.Mode.ValueType = ...  # 3

    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    MODE_FIELD_NUMBER: builtins.int
    FIELDS_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The field name. The name must contain only letters (a-z, A-Z),
    numbers (0-9), or underscores (_), and must start with a letter or
    underscore. The maximum length is 128 characters.
    """

    type: global___TableFieldSchema.Type.ValueType = ...
    """Required. The field data type."""

    mode: global___TableFieldSchema.Mode.ValueType = ...
    """Optional. The field mode. The default value is NULLABLE."""

    @property
    def fields(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TableFieldSchema]:
        """Optional. Describes the nested schema fields if the type property is set to STRUCT."""
        pass
    description: typing.Text = ...
    """Optional. The field description. The maximum length is 1,024 characters."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        type : global___TableFieldSchema.Type.ValueType = ...,
        mode : global___TableFieldSchema.Mode.ValueType = ...,
        fields : typing.Optional[typing.Iterable[global___TableFieldSchema]] = ...,
        description : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","fields",b"fields","mode",b"mode","name",b"name","type",b"type"]) -> None: ...
global___TableFieldSchema = TableFieldSchema
