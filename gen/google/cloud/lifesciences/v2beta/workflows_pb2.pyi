"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.rpc.code_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class RunPipelineRequest(google.protobuf.message.Message):
    """The arguments to the `RunPipeline` method. The requesting user must have
    the `iam.serviceAccounts.actAs` permission for the Cloud Life Sciences
    service account or the request will fail.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    PARENT_FIELD_NUMBER: builtins.int
    PIPELINE_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    PUB_SUB_TOPIC_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """The project and location that this request should be executed against."""

    @property
    def pipeline(self) -> global___Pipeline:
        """Required. The description of the pipeline to run."""
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """User-defined labels to associate with the returned operation. These
        labels are not propagated to any Google Cloud Platform resources used by
        the operation, and can be modified at any time.

        To associate labels with resources created while executing the operation,
        see the appropriate resource message (for example, `VirtualMachine`).
        """
        pass
    pub_sub_topic: typing.Text = ...
    """The name of an existing Pub/Sub topic.  The server will publish
    messages to this topic whenever the status of the operation changes.
    The Life Sciences Service Agent account must have publisher permissions to
    the specified topic or notifications will not be sent.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        pipeline : typing.Optional[global___Pipeline] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        pub_sub_topic : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["pipeline",b"pipeline"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["labels",b"labels","parent",b"parent","pipeline",b"pipeline","pub_sub_topic",b"pub_sub_topic"]) -> None: ...
global___RunPipelineRequest = RunPipelineRequest

class RunPipelineResponse(google.protobuf.message.Message):
    """The response to the RunPipeline method, returned in the operation's result
    field on success.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___RunPipelineResponse = RunPipelineResponse

class Pipeline(google.protobuf.message.Message):
    """Specifies a series of actions to execute, expressed as Docker containers."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class EnvironmentEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ACTIONS_FIELD_NUMBER: builtins.int
    RESOURCES_FIELD_NUMBER: builtins.int
    ENVIRONMENT_FIELD_NUMBER: builtins.int
    TIMEOUT_FIELD_NUMBER: builtins.int
    @property
    def actions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Action]:
        """The list of actions to execute, in the order they are specified."""
        pass
    @property
    def resources(self) -> global___Resources:
        """The resources required for execution."""
        pass
    @property
    def environment(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """The environment to pass into every action. Each action can also specify
        additional environment variables but cannot delete an entry from this map
        (though they can overwrite it with a different value).
        """
        pass
    @property
    def timeout(self) -> google.protobuf.duration_pb2.Duration:
        """The maximum amount of time to give the pipeline to complete.  This includes
        the time spent waiting for a worker to be allocated.  If the pipeline fails
        to complete before the timeout, it will be cancelled and the error code
        will be set to DEADLINE_EXCEEDED.

        If unspecified, it will default to 7 days.
        """
        pass
    def __init__(self,
        *,
        actions : typing.Optional[typing.Iterable[global___Action]] = ...,
        resources : typing.Optional[global___Resources] = ...,
        environment : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        timeout : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["resources",b"resources","timeout",b"timeout"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["actions",b"actions","environment",b"environment","resources",b"resources","timeout",b"timeout"]) -> None: ...
global___Pipeline = Pipeline

class Action(google.protobuf.message.Message):
    """Specifies a single action that runs a Docker container."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class EnvironmentEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class PortMappingsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int = ...
        value: builtins.int = ...
        def __init__(self,
            *,
            key : builtins.int = ...,
            value : builtins.int = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    CONTAINER_NAME_FIELD_NUMBER: builtins.int
    IMAGE_URI_FIELD_NUMBER: builtins.int
    COMMANDS_FIELD_NUMBER: builtins.int
    ENTRYPOINT_FIELD_NUMBER: builtins.int
    ENVIRONMENT_FIELD_NUMBER: builtins.int
    PID_NAMESPACE_FIELD_NUMBER: builtins.int
    PORT_MAPPINGS_FIELD_NUMBER: builtins.int
    MOUNTS_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    CREDENTIALS_FIELD_NUMBER: builtins.int
    TIMEOUT_FIELD_NUMBER: builtins.int
    IGNORE_EXIT_STATUS_FIELD_NUMBER: builtins.int
    RUN_IN_BACKGROUND_FIELD_NUMBER: builtins.int
    ALWAYS_RUN_FIELD_NUMBER: builtins.int
    ENABLE_FUSE_FIELD_NUMBER: builtins.int
    PUBLISH_EXPOSED_PORTS_FIELD_NUMBER: builtins.int
    DISABLE_IMAGE_PREFETCH_FIELD_NUMBER: builtins.int
    DISABLE_STANDARD_ERROR_CAPTURE_FIELD_NUMBER: builtins.int
    BLOCK_EXTERNAL_NETWORK_FIELD_NUMBER: builtins.int
    container_name: typing.Text = ...
    """An optional name for the container. The container hostname will be set to
    this name, making it useful for inter-container communication. The name
    must contain only upper and lowercase alphanumeric characters and hyphens
    and cannot start with a hyphen.
    """

    image_uri: typing.Text = ...
    """Required. The URI to pull the container image from. Note that all images referenced
    by actions in the pipeline are pulled before the first action runs. If
    multiple actions reference the same image, it is only pulled once,
    ensuring that the same image is used for all actions in a single pipeline.

    The image URI can be either a complete host and image specification (e.g.,
    quay.io/biocontainers/samtools), a library and image name (e.g.,
    google/cloud-sdk) or a bare image name ('bash') to pull from the default
    library.  No schema is required in any of these cases.

    If the specified image is not public, the service account specified for
    the Virtual Machine must have access to pull the images from GCR, or
    appropriate credentials must be specified in the
    [google.cloud.lifesciences.v2beta.Action.credentials][google.cloud.lifesciences.v2beta.Action.credentials] field.
    """

    @property
    def commands(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """If specified, overrides the `CMD` specified in the container. If the
        container also has an `ENTRYPOINT` the values are used as entrypoint
        arguments. Otherwise, they are used as a command and arguments to run
        inside the container.
        """
        pass
    entrypoint: typing.Text = ...
    """If specified, overrides the `ENTRYPOINT` specified in the container."""

    @property
    def environment(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """The environment to pass into the container. This environment is merged
        with values specified in the [google.cloud.lifesciences.v2beta.Pipeline][google.cloud.lifesciences.v2beta.Pipeline]
        message, overwriting any duplicate values.

        In addition to the values passed here, a few other values are
        automatically injected into the environment. These cannot be hidden or
        overwritten.

        `GOOGLE_PIPELINE_FAILED` will be set to "1" if the pipeline failed
        because an action has exited with a non-zero status (and did not have the
        `IGNORE_EXIT_STATUS` flag set). This can be used to determine if additional
        debug or logging actions should execute.

        `GOOGLE_LAST_EXIT_STATUS` will be set to the exit status of the last
        non-background action that executed. This can be used by workflow engine
        authors to determine whether an individual action has succeeded or failed.
        """
        pass
    pid_namespace: typing.Text = ...
    """An optional identifier for a PID namespace to run the action inside.
    Multiple actions should use the same string to share a namespace.  If
    unspecified, a separate isolated namespace is used.
    """

    @property
    def port_mappings(self) -> google.protobuf.internal.containers.ScalarMap[builtins.int, builtins.int]:
        """A map of containers to host port mappings for this container. If the
        container already specifies exposed ports, use the
        `PUBLISH_EXPOSED_PORTS` flag instead.

        The host port number must be less than 65536. If it is zero, an unused
        random port is assigned. To determine the resulting port number, consult
        the `ContainerStartedEvent` in the operation metadata.
        """
        pass
    @property
    def mounts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Mount]:
        """A list of mounts to make available to the action.

        In addition to the values specified here, every action has a special
        virtual disk mounted under `/google` that contains log files and other
        operational components.

        <ul>
          <li><code>/google/logs</code> All logs written during the pipeline
          execution.</li>
          <li><code>/google/logs/output</code> The combined standard output and
          standard error of all actions run as part of the pipeline
          execution.</li>
          <li><code>/google/logs/action/*/stdout</code> The complete contents of
          each individual action's standard output.</li>
          <li><code>/google/logs/action/*/stderr</code> The complete contents of
          each individual action's standard error output.</li>
        </ul>
        """
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Labels to associate with the action. This field is provided to assist
        workflow engine authors in identifying actions (for example, to indicate
        what sort of action they perform, such as localization or debugging).
        They are returned in the operation metadata, but are otherwise ignored.
        """
        pass
    @property
    def credentials(self) -> global___Secret:
        """If the specified image is hosted on a private registry other than Google
        Container Registry, the credentials required to pull the image must be
        specified here as an encrypted secret.

        The secret must decrypt to a JSON-encoded dictionary containing both
        `username` and `password` keys.
        """
        pass
    @property
    def timeout(self) -> google.protobuf.duration_pb2.Duration:
        """The maximum amount of time to give the action to complete. If the action
        fails to complete before the timeout, it will be terminated and the exit
        status will be non-zero. The pipeline will continue or terminate based
        on the rules defined by the `ALWAYS_RUN` and `IGNORE_EXIT_STATUS` flags.
        """
        pass
    ignore_exit_status: builtins.bool = ...
    """Normally, a non-zero exit status causes the pipeline to fail. This flag
    allows execution of other actions to continue instead.
    """

    run_in_background: builtins.bool = ...
    """This flag allows an action to continue running in the background while
    executing subsequent actions. This is useful to provide services to
    other actions (or to provide debugging support tools like SSH servers).
    """

    always_run: builtins.bool = ...
    """By default, after an action fails, no further actions are run. This flag
    indicates that this action must be run even if the pipeline has already
    failed. This is useful for actions that copy output files off of the VM
    or for debugging. Note that no actions will be run if image prefetching
    fails.
    """

    enable_fuse: builtins.bool = ...
    """Enable access to the FUSE device for this action. Filesystems can then
    be mounted into disks shared with other actions. The other actions do
    not need the `enable_fuse` flag to access the mounted filesystem.

    This has the effect of causing the container to be executed with
    `CAP_SYS_ADMIN` and exposes `/dev/fuse` to the container, so use it only
    for containers you trust.
    """

    publish_exposed_ports: builtins.bool = ...
    """Exposes all ports specified by `EXPOSE` statements in the container. To
    discover the host side port numbers, consult the `ACTION_STARTED` event
    in the operation metadata.
    """

    disable_image_prefetch: builtins.bool = ...
    """All container images are typically downloaded before any actions are
    executed. This helps prevent typos in URIs or issues like lack of disk
    space from wasting large amounts of compute resources.

    If set, this flag prevents the worker from downloading the image until
    just before the action is executed.
    """

    disable_standard_error_capture: builtins.bool = ...
    """A small portion of the container's standard error stream is typically
    captured and returned inside the `ContainerStoppedEvent`. Setting this
    flag disables this functionality.
    """

    block_external_network: builtins.bool = ...
    """Prevents the container from accessing the external network."""

    def __init__(self,
        *,
        container_name : typing.Text = ...,
        image_uri : typing.Text = ...,
        commands : typing.Optional[typing.Iterable[typing.Text]] = ...,
        entrypoint : typing.Text = ...,
        environment : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        pid_namespace : typing.Text = ...,
        port_mappings : typing.Optional[typing.Mapping[builtins.int, builtins.int]] = ...,
        mounts : typing.Optional[typing.Iterable[global___Mount]] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        credentials : typing.Optional[global___Secret] = ...,
        timeout : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        ignore_exit_status : builtins.bool = ...,
        run_in_background : builtins.bool = ...,
        always_run : builtins.bool = ...,
        enable_fuse : builtins.bool = ...,
        publish_exposed_ports : builtins.bool = ...,
        disable_image_prefetch : builtins.bool = ...,
        disable_standard_error_capture : builtins.bool = ...,
        block_external_network : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["credentials",b"credentials","timeout",b"timeout"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["always_run",b"always_run","block_external_network",b"block_external_network","commands",b"commands","container_name",b"container_name","credentials",b"credentials","disable_image_prefetch",b"disable_image_prefetch","disable_standard_error_capture",b"disable_standard_error_capture","enable_fuse",b"enable_fuse","entrypoint",b"entrypoint","environment",b"environment","ignore_exit_status",b"ignore_exit_status","image_uri",b"image_uri","labels",b"labels","mounts",b"mounts","pid_namespace",b"pid_namespace","port_mappings",b"port_mappings","publish_exposed_ports",b"publish_exposed_ports","run_in_background",b"run_in_background","timeout",b"timeout"]) -> None: ...
global___Action = Action

class Secret(google.protobuf.message.Message):
    """Holds encrypted information that is only decrypted and stored in RAM
    by the worker VM when running the pipeline.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    KEY_NAME_FIELD_NUMBER: builtins.int
    CIPHER_TEXT_FIELD_NUMBER: builtins.int
    key_name: typing.Text = ...
    """The name of the Cloud KMS key that will be used to decrypt the secret
    value. The VM service account must have the required permissions and
    authentication scopes to invoke the `decrypt` method on the specified key.
    """

    cipher_text: typing.Text = ...
    """The value of the cipherText response from the `encrypt` method. This field
    is intentionally unaudited.
    """

    def __init__(self,
        *,
        key_name : typing.Text = ...,
        cipher_text : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cipher_text",b"cipher_text","key_name",b"key_name"]) -> None: ...
global___Secret = Secret

class Mount(google.protobuf.message.Message):
    """Carries information about a particular disk mount inside a container."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DISK_FIELD_NUMBER: builtins.int
    PATH_FIELD_NUMBER: builtins.int
    READ_ONLY_FIELD_NUMBER: builtins.int
    disk: typing.Text = ...
    """The name of the disk to mount, as specified in the resources section."""

    path: typing.Text = ...
    """The path to mount the disk inside the container."""

    read_only: builtins.bool = ...
    """If true, the disk is mounted read-only inside the container."""

    def __init__(self,
        *,
        disk : typing.Text = ...,
        path : typing.Text = ...,
        read_only : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["disk",b"disk","path",b"path","read_only",b"read_only"]) -> None: ...
global___Mount = Mount

class Resources(google.protobuf.message.Message):
    """The system resources for the pipeline run.

    At least one zone or region must be specified or the pipeline run will fail.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    REGIONS_FIELD_NUMBER: builtins.int
    ZONES_FIELD_NUMBER: builtins.int
    VIRTUAL_MACHINE_FIELD_NUMBER: builtins.int
    @property
    def regions(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The list of regions allowed for VM allocation. If set, the `zones` field
        must not be set.
        """
        pass
    @property
    def zones(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The list of zones allowed for VM allocation. If set, the `regions` field
        must not be set.
        """
        pass
    @property
    def virtual_machine(self) -> global___VirtualMachine:
        """The virtual machine specification."""
        pass
    def __init__(self,
        *,
        regions : typing.Optional[typing.Iterable[typing.Text]] = ...,
        zones : typing.Optional[typing.Iterable[typing.Text]] = ...,
        virtual_machine : typing.Optional[global___VirtualMachine] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["virtual_machine",b"virtual_machine"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["regions",b"regions","virtual_machine",b"virtual_machine","zones",b"zones"]) -> None: ...
global___Resources = Resources

class VirtualMachine(google.protobuf.message.Message):
    """Carries information about a Compute Engine VM resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    MACHINE_TYPE_FIELD_NUMBER: builtins.int
    PREEMPTIBLE_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    DISKS_FIELD_NUMBER: builtins.int
    NETWORK_FIELD_NUMBER: builtins.int
    ACCELERATORS_FIELD_NUMBER: builtins.int
    SERVICE_ACCOUNT_FIELD_NUMBER: builtins.int
    BOOT_DISK_SIZE_GB_FIELD_NUMBER: builtins.int
    CPU_PLATFORM_FIELD_NUMBER: builtins.int
    BOOT_IMAGE_FIELD_NUMBER: builtins.int
    NVIDIA_DRIVER_VERSION_FIELD_NUMBER: builtins.int
    ENABLE_STACKDRIVER_MONITORING_FIELD_NUMBER: builtins.int
    DOCKER_CACHE_IMAGES_FIELD_NUMBER: builtins.int
    VOLUMES_FIELD_NUMBER: builtins.int
    machine_type: typing.Text = ...
    """Required. The machine type of the virtual machine to create. Must be the short name
    of a standard machine type (such as "n1-standard-1") or a custom machine
    type (such as "custom-1-4096", where "1" indicates the number of vCPUs and
    "4096" indicates the memory in MB). See
    [Creating an instance with a custom machine
    type](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create)
    for more specifications on creating a custom machine type.
    """

    preemptible: builtins.bool = ...
    """If true, allocate a preemptible VM."""

    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Optional set of labels to apply to the VM and any attached disk resources.
        These labels must adhere to the [name and value
        restrictions](https://cloud.google.com/compute/docs/labeling-resources) on
        VM labels imposed by Compute Engine.

        Labels keys with the prefix 'google-' are reserved for use by Google.

        Labels applied at creation time to the VM. Applied on a best-effort basis
        to attached disk resources shortly after VM creation.
        """
        pass
    @property
    def disks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Disk]:
        """The list of disks to create and attach to the VM.

        Specify either the `volumes[]` field or the `disks[]` field, but not both.
        """
        pass
    @property
    def network(self) -> global___Network:
        """The VM network configuration."""
        pass
    @property
    def accelerators(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Accelerator]:
        """The list of accelerators to attach to the VM."""
        pass
    @property
    def service_account(self) -> global___ServiceAccount:
        """The service account to install on the VM. This account does not need
        any permissions other than those required by the pipeline.
        """
        pass
    boot_disk_size_gb: builtins.int = ...
    """The size of the boot disk, in GB. The boot disk must be large
    enough to accommodate all of the Docker images from each action in the
    pipeline at the same time. If not specified, a small but reasonable
    default value is used.
    """

    cpu_platform: typing.Text = ...
    """The CPU platform to request. An instance based on a newer platform can be
    allocated, but never one with fewer capabilities. The value of this
    parameter must be a valid Compute Engine CPU platform name (such as "Intel
    Skylake"). This parameter is only useful for carefully optimized work
    loads where the CPU platform has a significant impact.

    For more information about the effect of this parameter, see
    https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.
    """

    boot_image: typing.Text = ...
    """The host operating system image to use.

    Currently, only Container-Optimized OS images can be used.

    The default value is `projects/cos-cloud/global/images/family/cos-stable`,
    which selects the latest stable release of Container-Optimized OS.

    This option is provided to allow testing against the beta release of the
    operating system to ensure that the new version does not interact
    negatively with production pipelines.

    To test a pipeline against the beta release of Container-Optimized OS,
    use the value `projects/cos-cloud/global/images/family/cos-beta`.
    """

    nvidia_driver_version: typing.Text = ...
    """The NVIDIA driver version to use when attaching an NVIDIA GPU accelerator.
    The version specified here must be compatible with the GPU libraries
    contained in the container being executed, and must be one of the drivers
    hosted in the `nvidia-drivers-us-public` bucket on Google Cloud Storage.
    """

    enable_stackdriver_monitoring: builtins.bool = ...
    """Whether Stackdriver monitoring should be enabled on the VM."""

    @property
    def docker_cache_images(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The Compute Engine Disk Images to use as a Docker cache. The disks will be
        mounted into the Docker folder in a way that the images present in the
        cache will not need to be pulled. The digests of the cached images must
        match those of the tags used or the latest version will still be pulled.
        The root directory of the ext4 image must contain `image` and `overlay2`
        directories copied from the Docker directory of a VM where the desired
        Docker images have already been pulled. Any images pulled that are not
        cached will be stored on the first cache disk instead of the boot disk.
        Only a single image is supported.
        """
        pass
    @property
    def volumes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Volume]:
        """The list of disks and other storage to create or attach to the VM.

        Specify either the `volumes[]` field or the `disks[]` field, but not both.
        """
        pass
    def __init__(self,
        *,
        machine_type : typing.Text = ...,
        preemptible : builtins.bool = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        disks : typing.Optional[typing.Iterable[global___Disk]] = ...,
        network : typing.Optional[global___Network] = ...,
        accelerators : typing.Optional[typing.Iterable[global___Accelerator]] = ...,
        service_account : typing.Optional[global___ServiceAccount] = ...,
        boot_disk_size_gb : builtins.int = ...,
        cpu_platform : typing.Text = ...,
        boot_image : typing.Text = ...,
        nvidia_driver_version : typing.Text = ...,
        enable_stackdriver_monitoring : builtins.bool = ...,
        docker_cache_images : typing.Optional[typing.Iterable[typing.Text]] = ...,
        volumes : typing.Optional[typing.Iterable[global___Volume]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["network",b"network","service_account",b"service_account"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["accelerators",b"accelerators","boot_disk_size_gb",b"boot_disk_size_gb","boot_image",b"boot_image","cpu_platform",b"cpu_platform","disks",b"disks","docker_cache_images",b"docker_cache_images","enable_stackdriver_monitoring",b"enable_stackdriver_monitoring","labels",b"labels","machine_type",b"machine_type","network",b"network","nvidia_driver_version",b"nvidia_driver_version","preemptible",b"preemptible","service_account",b"service_account","volumes",b"volumes"]) -> None: ...
global___VirtualMachine = VirtualMachine

class ServiceAccount(google.protobuf.message.Message):
    """Carries information about a Google Cloud service account."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    EMAIL_FIELD_NUMBER: builtins.int
    SCOPES_FIELD_NUMBER: builtins.int
    email: typing.Text = ...
    """Email address of the service account. If not specified, the default
    Compute Engine service account for the project will be used.
    """

    @property
    def scopes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """List of scopes to be enabled for this service account on the VM, in
        addition to the cloud-platform API scope that will be added by default.
        """
        pass
    def __init__(self,
        *,
        email : typing.Text = ...,
        scopes : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["email",b"email","scopes",b"scopes"]) -> None: ...
global___ServiceAccount = ServiceAccount

class Accelerator(google.protobuf.message.Message):
    """Carries information about an accelerator that can be attached to a VM."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TYPE_FIELD_NUMBER: builtins.int
    COUNT_FIELD_NUMBER: builtins.int
    type: typing.Text = ...
    """The accelerator type string (for example, "nvidia-tesla-k80").

    Only NVIDIA GPU accelerators are currently supported. If an NVIDIA GPU is
    attached, the required runtime libraries will be made available to all
    containers under `/usr/local/nvidia`. The driver version to install must
    be specified using the NVIDIA driver version parameter on the virtual
    machine specification. Note that attaching a GPU increases the worker VM
    startup time by a few minutes.
    """

    count: builtins.int = ...
    """How many accelerators of this type to attach."""

    def __init__(self,
        *,
        type : typing.Text = ...,
        count : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["count",b"count","type",b"type"]) -> None: ...
global___Accelerator = Accelerator

class Network(google.protobuf.message.Message):
    """VM networking options."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NETWORK_FIELD_NUMBER: builtins.int
    USE_PRIVATE_ADDRESS_FIELD_NUMBER: builtins.int
    SUBNETWORK_FIELD_NUMBER: builtins.int
    network: typing.Text = ...
    """The network name to attach the VM's network interface to. The value will
    be prefixed with `global/networks/` unless it contains a `/`, in which
    case it is assumed to be a fully specified network resource URL.

    If unspecified, the global default network is used.
    """

    use_private_address: builtins.bool = ...
    """If set to true, do not attach a public IP address to the VM. Note that
    without a public IP address, additional configuration is required to
    allow the VM to access Google services.

    See https://cloud.google.com/vpc/docs/configure-private-google-access
    for more information.
    """

    subnetwork: typing.Text = ...
    """If the specified network is configured for custom subnet creation, the
    name of the subnetwork to attach the instance to must be specified here.

    The value is prefixed with `regions/*/subnetworks/` unless it contains a
    `/`, in which case it is assumed to be a fully specified subnetwork
    resource URL.

    If the `*` character appears in the value, it is replaced with the region
    that the virtual machine has been allocated in.
    """

    def __init__(self,
        *,
        network : typing.Text = ...,
        use_private_address : builtins.bool = ...,
        subnetwork : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["network",b"network","subnetwork",b"subnetwork","use_private_address",b"use_private_address"]) -> None: ...
global___Network = Network

class Disk(google.protobuf.message.Message):
    """Carries information about a disk that can be attached to a VM.

    See https://cloud.google.com/compute/docs/disks/performance for more
    information about disk type, size, and performance considerations.

    Specify either [`Volume`][google.cloud.lifesciences.v2beta.Volume] or
    [`Disk`][google.cloud.lifesciences.v2beta.Disk], but not both.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    SIZE_GB_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    SOURCE_IMAGE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """A user-supplied name for the disk. Used when mounting the disk into
    actions. The name must contain only upper and lowercase alphanumeric
    characters and hyphens and cannot start with a hyphen.
    """

    size_gb: builtins.int = ...
    """The size, in GB, of the disk to attach. If the size is not
    specified, a default is chosen to ensure reasonable I/O performance.

    If the disk type is specified as `local-ssd`, multiple local drives are
    automatically combined to provide the requested size. Note, however, that
    each physical SSD is 375GB in size, and no more than 8 drives can be
    attached to a single instance.
    """

    type: typing.Text = ...
    """The Compute Engine disk type. If unspecified, `pd-standard` is used."""

    source_image: typing.Text = ...
    """An optional image to put on the disk before attaching it to the VM."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        size_gb : builtins.int = ...,
        type : typing.Text = ...,
        source_image : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","size_gb",b"size_gb","source_image",b"source_image","type",b"type"]) -> None: ...
global___Disk = Disk

class Volume(google.protobuf.message.Message):
    """Carries information about storage that can be attached to a VM.

    Specify either [`Volume`][google.cloud.lifesciences.v2beta.Volume] or
    [`Disk`][google.cloud.lifesciences.v2beta.Disk], but not both.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VOLUME_FIELD_NUMBER: builtins.int
    PERSISTENT_DISK_FIELD_NUMBER: builtins.int
    EXISTING_DISK_FIELD_NUMBER: builtins.int
    NFS_MOUNT_FIELD_NUMBER: builtins.int
    volume: typing.Text = ...
    """A user-supplied name for the volume. Used when mounting the volume into
    [`Actions`][google.cloud.lifesciences.v2beta.Action]. The name must contain
    only upper and lowercase alphanumeric characters and hyphens and cannot
    start with a hyphen.
    """

    @property
    def persistent_disk(self) -> global___PersistentDisk:
        """Configuration for a persistent disk."""
        pass
    @property
    def existing_disk(self) -> global___ExistingDisk:
        """Configuration for a existing disk."""
        pass
    @property
    def nfs_mount(self) -> global___NFSMount:
        """Configuration for an NFS mount."""
        pass
    def __init__(self,
        *,
        volume : typing.Text = ...,
        persistent_disk : typing.Optional[global___PersistentDisk] = ...,
        existing_disk : typing.Optional[global___ExistingDisk] = ...,
        nfs_mount : typing.Optional[global___NFSMount] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["existing_disk",b"existing_disk","nfs_mount",b"nfs_mount","persistent_disk",b"persistent_disk","storage",b"storage"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["existing_disk",b"existing_disk","nfs_mount",b"nfs_mount","persistent_disk",b"persistent_disk","storage",b"storage","volume",b"volume"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["storage",b"storage"]) -> typing.Optional[typing_extensions.Literal["persistent_disk","existing_disk","nfs_mount"]]: ...
global___Volume = Volume

class PersistentDisk(google.protobuf.message.Message):
    """Configuration for a persistent disk to be attached to the VM.

    See https://cloud.google.com/compute/docs/disks/performance for more
    information about disk type, size, and performance considerations.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SIZE_GB_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    SOURCE_IMAGE_FIELD_NUMBER: builtins.int
    size_gb: builtins.int = ...
    """The size, in GB, of the disk to attach. If the size is not
    specified, a default is chosen to ensure reasonable I/O performance.

    If the disk type is specified as `local-ssd`, multiple local drives are
    automatically combined to provide the requested size. Note, however, that
    each physical SSD is 375GB in size, and no more than 8 drives can be
    attached to a single instance.
    """

    type: typing.Text = ...
    """The Compute Engine disk type. If unspecified, `pd-standard` is used."""

    source_image: typing.Text = ...
    """An image to put on the disk before attaching it to the VM."""

    def __init__(self,
        *,
        size_gb : builtins.int = ...,
        type : typing.Text = ...,
        source_image : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["size_gb",b"size_gb","source_image",b"source_image","type",b"type"]) -> None: ...
global___PersistentDisk = PersistentDisk

class ExistingDisk(google.protobuf.message.Message):
    """Configuration for an existing disk to be attached to the VM."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DISK_FIELD_NUMBER: builtins.int
    disk: typing.Text = ...
    """If `disk` contains slashes, the Cloud Life Sciences API assumes that it is
    a complete URL for the disk.  If `disk` does not contain slashes, the Cloud
    Life Sciences API assumes that the disk is a zonal disk and a URL will be
    generated of the form `zones/<zone>/disks/<disk>`, where `<zone>` is the
    zone in which the instance is allocated. The disk must be ext4 formatted.

    If all `Mount` references to this disk have the `read_only` flag set to
    true, the disk will be attached in `read-only` mode and can be shared with
    other instances. Otherwise, the disk will be available for writing but
    cannot be shared.
    """

    def __init__(self,
        *,
        disk : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["disk",b"disk"]) -> None: ...
global___ExistingDisk = ExistingDisk

class NFSMount(google.protobuf.message.Message):
    """Configuration for an `NFSMount` to be attached to the VM."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TARGET_FIELD_NUMBER: builtins.int
    target: typing.Text = ...
    """A target NFS mount. The target must be specified as `address:/mount"."""

    def __init__(self,
        *,
        target : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["target",b"target"]) -> None: ...
global___NFSMount = NFSMount

class Metadata(google.protobuf.message.Message):
    """Carries information about the pipeline execution that is returned
    in the long running operation's metadata field.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    PIPELINE_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    EVENTS_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    PUB_SUB_TOPIC_FIELD_NUMBER: builtins.int
    @property
    def pipeline(self) -> global___Pipeline:
        """The pipeline this operation represents."""
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """The user-defined labels associated with this operation."""
        pass
    @property
    def events(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Event]:
        """The list of events that have happened so far during the execution of this
        operation.
        """
        pass
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which the operation was created by the API."""
        pass
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The first time at which resources were allocated to execute the pipeline."""
        pass
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which execution was completed and resources were cleaned up."""
        pass
    pub_sub_topic: typing.Text = ...
    """The name of the Cloud Pub/Sub topic where notifications of operation status
    changes are sent.
    """

    def __init__(self,
        *,
        pipeline : typing.Optional[global___Pipeline] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        events : typing.Optional[typing.Iterable[global___Event]] = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        start_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        end_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        pub_sub_topic : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time","end_time",b"end_time","pipeline",b"pipeline","start_time",b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["create_time",b"create_time","end_time",b"end_time","events",b"events","labels",b"labels","pipeline",b"pipeline","pub_sub_topic",b"pub_sub_topic","start_time",b"start_time"]) -> None: ...
global___Metadata = Metadata

class Event(google.protobuf.message.Message):
    """Carries information about events that occur during pipeline execution."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TIMESTAMP_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    DELAYED_FIELD_NUMBER: builtins.int
    WORKER_ASSIGNED_FIELD_NUMBER: builtins.int
    WORKER_RELEASED_FIELD_NUMBER: builtins.int
    PULL_STARTED_FIELD_NUMBER: builtins.int
    PULL_STOPPED_FIELD_NUMBER: builtins.int
    CONTAINER_STARTED_FIELD_NUMBER: builtins.int
    CONTAINER_STOPPED_FIELD_NUMBER: builtins.int
    CONTAINER_KILLED_FIELD_NUMBER: builtins.int
    UNEXPECTED_EXIT_STATUS_FIELD_NUMBER: builtins.int
    FAILED_FIELD_NUMBER: builtins.int
    @property
    def timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which the event occurred."""
        pass
    description: typing.Text = ...
    """A human-readable description of the event. Note that these strings can
    change at any time without notice. Any application logic must use the
    information in the `details` field.
    """

    @property
    def delayed(self) -> global___DelayedEvent:
        """See [google.cloud.lifesciences.v2beta.DelayedEvent][google.cloud.lifesciences.v2beta.DelayedEvent]."""
        pass
    @property
    def worker_assigned(self) -> global___WorkerAssignedEvent:
        """See [google.cloud.lifesciences.v2beta.WorkerAssignedEvent][google.cloud.lifesciences.v2beta.WorkerAssignedEvent]."""
        pass
    @property
    def worker_released(self) -> global___WorkerReleasedEvent:
        """See [google.cloud.lifesciences.v2beta.WorkerReleasedEvent][google.cloud.lifesciences.v2beta.WorkerReleasedEvent]."""
        pass
    @property
    def pull_started(self) -> global___PullStartedEvent:
        """See [google.cloud.lifesciences.v2beta.PullStartedEvent][google.cloud.lifesciences.v2beta.PullStartedEvent]."""
        pass
    @property
    def pull_stopped(self) -> global___PullStoppedEvent:
        """See [google.cloud.lifesciences.v2beta.PullStoppedEvent][google.cloud.lifesciences.v2beta.PullStoppedEvent]."""
        pass
    @property
    def container_started(self) -> global___ContainerStartedEvent:
        """See [google.cloud.lifesciences.v2beta.ContainerStartedEvent][google.cloud.lifesciences.v2beta.ContainerStartedEvent]."""
        pass
    @property
    def container_stopped(self) -> global___ContainerStoppedEvent:
        """See [google.cloud.lifesciences.v2beta.ContainerStoppedEvent][google.cloud.lifesciences.v2beta.ContainerStoppedEvent]."""
        pass
    @property
    def container_killed(self) -> global___ContainerKilledEvent:
        """See [google.cloud.lifesciences.v2beta.ContainerKilledEvent][google.cloud.lifesciences.v2beta.ContainerKilledEvent]."""
        pass
    @property
    def unexpected_exit_status(self) -> global___UnexpectedExitStatusEvent:
        """See [google.cloud.lifesciences.v2beta.UnexpectedExitStatusEvent][google.cloud.lifesciences.v2beta.UnexpectedExitStatusEvent]."""
        pass
    @property
    def failed(self) -> global___FailedEvent:
        """See [google.cloud.lifesciences.v2beta.FailedEvent][google.cloud.lifesciences.v2beta.FailedEvent]."""
        pass
    def __init__(self,
        *,
        timestamp : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        description : typing.Text = ...,
        delayed : typing.Optional[global___DelayedEvent] = ...,
        worker_assigned : typing.Optional[global___WorkerAssignedEvent] = ...,
        worker_released : typing.Optional[global___WorkerReleasedEvent] = ...,
        pull_started : typing.Optional[global___PullStartedEvent] = ...,
        pull_stopped : typing.Optional[global___PullStoppedEvent] = ...,
        container_started : typing.Optional[global___ContainerStartedEvent] = ...,
        container_stopped : typing.Optional[global___ContainerStoppedEvent] = ...,
        container_killed : typing.Optional[global___ContainerKilledEvent] = ...,
        unexpected_exit_status : typing.Optional[global___UnexpectedExitStatusEvent] = ...,
        failed : typing.Optional[global___FailedEvent] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["container_killed",b"container_killed","container_started",b"container_started","container_stopped",b"container_stopped","delayed",b"delayed","details",b"details","failed",b"failed","pull_started",b"pull_started","pull_stopped",b"pull_stopped","timestamp",b"timestamp","unexpected_exit_status",b"unexpected_exit_status","worker_assigned",b"worker_assigned","worker_released",b"worker_released"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["container_killed",b"container_killed","container_started",b"container_started","container_stopped",b"container_stopped","delayed",b"delayed","description",b"description","details",b"details","failed",b"failed","pull_started",b"pull_started","pull_stopped",b"pull_stopped","timestamp",b"timestamp","unexpected_exit_status",b"unexpected_exit_status","worker_assigned",b"worker_assigned","worker_released",b"worker_released"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["details",b"details"]) -> typing.Optional[typing_extensions.Literal["delayed","worker_assigned","worker_released","pull_started","pull_stopped","container_started","container_stopped","container_killed","unexpected_exit_status","failed"]]: ...
global___Event = Event

class DelayedEvent(google.protobuf.message.Message):
    """An event generated whenever a resource limitation or transient error
    delays execution of a pipeline that was otherwise ready to run.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CAUSE_FIELD_NUMBER: builtins.int
    METRICS_FIELD_NUMBER: builtins.int
    cause: typing.Text = ...
    """A textual description of the cause of the delay. The string can change
    without notice because it is often generated by another service (such as
    Compute Engine).
    """

    @property
    def metrics(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """If the delay was caused by a resource shortage, this field lists the
        Compute Engine metrics that are preventing this operation from running
        (for example, `CPUS` or `INSTANCES`). If the particular metric is not
        known, a single `UNKNOWN` metric will be present.
        """
        pass
    def __init__(self,
        *,
        cause : typing.Text = ...,
        metrics : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cause",b"cause","metrics",b"metrics"]) -> None: ...
global___DelayedEvent = DelayedEvent

class WorkerAssignedEvent(google.protobuf.message.Message):
    """An event generated after a worker VM has been assigned to run the
    pipeline.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ZONE_FIELD_NUMBER: builtins.int
    INSTANCE_FIELD_NUMBER: builtins.int
    MACHINE_TYPE_FIELD_NUMBER: builtins.int
    zone: typing.Text = ...
    """The zone the worker is running in."""

    instance: typing.Text = ...
    """The worker's instance name."""

    machine_type: typing.Text = ...
    """The machine type that was assigned for the worker."""

    def __init__(self,
        *,
        zone : typing.Text = ...,
        instance : typing.Text = ...,
        machine_type : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["instance",b"instance","machine_type",b"machine_type","zone",b"zone"]) -> None: ...
global___WorkerAssignedEvent = WorkerAssignedEvent

class WorkerReleasedEvent(google.protobuf.message.Message):
    """An event generated when the worker VM that was assigned to the pipeline
    has been released (deleted).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ZONE_FIELD_NUMBER: builtins.int
    INSTANCE_FIELD_NUMBER: builtins.int
    zone: typing.Text = ...
    """The zone the worker was running in."""

    instance: typing.Text = ...
    """The worker's instance name."""

    def __init__(self,
        *,
        zone : typing.Text = ...,
        instance : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["instance",b"instance","zone",b"zone"]) -> None: ...
global___WorkerReleasedEvent = WorkerReleasedEvent

class PullStartedEvent(google.protobuf.message.Message):
    """An event generated when the worker starts pulling an image."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    IMAGE_URI_FIELD_NUMBER: builtins.int
    image_uri: typing.Text = ...
    """The URI of the image that was pulled."""

    def __init__(self,
        *,
        image_uri : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["image_uri",b"image_uri"]) -> None: ...
global___PullStartedEvent = PullStartedEvent

class PullStoppedEvent(google.protobuf.message.Message):
    """An event generated when the worker stops pulling an image."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    IMAGE_URI_FIELD_NUMBER: builtins.int
    image_uri: typing.Text = ...
    """The URI of the image that was pulled."""

    def __init__(self,
        *,
        image_uri : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["image_uri",b"image_uri"]) -> None: ...
global___PullStoppedEvent = PullStoppedEvent

class ContainerStartedEvent(google.protobuf.message.Message):
    """An event generated when a container starts."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class PortMappingsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int = ...
        value: builtins.int = ...
        def __init__(self,
            *,
            key : builtins.int = ...,
            value : builtins.int = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ACTION_ID_FIELD_NUMBER: builtins.int
    PORT_MAPPINGS_FIELD_NUMBER: builtins.int
    IP_ADDRESS_FIELD_NUMBER: builtins.int
    action_id: builtins.int = ...
    """The numeric ID of the action that started this container."""

    @property
    def port_mappings(self) -> google.protobuf.internal.containers.ScalarMap[builtins.int, builtins.int]:
        """The container-to-host port mappings installed for this container. This
        set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag
        as well as any specified in the `Action` definition.
        """
        pass
    ip_address: typing.Text = ...
    """The public IP address that can be used to connect to the container. This
    field is only populated when at least one port mapping is present. If the
    instance was created with a private address, this field will be empty even
    if port mappings exist.
    """

    def __init__(self,
        *,
        action_id : builtins.int = ...,
        port_mappings : typing.Optional[typing.Mapping[builtins.int, builtins.int]] = ...,
        ip_address : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["action_id",b"action_id","ip_address",b"ip_address","port_mappings",b"port_mappings"]) -> None: ...
global___ContainerStartedEvent = ContainerStartedEvent

class ContainerStoppedEvent(google.protobuf.message.Message):
    """An event generated when a container exits."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ACTION_ID_FIELD_NUMBER: builtins.int
    EXIT_STATUS_FIELD_NUMBER: builtins.int
    STDERR_FIELD_NUMBER: builtins.int
    action_id: builtins.int = ...
    """The numeric ID of the action that started this container."""

    exit_status: builtins.int = ...
    """The exit status of the container."""

    stderr: typing.Text = ...
    """The tail end of any content written to standard error by the container.
    If the content emits large amounts of debugging noise or contains
    sensitive information, you can prevent the content from being printed by
    setting the `DISABLE_STANDARD_ERROR_CAPTURE` flag.

    Note that only a small amount of the end of the stream is captured here.
    The entire stream is stored in the `/google/logs` directory mounted into
    each action, and can be copied off the machine as described elsewhere.
    """

    def __init__(self,
        *,
        action_id : builtins.int = ...,
        exit_status : builtins.int = ...,
        stderr : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["action_id",b"action_id","exit_status",b"exit_status","stderr",b"stderr"]) -> None: ...
global___ContainerStoppedEvent = ContainerStoppedEvent

class UnexpectedExitStatusEvent(google.protobuf.message.Message):
    """An event generated when the execution of a container results in a
    non-zero exit status that was not otherwise ignored. Execution will
    continue, but only actions that are flagged as `ALWAYS_RUN` will be
    executed. Other actions will be skipped.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ACTION_ID_FIELD_NUMBER: builtins.int
    EXIT_STATUS_FIELD_NUMBER: builtins.int
    action_id: builtins.int = ...
    """The numeric ID of the action that started the container."""

    exit_status: builtins.int = ...
    """The exit status of the container."""

    def __init__(self,
        *,
        action_id : builtins.int = ...,
        exit_status : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["action_id",b"action_id","exit_status",b"exit_status"]) -> None: ...
global___UnexpectedExitStatusEvent = UnexpectedExitStatusEvent

class ContainerKilledEvent(google.protobuf.message.Message):
    """An event generated when a container is forcibly terminated by the
    worker. Currently, this only occurs when the container outlives the
    timeout specified by the user.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ACTION_ID_FIELD_NUMBER: builtins.int
    action_id: builtins.int = ...
    """The numeric ID of the action that started the container."""

    def __init__(self,
        *,
        action_id : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["action_id",b"action_id"]) -> None: ...
global___ContainerKilledEvent = ContainerKilledEvent

class FailedEvent(google.protobuf.message.Message):
    """An event generated when the execution of a pipeline has failed. Note
    that other events can continue to occur after this event.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CODE_FIELD_NUMBER: builtins.int
    CAUSE_FIELD_NUMBER: builtins.int
    code: google.rpc.code_pb2.Code.ValueType = ...
    """The Google standard error code that best describes this failure."""

    cause: typing.Text = ...
    """The human-readable description of the cause of the failure."""

    def __init__(self,
        *,
        code : google.rpc.code_pb2.Code.ValueType = ...,
        cause : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cause",b"cause","code",b"code"]) -> None: ...
global___FailedEvent = FailedEvent
