"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class AllocationRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    REALM_FIELD_NUMBER: builtins.int
    DEFAULT_GAME_SERVER_DEPLOYMENT_FIELD_NUMBER: builtins.int
    GAME_SERVER_SELECTORS_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    realm: typing.Text = ...
    """The required realm name in the following form:
    `{location}/{realm}`.
    """

    default_game_server_deployment: typing.Text = ...
    """The default game server deployment name.
    This is used to increase the likelihood of a successful
    allocation.
    """

    @property
    def game_server_selectors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GameServerSelector]:
        """The ordered list of game server labels to match for allocations.
        If the first game server selector is not matched, the selection attempts
        the second game server selector, and so on.
        """
        pass
    @property
    def metadata(self) -> global___MetaPatch:
        """Metadata is optional custom metadata that is added to the game server at
        allocation. You can use this to tell the server necessary session data.
        """
        pass
    def __init__(self,
        *,
        realm : typing.Text = ...,
        default_game_server_deployment : typing.Text = ...,
        game_server_selectors : typing.Optional[typing.Iterable[global___GameServerSelector]] = ...,
        metadata : typing.Optional[global___MetaPatch] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["metadata",b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["default_game_server_deployment",b"default_game_server_deployment","game_server_selectors",b"game_server_selectors","metadata",b"metadata","realm",b"realm"]) -> None: ...
global___AllocationRequest = AllocationRequest

class AllocationResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class GameServerStatusPort(google.protobuf.message.Message):
        """The game server port info that is allocated."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        NAME_FIELD_NUMBER: builtins.int
        PORT_FIELD_NUMBER: builtins.int
        name: typing.Text = ...
        port: builtins.int = ...
        def __init__(self,
            *,
            name : typing.Text = ...,
            port : builtins.int = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["name",b"name","port",b"port"]) -> None: ...

    GAME_SERVER_NAME_FIELD_NUMBER: builtins.int
    PORTS_FIELD_NUMBER: builtins.int
    ADDRESS_FIELD_NUMBER: builtins.int
    NODE_NAME_FIELD_NUMBER: builtins.int
    GAME_SERVER_CLUSTER_NAME_FIELD_NUMBER: builtins.int
    DEPLOYMENT_NAME_FIELD_NUMBER: builtins.int
    game_server_name: typing.Text = ...
    """The name of the allocated game server."""

    @property
    def ports(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AllocationResponse.GameServerStatusPort]:
        """The allocated game server's port information."""
        pass
    address: typing.Text = ...
    """The address of the allocated game server."""

    node_name: typing.Text = ...
    """The node name of the allocated game server."""

    game_server_cluster_name: typing.Text = ...
    """The game server cluster from which the game server was allocated."""

    deployment_name: typing.Text = ...
    """The game server deployment from which the game server was allocated."""

    def __init__(self,
        *,
        game_server_name : typing.Text = ...,
        ports : typing.Optional[typing.Iterable[global___AllocationResponse.GameServerStatusPort]] = ...,
        address : typing.Text = ...,
        node_name : typing.Text = ...,
        game_server_cluster_name : typing.Text = ...,
        deployment_name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","deployment_name",b"deployment_name","game_server_cluster_name",b"game_server_cluster_name","game_server_name",b"game_server_name","node_name",b"node_name","ports",b"ports"]) -> None: ...
global___AllocationResponse = AllocationResponse

class MetaPatch(google.protobuf.message.Message):
    """MetaPatch is the metadata used to patch the Game Server metadata on
    allocation. It behaves exactly as it does in OSS.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class AnnotationsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    LABELS_FIELD_NUMBER: builtins.int
    ANNOTATIONS_FIELD_NUMBER: builtins.int
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]: ...
    @property
    def annotations(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]: ...
    def __init__(self,
        *,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        annotations : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotations",b"annotations","labels",b"labels"]) -> None: ...
global___MetaPatch = MetaPatch

class GameServerSelector(google.protobuf.message.Message):
    """GameServerSelector used for finding a GameServer with matching labels."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class MatchLabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    MATCH_LABELS_FIELD_NUMBER: builtins.int
    @property
    def match_labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Labels to match."""
        pass
    def __init__(self,
        *,
        match_labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["match_labels",b"match_labels"]) -> None: ...
global___GameServerSelector = GameServerSelector
