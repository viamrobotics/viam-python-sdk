"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _AnnotationSource:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _AnnotationSourceEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_AnnotationSource.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    ANNOTATION_SOURCE_UNSPECIFIED: AnnotationSource.ValueType = ...  # 0
    OPERATOR: AnnotationSource.ValueType = ...  # 3
    """Answer is provided by a human contributor."""

class AnnotationSource(_AnnotationSource, metaclass=_AnnotationSourceEnumTypeWrapper):
    """Specifies where the annotation comes from (whether it was provided by a
    human labeler or a different source).
    """
    pass

ANNOTATION_SOURCE_UNSPECIFIED: AnnotationSource.ValueType = ...  # 0
OPERATOR: AnnotationSource.ValueType = ...  # 3
"""Answer is provided by a human contributor."""

global___AnnotationSource = AnnotationSource


class _AnnotationSentiment:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _AnnotationSentimentEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_AnnotationSentiment.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    ANNOTATION_SENTIMENT_UNSPECIFIED: AnnotationSentiment.ValueType = ...  # 0
    NEGATIVE: AnnotationSentiment.ValueType = ...  # 1
    """This annotation describes negatively about the data."""

    POSITIVE: AnnotationSentiment.ValueType = ...  # 2
    """This label describes positively about the data."""

class AnnotationSentiment(_AnnotationSentiment, metaclass=_AnnotationSentimentEnumTypeWrapper):
    pass

ANNOTATION_SENTIMENT_UNSPECIFIED: AnnotationSentiment.ValueType = ...  # 0
NEGATIVE: AnnotationSentiment.ValueType = ...  # 1
"""This annotation describes negatively about the data."""

POSITIVE: AnnotationSentiment.ValueType = ...  # 2
"""This label describes positively about the data."""

global___AnnotationSentiment = AnnotationSentiment


class _AnnotationType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _AnnotationTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_AnnotationType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    ANNOTATION_TYPE_UNSPECIFIED: AnnotationType.ValueType = ...  # 0
    IMAGE_CLASSIFICATION_ANNOTATION: AnnotationType.ValueType = ...  # 1
    """Classification annotations in an image. Allowed for continuous evaluation."""

    IMAGE_BOUNDING_BOX_ANNOTATION: AnnotationType.ValueType = ...  # 2
    """Bounding box annotations in an image. A form of image object detection.
    Allowed for continuous evaluation.
    """

    IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION: AnnotationType.ValueType = ...  # 13
    """Oriented bounding box. The box does not have to be parallel to horizontal
    line.
    """

    IMAGE_BOUNDING_POLY_ANNOTATION: AnnotationType.ValueType = ...  # 10
    """Bounding poly annotations in an image."""

    IMAGE_POLYLINE_ANNOTATION: AnnotationType.ValueType = ...  # 11
    """Polyline annotations in an image."""

    IMAGE_SEGMENTATION_ANNOTATION: AnnotationType.ValueType = ...  # 12
    """Segmentation annotations in an image."""

    VIDEO_SHOTS_CLASSIFICATION_ANNOTATION: AnnotationType.ValueType = ...  # 3
    """Classification annotations in video shots."""

    VIDEO_OBJECT_TRACKING_ANNOTATION: AnnotationType.ValueType = ...  # 4
    """Video object tracking annotation."""

    VIDEO_OBJECT_DETECTION_ANNOTATION: AnnotationType.ValueType = ...  # 5
    """Video object detection annotation."""

    VIDEO_EVENT_ANNOTATION: AnnotationType.ValueType = ...  # 6
    """Video event annotation."""

    TEXT_CLASSIFICATION_ANNOTATION: AnnotationType.ValueType = ...  # 8
    """Classification for text. Allowed for continuous evaluation."""

    TEXT_ENTITY_EXTRACTION_ANNOTATION: AnnotationType.ValueType = ...  # 9
    """Entity extraction for text."""

    GENERAL_CLASSIFICATION_ANNOTATION: AnnotationType.ValueType = ...  # 14
    """General classification. Allowed for continuous evaluation."""

class AnnotationType(_AnnotationType, metaclass=_AnnotationTypeEnumTypeWrapper):
    pass

ANNOTATION_TYPE_UNSPECIFIED: AnnotationType.ValueType = ...  # 0
IMAGE_CLASSIFICATION_ANNOTATION: AnnotationType.ValueType = ...  # 1
"""Classification annotations in an image. Allowed for continuous evaluation."""

IMAGE_BOUNDING_BOX_ANNOTATION: AnnotationType.ValueType = ...  # 2
"""Bounding box annotations in an image. A form of image object detection.
Allowed for continuous evaluation.
"""

IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION: AnnotationType.ValueType = ...  # 13
"""Oriented bounding box. The box does not have to be parallel to horizontal
line.
"""

IMAGE_BOUNDING_POLY_ANNOTATION: AnnotationType.ValueType = ...  # 10
"""Bounding poly annotations in an image."""

IMAGE_POLYLINE_ANNOTATION: AnnotationType.ValueType = ...  # 11
"""Polyline annotations in an image."""

IMAGE_SEGMENTATION_ANNOTATION: AnnotationType.ValueType = ...  # 12
"""Segmentation annotations in an image."""

VIDEO_SHOTS_CLASSIFICATION_ANNOTATION: AnnotationType.ValueType = ...  # 3
"""Classification annotations in video shots."""

VIDEO_OBJECT_TRACKING_ANNOTATION: AnnotationType.ValueType = ...  # 4
"""Video object tracking annotation."""

VIDEO_OBJECT_DETECTION_ANNOTATION: AnnotationType.ValueType = ...  # 5
"""Video object detection annotation."""

VIDEO_EVENT_ANNOTATION: AnnotationType.ValueType = ...  # 6
"""Video event annotation."""

TEXT_CLASSIFICATION_ANNOTATION: AnnotationType.ValueType = ...  # 8
"""Classification for text. Allowed for continuous evaluation."""

TEXT_ENTITY_EXTRACTION_ANNOTATION: AnnotationType.ValueType = ...  # 9
"""Entity extraction for text."""

GENERAL_CLASSIFICATION_ANNOTATION: AnnotationType.ValueType = ...  # 14
"""General classification. Allowed for continuous evaluation."""

global___AnnotationType = AnnotationType


class Annotation(google.protobuf.message.Message):
    """Annotation for Example. Each example may have one or more annotations. For
    example in image classification problem, each image might have one or more
    labels. We call labels binded with this image an Annotation.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    ANNOTATION_SOURCE_FIELD_NUMBER: builtins.int
    ANNOTATION_VALUE_FIELD_NUMBER: builtins.int
    ANNOTATION_METADATA_FIELD_NUMBER: builtins.int
    ANNOTATION_SENTIMENT_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. Unique name of this annotation, format is:

    projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset}/examples/{example_id}/annotations/{annotation_id}
    """

    annotation_source: global___AnnotationSource.ValueType = ...
    """Output only. The source of the annotation."""

    @property
    def annotation_value(self) -> global___AnnotationValue:
        """Output only. This is the actual annotation value, e.g classification,
        bounding box values are stored here.
        """
        pass
    @property
    def annotation_metadata(self) -> global___AnnotationMetadata:
        """Output only. Annotation metadata, including information like votes
        for labels.
        """
        pass
    annotation_sentiment: global___AnnotationSentiment.ValueType = ...
    """Output only. Sentiment for this annotation."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        annotation_source : global___AnnotationSource.ValueType = ...,
        annotation_value : typing.Optional[global___AnnotationValue] = ...,
        annotation_metadata : typing.Optional[global___AnnotationMetadata] = ...,
        annotation_sentiment : global___AnnotationSentiment.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["annotation_metadata",b"annotation_metadata","annotation_value",b"annotation_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_metadata",b"annotation_metadata","annotation_sentiment",b"annotation_sentiment","annotation_source",b"annotation_source","annotation_value",b"annotation_value","name",b"name"]) -> None: ...
global___Annotation = Annotation

class AnnotationValue(google.protobuf.message.Message):
    """Annotation value for an example."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    IMAGE_CLASSIFICATION_ANNOTATION_FIELD_NUMBER: builtins.int
    IMAGE_BOUNDING_POLY_ANNOTATION_FIELD_NUMBER: builtins.int
    IMAGE_POLYLINE_ANNOTATION_FIELD_NUMBER: builtins.int
    IMAGE_SEGMENTATION_ANNOTATION_FIELD_NUMBER: builtins.int
    TEXT_CLASSIFICATION_ANNOTATION_FIELD_NUMBER: builtins.int
    TEXT_ENTITY_EXTRACTION_ANNOTATION_FIELD_NUMBER: builtins.int
    VIDEO_CLASSIFICATION_ANNOTATION_FIELD_NUMBER: builtins.int
    VIDEO_OBJECT_TRACKING_ANNOTATION_FIELD_NUMBER: builtins.int
    VIDEO_EVENT_ANNOTATION_FIELD_NUMBER: builtins.int
    @property
    def image_classification_annotation(self) -> global___ImageClassificationAnnotation:
        """Annotation value for image classification case."""
        pass
    @property
    def image_bounding_poly_annotation(self) -> global___ImageBoundingPolyAnnotation:
        """Annotation value for image bounding box, oriented bounding box
        and polygon cases.
        """
        pass
    @property
    def image_polyline_annotation(self) -> global___ImagePolylineAnnotation:
        """Annotation value for image polyline cases.
        Polyline here is different from BoundingPoly. It is formed by
        line segments connected to each other but not closed form(Bounding Poly).
        The line segments can cross each other.
        """
        pass
    @property
    def image_segmentation_annotation(self) -> global___ImageSegmentationAnnotation:
        """Annotation value for image segmentation."""
        pass
    @property
    def text_classification_annotation(self) -> global___TextClassificationAnnotation:
        """Annotation value for text classification case."""
        pass
    @property
    def text_entity_extraction_annotation(self) -> global___TextEntityExtractionAnnotation:
        """Annotation value for text entity extraction case."""
        pass
    @property
    def video_classification_annotation(self) -> global___VideoClassificationAnnotation:
        """Annotation value for video classification case."""
        pass
    @property
    def video_object_tracking_annotation(self) -> global___VideoObjectTrackingAnnotation:
        """Annotation value for video object detection and tracking case."""
        pass
    @property
    def video_event_annotation(self) -> global___VideoEventAnnotation:
        """Annotation value for video event case."""
        pass
    def __init__(self,
        *,
        image_classification_annotation : typing.Optional[global___ImageClassificationAnnotation] = ...,
        image_bounding_poly_annotation : typing.Optional[global___ImageBoundingPolyAnnotation] = ...,
        image_polyline_annotation : typing.Optional[global___ImagePolylineAnnotation] = ...,
        image_segmentation_annotation : typing.Optional[global___ImageSegmentationAnnotation] = ...,
        text_classification_annotation : typing.Optional[global___TextClassificationAnnotation] = ...,
        text_entity_extraction_annotation : typing.Optional[global___TextEntityExtractionAnnotation] = ...,
        video_classification_annotation : typing.Optional[global___VideoClassificationAnnotation] = ...,
        video_object_tracking_annotation : typing.Optional[global___VideoObjectTrackingAnnotation] = ...,
        video_event_annotation : typing.Optional[global___VideoEventAnnotation] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["image_bounding_poly_annotation",b"image_bounding_poly_annotation","image_classification_annotation",b"image_classification_annotation","image_polyline_annotation",b"image_polyline_annotation","image_segmentation_annotation",b"image_segmentation_annotation","text_classification_annotation",b"text_classification_annotation","text_entity_extraction_annotation",b"text_entity_extraction_annotation","value_type",b"value_type","video_classification_annotation",b"video_classification_annotation","video_event_annotation",b"video_event_annotation","video_object_tracking_annotation",b"video_object_tracking_annotation"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["image_bounding_poly_annotation",b"image_bounding_poly_annotation","image_classification_annotation",b"image_classification_annotation","image_polyline_annotation",b"image_polyline_annotation","image_segmentation_annotation",b"image_segmentation_annotation","text_classification_annotation",b"text_classification_annotation","text_entity_extraction_annotation",b"text_entity_extraction_annotation","value_type",b"value_type","video_classification_annotation",b"video_classification_annotation","video_event_annotation",b"video_event_annotation","video_object_tracking_annotation",b"video_object_tracking_annotation"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["value_type",b"value_type"]) -> typing.Optional[typing_extensions.Literal["image_classification_annotation","image_bounding_poly_annotation","image_polyline_annotation","image_segmentation_annotation","text_classification_annotation","text_entity_extraction_annotation","video_classification_annotation","video_object_tracking_annotation","video_event_annotation"]]: ...
global___AnnotationValue = AnnotationValue

class ImageClassificationAnnotation(google.protobuf.message.Message):
    """Image classification annotation definition."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANNOTATION_SPEC_FIELD_NUMBER: builtins.int
    @property
    def annotation_spec(self) -> google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec:
        """Label of image."""
        pass
    def __init__(self,
        *,
        annotation_spec : typing.Optional[google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec"]) -> None: ...
global___ImageClassificationAnnotation = ImageClassificationAnnotation

class Vertex(google.protobuf.message.Message):
    """A vertex represents a 2D point in the image.
    NOTE: the vertex coordinates are in the same scale as the original image.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    x: builtins.int = ...
    """X coordinate."""

    y: builtins.int = ...
    """Y coordinate."""

    def __init__(self,
        *,
        x : builtins.int = ...,
        y : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["x",b"x","y",b"y"]) -> None: ...
global___Vertex = Vertex

class NormalizedVertex(google.protobuf.message.Message):
    """A vertex represents a 2D point in the image.
    NOTE: the normalized vertex coordinates are relative to the original image
    and range from 0 to 1.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    x: builtins.float = ...
    """X coordinate."""

    y: builtins.float = ...
    """Y coordinate."""

    def __init__(self,
        *,
        x : builtins.float = ...,
        y : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["x",b"x","y",b"y"]) -> None: ...
global___NormalizedVertex = NormalizedVertex

class BoundingPoly(google.protobuf.message.Message):
    """A bounding polygon in the image."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VERTICES_FIELD_NUMBER: builtins.int
    @property
    def vertices(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Vertex]:
        """The bounding polygon vertices."""
        pass
    def __init__(self,
        *,
        vertices : typing.Optional[typing.Iterable[global___Vertex]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["vertices",b"vertices"]) -> None: ...
global___BoundingPoly = BoundingPoly

class NormalizedBoundingPoly(google.protobuf.message.Message):
    """Normalized bounding polygon."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NORMALIZED_VERTICES_FIELD_NUMBER: builtins.int
    @property
    def normalized_vertices(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___NormalizedVertex]:
        """The bounding polygon normalized vertices."""
        pass
    def __init__(self,
        *,
        normalized_vertices : typing.Optional[typing.Iterable[global___NormalizedVertex]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["normalized_vertices",b"normalized_vertices"]) -> None: ...
global___NormalizedBoundingPoly = NormalizedBoundingPoly

class ImageBoundingPolyAnnotation(google.protobuf.message.Message):
    """Image bounding poly annotation. It represents a polygon including
    bounding box in the image.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BOUNDING_POLY_FIELD_NUMBER: builtins.int
    NORMALIZED_BOUNDING_POLY_FIELD_NUMBER: builtins.int
    ANNOTATION_SPEC_FIELD_NUMBER: builtins.int
    @property
    def bounding_poly(self) -> global___BoundingPoly: ...
    @property
    def normalized_bounding_poly(self) -> global___NormalizedBoundingPoly: ...
    @property
    def annotation_spec(self) -> google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec:
        """Label of object in this bounding polygon."""
        pass
    def __init__(self,
        *,
        bounding_poly : typing.Optional[global___BoundingPoly] = ...,
        normalized_bounding_poly : typing.Optional[global___NormalizedBoundingPoly] = ...,
        annotation_spec : typing.Optional[google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec","bounded_area",b"bounded_area","bounding_poly",b"bounding_poly","normalized_bounding_poly",b"normalized_bounding_poly"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec","bounded_area",b"bounded_area","bounding_poly",b"bounding_poly","normalized_bounding_poly",b"normalized_bounding_poly"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["bounded_area",b"bounded_area"]) -> typing.Optional[typing_extensions.Literal["bounding_poly","normalized_bounding_poly"]]: ...
global___ImageBoundingPolyAnnotation = ImageBoundingPolyAnnotation

class Polyline(google.protobuf.message.Message):
    """A line with multiple line segments."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VERTICES_FIELD_NUMBER: builtins.int
    @property
    def vertices(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Vertex]:
        """The polyline vertices."""
        pass
    def __init__(self,
        *,
        vertices : typing.Optional[typing.Iterable[global___Vertex]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["vertices",b"vertices"]) -> None: ...
global___Polyline = Polyline

class NormalizedPolyline(google.protobuf.message.Message):
    """Normalized polyline."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NORMALIZED_VERTICES_FIELD_NUMBER: builtins.int
    @property
    def normalized_vertices(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___NormalizedVertex]:
        """The normalized polyline vertices."""
        pass
    def __init__(self,
        *,
        normalized_vertices : typing.Optional[typing.Iterable[global___NormalizedVertex]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["normalized_vertices",b"normalized_vertices"]) -> None: ...
global___NormalizedPolyline = NormalizedPolyline

class ImagePolylineAnnotation(google.protobuf.message.Message):
    """A polyline for the image annotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    POLYLINE_FIELD_NUMBER: builtins.int
    NORMALIZED_POLYLINE_FIELD_NUMBER: builtins.int
    ANNOTATION_SPEC_FIELD_NUMBER: builtins.int
    @property
    def polyline(self) -> global___Polyline: ...
    @property
    def normalized_polyline(self) -> global___NormalizedPolyline: ...
    @property
    def annotation_spec(self) -> google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec:
        """Label of this polyline."""
        pass
    def __init__(self,
        *,
        polyline : typing.Optional[global___Polyline] = ...,
        normalized_polyline : typing.Optional[global___NormalizedPolyline] = ...,
        annotation_spec : typing.Optional[google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec","normalized_polyline",b"normalized_polyline","poly",b"poly","polyline",b"polyline"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec","normalized_polyline",b"normalized_polyline","poly",b"poly","polyline",b"polyline"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["poly",b"poly"]) -> typing.Optional[typing_extensions.Literal["polyline","normalized_polyline"]]: ...
global___ImagePolylineAnnotation = ImagePolylineAnnotation

class ImageSegmentationAnnotation(google.protobuf.message.Message):
    """Image segmentation annotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class AnnotationColorsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ANNOTATION_COLORS_FIELD_NUMBER: builtins.int
    MIME_TYPE_FIELD_NUMBER: builtins.int
    IMAGE_BYTES_FIELD_NUMBER: builtins.int
    @property
    def annotation_colors(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec]:
        """The mapping between rgb color and annotation spec. The key is the rgb
        color represented in format of rgb(0, 0, 0). The value is the
        AnnotationSpec.
        """
        pass
    mime_type: typing.Text = ...
    """Image format."""

    image_bytes: builtins.bytes = ...
    """A byte string of a full image's color map."""

    def __init__(self,
        *,
        annotation_colors : typing.Optional[typing.Mapping[typing.Text, google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec]] = ...,
        mime_type : typing.Text = ...,
        image_bytes : builtins.bytes = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_colors",b"annotation_colors","image_bytes",b"image_bytes","mime_type",b"mime_type"]) -> None: ...
global___ImageSegmentationAnnotation = ImageSegmentationAnnotation

class TextClassificationAnnotation(google.protobuf.message.Message):
    """Text classification annotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANNOTATION_SPEC_FIELD_NUMBER: builtins.int
    @property
    def annotation_spec(self) -> google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec:
        """Label of the text."""
        pass
    def __init__(self,
        *,
        annotation_spec : typing.Optional[google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec"]) -> None: ...
global___TextClassificationAnnotation = TextClassificationAnnotation

class TextEntityExtractionAnnotation(google.protobuf.message.Message):
    """Text entity extraction annotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANNOTATION_SPEC_FIELD_NUMBER: builtins.int
    SEQUENTIAL_SEGMENT_FIELD_NUMBER: builtins.int
    @property
    def annotation_spec(self) -> google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec:
        """Label of the text entities."""
        pass
    @property
    def sequential_segment(self) -> global___SequentialSegment:
        """Position of the entity."""
        pass
    def __init__(self,
        *,
        annotation_spec : typing.Optional[google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec] = ...,
        sequential_segment : typing.Optional[global___SequentialSegment] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec","sequential_segment",b"sequential_segment"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec","sequential_segment",b"sequential_segment"]) -> None: ...
global___TextEntityExtractionAnnotation = TextEntityExtractionAnnotation

class SequentialSegment(google.protobuf.message.Message):
    """Start and end position in a sequence (e.g. text segment)."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    START_FIELD_NUMBER: builtins.int
    END_FIELD_NUMBER: builtins.int
    start: builtins.int = ...
    """Start position (inclusive)."""

    end: builtins.int = ...
    """End position (exclusive)."""

    def __init__(self,
        *,
        start : builtins.int = ...,
        end : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["end",b"end","start",b"start"]) -> None: ...
global___SequentialSegment = SequentialSegment

class TimeSegment(google.protobuf.message.Message):
    """A time period inside of an example that has a time dimension (e.g. video)."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    START_TIME_OFFSET_FIELD_NUMBER: builtins.int
    END_TIME_OFFSET_FIELD_NUMBER: builtins.int
    @property
    def start_time_offset(self) -> google.protobuf.duration_pb2.Duration:
        """Start of the time segment (inclusive), represented as the duration since
        the example start.
        """
        pass
    @property
    def end_time_offset(self) -> google.protobuf.duration_pb2.Duration:
        """End of the time segment (exclusive), represented as the duration since the
        example start.
        """
        pass
    def __init__(self,
        *,
        start_time_offset : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        end_time_offset : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_time_offset",b"end_time_offset","start_time_offset",b"start_time_offset"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_time_offset",b"end_time_offset","start_time_offset",b"start_time_offset"]) -> None: ...
global___TimeSegment = TimeSegment

class VideoClassificationAnnotation(google.protobuf.message.Message):
    """Video classification annotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TIME_SEGMENT_FIELD_NUMBER: builtins.int
    ANNOTATION_SPEC_FIELD_NUMBER: builtins.int
    @property
    def time_segment(self) -> global___TimeSegment:
        """The time segment of the video to which the annotation applies."""
        pass
    @property
    def annotation_spec(self) -> google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec:
        """Label of the segment specified by time_segment."""
        pass
    def __init__(self,
        *,
        time_segment : typing.Optional[global___TimeSegment] = ...,
        annotation_spec : typing.Optional[google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec","time_segment",b"time_segment"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec","time_segment",b"time_segment"]) -> None: ...
global___VideoClassificationAnnotation = VideoClassificationAnnotation

class ObjectTrackingFrame(google.protobuf.message.Message):
    """Video frame level annotation for object detection and tracking."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BOUNDING_POLY_FIELD_NUMBER: builtins.int
    NORMALIZED_BOUNDING_POLY_FIELD_NUMBER: builtins.int
    TIME_OFFSET_FIELD_NUMBER: builtins.int
    @property
    def bounding_poly(self) -> global___BoundingPoly: ...
    @property
    def normalized_bounding_poly(self) -> global___NormalizedBoundingPoly: ...
    @property
    def time_offset(self) -> google.protobuf.duration_pb2.Duration:
        """The time offset of this frame relative to the beginning of the video."""
        pass
    def __init__(self,
        *,
        bounding_poly : typing.Optional[global___BoundingPoly] = ...,
        normalized_bounding_poly : typing.Optional[global___NormalizedBoundingPoly] = ...,
        time_offset : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bounded_area",b"bounded_area","bounding_poly",b"bounding_poly","normalized_bounding_poly",b"normalized_bounding_poly","time_offset",b"time_offset"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bounded_area",b"bounded_area","bounding_poly",b"bounding_poly","normalized_bounding_poly",b"normalized_bounding_poly","time_offset",b"time_offset"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["bounded_area",b"bounded_area"]) -> typing.Optional[typing_extensions.Literal["bounding_poly","normalized_bounding_poly"]]: ...
global___ObjectTrackingFrame = ObjectTrackingFrame

class VideoObjectTrackingAnnotation(google.protobuf.message.Message):
    """Video object tracking annotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANNOTATION_SPEC_FIELD_NUMBER: builtins.int
    TIME_SEGMENT_FIELD_NUMBER: builtins.int
    OBJECT_TRACKING_FRAMES_FIELD_NUMBER: builtins.int
    @property
    def annotation_spec(self) -> google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec:
        """Label of the object tracked in this annotation."""
        pass
    @property
    def time_segment(self) -> global___TimeSegment:
        """The time segment of the video to which object tracking applies."""
        pass
    @property
    def object_tracking_frames(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ObjectTrackingFrame]:
        """The list of frames where this object track appears."""
        pass
    def __init__(self,
        *,
        annotation_spec : typing.Optional[google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec] = ...,
        time_segment : typing.Optional[global___TimeSegment] = ...,
        object_tracking_frames : typing.Optional[typing.Iterable[global___ObjectTrackingFrame]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec","time_segment",b"time_segment"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec","object_tracking_frames",b"object_tracking_frames","time_segment",b"time_segment"]) -> None: ...
global___VideoObjectTrackingAnnotation = VideoObjectTrackingAnnotation

class VideoEventAnnotation(google.protobuf.message.Message):
    """Video event annotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANNOTATION_SPEC_FIELD_NUMBER: builtins.int
    TIME_SEGMENT_FIELD_NUMBER: builtins.int
    @property
    def annotation_spec(self) -> google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec:
        """Label of the event in this annotation."""
        pass
    @property
    def time_segment(self) -> global___TimeSegment:
        """The time segment of the video to which the annotation applies."""
        pass
    def __init__(self,
        *,
        annotation_spec : typing.Optional[google.cloud.datalabeling.v1beta1.annotation_spec_set_pb2.AnnotationSpec] = ...,
        time_segment : typing.Optional[global___TimeSegment] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec","time_segment",b"time_segment"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec",b"annotation_spec","time_segment",b"time_segment"]) -> None: ...
global___VideoEventAnnotation = VideoEventAnnotation

class AnnotationMetadata(google.protobuf.message.Message):
    """Additional information associated with the annotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    OPERATOR_METADATA_FIELD_NUMBER: builtins.int
    @property
    def operator_metadata(self) -> global___OperatorMetadata:
        """Metadata related to human labeling."""
        pass
    def __init__(self,
        *,
        operator_metadata : typing.Optional[global___OperatorMetadata] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["operator_metadata",b"operator_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["operator_metadata",b"operator_metadata"]) -> None: ...
global___AnnotationMetadata = AnnotationMetadata

class OperatorMetadata(google.protobuf.message.Message):
    """General information useful for labels coming from contributors."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SCORE_FIELD_NUMBER: builtins.int
    TOTAL_VOTES_FIELD_NUMBER: builtins.int
    LABEL_VOTES_FIELD_NUMBER: builtins.int
    COMMENTS_FIELD_NUMBER: builtins.int
    score: builtins.float = ...
    """Confidence score corresponding to a label. For examle, if 3 contributors
    have answered the question and 2 of them agree on the final label, the
    confidence score will be 0.67 (2/3).
    """

    total_votes: builtins.int = ...
    """The total number of contributors that answer this question."""

    label_votes: builtins.int = ...
    """The total number of contributors that choose this label."""

    @property
    def comments(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Comments from contributors."""
        pass
    def __init__(self,
        *,
        score : builtins.float = ...,
        total_votes : builtins.int = ...,
        label_votes : builtins.int = ...,
        comments : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["comments",b"comments","label_votes",b"label_votes","score",b"score","total_votes",b"total_votes"]) -> None: ...
global___OperatorMetadata = OperatorMetadata
