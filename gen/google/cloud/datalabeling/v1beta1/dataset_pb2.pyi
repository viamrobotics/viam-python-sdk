"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.datalabeling.v1beta1.annotation_pb2
import google.cloud.datalabeling.v1beta1.data_payloads_pb2
import google.cloud.datalabeling.v1beta1.human_annotation_config_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _DataType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _DataTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_DataType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    DATA_TYPE_UNSPECIFIED: DataType.ValueType = ...  # 0
    IMAGE: DataType.ValueType = ...  # 1
    """Allowed for continuous evaluation."""

    VIDEO: DataType.ValueType = ...  # 2
    TEXT: DataType.ValueType = ...  # 4
    """Allowed for continuous evaluation."""

    GENERAL_DATA: DataType.ValueType = ...  # 6
    """Allowed for continuous evaluation."""

class DataType(_DataType, metaclass=_DataTypeEnumTypeWrapper):
    pass

DATA_TYPE_UNSPECIFIED: DataType.ValueType = ...  # 0
IMAGE: DataType.ValueType = ...  # 1
"""Allowed for continuous evaluation."""

VIDEO: DataType.ValueType = ...  # 2
TEXT: DataType.ValueType = ...  # 4
"""Allowed for continuous evaluation."""

GENERAL_DATA: DataType.ValueType = ...  # 6
"""Allowed for continuous evaluation."""

global___DataType = DataType


class Dataset(google.protobuf.message.Message):
    """Dataset is the resource to hold your data. You can request multiple labeling
    tasks for a dataset while each one will generate an AnnotatedDataset.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    INPUT_CONFIGS_FIELD_NUMBER: builtins.int
    BLOCKING_RESOURCES_FIELD_NUMBER: builtins.int
    DATA_ITEM_COUNT_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. Dataset resource name, format is:
    projects/{project_id}/datasets/{dataset_id}
    """

    display_name: typing.Text = ...
    """Required. The display name of the dataset. Maximum of 64 characters."""

    description: typing.Text = ...
    """Optional. User-provided description of the annotation specification set.
    The description can be up to 10000 characters long.
    """

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Time the dataset is created."""
        pass
    @property
    def input_configs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InputConfig]:
        """Output only. This is populated with the original input configs
        where ImportData is called. It is available only after the clients
        import data to this dataset.
        """
        pass
    @property
    def blocking_resources(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Output only. The names of any related resources that are blocking changes
        to the dataset.
        """
        pass
    data_item_count: builtins.int = ...
    """Output only. The number of data items in the dataset."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        description : typing.Text = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        input_configs : typing.Optional[typing.Iterable[global___InputConfig]] = ...,
        blocking_resources : typing.Optional[typing.Iterable[typing.Text]] = ...,
        data_item_count : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["blocking_resources",b"blocking_resources","create_time",b"create_time","data_item_count",b"data_item_count","description",b"description","display_name",b"display_name","input_configs",b"input_configs","name",b"name"]) -> None: ...
global___Dataset = Dataset

class InputConfig(google.protobuf.message.Message):
    """The configuration of input data, including data type, location, etc."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEXT_METADATA_FIELD_NUMBER: builtins.int
    GCS_SOURCE_FIELD_NUMBER: builtins.int
    BIGQUERY_SOURCE_FIELD_NUMBER: builtins.int
    DATA_TYPE_FIELD_NUMBER: builtins.int
    ANNOTATION_TYPE_FIELD_NUMBER: builtins.int
    CLASSIFICATION_METADATA_FIELD_NUMBER: builtins.int
    @property
    def text_metadata(self) -> global___TextMetadata:
        """Required for text import, as language code must be specified."""
        pass
    @property
    def gcs_source(self) -> global___GcsSource:
        """Source located in Cloud Storage."""
        pass
    @property
    def bigquery_source(self) -> global___BigQuerySource:
        """Source located in BigQuery. You must specify this field if you are using
        this InputConfig in an [EvaluationJob][google.cloud.datalabeling.v1beta1.EvaluationJob].
        """
        pass
    data_type: global___DataType.ValueType = ...
    """Required. Data type must be specifed when user tries to import data."""

    annotation_type: google.cloud.datalabeling.v1beta1.annotation_pb2.AnnotationType.ValueType = ...
    """Optional. The type of annotation to be performed on this data. You must
    specify this field if you are using this InputConfig in an
    [EvaluationJob][google.cloud.datalabeling.v1beta1.EvaluationJob].
    """

    @property
    def classification_metadata(self) -> global___ClassificationMetadata:
        """Optional. Metadata about annotations for the input. You must specify this
        field if you are using this InputConfig in an [EvaluationJob][google.cloud.datalabeling.v1beta1.EvaluationJob] for a
        model version that performs classification.
        """
        pass
    def __init__(self,
        *,
        text_metadata : typing.Optional[global___TextMetadata] = ...,
        gcs_source : typing.Optional[global___GcsSource] = ...,
        bigquery_source : typing.Optional[global___BigQuerySource] = ...,
        data_type : global___DataType.ValueType = ...,
        annotation_type : google.cloud.datalabeling.v1beta1.annotation_pb2.AnnotationType.ValueType = ...,
        classification_metadata : typing.Optional[global___ClassificationMetadata] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bigquery_source",b"bigquery_source","classification_metadata",b"classification_metadata","data_type_metadata",b"data_type_metadata","gcs_source",b"gcs_source","source",b"source","text_metadata",b"text_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_type",b"annotation_type","bigquery_source",b"bigquery_source","classification_metadata",b"classification_metadata","data_type",b"data_type","data_type_metadata",b"data_type_metadata","gcs_source",b"gcs_source","source",b"source","text_metadata",b"text_metadata"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["data_type_metadata",b"data_type_metadata"]) -> typing.Optional[typing_extensions.Literal["text_metadata"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source",b"source"]) -> typing.Optional[typing_extensions.Literal["gcs_source","bigquery_source"]]: ...
global___InputConfig = InputConfig

class TextMetadata(google.protobuf.message.Message):
    """Metadata for the text."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    language_code: typing.Text = ...
    """The language of this text, as a
    [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt).
    Default value is en-US.
    """

    def __init__(self,
        *,
        language_code : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["language_code",b"language_code"]) -> None: ...
global___TextMetadata = TextMetadata

class ClassificationMetadata(google.protobuf.message.Message):
    """Metadata for classification annotations."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    IS_MULTI_LABEL_FIELD_NUMBER: builtins.int
    is_multi_label: builtins.bool = ...
    """Whether the classification task is multi-label or not."""

    def __init__(self,
        *,
        is_multi_label : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["is_multi_label",b"is_multi_label"]) -> None: ...
global___ClassificationMetadata = ClassificationMetadata

class GcsSource(google.protobuf.message.Message):
    """Source of the Cloud Storage file to be imported."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INPUT_URI_FIELD_NUMBER: builtins.int
    MIME_TYPE_FIELD_NUMBER: builtins.int
    input_uri: typing.Text = ...
    """Required. The input URI of source file. This must be a Cloud Storage path
    (`gs://...`).
    """

    mime_type: typing.Text = ...
    """Required. The format of the source file. Only "text/csv" is supported."""

    def __init__(self,
        *,
        input_uri : typing.Text = ...,
        mime_type : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["input_uri",b"input_uri","mime_type",b"mime_type"]) -> None: ...
global___GcsSource = GcsSource

class BigQuerySource(google.protobuf.message.Message):
    """The BigQuery location for input data. If used in an [EvaluationJob][google.cloud.datalabeling.v1beta1.EvaluationJob], this
    is where the service saves the prediction input and output sampled from the
    model version.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INPUT_URI_FIELD_NUMBER: builtins.int
    input_uri: typing.Text = ...
    """Required. BigQuery URI to a table, up to 2,000 characters long. If you
    specify the URI of a table that does not exist, Data Labeling Service
    creates a table at the URI with the correct schema when you create your
    [EvaluationJob][google.cloud.datalabeling.v1beta1.EvaluationJob]. If you specify the URI of a table that already exists,
    it must have the
    [correct
    schema](/ml-engine/docs/continuous-evaluation/create-job#table-schema).

    Provide the table URI in the following format:

    "bq://<var>{your_project_id}</var>/<var>{your_dataset_name}</var>/<var>{your_table_name}</var>"

    [Learn
    more](/ml-engine/docs/continuous-evaluation/create-job#table-schema).
    """

    def __init__(self,
        *,
        input_uri : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["input_uri",b"input_uri"]) -> None: ...
global___BigQuerySource = BigQuerySource

class OutputConfig(google.protobuf.message.Message):
    """The configuration of output data."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GCS_DESTINATION_FIELD_NUMBER: builtins.int
    GCS_FOLDER_DESTINATION_FIELD_NUMBER: builtins.int
    @property
    def gcs_destination(self) -> global___GcsDestination:
        """Output to a file in Cloud Storage. Should be used for labeling output
        other than image segmentation.
        """
        pass
    @property
    def gcs_folder_destination(self) -> global___GcsFolderDestination:
        """Output to a folder in Cloud Storage. Should be used for image
        segmentation labeling output.
        """
        pass
    def __init__(self,
        *,
        gcs_destination : typing.Optional[global___GcsDestination] = ...,
        gcs_folder_destination : typing.Optional[global___GcsFolderDestination] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["destination",b"destination","gcs_destination",b"gcs_destination","gcs_folder_destination",b"gcs_folder_destination"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["destination",b"destination","gcs_destination",b"gcs_destination","gcs_folder_destination",b"gcs_folder_destination"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["destination",b"destination"]) -> typing.Optional[typing_extensions.Literal["gcs_destination","gcs_folder_destination"]]: ...
global___OutputConfig = OutputConfig

class GcsDestination(google.protobuf.message.Message):
    """Export destination of the data.Only gcs path is allowed in
    output_uri.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    OUTPUT_URI_FIELD_NUMBER: builtins.int
    MIME_TYPE_FIELD_NUMBER: builtins.int
    output_uri: typing.Text = ...
    """Required. The output uri of destination file."""

    mime_type: typing.Text = ...
    """Required. The format of the gcs destination. Only "text/csv" and
    "application/json"
    are supported.
    """

    def __init__(self,
        *,
        output_uri : typing.Text = ...,
        mime_type : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["mime_type",b"mime_type","output_uri",b"output_uri"]) -> None: ...
global___GcsDestination = GcsDestination

class GcsFolderDestination(google.protobuf.message.Message):
    """Export folder destination of the data."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    OUTPUT_FOLDER_URI_FIELD_NUMBER: builtins.int
    output_folder_uri: typing.Text = ...
    """Required. Cloud Storage directory to export data to."""

    def __init__(self,
        *,
        output_folder_uri : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["output_folder_uri",b"output_folder_uri"]) -> None: ...
global___GcsFolderDestination = GcsFolderDestination

class DataItem(google.protobuf.message.Message):
    """DataItem is a piece of data, without annotation. For example, an image."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    IMAGE_PAYLOAD_FIELD_NUMBER: builtins.int
    TEXT_PAYLOAD_FIELD_NUMBER: builtins.int
    VIDEO_PAYLOAD_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    @property
    def image_payload(self) -> google.cloud.datalabeling.v1beta1.data_payloads_pb2.ImagePayload:
        """The image payload, a container of the image bytes/uri."""
        pass
    @property
    def text_payload(self) -> google.cloud.datalabeling.v1beta1.data_payloads_pb2.TextPayload:
        """The text payload, a container of text content."""
        pass
    @property
    def video_payload(self) -> google.cloud.datalabeling.v1beta1.data_payloads_pb2.VideoPayload:
        """The video payload, a container of the video uri."""
        pass
    name: typing.Text = ...
    """Output only. Name of the data item, in format of:
    projects/{project_id}/datasets/{dataset_id}/dataItems/{data_item_id}
    """

    def __init__(self,
        *,
        image_payload : typing.Optional[google.cloud.datalabeling.v1beta1.data_payloads_pb2.ImagePayload] = ...,
        text_payload : typing.Optional[google.cloud.datalabeling.v1beta1.data_payloads_pb2.TextPayload] = ...,
        video_payload : typing.Optional[google.cloud.datalabeling.v1beta1.data_payloads_pb2.VideoPayload] = ...,
        name : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["image_payload",b"image_payload","payload",b"payload","text_payload",b"text_payload","video_payload",b"video_payload"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["image_payload",b"image_payload","name",b"name","payload",b"payload","text_payload",b"text_payload","video_payload",b"video_payload"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["payload",b"payload"]) -> typing.Optional[typing_extensions.Literal["image_payload","text_payload","video_payload"]]: ...
global___DataItem = DataItem

class AnnotatedDataset(google.protobuf.message.Message):
    """AnnotatedDataset is a set holding annotations for data in a Dataset. Each
    labeling task will generate an AnnotatedDataset under the Dataset that the
    task is requested for.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    ANNOTATION_SOURCE_FIELD_NUMBER: builtins.int
    ANNOTATION_TYPE_FIELD_NUMBER: builtins.int
    EXAMPLE_COUNT_FIELD_NUMBER: builtins.int
    COMPLETED_EXAMPLE_COUNT_FIELD_NUMBER: builtins.int
    LABEL_STATS_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    BLOCKING_RESOURCES_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. AnnotatedDataset resource name in format of:
    projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/
    {annotated_dataset_id}
    """

    display_name: typing.Text = ...
    """Output only. The display name of the AnnotatedDataset. It is specified in
    HumanAnnotationConfig when user starts a labeling task. Maximum of 64
    characters.
    """

    description: typing.Text = ...
    """Output only. The description of the AnnotatedDataset. It is specified in
    HumanAnnotationConfig when user starts a labeling task. Maximum of 10000
    characters.
    """

    annotation_source: google.cloud.datalabeling.v1beta1.annotation_pb2.AnnotationSource.ValueType = ...
    """Output only. Source of the annotation."""

    annotation_type: google.cloud.datalabeling.v1beta1.annotation_pb2.AnnotationType.ValueType = ...
    """Output only. Type of the annotation. It is specified when starting labeling
    task.
    """

    example_count: builtins.int = ...
    """Output only. Number of examples in the annotated dataset."""

    completed_example_count: builtins.int = ...
    """Output only. Number of examples that have annotation in the annotated
    dataset.
    """

    @property
    def label_stats(self) -> global___LabelStats:
        """Output only. Per label statistics."""
        pass
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Time the AnnotatedDataset was created."""
        pass
    @property
    def metadata(self) -> global___AnnotatedDatasetMetadata:
        """Output only. Additional information about AnnotatedDataset."""
        pass
    @property
    def blocking_resources(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Output only. The names of any related resources that are blocking changes
        to the annotated dataset.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        description : typing.Text = ...,
        annotation_source : google.cloud.datalabeling.v1beta1.annotation_pb2.AnnotationSource.ValueType = ...,
        annotation_type : google.cloud.datalabeling.v1beta1.annotation_pb2.AnnotationType.ValueType = ...,
        example_count : builtins.int = ...,
        completed_example_count : builtins.int = ...,
        label_stats : typing.Optional[global___LabelStats] = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        metadata : typing.Optional[global___AnnotatedDatasetMetadata] = ...,
        blocking_resources : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time","label_stats",b"label_stats","metadata",b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_source",b"annotation_source","annotation_type",b"annotation_type","blocking_resources",b"blocking_resources","completed_example_count",b"completed_example_count","create_time",b"create_time","description",b"description","display_name",b"display_name","example_count",b"example_count","label_stats",b"label_stats","metadata",b"metadata","name",b"name"]) -> None: ...
global___AnnotatedDataset = AnnotatedDataset

class LabelStats(google.protobuf.message.Message):
    """Statistics about annotation specs."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ExampleCountEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: builtins.int = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : builtins.int = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    EXAMPLE_COUNT_FIELD_NUMBER: builtins.int
    @property
    def example_count(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, builtins.int]:
        """Map of each annotation spec's example count. Key is the annotation spec
        name and value is the number of examples for that annotation spec.
        If the annotated dataset does not have annotation spec, the map will return
        a pair where the key is empty string and value is the total number of
        annotations.
        """
        pass
    def __init__(self,
        *,
        example_count : typing.Optional[typing.Mapping[typing.Text, builtins.int]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["example_count",b"example_count"]) -> None: ...
global___LabelStats = LabelStats

class AnnotatedDatasetMetadata(google.protobuf.message.Message):
    """Metadata on AnnotatedDataset."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    IMAGE_CLASSIFICATION_CONFIG_FIELD_NUMBER: builtins.int
    BOUNDING_POLY_CONFIG_FIELD_NUMBER: builtins.int
    POLYLINE_CONFIG_FIELD_NUMBER: builtins.int
    SEGMENTATION_CONFIG_FIELD_NUMBER: builtins.int
    VIDEO_CLASSIFICATION_CONFIG_FIELD_NUMBER: builtins.int
    OBJECT_DETECTION_CONFIG_FIELD_NUMBER: builtins.int
    OBJECT_TRACKING_CONFIG_FIELD_NUMBER: builtins.int
    EVENT_CONFIG_FIELD_NUMBER: builtins.int
    TEXT_CLASSIFICATION_CONFIG_FIELD_NUMBER: builtins.int
    TEXT_ENTITY_EXTRACTION_CONFIG_FIELD_NUMBER: builtins.int
    HUMAN_ANNOTATION_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def image_classification_config(self) -> google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.ImageClassificationConfig:
        """Configuration for image classification task."""
        pass
    @property
    def bounding_poly_config(self) -> google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.BoundingPolyConfig:
        """Configuration for image bounding box and bounding poly task."""
        pass
    @property
    def polyline_config(self) -> google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.PolylineConfig:
        """Configuration for image polyline task."""
        pass
    @property
    def segmentation_config(self) -> google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.SegmentationConfig:
        """Configuration for image segmentation task."""
        pass
    @property
    def video_classification_config(self) -> google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.VideoClassificationConfig:
        """Configuration for video classification task."""
        pass
    @property
    def object_detection_config(self) -> google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.ObjectDetectionConfig:
        """Configuration for video object detection task."""
        pass
    @property
    def object_tracking_config(self) -> google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.ObjectTrackingConfig:
        """Configuration for video object tracking task."""
        pass
    @property
    def event_config(self) -> google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.EventConfig:
        """Configuration for video event labeling task."""
        pass
    @property
    def text_classification_config(self) -> google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.TextClassificationConfig:
        """Configuration for text classification task."""
        pass
    @property
    def text_entity_extraction_config(self) -> google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.TextEntityExtractionConfig:
        """Configuration for text entity extraction task."""
        pass
    @property
    def human_annotation_config(self) -> google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.HumanAnnotationConfig:
        """HumanAnnotationConfig used when requesting the human labeling task for this
        AnnotatedDataset.
        """
        pass
    def __init__(self,
        *,
        image_classification_config : typing.Optional[google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.ImageClassificationConfig] = ...,
        bounding_poly_config : typing.Optional[google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.BoundingPolyConfig] = ...,
        polyline_config : typing.Optional[google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.PolylineConfig] = ...,
        segmentation_config : typing.Optional[google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.SegmentationConfig] = ...,
        video_classification_config : typing.Optional[google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.VideoClassificationConfig] = ...,
        object_detection_config : typing.Optional[google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.ObjectDetectionConfig] = ...,
        object_tracking_config : typing.Optional[google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.ObjectTrackingConfig] = ...,
        event_config : typing.Optional[google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.EventConfig] = ...,
        text_classification_config : typing.Optional[google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.TextClassificationConfig] = ...,
        text_entity_extraction_config : typing.Optional[google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.TextEntityExtractionConfig] = ...,
        human_annotation_config : typing.Optional[google.cloud.datalabeling.v1beta1.human_annotation_config_pb2.HumanAnnotationConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["annotation_request_config",b"annotation_request_config","bounding_poly_config",b"bounding_poly_config","event_config",b"event_config","human_annotation_config",b"human_annotation_config","image_classification_config",b"image_classification_config","object_detection_config",b"object_detection_config","object_tracking_config",b"object_tracking_config","polyline_config",b"polyline_config","segmentation_config",b"segmentation_config","text_classification_config",b"text_classification_config","text_entity_extraction_config",b"text_entity_extraction_config","video_classification_config",b"video_classification_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_request_config",b"annotation_request_config","bounding_poly_config",b"bounding_poly_config","event_config",b"event_config","human_annotation_config",b"human_annotation_config","image_classification_config",b"image_classification_config","object_detection_config",b"object_detection_config","object_tracking_config",b"object_tracking_config","polyline_config",b"polyline_config","segmentation_config",b"segmentation_config","text_classification_config",b"text_classification_config","text_entity_extraction_config",b"text_entity_extraction_config","video_classification_config",b"video_classification_config"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["annotation_request_config",b"annotation_request_config"]) -> typing.Optional[typing_extensions.Literal["image_classification_config","bounding_poly_config","polyline_config","segmentation_config","video_classification_config","object_detection_config","object_tracking_config","event_config","text_classification_config","text_entity_extraction_config"]]: ...
global___AnnotatedDatasetMetadata = AnnotatedDatasetMetadata

class Example(google.protobuf.message.Message):
    """An Example is a piece of data and its annotation. For example, an image with
    label "house".
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    IMAGE_PAYLOAD_FIELD_NUMBER: builtins.int
    TEXT_PAYLOAD_FIELD_NUMBER: builtins.int
    VIDEO_PAYLOAD_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    ANNOTATIONS_FIELD_NUMBER: builtins.int
    @property
    def image_payload(self) -> google.cloud.datalabeling.v1beta1.data_payloads_pb2.ImagePayload:
        """The image payload, a container of the image bytes/uri."""
        pass
    @property
    def text_payload(self) -> google.cloud.datalabeling.v1beta1.data_payloads_pb2.TextPayload:
        """The text payload, a container of the text content."""
        pass
    @property
    def video_payload(self) -> google.cloud.datalabeling.v1beta1.data_payloads_pb2.VideoPayload:
        """The video payload, a container of the video uri."""
        pass
    name: typing.Text = ...
    """Output only. Name of the example, in format of:
    projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/
    {annotated_dataset_id}/examples/{example_id}
    """

    @property
    def annotations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.datalabeling.v1beta1.annotation_pb2.Annotation]:
        """Output only. Annotations for the piece of data in Example.
        One piece of data can have multiple annotations.
        """
        pass
    def __init__(self,
        *,
        image_payload : typing.Optional[google.cloud.datalabeling.v1beta1.data_payloads_pb2.ImagePayload] = ...,
        text_payload : typing.Optional[google.cloud.datalabeling.v1beta1.data_payloads_pb2.TextPayload] = ...,
        video_payload : typing.Optional[google.cloud.datalabeling.v1beta1.data_payloads_pb2.VideoPayload] = ...,
        name : typing.Text = ...,
        annotations : typing.Optional[typing.Iterable[google.cloud.datalabeling.v1beta1.annotation_pb2.Annotation]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["image_payload",b"image_payload","payload",b"payload","text_payload",b"text_payload","video_payload",b"video_payload"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotations",b"annotations","image_payload",b"image_payload","name",b"name","payload",b"payload","text_payload",b"text_payload","video_payload",b"video_payload"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["payload",b"payload"]) -> typing.Optional[typing_extensions.Literal["image_payload","text_payload","video_payload"]]: ...
global___Example = Example
