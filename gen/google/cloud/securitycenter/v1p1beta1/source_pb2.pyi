"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Source(google.protobuf.message.Message):
    """Security Command Center finding source. A finding source
    is an entity or a mechanism that can produce a finding. A source is like a
    container of findings that come from the same scanner, logger, monitor, etc.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    CANONICAL_NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The relative resource name of this source. See:
    https://cloud.google.com/apis/design/resource_names#relative_resource_name
    Example:
    "organizations/{organization_id}/sources/{source_id}"
    """

    display_name: typing.Text = ...
    """The source's display name.
    A source's display name must be unique amongst its siblings, for example,
    two sources with the same parent can't share the same display name.
    The display name must have a length between 1 and 64 characters
    (inclusive).
    """

    description: typing.Text = ...
    """The description of the source (max of 1024 characters).
    Example:
    "Web Security Scanner is a web security scanner for common
    vulnerabilities in App Engine applications. It can automatically
    scan and detect four common vulnerabilities, including cross-site-scripting
    (XSS), Flash injection, mixed content (HTTP in HTTPS), and
    outdated/insecure libraries."
    """

    canonical_name: typing.Text = ...
    """The canonical name of the finding. It's either
    "organizations/{organization_id}/sources/{source_id}",
    "folders/{folder_id}/sources/{source_id}" or
    "projects/{project_number}/sources/{source_id}",
    depending on the closest CRM ancestor of the resource associated with the
    finding.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        description : typing.Text = ...,
        canonical_name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["canonical_name",b"canonical_name","description",b"description","display_name",b"display_name","name",b"name"]) -> None: ...
global___Source = Source
