"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _HttpMethod:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _HttpMethodEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_HttpMethod.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    HTTP_METHOD_UNSPECIFIED: HttpMethod.ValueType = ...  # 0
    """HTTP method unspecified"""

    POST: HttpMethod.ValueType = ...  # 1
    """HTTP POST"""

    GET: HttpMethod.ValueType = ...  # 2
    """HTTP GET"""

    HEAD: HttpMethod.ValueType = ...  # 3
    """HTTP HEAD"""

    PUT: HttpMethod.ValueType = ...  # 4
    """HTTP PUT"""

    DELETE: HttpMethod.ValueType = ...  # 5
    """HTTP DELETE"""

    PATCH: HttpMethod.ValueType = ...  # 6
    """HTTP PATCH"""

    OPTIONS: HttpMethod.ValueType = ...  # 7
    """HTTP OPTIONS"""

class HttpMethod(_HttpMethod, metaclass=_HttpMethodEnumTypeWrapper):
    """The HTTP method used to deliver the task."""
    pass

HTTP_METHOD_UNSPECIFIED: HttpMethod.ValueType = ...  # 0
"""HTTP method unspecified"""

POST: HttpMethod.ValueType = ...  # 1
"""HTTP POST"""

GET: HttpMethod.ValueType = ...  # 2
"""HTTP GET"""

HEAD: HttpMethod.ValueType = ...  # 3
"""HTTP HEAD"""

PUT: HttpMethod.ValueType = ...  # 4
"""HTTP PUT"""

DELETE: HttpMethod.ValueType = ...  # 5
"""HTTP DELETE"""

PATCH: HttpMethod.ValueType = ...  # 6
"""HTTP PATCH"""

OPTIONS: HttpMethod.ValueType = ...  # 7
"""HTTP OPTIONS"""

global___HttpMethod = HttpMethod


class HttpRequest(google.protobuf.message.Message):
    """HTTP request.

    The task will be pushed to the worker as an HTTP request. If the worker
    or the redirected worker acknowledges the task by returning a successful HTTP
    response code ([`200` - `299`]), the task will be removed from the queue. If
    any other HTTP response code is returned or no response is received, the
    task will be retried according to the following:

    * User-specified throttling: [retry configuration][google.cloud.tasks.v2.Queue.retry_config],
      [rate limits][google.cloud.tasks.v2.Queue.rate_limits], and the [queue's state][google.cloud.tasks.v2.Queue.state].

    * System throttling: To prevent the worker from overloading, Cloud Tasks may
      temporarily reduce the queue's effective rate. User-specified settings
      will not be changed.

     System throttling happens because:

      * Cloud Tasks backs off on all errors. Normally the backoff specified in
        [rate limits][google.cloud.tasks.v2.Queue.rate_limits] will be used. But if the worker returns
        `429` (Too Many Requests), `503` (Service Unavailable), or the rate of
        errors is high, Cloud Tasks will use a higher backoff rate. The retry
        specified in the `Retry-After` HTTP response header is considered.

      * To prevent traffic spikes and to smooth sudden increases in traffic,
        dispatches ramp up slowly when the queue is newly created or idle and
        if large numbers of tasks suddenly become available to dispatch (due to
        spikes in create task rates, the queue being unpaused, or many tasks
        that are scheduled at the same time).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class HeadersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    URL_FIELD_NUMBER: builtins.int
    HTTP_METHOD_FIELD_NUMBER: builtins.int
    HEADERS_FIELD_NUMBER: builtins.int
    BODY_FIELD_NUMBER: builtins.int
    OAUTH_TOKEN_FIELD_NUMBER: builtins.int
    OIDC_TOKEN_FIELD_NUMBER: builtins.int
    url: typing.Text = ...
    """Required. The full url path that the request will be sent to.

    This string must begin with either "http://" or "https://". Some examples
    are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will
    encode some characters for safety and compatibility. The maximum allowed
    URL length is 2083 characters after encoding.

    The `Location` header response from a redirect response [`300` - `399`]
    may be followed. The redirect is not counted as a separate attempt.
    """

    http_method: global___HttpMethod.ValueType = ...
    """The HTTP method to use for the request. The default is POST."""

    @property
    def headers(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """HTTP request headers.

        This map contains the header field names and values.
        Headers can be set when the
        [task is created][google.cloud.tasks.v2beta3.CloudTasks.CreateTask].

        These headers represent a subset of the headers that will accompany the
        task's HTTP request. Some HTTP request headers will be ignored or replaced.

        A partial list of headers that will be ignored or replaced is:

        * Host: This will be computed by Cloud Tasks and derived from
          [HttpRequest.url][google.cloud.tasks.v2.HttpRequest.url].
        * Content-Length: This will be computed by Cloud Tasks.
        * User-Agent: This will be set to `"Google-Cloud-Tasks"`.
        * `X-Google-*`: Google use only.
        * `X-AppEngine-*`: Google use only.

        `Content-Type` won't be set by Cloud Tasks. You can explicitly set
        `Content-Type` to a media type when the
         [task is created][google.cloud.tasks.v2beta3.CloudTasks.CreateTask].
         For example, `Content-Type` can be set to `"application/octet-stream"` or
         `"application/json"`.

        Headers which can have multiple values (according to RFC2616) can be
        specified using comma-separated values.

        The size of the headers must be less than 80KB.
        """
        pass
    body: builtins.bytes = ...
    """HTTP request body.

    A request body is allowed only if the
    [HTTP method][google.cloud.tasks.v2.HttpRequest.http_method] is POST, PUT, or PATCH. It is an
    error to set body on a task with an incompatible [HttpMethod][google.cloud.tasks.v2.HttpMethod].
    """

    @property
    def oauth_token(self) -> global___OAuthToken:
        """If specified, an
        [OAuth token](https://developers.google.com/identity/protocols/OAuth2)
        will be generated and attached as an `Authorization` header in the HTTP
        request.

        This type of authorization should generally only be used when calling
        Google APIs hosted on *.googleapis.com.
        """
        pass
    @property
    def oidc_token(self) -> global___OidcToken:
        """If specified, an
        [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect)
        token will be generated and attached as an `Authorization` header in the
        HTTP request.

        This type of authorization can be used for many scenarios, including
        calling Cloud Run, or endpoints where you intend to validate the token
        yourself.
        """
        pass
    def __init__(self,
        *,
        url : typing.Text = ...,
        http_method : global___HttpMethod.ValueType = ...,
        headers : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        body : builtins.bytes = ...,
        oauth_token : typing.Optional[global___OAuthToken] = ...,
        oidc_token : typing.Optional[global___OidcToken] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["authorization_header",b"authorization_header","oauth_token",b"oauth_token","oidc_token",b"oidc_token"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["authorization_header",b"authorization_header","body",b"body","headers",b"headers","http_method",b"http_method","oauth_token",b"oauth_token","oidc_token",b"oidc_token","url",b"url"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["authorization_header",b"authorization_header"]) -> typing.Optional[typing_extensions.Literal["oauth_token","oidc_token"]]: ...
global___HttpRequest = HttpRequest

class AppEngineHttpRequest(google.protobuf.message.Message):
    """App Engine HTTP request.

    The message defines the HTTP request that is sent to an App Engine app when
    the task is dispatched.

    Using [AppEngineHttpRequest][google.cloud.tasks.v2.AppEngineHttpRequest] requires
    [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control)
    Google IAM permission for the project
    and the following scope:

    `https://www.googleapis.com/auth/cloud-platform`

    The task will be delivered to the App Engine app which belongs to the same
    project as the queue. For more information, see
    [How Requests are
    Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
    and how routing is affected by
    [dispatch
    files](https://cloud.google.com/appengine/docs/python/config/dispatchref).
    Traffic is encrypted during transport and never leaves Google datacenters.
    Because this traffic is carried over a communication mechanism internal to
    Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS).
    The request to the handler, however, will appear to have used the HTTP
    protocol.

    The [AppEngineRouting][google.cloud.tasks.v2.AppEngineRouting] used to construct the URL that the task is
    delivered to can be set at the queue-level or task-level:

    * If [app_engine_routing_override is set on the
       queue][Queue.app_engine_routing_override], this value is used for all
       tasks in the queue, no matter what the setting is for the [task-level
       app_engine_routing][AppEngineHttpRequest.app_engine_routing].


    The `url` that the task will be sent to is:

    * `url =` [host][google.cloud.tasks.v2.AppEngineRouting.host] `+`
      [relative_uri][google.cloud.tasks.v2.AppEngineHttpRequest.relative_uri]

    Tasks can be dispatched to secure app handlers, unsecure app handlers, and
    URIs restricted with
    [`login:
    admin`](https://cloud.google.com/appengine/docs/standard/python/config/appref).
    Because tasks are not run as any user, they cannot be dispatched to URIs
    restricted with
    [`login:
    required`](https://cloud.google.com/appengine/docs/standard/python/config/appref)
    Task dispatches also do not follow redirects.

    The task attempt has succeeded if the app's request handler returns an HTTP
    response code in the range [`200` - `299`]. The task attempt has failed if
    the app's handler returns a non-2xx response code or Cloud Tasks does
    not receive response before the [deadline][google.cloud.tasks.v2.Task.dispatch_deadline]. Failed
    tasks will be retried according to the
    [retry configuration][google.cloud.tasks.v2.Queue.retry_config]. `503` (Service Unavailable) is
    considered an App Engine system error instead of an application error and
    will cause Cloud Tasks' traffic congestion control to temporarily throttle
    the queue's dispatches. Unlike other types of task targets, a `429` (Too Many
    Requests) response from an app handler does not cause traffic congestion
    control to throttle the queue.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class HeadersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    HTTP_METHOD_FIELD_NUMBER: builtins.int
    APP_ENGINE_ROUTING_FIELD_NUMBER: builtins.int
    RELATIVE_URI_FIELD_NUMBER: builtins.int
    HEADERS_FIELD_NUMBER: builtins.int
    BODY_FIELD_NUMBER: builtins.int
    http_method: global___HttpMethod.ValueType = ...
    """The HTTP method to use for the request. The default is POST.

    The app's request handler for the task's target URL must be able to handle
    HTTP requests with this http_method, otherwise the task attempt will fail
    with error code 405 (Method Not Allowed). See
    [Writing a push task request
    handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler)
    and the documentation for the request handlers in the language your app is
    written in e.g.
    [Python Request
    Handler](https://cloud.google.com/appengine/docs/python/tools/webapp/requesthandlerclass).
    """

    @property
    def app_engine_routing(self) -> global___AppEngineRouting:
        """Task-level setting for App Engine routing.

        * If [app_engine_routing_override is set on the
           queue][Queue.app_engine_routing_override], this value is used for all
           tasks in the queue, no matter what the setting is for the [task-level
           app_engine_routing][AppEngineHttpRequest.app_engine_routing].
        """
        pass
    relative_uri: typing.Text = ...
    """The relative URI.

    The relative URI must begin with "/" and must be a valid HTTP relative URI.
    It can contain a path and query string arguments.
    If the relative URI is empty, then the root path "/" will be used.
    No spaces are allowed, and the maximum length allowed is 2083 characters.
    """

    @property
    def headers(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """HTTP request headers.

        This map contains the header field names and values.
        Headers can be set when the
        [task is created][google.cloud.tasks.v2.CloudTasks.CreateTask].
        Repeated headers are not supported but a header value can contain commas.

        Cloud Tasks sets some headers to default values:

        * `User-Agent`: By default, this header is
          `"AppEngine-Google; (+http://code.google.com/appengine)"`.
          This header can be modified, but Cloud Tasks will append
          `"AppEngine-Google; (+http://code.google.com/appengine)"` to the
          modified `User-Agent`.

        If the task has a [body][google.cloud.tasks.v2.AppEngineHttpRequest.body], Cloud
        Tasks sets the following headers:

        * `Content-Type`: By default, the `Content-Type` header is set to
          `"application/octet-stream"`. The default can be overridden by explicitly
          setting `Content-Type` to a particular media type when the
          [task is created][google.cloud.tasks.v2.CloudTasks.CreateTask].
          For example, `Content-Type` can be set to `"application/json"`.
        * `Content-Length`: This is computed by Cloud Tasks. This value is
          output only.   It cannot be changed.

        The headers below cannot be set or overridden:

        * `Host`
        * `X-Google-*`
        * `X-AppEngine-*`

        In addition, Cloud Tasks sets some headers when the task is dispatched,
        such as headers containing information about the task; see
        [request
        headers](https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_request_headers).
        These headers are set only when the task is dispatched, so they are not
        visible when the task is returned in a Cloud Tasks response.

        Although there is no specific limit for the maximum number of headers or
        the size, there is a limit on the maximum size of the [Task][google.cloud.tasks.v2.Task]. For more
        information, see the [CreateTask][google.cloud.tasks.v2.CloudTasks.CreateTask] documentation.
        """
        pass
    body: builtins.bytes = ...
    """HTTP request body.

    A request body is allowed only if the HTTP method is POST or PUT. It is
    an error to set a body on a task with an incompatible [HttpMethod][google.cloud.tasks.v2.HttpMethod].
    """

    def __init__(self,
        *,
        http_method : global___HttpMethod.ValueType = ...,
        app_engine_routing : typing.Optional[global___AppEngineRouting] = ...,
        relative_uri : typing.Text = ...,
        headers : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        body : builtins.bytes = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["app_engine_routing",b"app_engine_routing"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["app_engine_routing",b"app_engine_routing","body",b"body","headers",b"headers","http_method",b"http_method","relative_uri",b"relative_uri"]) -> None: ...
global___AppEngineHttpRequest = AppEngineHttpRequest

class AppEngineRouting(google.protobuf.message.Message):
    """App Engine Routing.

    Defines routing characteristics specific to App Engine - service, version,
    and instance.

    For more information about services, versions, and instances see
    [An Overview of App
    Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine),
    [Microservices Architecture on Google App
    Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine),
    [App Engine Standard request
    routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed),
    and [App Engine Flex request
    routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).

    Using [AppEngineRouting][google.cloud.tasks.v2.AppEngineRouting] requires
    [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control)
    Google IAM permission for the project
    and the following scope:

    `https://www.googleapis.com/auth/cloud-platform`
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SERVICE_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    INSTANCE_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    service: typing.Text = ...
    """App service.

    By default, the task is sent to the service which is the default
    service when the task is attempted.

    For some queues or tasks which were created using the App Engine
    Task Queue API, [host][google.cloud.tasks.v2.AppEngineRouting.host] is not parsable
    into [service][google.cloud.tasks.v2.AppEngineRouting.service],
    [version][google.cloud.tasks.v2.AppEngineRouting.version], and
    [instance][google.cloud.tasks.v2.AppEngineRouting.instance]. For example, some tasks
    which were created using the App Engine SDK use a custom domain
    name; custom domains are not parsed by Cloud Tasks. If
    [host][google.cloud.tasks.v2.AppEngineRouting.host] is not parsable, then
    [service][google.cloud.tasks.v2.AppEngineRouting.service],
    [version][google.cloud.tasks.v2.AppEngineRouting.version], and
    [instance][google.cloud.tasks.v2.AppEngineRouting.instance] are the empty string.
    """

    version: typing.Text = ...
    """App version.

    By default, the task is sent to the version which is the default
    version when the task is attempted.

    For some queues or tasks which were created using the App Engine
    Task Queue API, [host][google.cloud.tasks.v2.AppEngineRouting.host] is not parsable
    into [service][google.cloud.tasks.v2.AppEngineRouting.service],
    [version][google.cloud.tasks.v2.AppEngineRouting.version], and
    [instance][google.cloud.tasks.v2.AppEngineRouting.instance]. For example, some tasks
    which were created using the App Engine SDK use a custom domain
    name; custom domains are not parsed by Cloud Tasks. If
    [host][google.cloud.tasks.v2.AppEngineRouting.host] is not parsable, then
    [service][google.cloud.tasks.v2.AppEngineRouting.service],
    [version][google.cloud.tasks.v2.AppEngineRouting.version], and
    [instance][google.cloud.tasks.v2.AppEngineRouting.instance] are the empty string.
    """

    instance: typing.Text = ...
    """App instance.

    By default, the task is sent to an instance which is available when
    the task is attempted.

    Requests can only be sent to a specific instance if
    [manual scaling is used in App Engine
    Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes).
    App Engine Flex does not support instances. For more information, see
    [App Engine Standard request
    routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
    and [App Engine Flex request
    routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
    """

    host: typing.Text = ...
    """Output only. The host that the task is sent to.

    The host is constructed from the domain name of the app associated with
    the queue's project ID (for example <app-id>.appspot.com), and the
    [service][google.cloud.tasks.v2.AppEngineRouting.service], [version][google.cloud.tasks.v2.AppEngineRouting.version],
    and [instance][google.cloud.tasks.v2.AppEngineRouting.instance]. Tasks which were created using
    the App Engine SDK might have a custom domain name.

    For more information, see
    [How Requests are
    Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
    """

    def __init__(self,
        *,
        service : typing.Text = ...,
        version : typing.Text = ...,
        instance : typing.Text = ...,
        host : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["host",b"host","instance",b"instance","service",b"service","version",b"version"]) -> None: ...
global___AppEngineRouting = AppEngineRouting

class OAuthToken(google.protobuf.message.Message):
    """Contains information needed for generating an
    [OAuth token](https://developers.google.com/identity/protocols/OAuth2).
    This type of authorization should generally only be used when calling Google
    APIs hosted on *.googleapis.com.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SERVICE_ACCOUNT_EMAIL_FIELD_NUMBER: builtins.int
    SCOPE_FIELD_NUMBER: builtins.int
    service_account_email: typing.Text = ...
    """[Service account email](https://cloud.google.com/iam/docs/service-accounts)
    to be used for generating OAuth token.
    The service account must be within the same project as the queue. The
    caller must have iam.serviceAccounts.actAs permission for the service
    account.
    """

    scope: typing.Text = ...
    """OAuth scope to be used for generating OAuth access token.
    If not specified, "https://www.googleapis.com/auth/cloud-platform"
    will be used.
    """

    def __init__(self,
        *,
        service_account_email : typing.Text = ...,
        scope : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["scope",b"scope","service_account_email",b"service_account_email"]) -> None: ...
global___OAuthToken = OAuthToken

class OidcToken(google.protobuf.message.Message):
    """Contains information needed for generating an
    [OpenID Connect
    token](https://developers.google.com/identity/protocols/OpenIDConnect).
    This type of authorization can be used for many scenarios, including
    calling Cloud Run, or endpoints where you intend to validate the token
    yourself.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SERVICE_ACCOUNT_EMAIL_FIELD_NUMBER: builtins.int
    AUDIENCE_FIELD_NUMBER: builtins.int
    service_account_email: typing.Text = ...
    """[Service account email](https://cloud.google.com/iam/docs/service-accounts)
    to be used for generating OIDC token.
    The service account must be within the same project as the queue. The
    caller must have iam.serviceAccounts.actAs permission for the service
    account.
    """

    audience: typing.Text = ...
    """Audience to be used when generating OIDC token. If not specified, the URI
    specified in target will be used.
    """

    def __init__(self,
        *,
        service_account_email : typing.Text = ...,
        audience : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["audience",b"audience","service_account_email",b"service_account_email"]) -> None: ...
global___OidcToken = OidcToken
