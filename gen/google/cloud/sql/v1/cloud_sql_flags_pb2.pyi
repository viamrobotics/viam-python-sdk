"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.sql.v1.cloud_sql_resources_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _SqlFlagType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _SqlFlagTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SqlFlagType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    SQL_FLAG_TYPE_UNSPECIFIED: SqlFlagType.ValueType = ...  # 0
    """This is an unknown flag type."""

    BOOLEAN: SqlFlagType.ValueType = ...  # 1
    """Boolean type flag."""

    STRING: SqlFlagType.ValueType = ...  # 2
    """String type flag."""

    INTEGER: SqlFlagType.ValueType = ...  # 3
    """Integer type flag."""

    NONE: SqlFlagType.ValueType = ...  # 4
    """Flag type used for a server startup option."""

    MYSQL_TIMEZONE_OFFSET: SqlFlagType.ValueType = ...  # 5
    """Type introduced specially for MySQL TimeZone offset. Accept a string value
    with the format [-12:59, 13:00].
    """

    FLOAT: SqlFlagType.ValueType = ...  # 6
    """Float type flag."""

    REPEATED_STRING: SqlFlagType.ValueType = ...  # 7
    """Comma-separated list of the strings in a SqlFlagType enum."""

class SqlFlagType(_SqlFlagType, metaclass=_SqlFlagTypeEnumTypeWrapper):
    pass

SQL_FLAG_TYPE_UNSPECIFIED: SqlFlagType.ValueType = ...  # 0
"""This is an unknown flag type."""

BOOLEAN: SqlFlagType.ValueType = ...  # 1
"""Boolean type flag."""

STRING: SqlFlagType.ValueType = ...  # 2
"""String type flag."""

INTEGER: SqlFlagType.ValueType = ...  # 3
"""Integer type flag."""

NONE: SqlFlagType.ValueType = ...  # 4
"""Flag type used for a server startup option."""

MYSQL_TIMEZONE_OFFSET: SqlFlagType.ValueType = ...  # 5
"""Type introduced specially for MySQL TimeZone offset. Accept a string value
with the format [-12:59, 13:00].
"""

FLOAT: SqlFlagType.ValueType = ...  # 6
"""Float type flag."""

REPEATED_STRING: SqlFlagType.ValueType = ...  # 7
"""Comma-separated list of the strings in a SqlFlagType enum."""

global___SqlFlagType = SqlFlagType


class SqlFlagsListRequest(google.protobuf.message.Message):
    """Flags list request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DATABASE_VERSION_FIELD_NUMBER: builtins.int
    database_version: typing.Text = ...
    """Database type and version you want to retrieve flags for. By default, this
    method returns flags for all database types and versions.
    """

    def __init__(self,
        *,
        database_version : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["database_version",b"database_version"]) -> None: ...
global___SqlFlagsListRequest = SqlFlagsListRequest

class FlagsListResponse(google.protobuf.message.Message):
    """Flags list response."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    KIND_FIELD_NUMBER: builtins.int
    ITEMS_FIELD_NUMBER: builtins.int
    kind: typing.Text = ...
    """This is always **sql#flagsList**."""

    @property
    def items(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Flag]:
        """List of flags."""
        pass
    def __init__(self,
        *,
        kind : typing.Text = ...,
        items : typing.Optional[typing.Iterable[global___Flag]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["items",b"items","kind",b"kind"]) -> None: ...
global___FlagsListResponse = FlagsListResponse

class Flag(google.protobuf.message.Message):
    """A flag resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    APPLIES_TO_FIELD_NUMBER: builtins.int
    ALLOWED_STRING_VALUES_FIELD_NUMBER: builtins.int
    MIN_VALUE_FIELD_NUMBER: builtins.int
    MAX_VALUE_FIELD_NUMBER: builtins.int
    REQUIRES_RESTART_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    IN_BETA_FIELD_NUMBER: builtins.int
    ALLOWED_INT_VALUES_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """This is the name of the flag. Flag names always use underscores, not
    hyphens, for example: **max_allowed_packet**
    """

    type: global___SqlFlagType.ValueType = ...
    """The type of the flag. Flags are typed to being **BOOLEAN**, **STRING**,
    **INTEGER** or **NONE**. **NONE** is used for flags which do not take a
    value, such as **skip_grant_tables**.
    """

    @property
    def applies_to(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[google.cloud.sql.v1.cloud_sql_resources_pb2.SqlDatabaseVersion.ValueType]:
        """The database version this flag applies to. Can be **MYSQL_8_0**,
        **MYSQL_5_6**, or **MYSQL_5_7**.
        """
        pass
    @property
    def allowed_string_values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """For **STRING** flags, a list of strings that the value can be set to."""
        pass
    @property
    def min_value(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """For **INTEGER** flags, the minimum allowed value."""
        pass
    @property
    def max_value(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """For **INTEGER** flags, the maximum allowed value."""
        pass
    @property
    def requires_restart(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Indicates whether changing this flag will trigger a database restart. Only
        applicable to Second Generation instances.
        """
        pass
    kind: typing.Text = ...
    """This is always **sql#flag**."""

    @property
    def in_beta(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Whether or not the flag is considered in beta."""
        pass
    @property
    def allowed_int_values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Use this field if only certain integers are accepted. Can be combined
        with min_value and max_value to add additional values.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        type : global___SqlFlagType.ValueType = ...,
        applies_to : typing.Optional[typing.Iterable[google.cloud.sql.v1.cloud_sql_resources_pb2.SqlDatabaseVersion.ValueType]] = ...,
        allowed_string_values : typing.Optional[typing.Iterable[typing.Text]] = ...,
        min_value : typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_value : typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        requires_restart : typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        kind : typing.Text = ...,
        in_beta : typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        allowed_int_values : typing.Optional[typing.Iterable[builtins.int]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["in_beta",b"in_beta","max_value",b"max_value","min_value",b"min_value","requires_restart",b"requires_restart"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["allowed_int_values",b"allowed_int_values","allowed_string_values",b"allowed_string_values","applies_to",b"applies_to","in_beta",b"in_beta","kind",b"kind","max_value",b"max_value","min_value",b"min_value","name",b"name","requires_restart",b"requires_restart","type",b"type"]) -> None: ...
global___Flag = Flag
