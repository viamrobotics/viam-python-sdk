"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.websecurityscanner.v1alpha.finding_addon_pb2
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Finding(google.protobuf.message.Message):
    """A Finding resource represents a vulnerability instance identified during a
    ScanRun.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _FindingType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _FindingTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_FindingType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        FINDING_TYPE_UNSPECIFIED: Finding.FindingType.ValueType = ...  # 0
        """The invalid finding type."""

        MIXED_CONTENT: Finding.FindingType.ValueType = ...  # 1
        """A page that was served over HTTPS also resources over HTTP. A
        man-in-the-middle attacker could tamper with the HTTP resource and gain
        full access to the website that loads the resource or to monitor the
        actions taken by the user.
        """

        OUTDATED_LIBRARY: Finding.FindingType.ValueType = ...  # 2
        """The version of an included library is known to contain a security issue.
        The scanner checks the version of library in use against a known list of
        vulnerable libraries. False positives are possible if the version
        detection fails or if the library has been manually patched.
        """

        ROSETTA_FLASH: Finding.FindingType.ValueType = ...  # 5
        """This type of vulnerability occurs when the value of a request parameter
        is reflected at the beginning of the response, for example, in requests
        using JSONP. Under certain circumstances, an attacker may be able to
        supply an alphanumeric-only Flash file in the vulnerable parameter
        causing the browser to execute the Flash file as if it originated on the
        vulnerable server.
        """

        XSS_CALLBACK: Finding.FindingType.ValueType = ...  # 3
        """A cross-site scripting (XSS) bug is found via JavaScript callback. For
        detailed explanations on XSS, see
        https://www.google.com/about/appsecurity/learning/xss/.
        """

        XSS_ERROR: Finding.FindingType.ValueType = ...  # 4
        """A potential cross-site scripting (XSS) bug due to JavaScript breakage.
        In some circumstances, the application under test might modify the test
        string before it is parsed by the browser. When the browser attempts to
        runs this modified test string, it will likely break and throw a
        JavaScript execution error, thus an injection issue is occurring.
        However, it may not be exploitable. Manual verification is needed to see
        if the test string modifications can be evaded and confirm that the issue
        is in fact an XSS vulnerability. For detailed explanations on XSS, see
        https://www.google.com/about/appsecurity/learning/xss/.
        """

        CLEAR_TEXT_PASSWORD: Finding.FindingType.ValueType = ...  # 6
        """An application appears to be transmitting a password field in clear text.
        An attacker can eavesdrop network traffic and sniff the password field.
        """

        INVALID_CONTENT_TYPE: Finding.FindingType.ValueType = ...  # 7
        """An application returns sensitive content with an invalid content type,
        or without an 'X-Content-Type-Options: nosniff' header.
        """

        XSS_ANGULAR_CALLBACK: Finding.FindingType.ValueType = ...  # 8
        """A cross-site scripting (XSS) vulnerability in AngularJS module that
        occurs when a user-provided string is interpolated by Angular.
        """

        INVALID_HEADER: Finding.FindingType.ValueType = ...  # 9
        """A malformed or invalid valued header."""

        MISSPELLED_SECURITY_HEADER_NAME: Finding.FindingType.ValueType = ...  # 10
        """Misspelled security header name."""

        MISMATCHING_SECURITY_HEADER_VALUES: Finding.FindingType.ValueType = ...  # 11
        """Mismatching values in a duplicate security header."""

    class FindingType(_FindingType, metaclass=_FindingTypeEnumTypeWrapper):
        """Types of Findings."""
        pass

    FINDING_TYPE_UNSPECIFIED: Finding.FindingType.ValueType = ...  # 0
    """The invalid finding type."""

    MIXED_CONTENT: Finding.FindingType.ValueType = ...  # 1
    """A page that was served over HTTPS also resources over HTTP. A
    man-in-the-middle attacker could tamper with the HTTP resource and gain
    full access to the website that loads the resource or to monitor the
    actions taken by the user.
    """

    OUTDATED_LIBRARY: Finding.FindingType.ValueType = ...  # 2
    """The version of an included library is known to contain a security issue.
    The scanner checks the version of library in use against a known list of
    vulnerable libraries. False positives are possible if the version
    detection fails or if the library has been manually patched.
    """

    ROSETTA_FLASH: Finding.FindingType.ValueType = ...  # 5
    """This type of vulnerability occurs when the value of a request parameter
    is reflected at the beginning of the response, for example, in requests
    using JSONP. Under certain circumstances, an attacker may be able to
    supply an alphanumeric-only Flash file in the vulnerable parameter
    causing the browser to execute the Flash file as if it originated on the
    vulnerable server.
    """

    XSS_CALLBACK: Finding.FindingType.ValueType = ...  # 3
    """A cross-site scripting (XSS) bug is found via JavaScript callback. For
    detailed explanations on XSS, see
    https://www.google.com/about/appsecurity/learning/xss/.
    """

    XSS_ERROR: Finding.FindingType.ValueType = ...  # 4
    """A potential cross-site scripting (XSS) bug due to JavaScript breakage.
    In some circumstances, the application under test might modify the test
    string before it is parsed by the browser. When the browser attempts to
    runs this modified test string, it will likely break and throw a
    JavaScript execution error, thus an injection issue is occurring.
    However, it may not be exploitable. Manual verification is needed to see
    if the test string modifications can be evaded and confirm that the issue
    is in fact an XSS vulnerability. For detailed explanations on XSS, see
    https://www.google.com/about/appsecurity/learning/xss/.
    """

    CLEAR_TEXT_PASSWORD: Finding.FindingType.ValueType = ...  # 6
    """An application appears to be transmitting a password field in clear text.
    An attacker can eavesdrop network traffic and sniff the password field.
    """

    INVALID_CONTENT_TYPE: Finding.FindingType.ValueType = ...  # 7
    """An application returns sensitive content with an invalid content type,
    or without an 'X-Content-Type-Options: nosniff' header.
    """

    XSS_ANGULAR_CALLBACK: Finding.FindingType.ValueType = ...  # 8
    """A cross-site scripting (XSS) vulnerability in AngularJS module that
    occurs when a user-provided string is interpolated by Angular.
    """

    INVALID_HEADER: Finding.FindingType.ValueType = ...  # 9
    """A malformed or invalid valued header."""

    MISSPELLED_SECURITY_HEADER_NAME: Finding.FindingType.ValueType = ...  # 10
    """Misspelled security header name."""

    MISMATCHING_SECURITY_HEADER_VALUES: Finding.FindingType.ValueType = ...  # 11
    """Mismatching values in a duplicate security header."""


    NAME_FIELD_NUMBER: builtins.int
    FINDING_TYPE_FIELD_NUMBER: builtins.int
    HTTP_METHOD_FIELD_NUMBER: builtins.int
    FUZZED_URL_FIELD_NUMBER: builtins.int
    BODY_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    REPRODUCTION_URL_FIELD_NUMBER: builtins.int
    FRAME_URL_FIELD_NUMBER: builtins.int
    FINAL_URL_FIELD_NUMBER: builtins.int
    TRACKING_ID_FIELD_NUMBER: builtins.int
    OUTDATED_LIBRARY_FIELD_NUMBER: builtins.int
    VIOLATING_RESOURCE_FIELD_NUMBER: builtins.int
    VULNERABLE_HEADERS_FIELD_NUMBER: builtins.int
    VULNERABLE_PARAMETERS_FIELD_NUMBER: builtins.int
    XSS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The resource name of the Finding. The name follows the format of
    'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'.
    The finding IDs are generated by the system.
    """

    finding_type: global___Finding.FindingType.ValueType = ...
    """The type of the Finding."""

    http_method: typing.Text = ...
    """The http method of the request that triggered the vulnerability, in
    uppercase.
    """

    fuzzed_url: typing.Text = ...
    """The URL produced by the server-side fuzzer and used in the request that
    triggered the vulnerability.
    """

    body: typing.Text = ...
    """The body of the request that triggered the vulnerability."""

    description: typing.Text = ...
    """The description of the vulnerability."""

    reproduction_url: typing.Text = ...
    """The URL containing human-readable payload that user can leverage to
    reproduce the vulnerability.
    """

    frame_url: typing.Text = ...
    """If the vulnerability was originated from nested IFrame, the immediate
    parent IFrame is reported.
    """

    final_url: typing.Text = ...
    """The URL where the browser lands when the vulnerability is detected."""

    tracking_id: typing.Text = ...
    """The tracking ID uniquely identifies a vulnerability instance across
    multiple ScanRuns.
    """

    @property
    def outdated_library(self) -> google.cloud.websecurityscanner.v1alpha.finding_addon_pb2.OutdatedLibrary:
        """An addon containing information about outdated libraries."""
        pass
    @property
    def violating_resource(self) -> google.cloud.websecurityscanner.v1alpha.finding_addon_pb2.ViolatingResource:
        """An addon containing detailed information regarding any resource causing the
        vulnerability such as JavaScript sources, image, audio files, etc.
        """
        pass
    @property
    def vulnerable_headers(self) -> google.cloud.websecurityscanner.v1alpha.finding_addon_pb2.VulnerableHeaders:
        """An addon containing information about vulnerable or missing HTTP headers."""
        pass
    @property
    def vulnerable_parameters(self) -> google.cloud.websecurityscanner.v1alpha.finding_addon_pb2.VulnerableParameters:
        """An addon containing information about request parameters which were found
        to be vulnerable.
        """
        pass
    @property
    def xss(self) -> google.cloud.websecurityscanner.v1alpha.finding_addon_pb2.Xss:
        """An addon containing information reported for an XSS, if any."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        finding_type : global___Finding.FindingType.ValueType = ...,
        http_method : typing.Text = ...,
        fuzzed_url : typing.Text = ...,
        body : typing.Text = ...,
        description : typing.Text = ...,
        reproduction_url : typing.Text = ...,
        frame_url : typing.Text = ...,
        final_url : typing.Text = ...,
        tracking_id : typing.Text = ...,
        outdated_library : typing.Optional[google.cloud.websecurityscanner.v1alpha.finding_addon_pb2.OutdatedLibrary] = ...,
        violating_resource : typing.Optional[google.cloud.websecurityscanner.v1alpha.finding_addon_pb2.ViolatingResource] = ...,
        vulnerable_headers : typing.Optional[google.cloud.websecurityscanner.v1alpha.finding_addon_pb2.VulnerableHeaders] = ...,
        vulnerable_parameters : typing.Optional[google.cloud.websecurityscanner.v1alpha.finding_addon_pb2.VulnerableParameters] = ...,
        xss : typing.Optional[google.cloud.websecurityscanner.v1alpha.finding_addon_pb2.Xss] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["outdated_library",b"outdated_library","violating_resource",b"violating_resource","vulnerable_headers",b"vulnerable_headers","vulnerable_parameters",b"vulnerable_parameters","xss",b"xss"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["body",b"body","description",b"description","final_url",b"final_url","finding_type",b"finding_type","frame_url",b"frame_url","fuzzed_url",b"fuzzed_url","http_method",b"http_method","name",b"name","outdated_library",b"outdated_library","reproduction_url",b"reproduction_url","tracking_id",b"tracking_id","violating_resource",b"violating_resource","vulnerable_headers",b"vulnerable_headers","vulnerable_parameters",b"vulnerable_parameters","xss",b"xss"]) -> None: ...
global___Finding = Finding
