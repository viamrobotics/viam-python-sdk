"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.iam.v1.policy_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class StandardResourceMetadata(google.protobuf.message.Message):
    """The standard metadata of a cloud resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    ASSET_TYPE_FIELD_NUMBER: builtins.int
    PROJECT_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    ADDITIONAL_ATTRIBUTES_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    NETWORK_TAGS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The full resource name. For example:
    `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
    See [Resource
    Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
    for more information.
    """

    asset_type: typing.Text = ...
    """The type of this resource.
    For example: "compute.googleapis.com/Disk".
    """

    project: typing.Text = ...
    """The project that this resource belongs to, in the form of
    `projects/{project_number}`.
    """

    display_name: typing.Text = ...
    """The display name of this resource."""

    description: typing.Text = ...
    """One or more paragraphs of text description of this resource. Maximum length
    could be up to 1M bytes.
    """

    @property
    def additional_attributes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Additional searchable attributes of this resource.
        Informational only. The exact set of attributes is subject to change.
        For example: project id, DNS name etc.
        """
        pass
    location: typing.Text = ...
    """Location can be "global", regional like "us-east1", or zonal like
    "us-west1-b".
    """

    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Labels associated with this resource. See [Labelling and grouping GCP
        resources](https://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources)
        for more information.
        """
        pass
    @property
    def network_tags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Network tags associated with this resource. Like labels, network tags are a
        type of annotations used to group GCP resources. See [Labelling GCP
        resources](lhttps://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources)
        for more information.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        asset_type : typing.Text = ...,
        project : typing.Text = ...,
        display_name : typing.Text = ...,
        description : typing.Text = ...,
        additional_attributes : typing.Optional[typing.Iterable[typing.Text]] = ...,
        location : typing.Text = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        network_tags : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["additional_attributes",b"additional_attributes","asset_type",b"asset_type","description",b"description","display_name",b"display_name","labels",b"labels","location",b"location","name",b"name","network_tags",b"network_tags","project",b"project"]) -> None: ...
global___StandardResourceMetadata = StandardResourceMetadata

class IamPolicySearchResult(google.protobuf.message.Message):
    """The result for a IAM Policy search."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Explanation(google.protobuf.message.Message):
        """Explanation about the IAM policy search result."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class MatchedPermissionsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            @property
            def value(self) -> global___Permissions: ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Optional[global___Permissions] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        MATCHED_PERMISSIONS_FIELD_NUMBER: builtins.int
        @property
        def matched_permissions(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Permissions]:
            """The map from roles to their included permission matching the permission
            query (e.g. containing `policy.role.permissions:`). A sample role string:
            "roles/compute.instanceAdmin". The roles can also be found in the
            returned `policy` bindings. Note that the map is populated only if
            requesting with a permission query.
            """
            pass
        def __init__(self,
            *,
            matched_permissions : typing.Optional[typing.Mapping[typing.Text, global___Permissions]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["matched_permissions",b"matched_permissions"]) -> None: ...

    RESOURCE_FIELD_NUMBER: builtins.int
    PROJECT_FIELD_NUMBER: builtins.int
    POLICY_FIELD_NUMBER: builtins.int
    EXPLANATION_FIELD_NUMBER: builtins.int
    resource: typing.Text = ...
    """The [full resource
    name](https://cloud.google.com/apis/design/resource_names#full_resource_name)
    of the resource associated with this IAM policy.
    """

    project: typing.Text = ...
    """The project that the associated GCP resource belongs to, in the form of
    `projects/{project_number}`. If an IAM policy is set on a resource (like VM
    instance, Cloud Storage bucket), the project field will indicate the
    project that contains the resource. If an IAM policy is set on a folder or
    orgnization, the project field will be empty.
    """

    @property
    def policy(self) -> google.iam.v1.policy_pb2.Policy:
        """The IAM policy directly set on the given resource. Note that the original
        IAM policy can contain multiple bindings. This only contains the bindings
        that match the given query. For queries that don't contain a constrain on
        policies (e.g. an empty query), this contains all the bindings.
        """
        pass
    @property
    def explanation(self) -> global___IamPolicySearchResult.Explanation:
        """Explanation about the IAM policy search result. It contains additional
        information to explain why the search result matches the query.
        """
        pass
    def __init__(self,
        *,
        resource : typing.Text = ...,
        project : typing.Text = ...,
        policy : typing.Optional[google.iam.v1.policy_pb2.Policy] = ...,
        explanation : typing.Optional[global___IamPolicySearchResult.Explanation] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["explanation",b"explanation","policy",b"policy"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["explanation",b"explanation","policy",b"policy","project",b"project","resource",b"resource"]) -> None: ...
global___IamPolicySearchResult = IamPolicySearchResult

class Permissions(google.protobuf.message.Message):
    """IAM permissions"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PERMISSIONS_FIELD_NUMBER: builtins.int
    @property
    def permissions(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A list of permissions. A sample permission string: "compute.disk.get"."""
        pass
    def __init__(self,
        *,
        permissions : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["permissions",b"permissions"]) -> None: ...
global___Permissions = Permissions
