"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.iam.v1.policy_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.rpc.code_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class IamPolicyAnalysisResult(google.protobuf.message.Message):
    """IAM Policy analysis result, consisting of one IAM policy binding and derived
    access control lists.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class AnalysisState(google.protobuf.message.Message):
        """Represents analysis state of each node in the result graph or non-critical
        errors in the response.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        CODE_FIELD_NUMBER: builtins.int
        CAUSE_FIELD_NUMBER: builtins.int
        code: google.rpc.code_pb2.Code.ValueType = ...
        """The Google standard error code that best describes the state.
        For example:
        - OK means the node has been successfully explored;
        - PERMISSION_DENIED means an access denied error is encountered;
        - DEADLINE_EXCEEDED means the node hasn't been explored in time;
        """

        cause: typing.Text = ...
        """The human-readable description of the cause of failure."""

        def __init__(self,
            *,
            code : google.rpc.code_pb2.Code.ValueType = ...,
            cause : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["cause",b"cause","code",b"code"]) -> None: ...

    class Resource(google.protobuf.message.Message):
        """A GCP resource that appears in an access control list."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        FULL_RESOURCE_NAME_FIELD_NUMBER: builtins.int
        ANALYSIS_STATE_FIELD_NUMBER: builtins.int
        full_resource_name: typing.Text = ...
        """The [full resource name](https://aip.dev/122#full-resource-names)."""

        @property
        def analysis_state(self) -> global___IamPolicyAnalysisResult.AnalysisState:
            """The analysis state of this resource node."""
            pass
        def __init__(self,
            *,
            full_resource_name : typing.Text = ...,
            analysis_state : typing.Optional[global___IamPolicyAnalysisResult.AnalysisState] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["analysis_state",b"analysis_state"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["analysis_state",b"analysis_state","full_resource_name",b"full_resource_name"]) -> None: ...

    class Access(google.protobuf.message.Message):
        """A role or permission that appears in an access control list."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        ROLE_FIELD_NUMBER: builtins.int
        PERMISSION_FIELD_NUMBER: builtins.int
        ANALYSIS_STATE_FIELD_NUMBER: builtins.int
        role: typing.Text = ...
        """The role."""

        permission: typing.Text = ...
        """The permission."""

        @property
        def analysis_state(self) -> global___IamPolicyAnalysisResult.AnalysisState:
            """The analysis state of this access node."""
            pass
        def __init__(self,
            *,
            role : typing.Text = ...,
            permission : typing.Text = ...,
            analysis_state : typing.Optional[global___IamPolicyAnalysisResult.AnalysisState] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["analysis_state",b"analysis_state","oneof_access",b"oneof_access","permission",b"permission","role",b"role"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["analysis_state",b"analysis_state","oneof_access",b"oneof_access","permission",b"permission","role",b"role"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["oneof_access",b"oneof_access"]) -> typing.Optional[typing_extensions.Literal["role","permission"]]: ...

    class Edge(google.protobuf.message.Message):
        """A directional edge."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        SOURCE_NODE_FIELD_NUMBER: builtins.int
        TARGET_NODE_FIELD_NUMBER: builtins.int
        source_node: typing.Text = ...
        """The source node of the edge."""

        target_node: typing.Text = ...
        """The target node of the edge."""

        def __init__(self,
            *,
            source_node : typing.Text = ...,
            target_node : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["source_node",b"source_node","target_node",b"target_node"]) -> None: ...

    class Identity(google.protobuf.message.Message):
        """An identity that appears in an access control list."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        NAME_FIELD_NUMBER: builtins.int
        ANALYSIS_STATE_FIELD_NUMBER: builtins.int
        name: typing.Text = ...
        """The identity name in any form of members appear in
        [IAM policy
        binding](https://cloud.google.com/iam/reference/rest/v1/Binding), such
        as:
        - user:foo@google.com
        - group:group1@google.com
        - serviceAccount:s1@prj1.iam.gserviceaccount.com
        - projectOwner:some_project_id
        - domain:google.com
        - allUsers
        - etc.
        """

        @property
        def analysis_state(self) -> global___IamPolicyAnalysisResult.AnalysisState:
            """The analysis state of this identity node."""
            pass
        def __init__(self,
            *,
            name : typing.Text = ...,
            analysis_state : typing.Optional[global___IamPolicyAnalysisResult.AnalysisState] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["analysis_state",b"analysis_state"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["analysis_state",b"analysis_state","name",b"name"]) -> None: ...

    class AccessControlList(google.protobuf.message.Message):
        """An access control list, derived from the above IAM policy binding, which
        contains a set of resources and accesses. May include one
        item from each set to compose an access control entry.

        NOTICE that there could be multiple access control lists for one IAM policy
        binding. The access control lists are created based on resource and access
        combinations.

        For example, assume we have the following cases in one IAM policy binding:
        - Permission P1 and P2 apply to resource R1 and R2;
        - Permission P3 applies to resource R2 and R3;

        This will result in the following access control lists:
        - AccessControlList 1: [R1, R2], [P1, P2]
        - AccessControlList 2: [R2, R3], [P3]
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        RESOURCES_FIELD_NUMBER: builtins.int
        ACCESSES_FIELD_NUMBER: builtins.int
        RESOURCE_EDGES_FIELD_NUMBER: builtins.int
        @property
        def resources(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IamPolicyAnalysisResult.Resource]:
            """The resources that match one of the following conditions:
            - The resource_selector, if it is specified in request;
            - Otherwise, resources reachable from the policy attached resource.
            """
            pass
        @property
        def accesses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IamPolicyAnalysisResult.Access]:
            """The accesses that match one of the following conditions:
            - The access_selector, if it is specified in request;
            - Otherwise, access specifiers reachable from the policy binding's role.
            """
            pass
        @property
        def resource_edges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IamPolicyAnalysisResult.Edge]:
            """Resource edges of the graph starting from the policy attached
            resource to any descendant resources. The [Edge.source_node][google.cloud.asset.v1p4beta1.IamPolicyAnalysisResult.Edge.source_node] contains
            the full resource name of a parent resource and [Edge.target_node][google.cloud.asset.v1p4beta1.IamPolicyAnalysisResult.Edge.target_node]
            contains the full resource name of a child resource. This field is
            present only if the output_resource_edges option is enabled in request.
            """
            pass
        def __init__(self,
            *,
            resources : typing.Optional[typing.Iterable[global___IamPolicyAnalysisResult.Resource]] = ...,
            accesses : typing.Optional[typing.Iterable[global___IamPolicyAnalysisResult.Access]] = ...,
            resource_edges : typing.Optional[typing.Iterable[global___IamPolicyAnalysisResult.Edge]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["accesses",b"accesses","resource_edges",b"resource_edges","resources",b"resources"]) -> None: ...

    class IdentityList(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        IDENTITIES_FIELD_NUMBER: builtins.int
        GROUP_EDGES_FIELD_NUMBER: builtins.int
        @property
        def identities(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IamPolicyAnalysisResult.Identity]:
            """Only the identities that match one of the following conditions will be
            presented:
            - The identity_selector, if it is specified in request;
            - Otherwise, identities reachable from the policy binding's members.
            """
            pass
        @property
        def group_edges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IamPolicyAnalysisResult.Edge]:
            """Group identity edges of the graph starting from the binding's
            group members to any node of the [identities][google.cloud.asset.v1p4beta1.IamPolicyAnalysisResult.IdentityList.identities]. The [Edge.source_node][google.cloud.asset.v1p4beta1.IamPolicyAnalysisResult.Edge.source_node]
            contains a group, such as "group:parent@google.com". The
            [Edge.target_node][google.cloud.asset.v1p4beta1.IamPolicyAnalysisResult.Edge.target_node] contains a member of the group,
            such as "group:child@google.com" or "user:foo@google.com".
            This field is present only if the output_group_edges option is enabled in
            request.
            """
            pass
        def __init__(self,
            *,
            identities : typing.Optional[typing.Iterable[global___IamPolicyAnalysisResult.Identity]] = ...,
            group_edges : typing.Optional[typing.Iterable[global___IamPolicyAnalysisResult.Edge]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["group_edges",b"group_edges","identities",b"identities"]) -> None: ...

    ATTACHED_RESOURCE_FULL_NAME_FIELD_NUMBER: builtins.int
    IAM_BINDING_FIELD_NUMBER: builtins.int
    ACCESS_CONTROL_LISTS_FIELD_NUMBER: builtins.int
    IDENTITY_LIST_FIELD_NUMBER: builtins.int
    FULLY_EXPLORED_FIELD_NUMBER: builtins.int
    attached_resource_full_name: typing.Text = ...
    """The full name of the resource to which the [iam_binding][google.cloud.asset.v1p4beta1.IamPolicyAnalysisResult.iam_binding] policy attaches."""

    @property
    def iam_binding(self) -> google.iam.v1.policy_pb2.Binding:
        """The Cloud IAM policy binding under analysis."""
        pass
    @property
    def access_control_lists(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IamPolicyAnalysisResult.AccessControlList]:
        """The access control lists derived from the [iam_binding][google.cloud.asset.v1p4beta1.IamPolicyAnalysisResult.iam_binding] that match or
        potentially match resource and access selectors specified in the request.
        """
        pass
    @property
    def identity_list(self) -> global___IamPolicyAnalysisResult.IdentityList:
        """The identity list derived from members of the [iam_binding][google.cloud.asset.v1p4beta1.IamPolicyAnalysisResult.iam_binding] that match or
        potentially match identity selector specified in the request.
        """
        pass
    fully_explored: builtins.bool = ...
    """Represents whether all nodes in the transitive closure of the
    [iam_binding][google.cloud.asset.v1p4beta1.IamPolicyAnalysisResult.iam_binding] node have been explored.
    """

    def __init__(self,
        *,
        attached_resource_full_name : typing.Text = ...,
        iam_binding : typing.Optional[google.iam.v1.policy_pb2.Binding] = ...,
        access_control_lists : typing.Optional[typing.Iterable[global___IamPolicyAnalysisResult.AccessControlList]] = ...,
        identity_list : typing.Optional[global___IamPolicyAnalysisResult.IdentityList] = ...,
        fully_explored : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["iam_binding",b"iam_binding","identity_list",b"identity_list"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["access_control_lists",b"access_control_lists","attached_resource_full_name",b"attached_resource_full_name","fully_explored",b"fully_explored","iam_binding",b"iam_binding","identity_list",b"identity_list"]) -> None: ...
global___IamPolicyAnalysisResult = IamPolicyAnalysisResult
