"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Conversation(google.protobuf.message.Message):
    """The conversation resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Medium:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _MediumEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Medium.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        MEDIUM_UNSPECIFIED: Conversation.Medium.ValueType = ...  # 0
        """Default value, if unspecified will default to PHONE_CALL."""

        PHONE_CALL: Conversation.Medium.ValueType = ...  # 1
        """The format for conversations that took place over the phone."""

        CHAT: Conversation.Medium.ValueType = ...  # 2
        """The format for conversations that took place over chat."""

    class Medium(_Medium, metaclass=_MediumEnumTypeWrapper):
        """Possible media for the conversation."""
        pass

    MEDIUM_UNSPECIFIED: Conversation.Medium.ValueType = ...  # 0
    """Default value, if unspecified will default to PHONE_CALL."""

    PHONE_CALL: Conversation.Medium.ValueType = ...  # 1
    """The format for conversations that took place over the phone."""

    CHAT: Conversation.Medium.ValueType = ...  # 2
    """The format for conversations that took place over chat."""


    class CallMetadata(google.protobuf.message.Message):
        """Call-specific metadata."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        CUSTOMER_CHANNEL_FIELD_NUMBER: builtins.int
        AGENT_CHANNEL_FIELD_NUMBER: builtins.int
        customer_channel: builtins.int = ...
        """The audio channel that contains the customer."""

        agent_channel: builtins.int = ...
        """The audio channel that contains the agent."""

        def __init__(self,
            *,
            customer_channel : builtins.int = ...,
            agent_channel : builtins.int = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["agent_channel",b"agent_channel","customer_channel",b"customer_channel"]) -> None: ...

    class Transcript(google.protobuf.message.Message):
        """A message representing the transcript of a conversation."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class TranscriptSegment(google.protobuf.message.Message):
            """A segment of a full transcript."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            class WordInfo(google.protobuf.message.Message):
                """Word-level info for words in a transcript."""
                DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                START_OFFSET_FIELD_NUMBER: builtins.int
                END_OFFSET_FIELD_NUMBER: builtins.int
                WORD_FIELD_NUMBER: builtins.int
                CONFIDENCE_FIELD_NUMBER: builtins.int
                @property
                def start_offset(self) -> google.protobuf.duration_pb2.Duration:
                    """Time offset of the start of this word relative to the beginning of
                    the total conversation.
                    """
                    pass
                @property
                def end_offset(self) -> google.protobuf.duration_pb2.Duration:
                    """Time offset of the end of this word relative to the beginning of the
                    total conversation.
                    """
                    pass
                word: typing.Text = ...
                """The word itself. Includes punctuation marks that surround the word."""

                confidence: builtins.float = ...
                """A confidence estimate between 0.0 and 1.0 of the fidelity of this
                word. A default value of 0.0 indicates that the value is unset.
                """

                def __init__(self,
                    *,
                    start_offset : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
                    end_offset : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
                    word : typing.Text = ...,
                    confidence : builtins.float = ...,
                    ) -> None: ...
                def HasField(self, field_name: typing_extensions.Literal["end_offset",b"end_offset","start_offset",b"start_offset"]) -> builtins.bool: ...
                def ClearField(self, field_name: typing_extensions.Literal["confidence",b"confidence","end_offset",b"end_offset","start_offset",b"start_offset","word",b"word"]) -> None: ...

            class DialogflowSegmentMetadata(google.protobuf.message.Message):
                """Metadata from Dialogflow relating to the current transcript segment."""
                DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                SMART_REPLY_ALLOWLIST_COVERED_FIELD_NUMBER: builtins.int
                smart_reply_allowlist_covered: builtins.bool = ...
                """Whether the transcript segment was covered under the configured smart
                reply allowlist in Agent Assist.
                """

                def __init__(self,
                    *,
                    smart_reply_allowlist_covered : builtins.bool = ...,
                    ) -> None: ...
                def ClearField(self, field_name: typing_extensions.Literal["smart_reply_allowlist_covered",b"smart_reply_allowlist_covered"]) -> None: ...

            MESSAGE_TIME_FIELD_NUMBER: builtins.int
            TEXT_FIELD_NUMBER: builtins.int
            CONFIDENCE_FIELD_NUMBER: builtins.int
            WORDS_FIELD_NUMBER: builtins.int
            LANGUAGE_CODE_FIELD_NUMBER: builtins.int
            CHANNEL_TAG_FIELD_NUMBER: builtins.int
            SEGMENT_PARTICIPANT_FIELD_NUMBER: builtins.int
            DIALOGFLOW_SEGMENT_METADATA_FIELD_NUMBER: builtins.int
            SENTIMENT_FIELD_NUMBER: builtins.int
            @property
            def message_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
                """The time that the message occurred, if provided."""
                pass
            text: typing.Text = ...
            """The text of this segment."""

            confidence: builtins.float = ...
            """A confidence estimate between 0.0 and 1.0 of the fidelity of this
            segment. A default value of 0.0 indicates that the value is unset.
            """

            @property
            def words(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Conversation.Transcript.TranscriptSegment.WordInfo]:
                """A list of the word-specific information for each word in the segment."""
                pass
            language_code: typing.Text = ...
            """The language code of this segment as a
            [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
            Example: "en-US".
            """

            channel_tag: builtins.int = ...
            """For conversations derived from multi-channel audio, this is the channel
            number corresponding to the audio from that channel. For
            audioChannelCount = N, its output values can range from '1' to 'N'. A
            channel tag of 0 indicates that the audio is mono.
            """

            @property
            def segment_participant(self) -> global___ConversationParticipant:
                """The participant of this segment."""
                pass
            @property
            def dialogflow_segment_metadata(self) -> global___Conversation.Transcript.TranscriptSegment.DialogflowSegmentMetadata:
                """CCAI metadata relating to the current transcript segment."""
                pass
            @property
            def sentiment(self) -> global___SentimentData:
                """The sentiment for this transcript segment."""
                pass
            def __init__(self,
                *,
                message_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
                text : typing.Text = ...,
                confidence : builtins.float = ...,
                words : typing.Optional[typing.Iterable[global___Conversation.Transcript.TranscriptSegment.WordInfo]] = ...,
                language_code : typing.Text = ...,
                channel_tag : builtins.int = ...,
                segment_participant : typing.Optional[global___ConversationParticipant] = ...,
                dialogflow_segment_metadata : typing.Optional[global___Conversation.Transcript.TranscriptSegment.DialogflowSegmentMetadata] = ...,
                sentiment : typing.Optional[global___SentimentData] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["dialogflow_segment_metadata",b"dialogflow_segment_metadata","message_time",b"message_time","segment_participant",b"segment_participant","sentiment",b"sentiment"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["channel_tag",b"channel_tag","confidence",b"confidence","dialogflow_segment_metadata",b"dialogflow_segment_metadata","language_code",b"language_code","message_time",b"message_time","segment_participant",b"segment_participant","sentiment",b"sentiment","text",b"text","words",b"words"]) -> None: ...

        TRANSCRIPT_SEGMENTS_FIELD_NUMBER: builtins.int
        @property
        def transcript_segments(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Conversation.Transcript.TranscriptSegment]:
            """A list of sequential transcript segments that comprise the conversation."""
            pass
        def __init__(self,
            *,
            transcript_segments : typing.Optional[typing.Iterable[global___Conversation.Transcript.TranscriptSegment]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["transcript_segments",b"transcript_segments"]) -> None: ...

    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class DialogflowIntentsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___DialogflowIntent: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___DialogflowIntent] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    CALL_METADATA_FIELD_NUMBER: builtins.int
    EXPIRE_TIME_FIELD_NUMBER: builtins.int
    TTL_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    DATA_SOURCE_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    AGENT_ID_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    TRANSCRIPT_FIELD_NUMBER: builtins.int
    MEDIUM_FIELD_NUMBER: builtins.int
    DURATION_FIELD_NUMBER: builtins.int
    TURN_COUNT_FIELD_NUMBER: builtins.int
    LATEST_ANALYSIS_FIELD_NUMBER: builtins.int
    RUNTIME_ANNOTATIONS_FIELD_NUMBER: builtins.int
    DIALOGFLOW_INTENTS_FIELD_NUMBER: builtins.int
    OBFUSCATED_USER_ID_FIELD_NUMBER: builtins.int
    @property
    def call_metadata(self) -> global___Conversation.CallMetadata:
        """Call-specific metadata."""
        pass
    @property
    def expire_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which this conversation should expire. After this time, the
        conversation data and any associated analyses will be deleted.
        """
        pass
    @property
    def ttl(self) -> google.protobuf.duration_pb2.Duration:
        """Input only. The TTL for this resource. If specified, then this TTL will
        be used to calculate the expire time.
        """
        pass
    name: typing.Text = ...
    """Immutable. The resource name of the conversation.
    Format:
    projects/{project}/locations/{location}/conversations/{conversation}
    """

    @property
    def data_source(self) -> global___ConversationDataSource:
        """The source of the audio and transcription for the conversation."""
        pass
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time at which the conversation was created."""
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The most recent time at which the conversation was updated."""
        pass
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which the conversation started."""
        pass
    language_code: typing.Text = ...
    """A user-specified language code for the conversation."""

    agent_id: typing.Text = ...
    """An opaque, user-specified string representing the human agent who handled
    the conversation.
    """

    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """A map for the user to specify any custom fields. A maximum of 20 labels per
        conversation is allowed, with a maximum of 256 characters per entry.
        """
        pass
    @property
    def transcript(self) -> global___Conversation.Transcript:
        """Output only. The conversation transcript."""
        pass
    medium: global___Conversation.Medium.ValueType = ...
    """Immutable. The conversation medium, if unspecified will default to PHONE_CALL."""

    @property
    def duration(self) -> google.protobuf.duration_pb2.Duration:
        """Output only. The duration of the conversation."""
        pass
    turn_count: builtins.int = ...
    """Output only. The number of turns in the conversation."""

    @property
    def latest_analysis(self) -> global___Analysis:
        """Output only. The conversation's latest analysis, if one exists."""
        pass
    @property
    def runtime_annotations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RuntimeAnnotation]:
        """Output only. The annotations that were generated during the customer and agent
        interaction.
        """
        pass
    @property
    def dialogflow_intents(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___DialogflowIntent]:
        """Output only. All the matched Dialogflow intents in the call. The key corresponds to a
        Dialogflow intent, format:
        projects/{project}/agent/{agent}/intents/{intent}
        """
        pass
    obfuscated_user_id: typing.Text = ...
    """Obfuscated user ID which the customer sent to us."""

    def __init__(self,
        *,
        call_metadata : typing.Optional[global___Conversation.CallMetadata] = ...,
        expire_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ttl : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        name : typing.Text = ...,
        data_source : typing.Optional[global___ConversationDataSource] = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        start_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        language_code : typing.Text = ...,
        agent_id : typing.Text = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        transcript : typing.Optional[global___Conversation.Transcript] = ...,
        medium : global___Conversation.Medium.ValueType = ...,
        duration : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        turn_count : builtins.int = ...,
        latest_analysis : typing.Optional[global___Analysis] = ...,
        runtime_annotations : typing.Optional[typing.Iterable[global___RuntimeAnnotation]] = ...,
        dialogflow_intents : typing.Optional[typing.Mapping[typing.Text, global___DialogflowIntent]] = ...,
        obfuscated_user_id : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["call_metadata",b"call_metadata","create_time",b"create_time","data_source",b"data_source","duration",b"duration","expiration",b"expiration","expire_time",b"expire_time","latest_analysis",b"latest_analysis","metadata",b"metadata","start_time",b"start_time","transcript",b"transcript","ttl",b"ttl","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["agent_id",b"agent_id","call_metadata",b"call_metadata","create_time",b"create_time","data_source",b"data_source","dialogflow_intents",b"dialogflow_intents","duration",b"duration","expiration",b"expiration","expire_time",b"expire_time","labels",b"labels","language_code",b"language_code","latest_analysis",b"latest_analysis","medium",b"medium","metadata",b"metadata","name",b"name","obfuscated_user_id",b"obfuscated_user_id","runtime_annotations",b"runtime_annotations","start_time",b"start_time","transcript",b"transcript","ttl",b"ttl","turn_count",b"turn_count","update_time",b"update_time"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["expiration",b"expiration"]) -> typing.Optional[typing_extensions.Literal["expire_time","ttl"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["metadata",b"metadata"]) -> typing.Optional[typing_extensions.Literal["call_metadata"]]: ...
global___Conversation = Conversation

class Analysis(google.protobuf.message.Message):
    """The analysis resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    REQUEST_TIME_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    ANALYSIS_RESULT_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Immutable. The resource name of the analysis.
    Format:
    projects/{project}/locations/{location}/conversations/{conversation}/analyses/{analysis}
    """

    @property
    def request_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time at which the analysis was requested."""
        pass
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time at which the analysis was created, which occurs when the
        long-running operation completes.
        """
        pass
    @property
    def analysis_result(self) -> global___AnalysisResult:
        """Output only. The result of the analysis, which is populated when the analysis
        finishes.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        request_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        analysis_result : typing.Optional[global___AnalysisResult] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["analysis_result",b"analysis_result","create_time",b"create_time","request_time",b"request_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["analysis_result",b"analysis_result","create_time",b"create_time","name",b"name","request_time",b"request_time"]) -> None: ...
global___Analysis = Analysis

class ConversationDataSource(google.protobuf.message.Message):
    """The conversation source, which is a combination of transcript and audio."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GCS_SOURCE_FIELD_NUMBER: builtins.int
    DIALOGFLOW_SOURCE_FIELD_NUMBER: builtins.int
    @property
    def gcs_source(self) -> global___GcsSource:
        """A Cloud Storage location specification for the audio and transcript."""
        pass
    @property
    def dialogflow_source(self) -> global___DialogflowSource:
        """The source when the conversation comes from Dialogflow."""
        pass
    def __init__(self,
        *,
        gcs_source : typing.Optional[global___GcsSource] = ...,
        dialogflow_source : typing.Optional[global___DialogflowSource] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dialogflow_source",b"dialogflow_source","gcs_source",b"gcs_source","source",b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dialogflow_source",b"dialogflow_source","gcs_source",b"gcs_source","source",b"source"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source",b"source"]) -> typing.Optional[typing_extensions.Literal["gcs_source","dialogflow_source"]]: ...
global___ConversationDataSource = ConversationDataSource

class GcsSource(google.protobuf.message.Message):
    """A Cloud Storage source of conversation data."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    AUDIO_URI_FIELD_NUMBER: builtins.int
    TRANSCRIPT_URI_FIELD_NUMBER: builtins.int
    audio_uri: typing.Text = ...
    """Cloud Storage URI that points to a file that contains the conversation
    audio.
    """

    transcript_uri: typing.Text = ...
    """Immutable. Cloud Storage URI that points to a file that contains the conversation
    transcript.
    """

    def __init__(self,
        *,
        audio_uri : typing.Text = ...,
        transcript_uri : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["audio_uri",b"audio_uri","transcript_uri",b"transcript_uri"]) -> None: ...
global___GcsSource = GcsSource

class DialogflowSource(google.protobuf.message.Message):
    """A Dialogflow source of conversation data."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DIALOGFLOW_CONVERSATION_FIELD_NUMBER: builtins.int
    AUDIO_URI_FIELD_NUMBER: builtins.int
    dialogflow_conversation: typing.Text = ...
    """Output only. The name of the Dialogflow conversation that this conversation
    resource is derived from. Format:
    projects/{project}/locations/{location}/conversations/{conversation}
    """

    audio_uri: typing.Text = ...
    """Cloud Storage URI that points to a file that contains the conversation
    audio.
    """

    def __init__(self,
        *,
        dialogflow_conversation : typing.Text = ...,
        audio_uri : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["audio_uri",b"audio_uri","dialogflow_conversation",b"dialogflow_conversation"]) -> None: ...
global___DialogflowSource = DialogflowSource

class AnalysisResult(google.protobuf.message.Message):
    """The result of an analysis."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class CallAnalysisMetadata(google.protobuf.message.Message):
        """Call-specific metadata created during analysis."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class EntitiesEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            @property
            def value(self) -> global___Entity: ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Optional[global___Entity] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        class IntentsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            @property
            def value(self) -> global___Intent: ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Optional[global___Intent] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        class PhraseMatchersEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            @property
            def value(self) -> global___PhraseMatchData: ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Optional[global___PhraseMatchData] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        ANNOTATIONS_FIELD_NUMBER: builtins.int
        ENTITIES_FIELD_NUMBER: builtins.int
        SENTIMENTS_FIELD_NUMBER: builtins.int
        INTENTS_FIELD_NUMBER: builtins.int
        PHRASE_MATCHERS_FIELD_NUMBER: builtins.int
        ISSUE_MODEL_RESULT_FIELD_NUMBER: builtins.int
        @property
        def annotations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CallAnnotation]:
            """A list of call annotations that apply to this call."""
            pass
        @property
        def entities(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Entity]:
            """All the entities in the call."""
            pass
        @property
        def sentiments(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ConversationLevelSentiment]:
            """Overall conversation-level sentiment for each channel of the call."""
            pass
        @property
        def intents(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Intent]:
            """All the matched intents in the call."""
            pass
        @property
        def phrase_matchers(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___PhraseMatchData]:
            """All the matched phrase matchers in the call."""
            pass
        @property
        def issue_model_result(self) -> global___IssueModelResult:
            """Overall conversation-level issue modeling result."""
            pass
        def __init__(self,
            *,
            annotations : typing.Optional[typing.Iterable[global___CallAnnotation]] = ...,
            entities : typing.Optional[typing.Mapping[typing.Text, global___Entity]] = ...,
            sentiments : typing.Optional[typing.Iterable[global___ConversationLevelSentiment]] = ...,
            intents : typing.Optional[typing.Mapping[typing.Text, global___Intent]] = ...,
            phrase_matchers : typing.Optional[typing.Mapping[typing.Text, global___PhraseMatchData]] = ...,
            issue_model_result : typing.Optional[global___IssueModelResult] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["issue_model_result",b"issue_model_result"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["annotations",b"annotations","entities",b"entities","intents",b"intents","issue_model_result",b"issue_model_result","phrase_matchers",b"phrase_matchers","sentiments",b"sentiments"]) -> None: ...

    CALL_ANALYSIS_METADATA_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    @property
    def call_analysis_metadata(self) -> global___AnalysisResult.CallAnalysisMetadata:
        """Call-specific metadata created by the analysis."""
        pass
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which the analysis ended."""
        pass
    def __init__(self,
        *,
        call_analysis_metadata : typing.Optional[global___AnalysisResult.CallAnalysisMetadata] = ...,
        end_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["call_analysis_metadata",b"call_analysis_metadata","end_time",b"end_time","metadata",b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["call_analysis_metadata",b"call_analysis_metadata","end_time",b"end_time","metadata",b"metadata"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["metadata",b"metadata"]) -> typing.Optional[typing_extensions.Literal["call_analysis_metadata"]]: ...
global___AnalysisResult = AnalysisResult

class IssueModelResult(google.protobuf.message.Message):
    """Issue Modeling result on a conversation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ISSUE_MODEL_FIELD_NUMBER: builtins.int
    ISSUES_FIELD_NUMBER: builtins.int
    issue_model: typing.Text = ...
    """Issue model that generates the result.
    Format: projects/{project}/locations/{location}/issueModels/{issue_model}
    """

    @property
    def issues(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IssueAssignment]:
        """All the matched issues."""
        pass
    def __init__(self,
        *,
        issue_model : typing.Text = ...,
        issues : typing.Optional[typing.Iterable[global___IssueAssignment]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["issue_model",b"issue_model","issues",b"issues"]) -> None: ...
global___IssueModelResult = IssueModelResult

class ConversationLevelSentiment(google.protobuf.message.Message):
    """One channel of conversation-level sentiment data."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CHANNEL_TAG_FIELD_NUMBER: builtins.int
    SENTIMENT_DATA_FIELD_NUMBER: builtins.int
    channel_tag: builtins.int = ...
    """The channel of the audio that the data applies to."""

    @property
    def sentiment_data(self) -> global___SentimentData:
        """Data specifying sentiment."""
        pass
    def __init__(self,
        *,
        channel_tag : builtins.int = ...,
        sentiment_data : typing.Optional[global___SentimentData] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["sentiment_data",b"sentiment_data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["channel_tag",b"channel_tag","sentiment_data",b"sentiment_data"]) -> None: ...
global___ConversationLevelSentiment = ConversationLevelSentiment

class IssueAssignment(google.protobuf.message.Message):
    """Information about the issue."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ISSUE_FIELD_NUMBER: builtins.int
    SCORE_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    issue: typing.Text = ...
    """Resource name of the assigned issue."""

    score: builtins.float = ...
    """Score indicating the likelihood of the issue assignment.
    currently bounded on [0,1].
    """

    display_name: typing.Text = ...
    """Immutable. Display name of the assigned issue. This field is set at time of analyis
    and immutable since then.
    """

    def __init__(self,
        *,
        issue : typing.Text = ...,
        score : builtins.float = ...,
        display_name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name","issue",b"issue","score",b"score"]) -> None: ...
global___IssueAssignment = IssueAssignment

class CallAnnotation(google.protobuf.message.Message):
    """A piece of metadata that applies to a window of a call."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INTERRUPTION_DATA_FIELD_NUMBER: builtins.int
    SENTIMENT_DATA_FIELD_NUMBER: builtins.int
    SILENCE_DATA_FIELD_NUMBER: builtins.int
    HOLD_DATA_FIELD_NUMBER: builtins.int
    ENTITY_MENTION_DATA_FIELD_NUMBER: builtins.int
    INTENT_MATCH_DATA_FIELD_NUMBER: builtins.int
    PHRASE_MATCH_DATA_FIELD_NUMBER: builtins.int
    CHANNEL_TAG_FIELD_NUMBER: builtins.int
    ANNOTATION_START_BOUNDARY_FIELD_NUMBER: builtins.int
    ANNOTATION_END_BOUNDARY_FIELD_NUMBER: builtins.int
    @property
    def interruption_data(self) -> global___InterruptionData:
        """Data specifying an interruption."""
        pass
    @property
    def sentiment_data(self) -> global___SentimentData:
        """Data specifying sentiment."""
        pass
    @property
    def silence_data(self) -> global___SilenceData:
        """Data specifying silence."""
        pass
    @property
    def hold_data(self) -> global___HoldData:
        """Data specifying a hold."""
        pass
    @property
    def entity_mention_data(self) -> global___EntityMentionData:
        """Data specifying an entity mention."""
        pass
    @property
    def intent_match_data(self) -> global___IntentMatchData:
        """Data specifying an intent match."""
        pass
    @property
    def phrase_match_data(self) -> global___PhraseMatchData:
        """Data specifying a phrase match."""
        pass
    channel_tag: builtins.int = ...
    """The channel of the audio where the annotation occurs. For single-channel
    audio, this field is not populated.
    """

    @property
    def annotation_start_boundary(self) -> global___AnnotationBoundary:
        """The boundary in the conversation where the annotation starts, inclusive."""
        pass
    @property
    def annotation_end_boundary(self) -> global___AnnotationBoundary:
        """The boundary in the conversation where the annotation ends, inclusive."""
        pass
    def __init__(self,
        *,
        interruption_data : typing.Optional[global___InterruptionData] = ...,
        sentiment_data : typing.Optional[global___SentimentData] = ...,
        silence_data : typing.Optional[global___SilenceData] = ...,
        hold_data : typing.Optional[global___HoldData] = ...,
        entity_mention_data : typing.Optional[global___EntityMentionData] = ...,
        intent_match_data : typing.Optional[global___IntentMatchData] = ...,
        phrase_match_data : typing.Optional[global___PhraseMatchData] = ...,
        channel_tag : builtins.int = ...,
        annotation_start_boundary : typing.Optional[global___AnnotationBoundary] = ...,
        annotation_end_boundary : typing.Optional[global___AnnotationBoundary] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["annotation_end_boundary",b"annotation_end_boundary","annotation_start_boundary",b"annotation_start_boundary","data",b"data","entity_mention_data",b"entity_mention_data","hold_data",b"hold_data","intent_match_data",b"intent_match_data","interruption_data",b"interruption_data","phrase_match_data",b"phrase_match_data","sentiment_data",b"sentiment_data","silence_data",b"silence_data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_end_boundary",b"annotation_end_boundary","annotation_start_boundary",b"annotation_start_boundary","channel_tag",b"channel_tag","data",b"data","entity_mention_data",b"entity_mention_data","hold_data",b"hold_data","intent_match_data",b"intent_match_data","interruption_data",b"interruption_data","phrase_match_data",b"phrase_match_data","sentiment_data",b"sentiment_data","silence_data",b"silence_data"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["data",b"data"]) -> typing.Optional[typing_extensions.Literal["interruption_data","sentiment_data","silence_data","hold_data","entity_mention_data","intent_match_data","phrase_match_data"]]: ...
global___CallAnnotation = CallAnnotation

class AnnotationBoundary(google.protobuf.message.Message):
    """A point in a conversation that marks the start or the end of an annotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    WORD_INDEX_FIELD_NUMBER: builtins.int
    TRANSCRIPT_INDEX_FIELD_NUMBER: builtins.int
    word_index: builtins.int = ...
    """The word index of this boundary with respect to the first word in the
    transcript piece. This index starts at zero.
    """

    transcript_index: builtins.int = ...
    """The index in the sequence of transcribed pieces of the conversation where
    the boundary is located. This index starts at zero.
    """

    def __init__(self,
        *,
        word_index : builtins.int = ...,
        transcript_index : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["detailed_boundary",b"detailed_boundary","word_index",b"word_index"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["detailed_boundary",b"detailed_boundary","transcript_index",b"transcript_index","word_index",b"word_index"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["detailed_boundary",b"detailed_boundary"]) -> typing.Optional[typing_extensions.Literal["word_index"]]: ...
global___AnnotationBoundary = AnnotationBoundary

class Entity(google.protobuf.message.Message):
    """The data for an entity annotation.
    Represents a phrase in the conversation that is a known entity, such
    as a person, an organization, or location.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Type:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        TYPE_UNSPECIFIED: Entity.Type.ValueType = ...  # 0
        """Unspecified."""

        PERSON: Entity.Type.ValueType = ...  # 1
        """Person."""

        LOCATION: Entity.Type.ValueType = ...  # 2
        """Location."""

        ORGANIZATION: Entity.Type.ValueType = ...  # 3
        """Organization."""

        EVENT: Entity.Type.ValueType = ...  # 4
        """Event."""

        WORK_OF_ART: Entity.Type.ValueType = ...  # 5
        """Artwork."""

        CONSUMER_GOOD: Entity.Type.ValueType = ...  # 6
        """Consumer product."""

        OTHER: Entity.Type.ValueType = ...  # 7
        """Other types of entities."""

        PHONE_NUMBER: Entity.Type.ValueType = ...  # 9
        """Phone number.

        The metadata lists the phone number (formatted according to local
        convention), plus whichever additional elements appear in the text:

        * `number` - The actual number, broken down into sections according to
        local convention.
        * `national_prefix` - Country code, if detected.
        * `area_code` - Region or area code, if detected.
        * `extension` - Phone extension (to be dialed after connection), if
        detected.
        """

        ADDRESS: Entity.Type.ValueType = ...  # 10
        """Address.

        The metadata identifies the street number and locality plus whichever
        additional elements appear in the text:

        * `street_number` - Street number.
        * `locality` - City or town.
        * `street_name` - Street/route name, if detected.
        * `postal_code` - Postal code, if detected.
        * `country` - Country, if detected.
        * `broad_region` - Administrative area, such as the state, if detected.
        * `narrow_region` - Smaller administrative area, such as county, if
        detected.
        * `sublocality` - Used in Asian addresses to demark a district within a
        city, if detected.
        """

        DATE: Entity.Type.ValueType = ...  # 11
        """Date.

        The metadata identifies the components of the date:

        * `year` - Four digit year, if detected.
        * `month` - Two digit month number, if detected.
        * `day` - Two digit day number, if detected.
        """

        NUMBER: Entity.Type.ValueType = ...  # 12
        """Number.

        The metadata is the number itself.
        """

        PRICE: Entity.Type.ValueType = ...  # 13
        """Price.

        The metadata identifies the `value` and `currency`.
        """

    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        """The type of the entity. For most entity types, the associated metadata is a
        Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`). The table
        below lists the associated fields for entities that have different
        metadata.
        """
        pass

    TYPE_UNSPECIFIED: Entity.Type.ValueType = ...  # 0
    """Unspecified."""

    PERSON: Entity.Type.ValueType = ...  # 1
    """Person."""

    LOCATION: Entity.Type.ValueType = ...  # 2
    """Location."""

    ORGANIZATION: Entity.Type.ValueType = ...  # 3
    """Organization."""

    EVENT: Entity.Type.ValueType = ...  # 4
    """Event."""

    WORK_OF_ART: Entity.Type.ValueType = ...  # 5
    """Artwork."""

    CONSUMER_GOOD: Entity.Type.ValueType = ...  # 6
    """Consumer product."""

    OTHER: Entity.Type.ValueType = ...  # 7
    """Other types of entities."""

    PHONE_NUMBER: Entity.Type.ValueType = ...  # 9
    """Phone number.

    The metadata lists the phone number (formatted according to local
    convention), plus whichever additional elements appear in the text:

    * `number` - The actual number, broken down into sections according to
    local convention.
    * `national_prefix` - Country code, if detected.
    * `area_code` - Region or area code, if detected.
    * `extension` - Phone extension (to be dialed after connection), if
    detected.
    """

    ADDRESS: Entity.Type.ValueType = ...  # 10
    """Address.

    The metadata identifies the street number and locality plus whichever
    additional elements appear in the text:

    * `street_number` - Street number.
    * `locality` - City or town.
    * `street_name` - Street/route name, if detected.
    * `postal_code` - Postal code, if detected.
    * `country` - Country, if detected.
    * `broad_region` - Administrative area, such as the state, if detected.
    * `narrow_region` - Smaller administrative area, such as county, if
    detected.
    * `sublocality` - Used in Asian addresses to demark a district within a
    city, if detected.
    """

    DATE: Entity.Type.ValueType = ...  # 11
    """Date.

    The metadata identifies the components of the date:

    * `year` - Four digit year, if detected.
    * `month` - Two digit month number, if detected.
    * `day` - Two digit day number, if detected.
    """

    NUMBER: Entity.Type.ValueType = ...  # 12
    """Number.

    The metadata is the number itself.
    """

    PRICE: Entity.Type.ValueType = ...  # 13
    """Price.

    The metadata identifies the `value` and `currency`.
    """


    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    SALIENCE_FIELD_NUMBER: builtins.int
    SENTIMENT_FIELD_NUMBER: builtins.int
    display_name: typing.Text = ...
    """The representative name for the entity."""

    type: global___Entity.Type.ValueType = ...
    """The entity type."""

    @property
    def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Metadata associated with the entity.

        For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`)
        and Knowledge Graph MID (`mid`), if they are available. For the metadata
        associated with other entity types, see the Type table below.
        """
        pass
    salience: builtins.float = ...
    """The salience score associated with the entity in the [0, 1.0] range.

    The salience score for an entity provides information about the
    importance or centrality of that entity to the entire document text.
    Scores closer to 0 are less salient, while scores closer to 1.0 are highly
    salient.
    """

    @property
    def sentiment(self) -> global___SentimentData:
        """The aggregate sentiment expressed for this entity in the conversation."""
        pass
    def __init__(self,
        *,
        display_name : typing.Text = ...,
        type : global___Entity.Type.ValueType = ...,
        metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        salience : builtins.float = ...,
        sentiment : typing.Optional[global___SentimentData] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["sentiment",b"sentiment"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name","metadata",b"metadata","salience",b"salience","sentiment",b"sentiment","type",b"type"]) -> None: ...
global___Entity = Entity

class Intent(google.protobuf.message.Message):
    """The data for an intent.
    Represents a detected intent in the conversation, for example MAKES_PROMISE.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ID_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """The unique identifier of the intent."""

    display_name: typing.Text = ...
    """The human-readable name of the intent."""

    def __init__(self,
        *,
        id : typing.Text = ...,
        display_name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name","id",b"id"]) -> None: ...
global___Intent = Intent

class PhraseMatchData(google.protobuf.message.Message):
    """The data for a matched phrase matcher.
    Represents information identifying a phrase matcher for a given match.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PHRASE_MATCHER_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    phrase_matcher: typing.Text = ...
    """The unique identifier (the resource name) of the phrase matcher."""

    display_name: typing.Text = ...
    """The human-readable name of the phrase matcher."""

    def __init__(self,
        *,
        phrase_matcher : typing.Text = ...,
        display_name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name","phrase_matcher",b"phrase_matcher"]) -> None: ...
global___PhraseMatchData = PhraseMatchData

class DialogflowIntent(google.protobuf.message.Message):
    """The data for a Dialogflow intent.
    Represents a detected intent in the conversation, e.g. MAKES_PROMISE.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    display_name: typing.Text = ...
    """The human-readable name of the intent."""

    def __init__(self,
        *,
        display_name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name"]) -> None: ...
global___DialogflowIntent = DialogflowIntent

class InterruptionData(google.protobuf.message.Message):
    """The data for an interruption annotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___InterruptionData = InterruptionData

class SilenceData(google.protobuf.message.Message):
    """The data for a silence annotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___SilenceData = SilenceData

class HoldData(google.protobuf.message.Message):
    """The data for a hold annotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___HoldData = HoldData

class EntityMentionData(google.protobuf.message.Message):
    """The data for an entity mention annotation.
    This represents a mention of an `Entity` in the conversation.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _MentionType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _MentionTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MentionType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        MENTION_TYPE_UNSPECIFIED: EntityMentionData.MentionType.ValueType = ...  # 0
        """Unspecified."""

        PROPER: EntityMentionData.MentionType.ValueType = ...  # 1
        """Proper noun."""

        COMMON: EntityMentionData.MentionType.ValueType = ...  # 2
        """Common noun (or noun compound)."""

    class MentionType(_MentionType, metaclass=_MentionTypeEnumTypeWrapper):
        """The supported types of mentions."""
        pass

    MENTION_TYPE_UNSPECIFIED: EntityMentionData.MentionType.ValueType = ...  # 0
    """Unspecified."""

    PROPER: EntityMentionData.MentionType.ValueType = ...  # 1
    """Proper noun."""

    COMMON: EntityMentionData.MentionType.ValueType = ...  # 2
    """Common noun (or noun compound)."""


    ENTITY_UNIQUE_ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    SENTIMENT_FIELD_NUMBER: builtins.int
    entity_unique_id: typing.Text = ...
    """The key of this entity in conversation entities.
    Can be used to retrieve the exact `Entity` this mention is attached to.
    """

    type: global___EntityMentionData.MentionType.ValueType = ...
    """The type of the entity mention."""

    @property
    def sentiment(self) -> global___SentimentData:
        """Sentiment expressed for this mention of the entity."""
        pass
    def __init__(self,
        *,
        entity_unique_id : typing.Text = ...,
        type : global___EntityMentionData.MentionType.ValueType = ...,
        sentiment : typing.Optional[global___SentimentData] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["sentiment",b"sentiment"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entity_unique_id",b"entity_unique_id","sentiment",b"sentiment","type",b"type"]) -> None: ...
global___EntityMentionData = EntityMentionData

class IntentMatchData(google.protobuf.message.Message):
    """The data for an intent match.
    Represents an intent match for a text segment in the conversation. A text
    segment can be part of a sentence, a complete sentence, or an utterance
    with multiple sentences.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INTENT_UNIQUE_ID_FIELD_NUMBER: builtins.int
    intent_unique_id: typing.Text = ...
    """The id of the matched intent.
    Can be used to retrieve the corresponding intent information.
    """

    def __init__(self,
        *,
        intent_unique_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["intent_unique_id",b"intent_unique_id"]) -> None: ...
global___IntentMatchData = IntentMatchData

class SentimentData(google.protobuf.message.Message):
    """The data for a sentiment annotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    MAGNITUDE_FIELD_NUMBER: builtins.int
    SCORE_FIELD_NUMBER: builtins.int
    magnitude: builtins.float = ...
    """A non-negative number from 0 to infinity which represents the abolute
    magnitude of sentiment regardless of score.
    """

    score: builtins.float = ...
    """The sentiment score between -1.0 (negative) and 1.0 (positive)."""

    def __init__(self,
        *,
        magnitude : builtins.float = ...,
        score : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["magnitude",b"magnitude","score",b"score"]) -> None: ...
global___SentimentData = SentimentData

class IssueModel(google.protobuf.message.Message):
    """The issue model resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _State:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_State.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        STATE_UNSPECIFIED: IssueModel.State.ValueType = ...  # 0
        """Unspecified."""

        UNDEPLOYED: IssueModel.State.ValueType = ...  # 1
        """Model is not deployed but is ready to deploy."""

        DEPLOYING: IssueModel.State.ValueType = ...  # 2
        """Model is being deployed."""

        DEPLOYED: IssueModel.State.ValueType = ...  # 3
        """Model is deployed and is ready to be used. A model can only be used in
        analysis if it's in this state.
        """

        UNDEPLOYING: IssueModel.State.ValueType = ...  # 4
        """Model is being undeployed."""

        DELETING: IssueModel.State.ValueType = ...  # 5
        """Model is being deleted."""

    class State(_State, metaclass=_StateEnumTypeWrapper):
        """State of the model."""
        pass

    STATE_UNSPECIFIED: IssueModel.State.ValueType = ...  # 0
    """Unspecified."""

    UNDEPLOYED: IssueModel.State.ValueType = ...  # 1
    """Model is not deployed but is ready to deploy."""

    DEPLOYING: IssueModel.State.ValueType = ...  # 2
    """Model is being deployed."""

    DEPLOYED: IssueModel.State.ValueType = ...  # 3
    """Model is deployed and is ready to be used. A model can only be used in
    analysis if it's in this state.
    """

    UNDEPLOYING: IssueModel.State.ValueType = ...  # 4
    """Model is being undeployed."""

    DELETING: IssueModel.State.ValueType = ...  # 5
    """Model is being deleted."""


    class InputDataConfig(google.protobuf.message.Message):
        """Configs for the input data used to create the issue model."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        MEDIUM_FIELD_NUMBER: builtins.int
        TRAINING_CONVERSATIONS_COUNT_FIELD_NUMBER: builtins.int
        FILTER_FIELD_NUMBER: builtins.int
        medium: global___Conversation.Medium.ValueType = ...
        """Medium of conversations used in training data. This field is being
        deprecated. To specify the medium to be used in training a new issue
        model, set the `medium` field on `filter`.
        """

        training_conversations_count: builtins.int = ...
        """Output only. Number of conversations used in training. Output only."""

        filter: typing.Text = ...
        """A filter to reduce the conversations used for training the model to a
        specific subset.
        """

        def __init__(self,
            *,
            medium : global___Conversation.Medium.ValueType = ...,
            training_conversations_count : builtins.int = ...,
            filter : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","medium",b"medium","training_conversations_count",b"training_conversations_count"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    INPUT_DATA_CONFIG_FIELD_NUMBER: builtins.int
    TRAINING_STATS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Immutable. The resource name of the issue model.
    Format:
    projects/{project}/locations/{location}/issueModels/{issue_model}
    """

    display_name: typing.Text = ...
    """The representative name for the issue model."""

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time at which this issue model was created."""
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The most recent time at which the issue model was updated."""
        pass
    state: global___IssueModel.State.ValueType = ...
    """Output only. State of the model."""

    @property
    def input_data_config(self) -> global___IssueModel.InputDataConfig:
        """Configs for the input data that used to create the issue model."""
        pass
    @property
    def training_stats(self) -> global___IssueModelLabelStats:
        """Output only. Immutable. The issue model's label statistics on its training data."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        state : global___IssueModel.State.ValueType = ...,
        input_data_config : typing.Optional[global___IssueModel.InputDataConfig] = ...,
        training_stats : typing.Optional[global___IssueModelLabelStats] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time","input_data_config",b"input_data_config","training_stats",b"training_stats","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["create_time",b"create_time","display_name",b"display_name","input_data_config",b"input_data_config","name",b"name","state",b"state","training_stats",b"training_stats","update_time",b"update_time"]) -> None: ...
global___IssueModel = IssueModel

class Issue(google.protobuf.message.Message):
    """The issue resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Immutable. The resource name of the issue.
    Format:
    projects/{project}/locations/{location}/issueModels/{issue_model}/issues/{issue}
    """

    display_name: typing.Text = ...
    """The representative name for the issue."""

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time at which this issue was created."""
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The most recent time that this issue was updated."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["create_time",b"create_time","display_name",b"display_name","name",b"name","update_time",b"update_time"]) -> None: ...
global___Issue = Issue

class IssueModelLabelStats(google.protobuf.message.Message):
    """Aggregated statistics about an issue model."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class IssueStats(google.protobuf.message.Message):
        """Aggregated statistics about an issue."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        ISSUE_FIELD_NUMBER: builtins.int
        LABELED_CONVERSATIONS_COUNT_FIELD_NUMBER: builtins.int
        DISPLAY_NAME_FIELD_NUMBER: builtins.int
        issue: typing.Text = ...
        """Issue resource.
        Format:
        projects/{project}/locations/{location}/issueModels/{issue_model}/issues/{issue}
        """

        labeled_conversations_count: builtins.int = ...
        """Number of conversations attached to the issue at this point in time."""

        display_name: typing.Text = ...
        """Display name of the issue."""

        def __init__(self,
            *,
            issue : typing.Text = ...,
            labeled_conversations_count : builtins.int = ...,
            display_name : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name","issue",b"issue","labeled_conversations_count",b"labeled_conversations_count"]) -> None: ...

    class IssueStatsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___IssueModelLabelStats.IssueStats: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___IssueModelLabelStats.IssueStats] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ANALYZED_CONVERSATIONS_COUNT_FIELD_NUMBER: builtins.int
    UNCLASSIFIED_CONVERSATIONS_COUNT_FIELD_NUMBER: builtins.int
    ISSUE_STATS_FIELD_NUMBER: builtins.int
    analyzed_conversations_count: builtins.int = ...
    """Number of conversations the issue model has analyzed at this point in time."""

    unclassified_conversations_count: builtins.int = ...
    """Number of analyzed conversations for which no issue was applicable at this
    point in time.
    """

    @property
    def issue_stats(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___IssueModelLabelStats.IssueStats]:
        """Statistics on each issue. Key is the issue's resource name."""
        pass
    def __init__(self,
        *,
        analyzed_conversations_count : builtins.int = ...,
        unclassified_conversations_count : builtins.int = ...,
        issue_stats : typing.Optional[typing.Mapping[typing.Text, global___IssueModelLabelStats.IssueStats]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["analyzed_conversations_count",b"analyzed_conversations_count","issue_stats",b"issue_stats","unclassified_conversations_count",b"unclassified_conversations_count"]) -> None: ...
global___IssueModelLabelStats = IssueModelLabelStats

class PhraseMatcher(google.protobuf.message.Message):
    """The phrase matcher resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _PhraseMatcherType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _PhraseMatcherTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_PhraseMatcherType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        PHRASE_MATCHER_TYPE_UNSPECIFIED: PhraseMatcher.PhraseMatcherType.ValueType = ...  # 0
        """Unspecified."""

        ALL_OF: PhraseMatcher.PhraseMatcherType.ValueType = ...  # 1
        """Must meet all phrase match rule groups or there is no match."""

        ANY_OF: PhraseMatcher.PhraseMatcherType.ValueType = ...  # 2
        """If any of the phrase match rule groups are met, there is a match."""

    class PhraseMatcherType(_PhraseMatcherType, metaclass=_PhraseMatcherTypeEnumTypeWrapper):
        """Specifies how to combine each phrase match rule group to determine whether
        there is a match.
        """
        pass

    PHRASE_MATCHER_TYPE_UNSPECIFIED: PhraseMatcher.PhraseMatcherType.ValueType = ...  # 0
    """Unspecified."""

    ALL_OF: PhraseMatcher.PhraseMatcherType.ValueType = ...  # 1
    """Must meet all phrase match rule groups or there is no match."""

    ANY_OF: PhraseMatcher.PhraseMatcherType.ValueType = ...  # 2
    """If any of the phrase match rule groups are met, there is a match."""


    NAME_FIELD_NUMBER: builtins.int
    REVISION_ID_FIELD_NUMBER: builtins.int
    VERSION_TAG_FIELD_NUMBER: builtins.int
    REVISION_CREATE_TIME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    ACTIVE_FIELD_NUMBER: builtins.int
    PHRASE_MATCH_RULE_GROUPS_FIELD_NUMBER: builtins.int
    ACTIVATION_UPDATE_TIME_FIELD_NUMBER: builtins.int
    ROLE_MATCH_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The resource name of the phrase matcher.
    Format:
    projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
    """

    revision_id: typing.Text = ...
    """Output only. Immutable. The revision ID of the phrase matcher.
    A new revision is committed whenever the matcher is changed, except when it
    is activated or deactivated. A server generated random ID will be used.
    Example: locations/global/phraseMatchers/my-first-matcher@1234567
    """

    version_tag: typing.Text = ...
    """The customized version tag to use for the phrase matcher. If not specified,
    it will default to `revision_id`.
    """

    @property
    def revision_create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The timestamp of when the revision was created. It is also the create time
        when a new matcher is added.
        """
        pass
    display_name: typing.Text = ...
    """The human-readable name of the phrase matcher."""

    type: global___PhraseMatcher.PhraseMatcherType.ValueType = ...
    """Required. The type of this phrase matcher."""

    active: builtins.bool = ...
    """Applies the phrase matcher only when it is active."""

    @property
    def phrase_match_rule_groups(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PhraseMatchRuleGroup]:
        """A list of phase match rule groups that are included in this matcher."""
        pass
    @property
    def activation_update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The most recent time at which the activation status was updated."""
        pass
    role_match: global___ConversationParticipant.Role.ValueType = ...
    """The role whose utterances the phrase matcher should be matched
    against. If the role is ROLE_UNSPECIFIED it will be matched against any
    utterances in the transcript.
    """

    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The most recent time at which the phrase matcher was updated."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        revision_id : typing.Text = ...,
        version_tag : typing.Text = ...,
        revision_create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        display_name : typing.Text = ...,
        type : global___PhraseMatcher.PhraseMatcherType.ValueType = ...,
        active : builtins.bool = ...,
        phrase_match_rule_groups : typing.Optional[typing.Iterable[global___PhraseMatchRuleGroup]] = ...,
        activation_update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        role_match : global___ConversationParticipant.Role.ValueType = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["activation_update_time",b"activation_update_time","revision_create_time",b"revision_create_time","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["activation_update_time",b"activation_update_time","active",b"active","display_name",b"display_name","name",b"name","phrase_match_rule_groups",b"phrase_match_rule_groups","revision_create_time",b"revision_create_time","revision_id",b"revision_id","role_match",b"role_match","type",b"type","update_time",b"update_time","version_tag",b"version_tag"]) -> None: ...
global___PhraseMatcher = PhraseMatcher

class PhraseMatchRuleGroup(google.protobuf.message.Message):
    """A message representing a rule in the phrase matcher."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _PhraseMatchRuleGroupType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _PhraseMatchRuleGroupTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_PhraseMatchRuleGroupType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        PHRASE_MATCH_RULE_GROUP_TYPE_UNSPECIFIED: PhraseMatchRuleGroup.PhraseMatchRuleGroupType.ValueType = ...  # 0
        """Unspecified."""

        ALL_OF: PhraseMatchRuleGroup.PhraseMatchRuleGroupType.ValueType = ...  # 1
        """Must meet all phrase match rules or there is no match."""

        ANY_OF: PhraseMatchRuleGroup.PhraseMatchRuleGroupType.ValueType = ...  # 2
        """If any of the phrase match rules are met, there is a match."""

    class PhraseMatchRuleGroupType(_PhraseMatchRuleGroupType, metaclass=_PhraseMatchRuleGroupTypeEnumTypeWrapper):
        """Specifies how to combine each phrase match rule for whether there is a
        match.
        """
        pass

    PHRASE_MATCH_RULE_GROUP_TYPE_UNSPECIFIED: PhraseMatchRuleGroup.PhraseMatchRuleGroupType.ValueType = ...  # 0
    """Unspecified."""

    ALL_OF: PhraseMatchRuleGroup.PhraseMatchRuleGroupType.ValueType = ...  # 1
    """Must meet all phrase match rules or there is no match."""

    ANY_OF: PhraseMatchRuleGroup.PhraseMatchRuleGroupType.ValueType = ...  # 2
    """If any of the phrase match rules are met, there is a match."""


    TYPE_FIELD_NUMBER: builtins.int
    PHRASE_MATCH_RULES_FIELD_NUMBER: builtins.int
    type: global___PhraseMatchRuleGroup.PhraseMatchRuleGroupType.ValueType = ...
    """Required. The type of this phrase match rule group."""

    @property
    def phrase_match_rules(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PhraseMatchRule]:
        """A list of phase match rules that are included in this group."""
        pass
    def __init__(self,
        *,
        type : global___PhraseMatchRuleGroup.PhraseMatchRuleGroupType.ValueType = ...,
        phrase_match_rules : typing.Optional[typing.Iterable[global___PhraseMatchRule]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["phrase_match_rules",b"phrase_match_rules","type",b"type"]) -> None: ...
global___PhraseMatchRuleGroup = PhraseMatchRuleGroup

class PhraseMatchRule(google.protobuf.message.Message):
    """The data for a phrase match rule."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    QUERY_FIELD_NUMBER: builtins.int
    NEGATED_FIELD_NUMBER: builtins.int
    CONFIG_FIELD_NUMBER: builtins.int
    query: typing.Text = ...
    """Required. The phrase to be matched."""

    negated: builtins.bool = ...
    """Specifies whether the phrase must be missing from the transcript segment or
    present in the transcript segment.
    """

    @property
    def config(self) -> global___PhraseMatchRuleConfig:
        """Provides additional information about the rule that specifies how to apply
        the rule.
        """
        pass
    def __init__(self,
        *,
        query : typing.Text = ...,
        negated : builtins.bool = ...,
        config : typing.Optional[global___PhraseMatchRuleConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["config",b"config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["config",b"config","negated",b"negated","query",b"query"]) -> None: ...
global___PhraseMatchRule = PhraseMatchRule

class PhraseMatchRuleConfig(google.protobuf.message.Message):
    """Configuration information of a phrase match rule."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    EXACT_MATCH_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def exact_match_config(self) -> global___ExactMatchConfig:
        """The configuration for the exact match rule."""
        pass
    def __init__(self,
        *,
        exact_match_config : typing.Optional[global___ExactMatchConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["config",b"config","exact_match_config",b"exact_match_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["config",b"config","exact_match_config",b"exact_match_config"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["config",b"config"]) -> typing.Optional[typing_extensions.Literal["exact_match_config"]]: ...
global___PhraseMatchRuleConfig = PhraseMatchRuleConfig

class ExactMatchConfig(google.protobuf.message.Message):
    """Exact match configuration."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CASE_SENSITIVE_FIELD_NUMBER: builtins.int
    case_sensitive: builtins.bool = ...
    """Whether to consider case sensitivity when performing an exact match."""

    def __init__(self,
        *,
        case_sensitive : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["case_sensitive",b"case_sensitive"]) -> None: ...
global___ExactMatchConfig = ExactMatchConfig

class Settings(google.protobuf.message.Message):
    """The settings resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class AnalysisConfig(google.protobuf.message.Message):
        """Default configuration when creating Analyses in Insights."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        RUNTIME_INTEGRATION_ANALYSIS_PERCENTAGE_FIELD_NUMBER: builtins.int
        runtime_integration_analysis_percentage: builtins.float = ...
        """Percentage of conversations created using Dialogflow runtime integration
        to analyze automatically, between [0, 100].
        """

        def __init__(self,
            *,
            runtime_integration_analysis_percentage : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["runtime_integration_analysis_percentage",b"runtime_integration_analysis_percentage"]) -> None: ...

    class PubsubNotificationSettingsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    CONVERSATION_TTL_FIELD_NUMBER: builtins.int
    PUBSUB_NOTIFICATION_SETTINGS_FIELD_NUMBER: builtins.int
    ANALYSIS_CONFIG_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Immutable. The resource name of the settings resource.
    Format:
    projects/{project}/locations/{location}/settings
    """

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time at which the settings was created."""
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time at which the settings were last updated."""
        pass
    language_code: typing.Text = ...
    """A language code to be applied to each transcript segment unless the segment
    already specifies a language code. Language code defaults to "en-US" if it
    is neither specified on the segment nor here.
    """

    @property
    def conversation_ttl(self) -> google.protobuf.duration_pb2.Duration:
        """The default TTL for newly-created conversations. If a conversation has a
        specified expiration, that value will be used instead. Changing this
        value will not change the expiration of existing conversations.
        Conversations with no expire time persist until they are deleted.
        """
        pass
    @property
    def pubsub_notification_settings(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """A map that maps a notification trigger to a Pub/Sub topic. Each time a
        specified trigger occurs, Insights will notify the corresponding Pub/Sub
        topic.

        Keys are notification triggers. Supported keys are:

        * "all-triggers": Notify each time any of the supported triggers occurs.
        * "create-analysis": Notify each time an analysis is created.
        * "create-conversation": Notify each time a conversation is created.
        * "export-insights-data": Notify each time an export is complete.
        * "update-conversation": Notify each time a conversation is updated via
        UpdateConversation.

        Values are Pub/Sub topics. The format of each Pub/Sub topic is:
        projects/{project}/topics/{topic}
        """
        pass
    @property
    def analysis_config(self) -> global___Settings.AnalysisConfig:
        """Default analysis settings."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        language_code : typing.Text = ...,
        conversation_ttl : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        pubsub_notification_settings : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        analysis_config : typing.Optional[global___Settings.AnalysisConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["analysis_config",b"analysis_config","conversation_ttl",b"conversation_ttl","create_time",b"create_time","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["analysis_config",b"analysis_config","conversation_ttl",b"conversation_ttl","create_time",b"create_time","language_code",b"language_code","name",b"name","pubsub_notification_settings",b"pubsub_notification_settings","update_time",b"update_time"]) -> None: ...
global___Settings = Settings

class RuntimeAnnotation(google.protobuf.message.Message):
    """An annotation that was generated during the customer and agent interaction."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ARTICLE_SUGGESTION_FIELD_NUMBER: builtins.int
    FAQ_ANSWER_FIELD_NUMBER: builtins.int
    SMART_REPLY_FIELD_NUMBER: builtins.int
    SMART_COMPOSE_SUGGESTION_FIELD_NUMBER: builtins.int
    DIALOGFLOW_INTERACTION_FIELD_NUMBER: builtins.int
    ANNOTATION_ID_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    START_BOUNDARY_FIELD_NUMBER: builtins.int
    END_BOUNDARY_FIELD_NUMBER: builtins.int
    ANSWER_FEEDBACK_FIELD_NUMBER: builtins.int
    @property
    def article_suggestion(self) -> global___ArticleSuggestionData:
        """Agent Assist Article Suggestion data."""
        pass
    @property
    def faq_answer(self) -> global___FaqAnswerData:
        """Agent Assist FAQ answer data."""
        pass
    @property
    def smart_reply(self) -> global___SmartReplyData:
        """Agent Assist Smart Reply data."""
        pass
    @property
    def smart_compose_suggestion(self) -> global___SmartComposeSuggestionData:
        """Agent Assist Smart Compose suggestion data."""
        pass
    @property
    def dialogflow_interaction(self) -> global___DialogflowInteractionData:
        """Dialogflow interaction data."""
        pass
    annotation_id: typing.Text = ...
    """The unique identifier of the annotation.
    Format:
    projects/{project}/locations/{location}/conversationDatasets/{dataset}/conversationDataItems/{data_item}/conversationAnnotations/{annotation}
    """

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which this annotation was created."""
        pass
    @property
    def start_boundary(self) -> global___AnnotationBoundary:
        """The boundary in the conversation where the annotation starts, inclusive."""
        pass
    @property
    def end_boundary(self) -> global___AnnotationBoundary:
        """The boundary in the conversation where the annotation ends, inclusive."""
        pass
    @property
    def answer_feedback(self) -> global___AnswerFeedback:
        """The feedback that the customer has about the answer in `data`."""
        pass
    def __init__(self,
        *,
        article_suggestion : typing.Optional[global___ArticleSuggestionData] = ...,
        faq_answer : typing.Optional[global___FaqAnswerData] = ...,
        smart_reply : typing.Optional[global___SmartReplyData] = ...,
        smart_compose_suggestion : typing.Optional[global___SmartComposeSuggestionData] = ...,
        dialogflow_interaction : typing.Optional[global___DialogflowInteractionData] = ...,
        annotation_id : typing.Text = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        start_boundary : typing.Optional[global___AnnotationBoundary] = ...,
        end_boundary : typing.Optional[global___AnnotationBoundary] = ...,
        answer_feedback : typing.Optional[global___AnswerFeedback] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["answer_feedback",b"answer_feedback","article_suggestion",b"article_suggestion","create_time",b"create_time","data",b"data","dialogflow_interaction",b"dialogflow_interaction","end_boundary",b"end_boundary","faq_answer",b"faq_answer","smart_compose_suggestion",b"smart_compose_suggestion","smart_reply",b"smart_reply","start_boundary",b"start_boundary"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_id",b"annotation_id","answer_feedback",b"answer_feedback","article_suggestion",b"article_suggestion","create_time",b"create_time","data",b"data","dialogflow_interaction",b"dialogflow_interaction","end_boundary",b"end_boundary","faq_answer",b"faq_answer","smart_compose_suggestion",b"smart_compose_suggestion","smart_reply",b"smart_reply","start_boundary",b"start_boundary"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["data",b"data"]) -> typing.Optional[typing_extensions.Literal["article_suggestion","faq_answer","smart_reply","smart_compose_suggestion","dialogflow_interaction"]]: ...
global___RuntimeAnnotation = RuntimeAnnotation

class AnswerFeedback(google.protobuf.message.Message):
    """The feedback that the customer has about a certain answer in the
    conversation.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _CorrectnessLevel:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _CorrectnessLevelEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CorrectnessLevel.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        CORRECTNESS_LEVEL_UNSPECIFIED: AnswerFeedback.CorrectnessLevel.ValueType = ...  # 0
        """Correctness level unspecified."""

        NOT_CORRECT: AnswerFeedback.CorrectnessLevel.ValueType = ...  # 1
        """Answer is totally wrong."""

        PARTIALLY_CORRECT: AnswerFeedback.CorrectnessLevel.ValueType = ...  # 2
        """Answer is partially correct."""

        FULLY_CORRECT: AnswerFeedback.CorrectnessLevel.ValueType = ...  # 3
        """Answer is fully correct."""

    class CorrectnessLevel(_CorrectnessLevel, metaclass=_CorrectnessLevelEnumTypeWrapper):
        """The correctness level of an answer."""
        pass

    CORRECTNESS_LEVEL_UNSPECIFIED: AnswerFeedback.CorrectnessLevel.ValueType = ...  # 0
    """Correctness level unspecified."""

    NOT_CORRECT: AnswerFeedback.CorrectnessLevel.ValueType = ...  # 1
    """Answer is totally wrong."""

    PARTIALLY_CORRECT: AnswerFeedback.CorrectnessLevel.ValueType = ...  # 2
    """Answer is partially correct."""

    FULLY_CORRECT: AnswerFeedback.CorrectnessLevel.ValueType = ...  # 3
    """Answer is fully correct."""


    CORRECTNESS_LEVEL_FIELD_NUMBER: builtins.int
    CLICKED_FIELD_NUMBER: builtins.int
    DISPLAYED_FIELD_NUMBER: builtins.int
    correctness_level: global___AnswerFeedback.CorrectnessLevel.ValueType = ...
    """The correctness level of an answer."""

    clicked: builtins.bool = ...
    """Indicates whether an answer or item was clicked by the human agent."""

    displayed: builtins.bool = ...
    """Indicates whether an answer or item was displayed to the human agent in the
    agent desktop UI.
    """

    def __init__(self,
        *,
        correctness_level : global___AnswerFeedback.CorrectnessLevel.ValueType = ...,
        clicked : builtins.bool = ...,
        displayed : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["clicked",b"clicked","correctness_level",b"correctness_level","displayed",b"displayed"]) -> None: ...
global___AnswerFeedback = AnswerFeedback

class ArticleSuggestionData(google.protobuf.message.Message):
    """Agent Assist Article Suggestion data."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    TITLE_FIELD_NUMBER: builtins.int
    URI_FIELD_NUMBER: builtins.int
    CONFIDENCE_SCORE_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    QUERY_RECORD_FIELD_NUMBER: builtins.int
    SOURCE_FIELD_NUMBER: builtins.int
    title: typing.Text = ...
    """Article title."""

    uri: typing.Text = ...
    """Article URI."""

    confidence_score: builtins.float = ...
    """The system's confidence score that this article is a good match for this
    conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely
    certain).
    """

    @property
    def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Map that contains metadata about the Article Suggestion and the document
        that it originates from.
        """
        pass
    query_record: typing.Text = ...
    """Name of the query record.
    Format:
    projects/{project}/locations/{location}/queryRecords/{query_record}
    """

    source: typing.Text = ...
    """The knowledge document that this answer was extracted from.
    Format:
    projects/{project}/knowledgeBases/{knowledge_base}/documents/{document}
    """

    def __init__(self,
        *,
        title : typing.Text = ...,
        uri : typing.Text = ...,
        confidence_score : builtins.float = ...,
        metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        query_record : typing.Text = ...,
        source : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["confidence_score",b"confidence_score","metadata",b"metadata","query_record",b"query_record","source",b"source","title",b"title","uri",b"uri"]) -> None: ...
global___ArticleSuggestionData = ArticleSuggestionData

class FaqAnswerData(google.protobuf.message.Message):
    """Agent Assist frequently-asked-question answer data."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ANSWER_FIELD_NUMBER: builtins.int
    CONFIDENCE_SCORE_FIELD_NUMBER: builtins.int
    QUESTION_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    QUERY_RECORD_FIELD_NUMBER: builtins.int
    SOURCE_FIELD_NUMBER: builtins.int
    answer: typing.Text = ...
    """The piece of text from the `source` knowledge base document."""

    confidence_score: builtins.float = ...
    """The system's confidence score that this answer is a good match for this
    conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely
    certain).
    """

    question: typing.Text = ...
    """The corresponding FAQ question."""

    @property
    def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Map that contains metadata about the FAQ answer and the document that
        it originates from.
        """
        pass
    query_record: typing.Text = ...
    """Name of the query record.
    Format:
    projects/{project}/locations/{location}/queryRecords/{query_record}.
    """

    source: typing.Text = ...
    """The knowledge document that this answer was extracted from.
    Format:
    projects/{project}/knowledgeBases/{knowledge_base}/documents/{document}.
    """

    def __init__(self,
        *,
        answer : typing.Text = ...,
        confidence_score : builtins.float = ...,
        question : typing.Text = ...,
        metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        query_record : typing.Text = ...,
        source : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["answer",b"answer","confidence_score",b"confidence_score","metadata",b"metadata","query_record",b"query_record","question",b"question","source",b"source"]) -> None: ...
global___FaqAnswerData = FaqAnswerData

class SmartReplyData(google.protobuf.message.Message):
    """Agent Assist Smart Reply data."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    REPLY_FIELD_NUMBER: builtins.int
    CONFIDENCE_SCORE_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    QUERY_RECORD_FIELD_NUMBER: builtins.int
    reply: typing.Text = ...
    """The content of the reply."""

    confidence_score: builtins.float = ...
    """The system's confidence score that this reply is a good match for this
    conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely
    certain).
    """

    @property
    def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Map that contains metadata about the Smart Reply and the document from
        which it originates.
        """
        pass
    query_record: typing.Text = ...
    """Name of the query record.
    Format:
    projects/{project}/locations/{location}/queryRecords/{query_record}
    """

    def __init__(self,
        *,
        reply : typing.Text = ...,
        confidence_score : builtins.float = ...,
        metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        query_record : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["confidence_score",b"confidence_score","metadata",b"metadata","query_record",b"query_record","reply",b"reply"]) -> None: ...
global___SmartReplyData = SmartReplyData

class SmartComposeSuggestionData(google.protobuf.message.Message):
    """Agent Assist Smart Compose suggestion data."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    SUGGESTION_FIELD_NUMBER: builtins.int
    CONFIDENCE_SCORE_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    QUERY_RECORD_FIELD_NUMBER: builtins.int
    suggestion: typing.Text = ...
    """The content of the suggestion."""

    confidence_score: builtins.float = ...
    """The system's confidence score that this suggestion is a good match for this
    conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely
    certain).
    """

    @property
    def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Map that contains metadata about the Smart Compose suggestion and the
        document from which it originates.
        """
        pass
    query_record: typing.Text = ...
    """Name of the query record.
    Format:
    projects/{project}/locations/{location}/queryRecords/{query_record}
    """

    def __init__(self,
        *,
        suggestion : typing.Text = ...,
        confidence_score : builtins.float = ...,
        metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        query_record : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["confidence_score",b"confidence_score","metadata",b"metadata","query_record",b"query_record","suggestion",b"suggestion"]) -> None: ...
global___SmartComposeSuggestionData = SmartComposeSuggestionData

class DialogflowInteractionData(google.protobuf.message.Message):
    """Dialogflow interaction data."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DIALOGFLOW_INTENT_ID_FIELD_NUMBER: builtins.int
    CONFIDENCE_FIELD_NUMBER: builtins.int
    dialogflow_intent_id: typing.Text = ...
    """The Dialogflow intent resource path. Format:
    projects/{project}/agent/{agent}/intents/{intent}
    """

    confidence: builtins.float = ...
    """The confidence of the match ranging from 0.0 (completely uncertain) to 1.0
    (completely certain).
    """

    def __init__(self,
        *,
        dialogflow_intent_id : typing.Text = ...,
        confidence : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["confidence",b"confidence","dialogflow_intent_id",b"dialogflow_intent_id"]) -> None: ...
global___DialogflowInteractionData = DialogflowInteractionData

class ConversationParticipant(google.protobuf.message.Message):
    """The call participant speaking for a given utterance."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Role:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _RoleEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Role.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        ROLE_UNSPECIFIED: ConversationParticipant.Role.ValueType = ...  # 0
        """Participant's role is not set."""

        HUMAN_AGENT: ConversationParticipant.Role.ValueType = ...  # 1
        """Participant is a human agent."""

        AUTOMATED_AGENT: ConversationParticipant.Role.ValueType = ...  # 2
        """Participant is an automated agent."""

        END_USER: ConversationParticipant.Role.ValueType = ...  # 3
        """Participant is an end user who conversed with the contact center."""

        ANY_AGENT: ConversationParticipant.Role.ValueType = ...  # 4
        """Participant is either a human or automated agent."""

    class Role(_Role, metaclass=_RoleEnumTypeWrapper):
        """The role of the participant."""
        pass

    ROLE_UNSPECIFIED: ConversationParticipant.Role.ValueType = ...  # 0
    """Participant's role is not set."""

    HUMAN_AGENT: ConversationParticipant.Role.ValueType = ...  # 1
    """Participant is a human agent."""

    AUTOMATED_AGENT: ConversationParticipant.Role.ValueType = ...  # 2
    """Participant is an automated agent."""

    END_USER: ConversationParticipant.Role.ValueType = ...  # 3
    """Participant is an end user who conversed with the contact center."""

    ANY_AGENT: ConversationParticipant.Role.ValueType = ...  # 4
    """Participant is either a human or automated agent."""


    DIALOGFLOW_PARTICIPANT_NAME_FIELD_NUMBER: builtins.int
    USER_ID_FIELD_NUMBER: builtins.int
    DIALOGFLOW_PARTICIPANT_FIELD_NUMBER: builtins.int
    OBFUSCATED_EXTERNAL_USER_ID_FIELD_NUMBER: builtins.int
    ROLE_FIELD_NUMBER: builtins.int
    dialogflow_participant_name: typing.Text = ...
    """The name of the participant provided by Dialogflow. Format:
    projects/{project}/locations/{location}/conversations/{conversation}/participants/{participant}
    """

    user_id: typing.Text = ...
    """A user-specified ID representing the participant."""

    dialogflow_participant: typing.Text = ...
    """Deprecated. Use `dialogflow_participant_name` instead.
    The name of the Dialogflow participant. Format:
    projects/{project}/locations/{location}/conversations/{conversation}/participants/{participant}
    """

    obfuscated_external_user_id: typing.Text = ...
    """Obfuscated user ID from Dialogflow."""

    role: global___ConversationParticipant.Role.ValueType = ...
    """The role of the participant."""

    def __init__(self,
        *,
        dialogflow_participant_name : typing.Text = ...,
        user_id : typing.Text = ...,
        dialogflow_participant : typing.Text = ...,
        obfuscated_external_user_id : typing.Text = ...,
        role : global___ConversationParticipant.Role.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dialogflow_participant_name",b"dialogflow_participant_name","participant",b"participant","user_id",b"user_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dialogflow_participant",b"dialogflow_participant","dialogflow_participant_name",b"dialogflow_participant_name","obfuscated_external_user_id",b"obfuscated_external_user_id","participant",b"participant","role",b"role","user_id",b"user_id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["participant",b"participant"]) -> typing.Optional[typing_extensions.Literal["dialogflow_participant_name","user_id"]]: ...
global___ConversationParticipant = ConversationParticipant

class View(google.protobuf.message.Message):
    """The View resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Immutable. The resource name of the view.
    Format:
    projects/{project}/locations/{location}/views/{view}
    """

    display_name: typing.Text = ...
    """The human-readable display name of the view."""

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time at which this view was created."""
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The most recent time at which the view was updated."""
        pass
    value: typing.Text = ...
    """String with specific view properties."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        value : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["create_time",b"create_time","display_name",b"display_name","name",b"name","update_time",b"update_time","value",b"value"]) -> None: ...
global___View = View
