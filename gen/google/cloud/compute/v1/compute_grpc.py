# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/cloud/compute/v1/compute.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.api.client_pb2
import google.api.field_behavior_pb2
import google.api.resource_pb2
import google.cloud.extended_operations_pb2
import google.cloud.compute.v1.compute_pb2


class AcceleratorTypesBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListAcceleratorTypesRequest, google.cloud.compute.v1.compute_pb2.AcceleratorTypeAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetAcceleratorTypeRequest, google.cloud.compute.v1.compute_pb2.AcceleratorType]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListAcceleratorTypesRequest, google.cloud.compute.v1.compute_pb2.AcceleratorTypeList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.AcceleratorTypes/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListAcceleratorTypesRequest,
                google.cloud.compute.v1.compute_pb2.AcceleratorTypeAggregatedList,
            ),
            '/google.cloud.compute.v1.AcceleratorTypes/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetAcceleratorTypeRequest,
                google.cloud.compute.v1.compute_pb2.AcceleratorType,
            ),
            '/google.cloud.compute.v1.AcceleratorTypes/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListAcceleratorTypesRequest,
                google.cloud.compute.v1.compute_pb2.AcceleratorTypeList,
            ),
        }


class AcceleratorTypesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.AcceleratorTypes/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListAcceleratorTypesRequest,
            google.cloud.compute.v1.compute_pb2.AcceleratorTypeAggregatedList,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.AcceleratorTypes/Get',
            google.cloud.compute.v1.compute_pb2.GetAcceleratorTypeRequest,
            google.cloud.compute.v1.compute_pb2.AcceleratorType,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.AcceleratorTypes/List',
            google.cloud.compute.v1.compute_pb2.ListAcceleratorTypesRequest,
            google.cloud.compute.v1.compute_pb2.AcceleratorTypeList,
        )


class AddressesBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListAddressesRequest, google.cloud.compute.v1.compute_pb2.AddressAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteAddressRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetAddressRequest, google.cloud.compute.v1.compute_pb2.Address]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertAddressRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListAddressesRequest, google.cloud.compute.v1.compute_pb2.AddressList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Addresses/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListAddressesRequest,
                google.cloud.compute.v1.compute_pb2.AddressAggregatedList,
            ),
            '/google.cloud.compute.v1.Addresses/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteAddressRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Addresses/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetAddressRequest,
                google.cloud.compute.v1.compute_pb2.Address,
            ),
            '/google.cloud.compute.v1.Addresses/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertAddressRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Addresses/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListAddressesRequest,
                google.cloud.compute.v1.compute_pb2.AddressList,
            ),
        }


class AddressesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Addresses/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListAddressesRequest,
            google.cloud.compute.v1.compute_pb2.AddressAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Addresses/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteAddressRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Addresses/Get',
            google.cloud.compute.v1.compute_pb2.GetAddressRequest,
            google.cloud.compute.v1.compute_pb2.Address,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Addresses/Insert',
            google.cloud.compute.v1.compute_pb2.InsertAddressRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Addresses/List',
            google.cloud.compute.v1.compute_pb2.ListAddressesRequest,
            google.cloud.compute.v1.compute_pb2.AddressList,
        )


class AutoscalersBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListAutoscalersRequest, google.cloud.compute.v1.compute_pb2.AutoscalerAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteAutoscalerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetAutoscalerRequest, google.cloud.compute.v1.compute_pb2.Autoscaler]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertAutoscalerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListAutoscalersRequest, google.cloud.compute.v1.compute_pb2.AutoscalerList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchAutoscalerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Update(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateAutoscalerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Autoscalers/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListAutoscalersRequest,
                google.cloud.compute.v1.compute_pb2.AutoscalerAggregatedList,
            ),
            '/google.cloud.compute.v1.Autoscalers/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteAutoscalerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Autoscalers/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetAutoscalerRequest,
                google.cloud.compute.v1.compute_pb2.Autoscaler,
            ),
            '/google.cloud.compute.v1.Autoscalers/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertAutoscalerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Autoscalers/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListAutoscalersRequest,
                google.cloud.compute.v1.compute_pb2.AutoscalerList,
            ),
            '/google.cloud.compute.v1.Autoscalers/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchAutoscalerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Autoscalers/Update': grpclib.const.Handler(
                self.Update,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateAutoscalerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class AutoscalersStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Autoscalers/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListAutoscalersRequest,
            google.cloud.compute.v1.compute_pb2.AutoscalerAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Autoscalers/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteAutoscalerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Autoscalers/Get',
            google.cloud.compute.v1.compute_pb2.GetAutoscalerRequest,
            google.cloud.compute.v1.compute_pb2.Autoscaler,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Autoscalers/Insert',
            google.cloud.compute.v1.compute_pb2.InsertAutoscalerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Autoscalers/List',
            google.cloud.compute.v1.compute_pb2.ListAutoscalersRequest,
            google.cloud.compute.v1.compute_pb2.AutoscalerList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Autoscalers/Patch',
            google.cloud.compute.v1.compute_pb2.PatchAutoscalerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Update = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Autoscalers/Update',
            google.cloud.compute.v1.compute_pb2.UpdateAutoscalerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class BackendBucketsBase(abc.ABC):

    @abc.abstractmethod
    async def AddSignedUrlKey(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AddSignedUrlKeyBackendBucketRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteBackendBucketRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteSignedUrlKey(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteSignedUrlKeyBackendBucketRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetBackendBucketRequest, google.cloud.compute.v1.compute_pb2.BackendBucket]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertBackendBucketRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListBackendBucketsRequest, google.cloud.compute.v1.compute_pb2.BackendBucketList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchBackendBucketRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Update(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateBackendBucketRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.BackendBuckets/AddSignedUrlKey': grpclib.const.Handler(
                self.AddSignedUrlKey,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AddSignedUrlKeyBackendBucketRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.BackendBuckets/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteBackendBucketRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.BackendBuckets/DeleteSignedUrlKey': grpclib.const.Handler(
                self.DeleteSignedUrlKey,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteSignedUrlKeyBackendBucketRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.BackendBuckets/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetBackendBucketRequest,
                google.cloud.compute.v1.compute_pb2.BackendBucket,
            ),
            '/google.cloud.compute.v1.BackendBuckets/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertBackendBucketRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.BackendBuckets/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListBackendBucketsRequest,
                google.cloud.compute.v1.compute_pb2.BackendBucketList,
            ),
            '/google.cloud.compute.v1.BackendBuckets/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchBackendBucketRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.BackendBuckets/Update': grpclib.const.Handler(
                self.Update,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateBackendBucketRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class BackendBucketsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AddSignedUrlKey = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendBuckets/AddSignedUrlKey',
            google.cloud.compute.v1.compute_pb2.AddSignedUrlKeyBackendBucketRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendBuckets/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteBackendBucketRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.DeleteSignedUrlKey = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendBuckets/DeleteSignedUrlKey',
            google.cloud.compute.v1.compute_pb2.DeleteSignedUrlKeyBackendBucketRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendBuckets/Get',
            google.cloud.compute.v1.compute_pb2.GetBackendBucketRequest,
            google.cloud.compute.v1.compute_pb2.BackendBucket,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendBuckets/Insert',
            google.cloud.compute.v1.compute_pb2.InsertBackendBucketRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendBuckets/List',
            google.cloud.compute.v1.compute_pb2.ListBackendBucketsRequest,
            google.cloud.compute.v1.compute_pb2.BackendBucketList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendBuckets/Patch',
            google.cloud.compute.v1.compute_pb2.PatchBackendBucketRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Update = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendBuckets/Update',
            google.cloud.compute.v1.compute_pb2.UpdateBackendBucketRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class BackendServicesBase(abc.ABC):

    @abc.abstractmethod
    async def AddSignedUrlKey(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AddSignedUrlKeyBackendServiceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListBackendServicesRequest, google.cloud.compute.v1.compute_pb2.BackendServiceAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteBackendServiceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteSignedUrlKey(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteSignedUrlKeyBackendServiceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetBackendServiceRequest, google.cloud.compute.v1.compute_pb2.BackendService]') -> None:
        pass

    @abc.abstractmethod
    async def GetHealth(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetHealthBackendServiceRequest, google.cloud.compute.v1.compute_pb2.BackendServiceGroupHealth]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertBackendServiceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListBackendServicesRequest, google.cloud.compute.v1.compute_pb2.BackendServiceList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchBackendServiceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetSecurityPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetSecurityPolicyBackendServiceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Update(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateBackendServiceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.BackendServices/AddSignedUrlKey': grpclib.const.Handler(
                self.AddSignedUrlKey,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AddSignedUrlKeyBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.BackendServices/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListBackendServicesRequest,
                google.cloud.compute.v1.compute_pb2.BackendServiceAggregatedList,
            ),
            '/google.cloud.compute.v1.BackendServices/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.BackendServices/DeleteSignedUrlKey': grpclib.const.Handler(
                self.DeleteSignedUrlKey,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteSignedUrlKeyBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.BackendServices/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.BackendService,
            ),
            '/google.cloud.compute.v1.BackendServices/GetHealth': grpclib.const.Handler(
                self.GetHealth,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetHealthBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.BackendServiceGroupHealth,
            ),
            '/google.cloud.compute.v1.BackendServices/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.BackendServices/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListBackendServicesRequest,
                google.cloud.compute.v1.compute_pb2.BackendServiceList,
            ),
            '/google.cloud.compute.v1.BackendServices/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.BackendServices/SetSecurityPolicy': grpclib.const.Handler(
                self.SetSecurityPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetSecurityPolicyBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.BackendServices/Update': grpclib.const.Handler(
                self.Update,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class BackendServicesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AddSignedUrlKey = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendServices/AddSignedUrlKey',
            google.cloud.compute.v1.compute_pb2.AddSignedUrlKeyBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendServices/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListBackendServicesRequest,
            google.cloud.compute.v1.compute_pb2.BackendServiceAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendServices/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.DeleteSignedUrlKey = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendServices/DeleteSignedUrlKey',
            google.cloud.compute.v1.compute_pb2.DeleteSignedUrlKeyBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendServices/Get',
            google.cloud.compute.v1.compute_pb2.GetBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.BackendService,
        )
        self.GetHealth = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendServices/GetHealth',
            google.cloud.compute.v1.compute_pb2.GetHealthBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.BackendServiceGroupHealth,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendServices/Insert',
            google.cloud.compute.v1.compute_pb2.InsertBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendServices/List',
            google.cloud.compute.v1.compute_pb2.ListBackendServicesRequest,
            google.cloud.compute.v1.compute_pb2.BackendServiceList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendServices/Patch',
            google.cloud.compute.v1.compute_pb2.PatchBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetSecurityPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendServices/SetSecurityPolicy',
            google.cloud.compute.v1.compute_pb2.SetSecurityPolicyBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Update = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.BackendServices/Update',
            google.cloud.compute.v1.compute_pb2.UpdateBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class DiskTypesBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListDiskTypesRequest, google.cloud.compute.v1.compute_pb2.DiskTypeAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetDiskTypeRequest, google.cloud.compute.v1.compute_pb2.DiskType]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListDiskTypesRequest, google.cloud.compute.v1.compute_pb2.DiskTypeList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.DiskTypes/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListDiskTypesRequest,
                google.cloud.compute.v1.compute_pb2.DiskTypeAggregatedList,
            ),
            '/google.cloud.compute.v1.DiskTypes/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetDiskTypeRequest,
                google.cloud.compute.v1.compute_pb2.DiskType,
            ),
            '/google.cloud.compute.v1.DiskTypes/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListDiskTypesRequest,
                google.cloud.compute.v1.compute_pb2.DiskTypeList,
            ),
        }


class DiskTypesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.DiskTypes/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListDiskTypesRequest,
            google.cloud.compute.v1.compute_pb2.DiskTypeAggregatedList,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.DiskTypes/Get',
            google.cloud.compute.v1.compute_pb2.GetDiskTypeRequest,
            google.cloud.compute.v1.compute_pb2.DiskType,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.DiskTypes/List',
            google.cloud.compute.v1.compute_pb2.ListDiskTypesRequest,
            google.cloud.compute.v1.compute_pb2.DiskTypeList,
        )


class DisksBase(abc.ABC):

    @abc.abstractmethod
    async def AddResourcePolicies(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AddResourcePoliciesDiskRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListDisksRequest, google.cloud.compute.v1.compute_pb2.DiskAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def CreateSnapshot(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.CreateSnapshotDiskRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteDiskRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetDiskRequest, google.cloud.compute.v1.compute_pb2.Disk]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetIamPolicyDiskRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertDiskRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListDisksRequest, google.cloud.compute.v1.compute_pb2.DiskList]') -> None:
        pass

    @abc.abstractmethod
    async def RemoveResourcePolicies(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.RemoveResourcePoliciesDiskRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Resize(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ResizeDiskRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetIamPolicyDiskRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def SetLabels(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetLabelsDiskRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsDiskRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Disks/AddResourcePolicies': grpclib.const.Handler(
                self.AddResourcePolicies,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AddResourcePoliciesDiskRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Disks/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListDisksRequest,
                google.cloud.compute.v1.compute_pb2.DiskAggregatedList,
            ),
            '/google.cloud.compute.v1.Disks/CreateSnapshot': grpclib.const.Handler(
                self.CreateSnapshot,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.CreateSnapshotDiskRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Disks/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteDiskRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Disks/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetDiskRequest,
                google.cloud.compute.v1.compute_pb2.Disk,
            ),
            '/google.cloud.compute.v1.Disks/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetIamPolicyDiskRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.Disks/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertDiskRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Disks/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListDisksRequest,
                google.cloud.compute.v1.compute_pb2.DiskList,
            ),
            '/google.cloud.compute.v1.Disks/RemoveResourcePolicies': grpclib.const.Handler(
                self.RemoveResourcePolicies,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.RemoveResourcePoliciesDiskRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Disks/Resize': grpclib.const.Handler(
                self.Resize,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ResizeDiskRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Disks/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetIamPolicyDiskRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.Disks/SetLabels': grpclib.const.Handler(
                self.SetLabels,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetLabelsDiskRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Disks/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsDiskRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class DisksStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AddResourcePolicies = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Disks/AddResourcePolicies',
            google.cloud.compute.v1.compute_pb2.AddResourcePoliciesDiskRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Disks/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListDisksRequest,
            google.cloud.compute.v1.compute_pb2.DiskAggregatedList,
        )
        self.CreateSnapshot = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Disks/CreateSnapshot',
            google.cloud.compute.v1.compute_pb2.CreateSnapshotDiskRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Disks/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteDiskRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Disks/Get',
            google.cloud.compute.v1.compute_pb2.GetDiskRequest,
            google.cloud.compute.v1.compute_pb2.Disk,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Disks/GetIamPolicy',
            google.cloud.compute.v1.compute_pb2.GetIamPolicyDiskRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Disks/Insert',
            google.cloud.compute.v1.compute_pb2.InsertDiskRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Disks/List',
            google.cloud.compute.v1.compute_pb2.ListDisksRequest,
            google.cloud.compute.v1.compute_pb2.DiskList,
        )
        self.RemoveResourcePolicies = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Disks/RemoveResourcePolicies',
            google.cloud.compute.v1.compute_pb2.RemoveResourcePoliciesDiskRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Resize = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Disks/Resize',
            google.cloud.compute.v1.compute_pb2.ResizeDiskRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Disks/SetIamPolicy',
            google.cloud.compute.v1.compute_pb2.SetIamPolicyDiskRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.SetLabels = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Disks/SetLabels',
            google.cloud.compute.v1.compute_pb2.SetLabelsDiskRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Disks/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsDiskRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class ExternalVpnGatewaysBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteExternalVpnGatewayRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetExternalVpnGatewayRequest, google.cloud.compute.v1.compute_pb2.ExternalVpnGateway]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertExternalVpnGatewayRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListExternalVpnGatewaysRequest, google.cloud.compute.v1.compute_pb2.ExternalVpnGatewayList]') -> None:
        pass

    @abc.abstractmethod
    async def SetLabels(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetLabelsExternalVpnGatewayRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsExternalVpnGatewayRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.ExternalVpnGateways/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteExternalVpnGatewayRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.ExternalVpnGateways/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetExternalVpnGatewayRequest,
                google.cloud.compute.v1.compute_pb2.ExternalVpnGateway,
            ),
            '/google.cloud.compute.v1.ExternalVpnGateways/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertExternalVpnGatewayRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.ExternalVpnGateways/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListExternalVpnGatewaysRequest,
                google.cloud.compute.v1.compute_pb2.ExternalVpnGatewayList,
            ),
            '/google.cloud.compute.v1.ExternalVpnGateways/SetLabels': grpclib.const.Handler(
                self.SetLabels,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetLabelsExternalVpnGatewayRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.ExternalVpnGateways/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsExternalVpnGatewayRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class ExternalVpnGatewaysStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ExternalVpnGateways/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteExternalVpnGatewayRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ExternalVpnGateways/Get',
            google.cloud.compute.v1.compute_pb2.GetExternalVpnGatewayRequest,
            google.cloud.compute.v1.compute_pb2.ExternalVpnGateway,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ExternalVpnGateways/Insert',
            google.cloud.compute.v1.compute_pb2.InsertExternalVpnGatewayRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ExternalVpnGateways/List',
            google.cloud.compute.v1.compute_pb2.ListExternalVpnGatewaysRequest,
            google.cloud.compute.v1.compute_pb2.ExternalVpnGatewayList,
        )
        self.SetLabels = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ExternalVpnGateways/SetLabels',
            google.cloud.compute.v1.compute_pb2.SetLabelsExternalVpnGatewayRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ExternalVpnGateways/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsExternalVpnGatewayRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class FirewallPoliciesBase(abc.ABC):

    @abc.abstractmethod
    async def AddAssociation(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AddAssociationFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def AddRule(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AddRuleFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def CloneRules(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.CloneRulesFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.FirewallPolicy]') -> None:
        pass

    @abc.abstractmethod
    async def GetAssociation(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetAssociationFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.FirewallPolicyAssociation]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetIamPolicyFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def GetRule(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRuleFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.FirewallPolicyRule]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListFirewallPoliciesRequest, google.cloud.compute.v1.compute_pb2.FirewallPolicyList]') -> None:
        pass

    @abc.abstractmethod
    async def ListAssociations(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListAssociationsFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.FirewallPoliciesListAssociationsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Move(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.MoveFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def PatchRule(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchRuleFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def RemoveAssociation(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.RemoveAssociationFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def RemoveRule(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.RemoveRuleFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetIamPolicyFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsFirewallPolicyRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.FirewallPolicies/AddAssociation': grpclib.const.Handler(
                self.AddAssociation,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AddAssociationFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/AddRule': grpclib.const.Handler(
                self.AddRule,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AddRuleFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/CloneRules': grpclib.const.Handler(
                self.CloneRules,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.CloneRulesFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.FirewallPolicy,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/GetAssociation': grpclib.const.Handler(
                self.GetAssociation,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetAssociationFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.FirewallPolicyAssociation,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetIamPolicyFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/GetRule': grpclib.const.Handler(
                self.GetRule,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRuleFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.FirewallPolicyRule,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListFirewallPoliciesRequest,
                google.cloud.compute.v1.compute_pb2.FirewallPolicyList,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/ListAssociations': grpclib.const.Handler(
                self.ListAssociations,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListAssociationsFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.FirewallPoliciesListAssociationsResponse,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/Move': grpclib.const.Handler(
                self.Move,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.MoveFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/PatchRule': grpclib.const.Handler(
                self.PatchRule,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchRuleFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/RemoveAssociation': grpclib.const.Handler(
                self.RemoveAssociation,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.RemoveAssociationFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/RemoveRule': grpclib.const.Handler(
                self.RemoveRule,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.RemoveRuleFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetIamPolicyFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.FirewallPolicies/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsFirewallPolicyRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class FirewallPoliciesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AddAssociation = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/AddAssociation',
            google.cloud.compute.v1.compute_pb2.AddAssociationFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.AddRule = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/AddRule',
            google.cloud.compute.v1.compute_pb2.AddRuleFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.CloneRules = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/CloneRules',
            google.cloud.compute.v1.compute_pb2.CloneRulesFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/Get',
            google.cloud.compute.v1.compute_pb2.GetFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.FirewallPolicy,
        )
        self.GetAssociation = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/GetAssociation',
            google.cloud.compute.v1.compute_pb2.GetAssociationFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.FirewallPolicyAssociation,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/GetIamPolicy',
            google.cloud.compute.v1.compute_pb2.GetIamPolicyFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.GetRule = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/GetRule',
            google.cloud.compute.v1.compute_pb2.GetRuleFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.FirewallPolicyRule,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/Insert',
            google.cloud.compute.v1.compute_pb2.InsertFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/List',
            google.cloud.compute.v1.compute_pb2.ListFirewallPoliciesRequest,
            google.cloud.compute.v1.compute_pb2.FirewallPolicyList,
        )
        self.ListAssociations = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/ListAssociations',
            google.cloud.compute.v1.compute_pb2.ListAssociationsFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.FirewallPoliciesListAssociationsResponse,
        )
        self.Move = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/Move',
            google.cloud.compute.v1.compute_pb2.MoveFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/Patch',
            google.cloud.compute.v1.compute_pb2.PatchFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.PatchRule = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/PatchRule',
            google.cloud.compute.v1.compute_pb2.PatchRuleFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.RemoveAssociation = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/RemoveAssociation',
            google.cloud.compute.v1.compute_pb2.RemoveAssociationFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.RemoveRule = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/RemoveRule',
            google.cloud.compute.v1.compute_pb2.RemoveRuleFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/SetIamPolicy',
            google.cloud.compute.v1.compute_pb2.SetIamPolicyFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.FirewallPolicies/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsFirewallPolicyRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class FirewallsBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteFirewallRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetFirewallRequest, google.cloud.compute.v1.compute_pb2.Firewall]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertFirewallRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListFirewallsRequest, google.cloud.compute.v1.compute_pb2.FirewallList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchFirewallRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Update(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateFirewallRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Firewalls/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteFirewallRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Firewalls/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetFirewallRequest,
                google.cloud.compute.v1.compute_pb2.Firewall,
            ),
            '/google.cloud.compute.v1.Firewalls/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertFirewallRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Firewalls/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListFirewallsRequest,
                google.cloud.compute.v1.compute_pb2.FirewallList,
            ),
            '/google.cloud.compute.v1.Firewalls/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchFirewallRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Firewalls/Update': grpclib.const.Handler(
                self.Update,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateFirewallRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class FirewallsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Firewalls/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteFirewallRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Firewalls/Get',
            google.cloud.compute.v1.compute_pb2.GetFirewallRequest,
            google.cloud.compute.v1.compute_pb2.Firewall,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Firewalls/Insert',
            google.cloud.compute.v1.compute_pb2.InsertFirewallRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Firewalls/List',
            google.cloud.compute.v1.compute_pb2.ListFirewallsRequest,
            google.cloud.compute.v1.compute_pb2.FirewallList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Firewalls/Patch',
            google.cloud.compute.v1.compute_pb2.PatchFirewallRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Update = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Firewalls/Update',
            google.cloud.compute.v1.compute_pb2.UpdateFirewallRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class ForwardingRulesBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListForwardingRulesRequest, google.cloud.compute.v1.compute_pb2.ForwardingRuleAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteForwardingRuleRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetForwardingRuleRequest, google.cloud.compute.v1.compute_pb2.ForwardingRule]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertForwardingRuleRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListForwardingRulesRequest, google.cloud.compute.v1.compute_pb2.ForwardingRuleList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchForwardingRuleRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetLabels(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetLabelsForwardingRuleRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetTarget(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetTargetForwardingRuleRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.ForwardingRules/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListForwardingRulesRequest,
                google.cloud.compute.v1.compute_pb2.ForwardingRuleAggregatedList,
            ),
            '/google.cloud.compute.v1.ForwardingRules/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteForwardingRuleRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.ForwardingRules/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetForwardingRuleRequest,
                google.cloud.compute.v1.compute_pb2.ForwardingRule,
            ),
            '/google.cloud.compute.v1.ForwardingRules/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertForwardingRuleRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.ForwardingRules/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListForwardingRulesRequest,
                google.cloud.compute.v1.compute_pb2.ForwardingRuleList,
            ),
            '/google.cloud.compute.v1.ForwardingRules/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchForwardingRuleRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.ForwardingRules/SetLabels': grpclib.const.Handler(
                self.SetLabels,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetLabelsForwardingRuleRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.ForwardingRules/SetTarget': grpclib.const.Handler(
                self.SetTarget,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetTargetForwardingRuleRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class ForwardingRulesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ForwardingRules/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListForwardingRulesRequest,
            google.cloud.compute.v1.compute_pb2.ForwardingRuleAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ForwardingRules/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteForwardingRuleRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ForwardingRules/Get',
            google.cloud.compute.v1.compute_pb2.GetForwardingRuleRequest,
            google.cloud.compute.v1.compute_pb2.ForwardingRule,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ForwardingRules/Insert',
            google.cloud.compute.v1.compute_pb2.InsertForwardingRuleRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ForwardingRules/List',
            google.cloud.compute.v1.compute_pb2.ListForwardingRulesRequest,
            google.cloud.compute.v1.compute_pb2.ForwardingRuleList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ForwardingRules/Patch',
            google.cloud.compute.v1.compute_pb2.PatchForwardingRuleRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetLabels = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ForwardingRules/SetLabels',
            google.cloud.compute.v1.compute_pb2.SetLabelsForwardingRuleRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetTarget = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ForwardingRules/SetTarget',
            google.cloud.compute.v1.compute_pb2.SetTargetForwardingRuleRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class GlobalAddressesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteGlobalAddressRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetGlobalAddressRequest, google.cloud.compute.v1.compute_pb2.Address]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertGlobalAddressRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListGlobalAddressesRequest, google.cloud.compute.v1.compute_pb2.AddressList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.GlobalAddresses/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteGlobalAddressRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.GlobalAddresses/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetGlobalAddressRequest,
                google.cloud.compute.v1.compute_pb2.Address,
            ),
            '/google.cloud.compute.v1.GlobalAddresses/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertGlobalAddressRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.GlobalAddresses/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListGlobalAddressesRequest,
                google.cloud.compute.v1.compute_pb2.AddressList,
            ),
        }


class GlobalAddressesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalAddresses/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteGlobalAddressRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalAddresses/Get',
            google.cloud.compute.v1.compute_pb2.GetGlobalAddressRequest,
            google.cloud.compute.v1.compute_pb2.Address,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalAddresses/Insert',
            google.cloud.compute.v1.compute_pb2.InsertGlobalAddressRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalAddresses/List',
            google.cloud.compute.v1.compute_pb2.ListGlobalAddressesRequest,
            google.cloud.compute.v1.compute_pb2.AddressList,
        )


class GlobalForwardingRulesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteGlobalForwardingRuleRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetGlobalForwardingRuleRequest, google.cloud.compute.v1.compute_pb2.ForwardingRule]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertGlobalForwardingRuleRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListGlobalForwardingRulesRequest, google.cloud.compute.v1.compute_pb2.ForwardingRuleList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchGlobalForwardingRuleRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetLabels(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetLabelsGlobalForwardingRuleRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetTarget(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetTargetGlobalForwardingRuleRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.GlobalForwardingRules/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteGlobalForwardingRuleRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.GlobalForwardingRules/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetGlobalForwardingRuleRequest,
                google.cloud.compute.v1.compute_pb2.ForwardingRule,
            ),
            '/google.cloud.compute.v1.GlobalForwardingRules/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertGlobalForwardingRuleRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.GlobalForwardingRules/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListGlobalForwardingRulesRequest,
                google.cloud.compute.v1.compute_pb2.ForwardingRuleList,
            ),
            '/google.cloud.compute.v1.GlobalForwardingRules/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchGlobalForwardingRuleRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.GlobalForwardingRules/SetLabels': grpclib.const.Handler(
                self.SetLabels,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetLabelsGlobalForwardingRuleRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.GlobalForwardingRules/SetTarget': grpclib.const.Handler(
                self.SetTarget,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetTargetGlobalForwardingRuleRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class GlobalForwardingRulesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalForwardingRules/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteGlobalForwardingRuleRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalForwardingRules/Get',
            google.cloud.compute.v1.compute_pb2.GetGlobalForwardingRuleRequest,
            google.cloud.compute.v1.compute_pb2.ForwardingRule,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalForwardingRules/Insert',
            google.cloud.compute.v1.compute_pb2.InsertGlobalForwardingRuleRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalForwardingRules/List',
            google.cloud.compute.v1.compute_pb2.ListGlobalForwardingRulesRequest,
            google.cloud.compute.v1.compute_pb2.ForwardingRuleList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalForwardingRules/Patch',
            google.cloud.compute.v1.compute_pb2.PatchGlobalForwardingRuleRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetLabels = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalForwardingRules/SetLabels',
            google.cloud.compute.v1.compute_pb2.SetLabelsGlobalForwardingRuleRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetTarget = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalForwardingRules/SetTarget',
            google.cloud.compute.v1.compute_pb2.SetTargetGlobalForwardingRuleRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class GlobalNetworkEndpointGroupsBase(abc.ABC):

    @abc.abstractmethod
    async def AttachNetworkEndpoints(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteGlobalNetworkEndpointGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DetachNetworkEndpoints(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetGlobalNetworkEndpointGroupRequest, google.cloud.compute.v1.compute_pb2.NetworkEndpointGroup]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertGlobalNetworkEndpointGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListGlobalNetworkEndpointGroupsRequest, google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupList]') -> None:
        pass

    @abc.abstractmethod
    async def ListNetworkEndpoints(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest, google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupsListNetworkEndpoints]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.GlobalNetworkEndpointGroups/AttachNetworkEndpoints': grpclib.const.Handler(
                self.AttachNetworkEndpoints,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.GlobalNetworkEndpointGroups/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteGlobalNetworkEndpointGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.GlobalNetworkEndpointGroups/DetachNetworkEndpoints': grpclib.const.Handler(
                self.DetachNetworkEndpoints,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.GlobalNetworkEndpointGroups/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetGlobalNetworkEndpointGroupRequest,
                google.cloud.compute.v1.compute_pb2.NetworkEndpointGroup,
            ),
            '/google.cloud.compute.v1.GlobalNetworkEndpointGroups/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertGlobalNetworkEndpointGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.GlobalNetworkEndpointGroups/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListGlobalNetworkEndpointGroupsRequest,
                google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupList,
            ),
            '/google.cloud.compute.v1.GlobalNetworkEndpointGroups/ListNetworkEndpoints': grpclib.const.Handler(
                self.ListNetworkEndpoints,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest,
                google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupsListNetworkEndpoints,
            ),
        }


class GlobalNetworkEndpointGroupsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AttachNetworkEndpoints = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalNetworkEndpointGroups/AttachNetworkEndpoints',
            google.cloud.compute.v1.compute_pb2.AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalNetworkEndpointGroups/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteGlobalNetworkEndpointGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.DetachNetworkEndpoints = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalNetworkEndpointGroups/DetachNetworkEndpoints',
            google.cloud.compute.v1.compute_pb2.DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalNetworkEndpointGroups/Get',
            google.cloud.compute.v1.compute_pb2.GetGlobalNetworkEndpointGroupRequest,
            google.cloud.compute.v1.compute_pb2.NetworkEndpointGroup,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalNetworkEndpointGroups/Insert',
            google.cloud.compute.v1.compute_pb2.InsertGlobalNetworkEndpointGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalNetworkEndpointGroups/List',
            google.cloud.compute.v1.compute_pb2.ListGlobalNetworkEndpointGroupsRequest,
            google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupList,
        )
        self.ListNetworkEndpoints = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalNetworkEndpointGroups/ListNetworkEndpoints',
            google.cloud.compute.v1.compute_pb2.ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest,
            google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupsListNetworkEndpoints,
        )


class GlobalOperationsBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListGlobalOperationsRequest, google.cloud.compute.v1.compute_pb2.OperationAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteGlobalOperationRequest, google.cloud.compute.v1.compute_pb2.DeleteGlobalOperationResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetGlobalOperationRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListGlobalOperationsRequest, google.cloud.compute.v1.compute_pb2.OperationList]') -> None:
        pass

    @abc.abstractmethod
    async def Wait(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.WaitGlobalOperationRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.GlobalOperations/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListGlobalOperationsRequest,
                google.cloud.compute.v1.compute_pb2.OperationAggregatedList,
            ),
            '/google.cloud.compute.v1.GlobalOperations/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteGlobalOperationRequest,
                google.cloud.compute.v1.compute_pb2.DeleteGlobalOperationResponse,
            ),
            '/google.cloud.compute.v1.GlobalOperations/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetGlobalOperationRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.GlobalOperations/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListGlobalOperationsRequest,
                google.cloud.compute.v1.compute_pb2.OperationList,
            ),
            '/google.cloud.compute.v1.GlobalOperations/Wait': grpclib.const.Handler(
                self.Wait,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.WaitGlobalOperationRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class GlobalOperationsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalOperations/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListGlobalOperationsRequest,
            google.cloud.compute.v1.compute_pb2.OperationAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalOperations/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteGlobalOperationRequest,
            google.cloud.compute.v1.compute_pb2.DeleteGlobalOperationResponse,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalOperations/Get',
            google.cloud.compute.v1.compute_pb2.GetGlobalOperationRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalOperations/List',
            google.cloud.compute.v1.compute_pb2.ListGlobalOperationsRequest,
            google.cloud.compute.v1.compute_pb2.OperationList,
        )
        self.Wait = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalOperations/Wait',
            google.cloud.compute.v1.compute_pb2.WaitGlobalOperationRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class GlobalOrganizationOperationsBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteGlobalOrganizationOperationRequest, google.cloud.compute.v1.compute_pb2.DeleteGlobalOrganizationOperationResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetGlobalOrganizationOperationRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListGlobalOrganizationOperationsRequest, google.cloud.compute.v1.compute_pb2.OperationList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.GlobalOrganizationOperations/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteGlobalOrganizationOperationRequest,
                google.cloud.compute.v1.compute_pb2.DeleteGlobalOrganizationOperationResponse,
            ),
            '/google.cloud.compute.v1.GlobalOrganizationOperations/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetGlobalOrganizationOperationRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.GlobalOrganizationOperations/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListGlobalOrganizationOperationsRequest,
                google.cloud.compute.v1.compute_pb2.OperationList,
            ),
        }


class GlobalOrganizationOperationsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalOrganizationOperations/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteGlobalOrganizationOperationRequest,
            google.cloud.compute.v1.compute_pb2.DeleteGlobalOrganizationOperationResponse,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalOrganizationOperations/Get',
            google.cloud.compute.v1.compute_pb2.GetGlobalOrganizationOperationRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalOrganizationOperations/List',
            google.cloud.compute.v1.compute_pb2.ListGlobalOrganizationOperationsRequest,
            google.cloud.compute.v1.compute_pb2.OperationList,
        )


class GlobalPublicDelegatedPrefixesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteGlobalPublicDelegatedPrefixeRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetGlobalPublicDelegatedPrefixeRequest, google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefix]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertGlobalPublicDelegatedPrefixeRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListGlobalPublicDelegatedPrefixesRequest, google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefixList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchGlobalPublicDelegatedPrefixeRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.GlobalPublicDelegatedPrefixes/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteGlobalPublicDelegatedPrefixeRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.GlobalPublicDelegatedPrefixes/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetGlobalPublicDelegatedPrefixeRequest,
                google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefix,
            ),
            '/google.cloud.compute.v1.GlobalPublicDelegatedPrefixes/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertGlobalPublicDelegatedPrefixeRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.GlobalPublicDelegatedPrefixes/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListGlobalPublicDelegatedPrefixesRequest,
                google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefixList,
            ),
            '/google.cloud.compute.v1.GlobalPublicDelegatedPrefixes/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchGlobalPublicDelegatedPrefixeRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class GlobalPublicDelegatedPrefixesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalPublicDelegatedPrefixes/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteGlobalPublicDelegatedPrefixeRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalPublicDelegatedPrefixes/Get',
            google.cloud.compute.v1.compute_pb2.GetGlobalPublicDelegatedPrefixeRequest,
            google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefix,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalPublicDelegatedPrefixes/Insert',
            google.cloud.compute.v1.compute_pb2.InsertGlobalPublicDelegatedPrefixeRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalPublicDelegatedPrefixes/List',
            google.cloud.compute.v1.compute_pb2.ListGlobalPublicDelegatedPrefixesRequest,
            google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefixList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.GlobalPublicDelegatedPrefixes/Patch',
            google.cloud.compute.v1.compute_pb2.PatchGlobalPublicDelegatedPrefixeRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class HealthChecksBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListHealthChecksRequest, google.cloud.compute.v1.compute_pb2.HealthChecksAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteHealthCheckRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetHealthCheckRequest, google.cloud.compute.v1.compute_pb2.HealthCheck]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertHealthCheckRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListHealthChecksRequest, google.cloud.compute.v1.compute_pb2.HealthCheckList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchHealthCheckRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Update(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateHealthCheckRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.HealthChecks/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListHealthChecksRequest,
                google.cloud.compute.v1.compute_pb2.HealthChecksAggregatedList,
            ),
            '/google.cloud.compute.v1.HealthChecks/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteHealthCheckRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.HealthChecks/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetHealthCheckRequest,
                google.cloud.compute.v1.compute_pb2.HealthCheck,
            ),
            '/google.cloud.compute.v1.HealthChecks/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertHealthCheckRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.HealthChecks/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListHealthChecksRequest,
                google.cloud.compute.v1.compute_pb2.HealthCheckList,
            ),
            '/google.cloud.compute.v1.HealthChecks/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchHealthCheckRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.HealthChecks/Update': grpclib.const.Handler(
                self.Update,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateHealthCheckRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class HealthChecksStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.HealthChecks/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListHealthChecksRequest,
            google.cloud.compute.v1.compute_pb2.HealthChecksAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.HealthChecks/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteHealthCheckRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.HealthChecks/Get',
            google.cloud.compute.v1.compute_pb2.GetHealthCheckRequest,
            google.cloud.compute.v1.compute_pb2.HealthCheck,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.HealthChecks/Insert',
            google.cloud.compute.v1.compute_pb2.InsertHealthCheckRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.HealthChecks/List',
            google.cloud.compute.v1.compute_pb2.ListHealthChecksRequest,
            google.cloud.compute.v1.compute_pb2.HealthCheckList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.HealthChecks/Patch',
            google.cloud.compute.v1.compute_pb2.PatchHealthCheckRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Update = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.HealthChecks/Update',
            google.cloud.compute.v1.compute_pb2.UpdateHealthCheckRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class ImageFamilyViewsBase(abc.ABC):

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetImageFamilyViewRequest, google.cloud.compute.v1.compute_pb2.ImageFamilyView]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.ImageFamilyViews/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetImageFamilyViewRequest,
                google.cloud.compute.v1.compute_pb2.ImageFamilyView,
            ),
        }


class ImageFamilyViewsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ImageFamilyViews/Get',
            google.cloud.compute.v1.compute_pb2.GetImageFamilyViewRequest,
            google.cloud.compute.v1.compute_pb2.ImageFamilyView,
        )


class ImagesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteImageRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Deprecate(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeprecateImageRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetImageRequest, google.cloud.compute.v1.compute_pb2.Image]') -> None:
        pass

    @abc.abstractmethod
    async def GetFromFamily(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetFromFamilyImageRequest, google.cloud.compute.v1.compute_pb2.Image]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetIamPolicyImageRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertImageRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListImagesRequest, google.cloud.compute.v1.compute_pb2.ImageList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchImageRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetIamPolicyImageRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def SetLabels(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetLabelsImageRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsImageRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Images/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteImageRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Images/Deprecate': grpclib.const.Handler(
                self.Deprecate,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeprecateImageRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Images/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetImageRequest,
                google.cloud.compute.v1.compute_pb2.Image,
            ),
            '/google.cloud.compute.v1.Images/GetFromFamily': grpclib.const.Handler(
                self.GetFromFamily,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetFromFamilyImageRequest,
                google.cloud.compute.v1.compute_pb2.Image,
            ),
            '/google.cloud.compute.v1.Images/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetIamPolicyImageRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.Images/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertImageRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Images/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListImagesRequest,
                google.cloud.compute.v1.compute_pb2.ImageList,
            ),
            '/google.cloud.compute.v1.Images/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchImageRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Images/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetIamPolicyImageRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.Images/SetLabels': grpclib.const.Handler(
                self.SetLabels,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetLabelsImageRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Images/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsImageRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class ImagesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Images/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteImageRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Deprecate = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Images/Deprecate',
            google.cloud.compute.v1.compute_pb2.DeprecateImageRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Images/Get',
            google.cloud.compute.v1.compute_pb2.GetImageRequest,
            google.cloud.compute.v1.compute_pb2.Image,
        )
        self.GetFromFamily = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Images/GetFromFamily',
            google.cloud.compute.v1.compute_pb2.GetFromFamilyImageRequest,
            google.cloud.compute.v1.compute_pb2.Image,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Images/GetIamPolicy',
            google.cloud.compute.v1.compute_pb2.GetIamPolicyImageRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Images/Insert',
            google.cloud.compute.v1.compute_pb2.InsertImageRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Images/List',
            google.cloud.compute.v1.compute_pb2.ListImagesRequest,
            google.cloud.compute.v1.compute_pb2.ImageList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Images/Patch',
            google.cloud.compute.v1.compute_pb2.PatchImageRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Images/SetIamPolicy',
            google.cloud.compute.v1.compute_pb2.SetIamPolicyImageRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.SetLabels = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Images/SetLabels',
            google.cloud.compute.v1.compute_pb2.SetLabelsImageRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Images/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsImageRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class InstanceGroupManagersBase(abc.ABC):

    @abc.abstractmethod
    async def AbandonInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AbandonInstancesInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListInstanceGroupManagersRequest, google.cloud.compute.v1.compute_pb2.InstanceGroupManagerAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def ApplyUpdatesToInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ApplyUpdatesToInstancesInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def CreateInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.CreateInstancesInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteInstancesInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DeletePerInstanceConfigs(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeletePerInstanceConfigsInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.InstanceGroupManager]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListInstanceGroupManagersRequest, google.cloud.compute.v1.compute_pb2.InstanceGroupManagerList]') -> None:
        pass

    @abc.abstractmethod
    async def ListErrors(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListErrorsInstanceGroupManagersRequest, google.cloud.compute.v1.compute_pb2.InstanceGroupManagersListErrorsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListManagedInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListManagedInstancesInstanceGroupManagersRequest, google.cloud.compute.v1.compute_pb2.InstanceGroupManagersListManagedInstancesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListPerInstanceConfigs(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListPerInstanceConfigsInstanceGroupManagersRequest, google.cloud.compute.v1.compute_pb2.InstanceGroupManagersListPerInstanceConfigsResp]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def PatchPerInstanceConfigs(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchPerInstanceConfigsInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def RecreateInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.RecreateInstancesInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Resize(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ResizeInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetInstanceTemplate(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetInstanceTemplateInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetTargetPools(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetTargetPoolsInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def UpdatePerInstanceConfigs(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdatePerInstanceConfigsInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.InstanceGroupManagers/AbandonInstances': grpclib.const.Handler(
                self.AbandonInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AbandonInstancesInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListInstanceGroupManagersRequest,
                google.cloud.compute.v1.compute_pb2.InstanceGroupManagerAggregatedList,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/ApplyUpdatesToInstances': grpclib.const.Handler(
                self.ApplyUpdatesToInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ApplyUpdatesToInstancesInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/CreateInstances': grpclib.const.Handler(
                self.CreateInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.CreateInstancesInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/DeleteInstances': grpclib.const.Handler(
                self.DeleteInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteInstancesInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/DeletePerInstanceConfigs': grpclib.const.Handler(
                self.DeletePerInstanceConfigs,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeletePerInstanceConfigsInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.InstanceGroupManager,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListInstanceGroupManagersRequest,
                google.cloud.compute.v1.compute_pb2.InstanceGroupManagerList,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/ListErrors': grpclib.const.Handler(
                self.ListErrors,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListErrorsInstanceGroupManagersRequest,
                google.cloud.compute.v1.compute_pb2.InstanceGroupManagersListErrorsResponse,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/ListManagedInstances': grpclib.const.Handler(
                self.ListManagedInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListManagedInstancesInstanceGroupManagersRequest,
                google.cloud.compute.v1.compute_pb2.InstanceGroupManagersListManagedInstancesResponse,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/ListPerInstanceConfigs': grpclib.const.Handler(
                self.ListPerInstanceConfigs,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListPerInstanceConfigsInstanceGroupManagersRequest,
                google.cloud.compute.v1.compute_pb2.InstanceGroupManagersListPerInstanceConfigsResp,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/PatchPerInstanceConfigs': grpclib.const.Handler(
                self.PatchPerInstanceConfigs,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchPerInstanceConfigsInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/RecreateInstances': grpclib.const.Handler(
                self.RecreateInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.RecreateInstancesInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/Resize': grpclib.const.Handler(
                self.Resize,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ResizeInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/SetInstanceTemplate': grpclib.const.Handler(
                self.SetInstanceTemplate,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetInstanceTemplateInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/SetTargetPools': grpclib.const.Handler(
                self.SetTargetPools,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetTargetPoolsInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroupManagers/UpdatePerInstanceConfigs': grpclib.const.Handler(
                self.UpdatePerInstanceConfigs,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdatePerInstanceConfigsInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class InstanceGroupManagersStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AbandonInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/AbandonInstances',
            google.cloud.compute.v1.compute_pb2.AbandonInstancesInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListInstanceGroupManagersRequest,
            google.cloud.compute.v1.compute_pb2.InstanceGroupManagerAggregatedList,
        )
        self.ApplyUpdatesToInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/ApplyUpdatesToInstances',
            google.cloud.compute.v1.compute_pb2.ApplyUpdatesToInstancesInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.CreateInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/CreateInstances',
            google.cloud.compute.v1.compute_pb2.CreateInstancesInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.DeleteInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/DeleteInstances',
            google.cloud.compute.v1.compute_pb2.DeleteInstancesInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.DeletePerInstanceConfigs = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/DeletePerInstanceConfigs',
            google.cloud.compute.v1.compute_pb2.DeletePerInstanceConfigsInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/Get',
            google.cloud.compute.v1.compute_pb2.GetInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.InstanceGroupManager,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/Insert',
            google.cloud.compute.v1.compute_pb2.InsertInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/List',
            google.cloud.compute.v1.compute_pb2.ListInstanceGroupManagersRequest,
            google.cloud.compute.v1.compute_pb2.InstanceGroupManagerList,
        )
        self.ListErrors = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/ListErrors',
            google.cloud.compute.v1.compute_pb2.ListErrorsInstanceGroupManagersRequest,
            google.cloud.compute.v1.compute_pb2.InstanceGroupManagersListErrorsResponse,
        )
        self.ListManagedInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/ListManagedInstances',
            google.cloud.compute.v1.compute_pb2.ListManagedInstancesInstanceGroupManagersRequest,
            google.cloud.compute.v1.compute_pb2.InstanceGroupManagersListManagedInstancesResponse,
        )
        self.ListPerInstanceConfigs = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/ListPerInstanceConfigs',
            google.cloud.compute.v1.compute_pb2.ListPerInstanceConfigsInstanceGroupManagersRequest,
            google.cloud.compute.v1.compute_pb2.InstanceGroupManagersListPerInstanceConfigsResp,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/Patch',
            google.cloud.compute.v1.compute_pb2.PatchInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.PatchPerInstanceConfigs = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/PatchPerInstanceConfigs',
            google.cloud.compute.v1.compute_pb2.PatchPerInstanceConfigsInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.RecreateInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/RecreateInstances',
            google.cloud.compute.v1.compute_pb2.RecreateInstancesInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Resize = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/Resize',
            google.cloud.compute.v1.compute_pb2.ResizeInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetInstanceTemplate = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/SetInstanceTemplate',
            google.cloud.compute.v1.compute_pb2.SetInstanceTemplateInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetTargetPools = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/SetTargetPools',
            google.cloud.compute.v1.compute_pb2.SetTargetPoolsInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.UpdatePerInstanceConfigs = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroupManagers/UpdatePerInstanceConfigs',
            google.cloud.compute.v1.compute_pb2.UpdatePerInstanceConfigsInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class InstanceGroupsBase(abc.ABC):

    @abc.abstractmethod
    async def AddInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AddInstancesInstanceGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListInstanceGroupsRequest, google.cloud.compute.v1.compute_pb2.InstanceGroupAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteInstanceGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetInstanceGroupRequest, google.cloud.compute.v1.compute_pb2.InstanceGroup]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertInstanceGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListInstanceGroupsRequest, google.cloud.compute.v1.compute_pb2.InstanceGroupList]') -> None:
        pass

    @abc.abstractmethod
    async def ListInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListInstancesInstanceGroupsRequest, google.cloud.compute.v1.compute_pb2.InstanceGroupsListInstances]') -> None:
        pass

    @abc.abstractmethod
    async def RemoveInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.RemoveInstancesInstanceGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetNamedPorts(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetNamedPortsInstanceGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.InstanceGroups/AddInstances': grpclib.const.Handler(
                self.AddInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AddInstancesInstanceGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroups/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListInstanceGroupsRequest,
                google.cloud.compute.v1.compute_pb2.InstanceGroupAggregatedList,
            ),
            '/google.cloud.compute.v1.InstanceGroups/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteInstanceGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroups/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetInstanceGroupRequest,
                google.cloud.compute.v1.compute_pb2.InstanceGroup,
            ),
            '/google.cloud.compute.v1.InstanceGroups/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertInstanceGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroups/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListInstanceGroupsRequest,
                google.cloud.compute.v1.compute_pb2.InstanceGroupList,
            ),
            '/google.cloud.compute.v1.InstanceGroups/ListInstances': grpclib.const.Handler(
                self.ListInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListInstancesInstanceGroupsRequest,
                google.cloud.compute.v1.compute_pb2.InstanceGroupsListInstances,
            ),
            '/google.cloud.compute.v1.InstanceGroups/RemoveInstances': grpclib.const.Handler(
                self.RemoveInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.RemoveInstancesInstanceGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceGroups/SetNamedPorts': grpclib.const.Handler(
                self.SetNamedPorts,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetNamedPortsInstanceGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class InstanceGroupsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AddInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroups/AddInstances',
            google.cloud.compute.v1.compute_pb2.AddInstancesInstanceGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroups/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListInstanceGroupsRequest,
            google.cloud.compute.v1.compute_pb2.InstanceGroupAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroups/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteInstanceGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroups/Get',
            google.cloud.compute.v1.compute_pb2.GetInstanceGroupRequest,
            google.cloud.compute.v1.compute_pb2.InstanceGroup,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroups/Insert',
            google.cloud.compute.v1.compute_pb2.InsertInstanceGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroups/List',
            google.cloud.compute.v1.compute_pb2.ListInstanceGroupsRequest,
            google.cloud.compute.v1.compute_pb2.InstanceGroupList,
        )
        self.ListInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroups/ListInstances',
            google.cloud.compute.v1.compute_pb2.ListInstancesInstanceGroupsRequest,
            google.cloud.compute.v1.compute_pb2.InstanceGroupsListInstances,
        )
        self.RemoveInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroups/RemoveInstances',
            google.cloud.compute.v1.compute_pb2.RemoveInstancesInstanceGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetNamedPorts = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceGroups/SetNamedPorts',
            google.cloud.compute.v1.compute_pb2.SetNamedPortsInstanceGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class InstanceTemplatesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteInstanceTemplateRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetInstanceTemplateRequest, google.cloud.compute.v1.compute_pb2.InstanceTemplate]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetIamPolicyInstanceTemplateRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertInstanceTemplateRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListInstanceTemplatesRequest, google.cloud.compute.v1.compute_pb2.InstanceTemplateList]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetIamPolicyInstanceTemplateRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsInstanceTemplateRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.InstanceTemplates/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteInstanceTemplateRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceTemplates/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetInstanceTemplateRequest,
                google.cloud.compute.v1.compute_pb2.InstanceTemplate,
            ),
            '/google.cloud.compute.v1.InstanceTemplates/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetIamPolicyInstanceTemplateRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.InstanceTemplates/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertInstanceTemplateRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InstanceTemplates/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListInstanceTemplatesRequest,
                google.cloud.compute.v1.compute_pb2.InstanceTemplateList,
            ),
            '/google.cloud.compute.v1.InstanceTemplates/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetIamPolicyInstanceTemplateRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.InstanceTemplates/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsInstanceTemplateRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class InstanceTemplatesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceTemplates/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteInstanceTemplateRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceTemplates/Get',
            google.cloud.compute.v1.compute_pb2.GetInstanceTemplateRequest,
            google.cloud.compute.v1.compute_pb2.InstanceTemplate,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceTemplates/GetIamPolicy',
            google.cloud.compute.v1.compute_pb2.GetIamPolicyInstanceTemplateRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceTemplates/Insert',
            google.cloud.compute.v1.compute_pb2.InsertInstanceTemplateRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceTemplates/List',
            google.cloud.compute.v1.compute_pb2.ListInstanceTemplatesRequest,
            google.cloud.compute.v1.compute_pb2.InstanceTemplateList,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceTemplates/SetIamPolicy',
            google.cloud.compute.v1.compute_pb2.SetIamPolicyInstanceTemplateRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InstanceTemplates/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsInstanceTemplateRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class InstancesBase(abc.ABC):

    @abc.abstractmethod
    async def AddAccessConfig(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AddAccessConfigInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def AddResourcePolicies(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AddResourcePoliciesInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListInstancesRequest, google.cloud.compute.v1.compute_pb2.InstanceAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def AttachDisk(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AttachDiskInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def BulkInsert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.BulkInsertInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteAccessConfig(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteAccessConfigInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DetachDisk(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DetachDiskInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetInstanceRequest, google.cloud.compute.v1.compute_pb2.Instance]') -> None:
        pass

    @abc.abstractmethod
    async def GetEffectiveFirewalls(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetEffectiveFirewallsInstanceRequest, google.cloud.compute.v1.compute_pb2.InstancesGetEffectiveFirewallsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetGuestAttributes(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetGuestAttributesInstanceRequest, google.cloud.compute.v1.compute_pb2.GuestAttributes]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetIamPolicyInstanceRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def GetScreenshot(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetScreenshotInstanceRequest, google.cloud.compute.v1.compute_pb2.Screenshot]') -> None:
        pass

    @abc.abstractmethod
    async def GetSerialPortOutput(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetSerialPortOutputInstanceRequest, google.cloud.compute.v1.compute_pb2.SerialPortOutput]') -> None:
        pass

    @abc.abstractmethod
    async def GetShieldedInstanceIdentity(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetShieldedInstanceIdentityInstanceRequest, google.cloud.compute.v1.compute_pb2.ShieldedInstanceIdentity]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListInstancesRequest, google.cloud.compute.v1.compute_pb2.InstanceList]') -> None:
        pass

    @abc.abstractmethod
    async def ListReferrers(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListReferrersInstancesRequest, google.cloud.compute.v1.compute_pb2.InstanceListReferrers]') -> None:
        pass

    @abc.abstractmethod
    async def RemoveResourcePolicies(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.RemoveResourcePoliciesInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Reset(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ResetInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SendDiagnosticInterrupt(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SendDiagnosticInterruptInstanceRequest, google.cloud.compute.v1.compute_pb2.SendDiagnosticInterruptInstanceResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SetDeletionProtection(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetDeletionProtectionInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetDiskAutoDelete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetDiskAutoDeleteInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetIamPolicyInstanceRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def SetLabels(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetLabelsInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetMachineResources(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetMachineResourcesInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetMachineType(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetMachineTypeInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetMetadata(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetMetadataInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetMinCpuPlatform(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetMinCpuPlatformInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetScheduling(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetSchedulingInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetServiceAccount(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetServiceAccountInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetShieldedInstanceIntegrityPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetShieldedInstanceIntegrityPolicyInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetTags(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetTagsInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SimulateMaintenanceEvent(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SimulateMaintenanceEventInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Start(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.StartInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def StartWithEncryptionKey(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.StartWithEncryptionKeyInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Stop(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.StopInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsInstanceRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Update(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateAccessConfig(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateAccessConfigInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateDisplayDevice(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateDisplayDeviceInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateNetworkInterface(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateNetworkInterfaceInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateShieldedInstanceConfig(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateShieldedInstanceConfigInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Instances/AddAccessConfig': grpclib.const.Handler(
                self.AddAccessConfig,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AddAccessConfigInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/AddResourcePolicies': grpclib.const.Handler(
                self.AddResourcePolicies,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AddResourcePoliciesInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListInstancesRequest,
                google.cloud.compute.v1.compute_pb2.InstanceAggregatedList,
            ),
            '/google.cloud.compute.v1.Instances/AttachDisk': grpclib.const.Handler(
                self.AttachDisk,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AttachDiskInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/BulkInsert': grpclib.const.Handler(
                self.BulkInsert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.BulkInsertInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/DeleteAccessConfig': grpclib.const.Handler(
                self.DeleteAccessConfig,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteAccessConfigInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/DetachDisk': grpclib.const.Handler(
                self.DetachDisk,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DetachDiskInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Instance,
            ),
            '/google.cloud.compute.v1.Instances/GetEffectiveFirewalls': grpclib.const.Handler(
                self.GetEffectiveFirewalls,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetEffectiveFirewallsInstanceRequest,
                google.cloud.compute.v1.compute_pb2.InstancesGetEffectiveFirewallsResponse,
            ),
            '/google.cloud.compute.v1.Instances/GetGuestAttributes': grpclib.const.Handler(
                self.GetGuestAttributes,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetGuestAttributesInstanceRequest,
                google.cloud.compute.v1.compute_pb2.GuestAttributes,
            ),
            '/google.cloud.compute.v1.Instances/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetIamPolicyInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.Instances/GetScreenshot': grpclib.const.Handler(
                self.GetScreenshot,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetScreenshotInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Screenshot,
            ),
            '/google.cloud.compute.v1.Instances/GetSerialPortOutput': grpclib.const.Handler(
                self.GetSerialPortOutput,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetSerialPortOutputInstanceRequest,
                google.cloud.compute.v1.compute_pb2.SerialPortOutput,
            ),
            '/google.cloud.compute.v1.Instances/GetShieldedInstanceIdentity': grpclib.const.Handler(
                self.GetShieldedInstanceIdentity,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetShieldedInstanceIdentityInstanceRequest,
                google.cloud.compute.v1.compute_pb2.ShieldedInstanceIdentity,
            ),
            '/google.cloud.compute.v1.Instances/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListInstancesRequest,
                google.cloud.compute.v1.compute_pb2.InstanceList,
            ),
            '/google.cloud.compute.v1.Instances/ListReferrers': grpclib.const.Handler(
                self.ListReferrers,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListReferrersInstancesRequest,
                google.cloud.compute.v1.compute_pb2.InstanceListReferrers,
            ),
            '/google.cloud.compute.v1.Instances/RemoveResourcePolicies': grpclib.const.Handler(
                self.RemoveResourcePolicies,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.RemoveResourcePoliciesInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/Reset': grpclib.const.Handler(
                self.Reset,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ResetInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/SendDiagnosticInterrupt': grpclib.const.Handler(
                self.SendDiagnosticInterrupt,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SendDiagnosticInterruptInstanceRequest,
                google.cloud.compute.v1.compute_pb2.SendDiagnosticInterruptInstanceResponse,
            ),
            '/google.cloud.compute.v1.Instances/SetDeletionProtection': grpclib.const.Handler(
                self.SetDeletionProtection,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetDeletionProtectionInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/SetDiskAutoDelete': grpclib.const.Handler(
                self.SetDiskAutoDelete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetDiskAutoDeleteInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetIamPolicyInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.Instances/SetLabels': grpclib.const.Handler(
                self.SetLabels,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetLabelsInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/SetMachineResources': grpclib.const.Handler(
                self.SetMachineResources,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetMachineResourcesInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/SetMachineType': grpclib.const.Handler(
                self.SetMachineType,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetMachineTypeInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/SetMetadata': grpclib.const.Handler(
                self.SetMetadata,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetMetadataInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/SetMinCpuPlatform': grpclib.const.Handler(
                self.SetMinCpuPlatform,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetMinCpuPlatformInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/SetScheduling': grpclib.const.Handler(
                self.SetScheduling,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetSchedulingInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/SetServiceAccount': grpclib.const.Handler(
                self.SetServiceAccount,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetServiceAccountInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/SetShieldedInstanceIntegrityPolicy': grpclib.const.Handler(
                self.SetShieldedInstanceIntegrityPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetShieldedInstanceIntegrityPolicyInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/SetTags': grpclib.const.Handler(
                self.SetTags,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetTagsInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/SimulateMaintenanceEvent': grpclib.const.Handler(
                self.SimulateMaintenanceEvent,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SimulateMaintenanceEventInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/Start': grpclib.const.Handler(
                self.Start,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.StartInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/StartWithEncryptionKey': grpclib.const.Handler(
                self.StartWithEncryptionKey,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.StartWithEncryptionKeyInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/Stop': grpclib.const.Handler(
                self.Stop,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.StopInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsInstanceRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
            '/google.cloud.compute.v1.Instances/Update': grpclib.const.Handler(
                self.Update,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/UpdateAccessConfig': grpclib.const.Handler(
                self.UpdateAccessConfig,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateAccessConfigInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/UpdateDisplayDevice': grpclib.const.Handler(
                self.UpdateDisplayDevice,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateDisplayDeviceInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/UpdateNetworkInterface': grpclib.const.Handler(
                self.UpdateNetworkInterface,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateNetworkInterfaceInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Instances/UpdateShieldedInstanceConfig': grpclib.const.Handler(
                self.UpdateShieldedInstanceConfig,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateShieldedInstanceConfigInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class InstancesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AddAccessConfig = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/AddAccessConfig',
            google.cloud.compute.v1.compute_pb2.AddAccessConfigInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.AddResourcePolicies = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/AddResourcePolicies',
            google.cloud.compute.v1.compute_pb2.AddResourcePoliciesInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListInstancesRequest,
            google.cloud.compute.v1.compute_pb2.InstanceAggregatedList,
        )
        self.AttachDisk = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/AttachDisk',
            google.cloud.compute.v1.compute_pb2.AttachDiskInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.BulkInsert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/BulkInsert',
            google.cloud.compute.v1.compute_pb2.BulkInsertInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.DeleteAccessConfig = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/DeleteAccessConfig',
            google.cloud.compute.v1.compute_pb2.DeleteAccessConfigInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.DetachDisk = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/DetachDisk',
            google.cloud.compute.v1.compute_pb2.DetachDiskInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/Get',
            google.cloud.compute.v1.compute_pb2.GetInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Instance,
        )
        self.GetEffectiveFirewalls = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/GetEffectiveFirewalls',
            google.cloud.compute.v1.compute_pb2.GetEffectiveFirewallsInstanceRequest,
            google.cloud.compute.v1.compute_pb2.InstancesGetEffectiveFirewallsResponse,
        )
        self.GetGuestAttributes = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/GetGuestAttributes',
            google.cloud.compute.v1.compute_pb2.GetGuestAttributesInstanceRequest,
            google.cloud.compute.v1.compute_pb2.GuestAttributes,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/GetIamPolicy',
            google.cloud.compute.v1.compute_pb2.GetIamPolicyInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.GetScreenshot = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/GetScreenshot',
            google.cloud.compute.v1.compute_pb2.GetScreenshotInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Screenshot,
        )
        self.GetSerialPortOutput = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/GetSerialPortOutput',
            google.cloud.compute.v1.compute_pb2.GetSerialPortOutputInstanceRequest,
            google.cloud.compute.v1.compute_pb2.SerialPortOutput,
        )
        self.GetShieldedInstanceIdentity = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/GetShieldedInstanceIdentity',
            google.cloud.compute.v1.compute_pb2.GetShieldedInstanceIdentityInstanceRequest,
            google.cloud.compute.v1.compute_pb2.ShieldedInstanceIdentity,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/Insert',
            google.cloud.compute.v1.compute_pb2.InsertInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/List',
            google.cloud.compute.v1.compute_pb2.ListInstancesRequest,
            google.cloud.compute.v1.compute_pb2.InstanceList,
        )
        self.ListReferrers = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/ListReferrers',
            google.cloud.compute.v1.compute_pb2.ListReferrersInstancesRequest,
            google.cloud.compute.v1.compute_pb2.InstanceListReferrers,
        )
        self.RemoveResourcePolicies = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/RemoveResourcePolicies',
            google.cloud.compute.v1.compute_pb2.RemoveResourcePoliciesInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Reset = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/Reset',
            google.cloud.compute.v1.compute_pb2.ResetInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SendDiagnosticInterrupt = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/SendDiagnosticInterrupt',
            google.cloud.compute.v1.compute_pb2.SendDiagnosticInterruptInstanceRequest,
            google.cloud.compute.v1.compute_pb2.SendDiagnosticInterruptInstanceResponse,
        )
        self.SetDeletionProtection = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/SetDeletionProtection',
            google.cloud.compute.v1.compute_pb2.SetDeletionProtectionInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetDiskAutoDelete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/SetDiskAutoDelete',
            google.cloud.compute.v1.compute_pb2.SetDiskAutoDeleteInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/SetIamPolicy',
            google.cloud.compute.v1.compute_pb2.SetIamPolicyInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.SetLabels = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/SetLabels',
            google.cloud.compute.v1.compute_pb2.SetLabelsInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetMachineResources = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/SetMachineResources',
            google.cloud.compute.v1.compute_pb2.SetMachineResourcesInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetMachineType = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/SetMachineType',
            google.cloud.compute.v1.compute_pb2.SetMachineTypeInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetMetadata = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/SetMetadata',
            google.cloud.compute.v1.compute_pb2.SetMetadataInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetMinCpuPlatform = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/SetMinCpuPlatform',
            google.cloud.compute.v1.compute_pb2.SetMinCpuPlatformInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetScheduling = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/SetScheduling',
            google.cloud.compute.v1.compute_pb2.SetSchedulingInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetServiceAccount = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/SetServiceAccount',
            google.cloud.compute.v1.compute_pb2.SetServiceAccountInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetShieldedInstanceIntegrityPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/SetShieldedInstanceIntegrityPolicy',
            google.cloud.compute.v1.compute_pb2.SetShieldedInstanceIntegrityPolicyInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetTags = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/SetTags',
            google.cloud.compute.v1.compute_pb2.SetTagsInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SimulateMaintenanceEvent = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/SimulateMaintenanceEvent',
            google.cloud.compute.v1.compute_pb2.SimulateMaintenanceEventInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Start = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/Start',
            google.cloud.compute.v1.compute_pb2.StartInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.StartWithEncryptionKey = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/StartWithEncryptionKey',
            google.cloud.compute.v1.compute_pb2.StartWithEncryptionKeyInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Stop = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/Stop',
            google.cloud.compute.v1.compute_pb2.StopInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsInstanceRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )
        self.Update = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/Update',
            google.cloud.compute.v1.compute_pb2.UpdateInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.UpdateAccessConfig = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/UpdateAccessConfig',
            google.cloud.compute.v1.compute_pb2.UpdateAccessConfigInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.UpdateDisplayDevice = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/UpdateDisplayDevice',
            google.cloud.compute.v1.compute_pb2.UpdateDisplayDeviceInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.UpdateNetworkInterface = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/UpdateNetworkInterface',
            google.cloud.compute.v1.compute_pb2.UpdateNetworkInterfaceInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.UpdateShieldedInstanceConfig = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Instances/UpdateShieldedInstanceConfig',
            google.cloud.compute.v1.compute_pb2.UpdateShieldedInstanceConfigInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class InterconnectAttachmentsBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListInterconnectAttachmentsRequest, google.cloud.compute.v1.compute_pb2.InterconnectAttachmentAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteInterconnectAttachmentRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetInterconnectAttachmentRequest, google.cloud.compute.v1.compute_pb2.InterconnectAttachment]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertInterconnectAttachmentRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListInterconnectAttachmentsRequest, google.cloud.compute.v1.compute_pb2.InterconnectAttachmentList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchInterconnectAttachmentRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.InterconnectAttachments/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListInterconnectAttachmentsRequest,
                google.cloud.compute.v1.compute_pb2.InterconnectAttachmentAggregatedList,
            ),
            '/google.cloud.compute.v1.InterconnectAttachments/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteInterconnectAttachmentRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InterconnectAttachments/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetInterconnectAttachmentRequest,
                google.cloud.compute.v1.compute_pb2.InterconnectAttachment,
            ),
            '/google.cloud.compute.v1.InterconnectAttachments/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertInterconnectAttachmentRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.InterconnectAttachments/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListInterconnectAttachmentsRequest,
                google.cloud.compute.v1.compute_pb2.InterconnectAttachmentList,
            ),
            '/google.cloud.compute.v1.InterconnectAttachments/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchInterconnectAttachmentRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class InterconnectAttachmentsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InterconnectAttachments/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListInterconnectAttachmentsRequest,
            google.cloud.compute.v1.compute_pb2.InterconnectAttachmentAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InterconnectAttachments/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteInterconnectAttachmentRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InterconnectAttachments/Get',
            google.cloud.compute.v1.compute_pb2.GetInterconnectAttachmentRequest,
            google.cloud.compute.v1.compute_pb2.InterconnectAttachment,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InterconnectAttachments/Insert',
            google.cloud.compute.v1.compute_pb2.InsertInterconnectAttachmentRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InterconnectAttachments/List',
            google.cloud.compute.v1.compute_pb2.ListInterconnectAttachmentsRequest,
            google.cloud.compute.v1.compute_pb2.InterconnectAttachmentList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InterconnectAttachments/Patch',
            google.cloud.compute.v1.compute_pb2.PatchInterconnectAttachmentRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class InterconnectLocationsBase(abc.ABC):

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetInterconnectLocationRequest, google.cloud.compute.v1.compute_pb2.InterconnectLocation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListInterconnectLocationsRequest, google.cloud.compute.v1.compute_pb2.InterconnectLocationList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.InterconnectLocations/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetInterconnectLocationRequest,
                google.cloud.compute.v1.compute_pb2.InterconnectLocation,
            ),
            '/google.cloud.compute.v1.InterconnectLocations/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListInterconnectLocationsRequest,
                google.cloud.compute.v1.compute_pb2.InterconnectLocationList,
            ),
        }


class InterconnectLocationsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InterconnectLocations/Get',
            google.cloud.compute.v1.compute_pb2.GetInterconnectLocationRequest,
            google.cloud.compute.v1.compute_pb2.InterconnectLocation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.InterconnectLocations/List',
            google.cloud.compute.v1.compute_pb2.ListInterconnectLocationsRequest,
            google.cloud.compute.v1.compute_pb2.InterconnectLocationList,
        )


class InterconnectsBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteInterconnectRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetInterconnectRequest, google.cloud.compute.v1.compute_pb2.Interconnect]') -> None:
        pass

    @abc.abstractmethod
    async def GetDiagnostics(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetDiagnosticsInterconnectRequest, google.cloud.compute.v1.compute_pb2.InterconnectsGetDiagnosticsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertInterconnectRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListInterconnectsRequest, google.cloud.compute.v1.compute_pb2.InterconnectList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchInterconnectRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Interconnects/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteInterconnectRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Interconnects/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetInterconnectRequest,
                google.cloud.compute.v1.compute_pb2.Interconnect,
            ),
            '/google.cloud.compute.v1.Interconnects/GetDiagnostics': grpclib.const.Handler(
                self.GetDiagnostics,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetDiagnosticsInterconnectRequest,
                google.cloud.compute.v1.compute_pb2.InterconnectsGetDiagnosticsResponse,
            ),
            '/google.cloud.compute.v1.Interconnects/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertInterconnectRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Interconnects/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListInterconnectsRequest,
                google.cloud.compute.v1.compute_pb2.InterconnectList,
            ),
            '/google.cloud.compute.v1.Interconnects/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchInterconnectRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class InterconnectsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Interconnects/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteInterconnectRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Interconnects/Get',
            google.cloud.compute.v1.compute_pb2.GetInterconnectRequest,
            google.cloud.compute.v1.compute_pb2.Interconnect,
        )
        self.GetDiagnostics = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Interconnects/GetDiagnostics',
            google.cloud.compute.v1.compute_pb2.GetDiagnosticsInterconnectRequest,
            google.cloud.compute.v1.compute_pb2.InterconnectsGetDiagnosticsResponse,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Interconnects/Insert',
            google.cloud.compute.v1.compute_pb2.InsertInterconnectRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Interconnects/List',
            google.cloud.compute.v1.compute_pb2.ListInterconnectsRequest,
            google.cloud.compute.v1.compute_pb2.InterconnectList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Interconnects/Patch',
            google.cloud.compute.v1.compute_pb2.PatchInterconnectRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class LicenseCodesBase(abc.ABC):

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetLicenseCodeRequest, google.cloud.compute.v1.compute_pb2.LicenseCode]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsLicenseCodeRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.LicenseCodes/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetLicenseCodeRequest,
                google.cloud.compute.v1.compute_pb2.LicenseCode,
            ),
            '/google.cloud.compute.v1.LicenseCodes/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsLicenseCodeRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class LicenseCodesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.LicenseCodes/Get',
            google.cloud.compute.v1.compute_pb2.GetLicenseCodeRequest,
            google.cloud.compute.v1.compute_pb2.LicenseCode,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.LicenseCodes/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsLicenseCodeRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class LicensesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteLicenseRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetLicenseRequest, google.cloud.compute.v1.compute_pb2.License]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetIamPolicyLicenseRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertLicenseRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListLicensesRequest, google.cloud.compute.v1.compute_pb2.LicensesListResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetIamPolicyLicenseRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsLicenseRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Licenses/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteLicenseRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Licenses/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetLicenseRequest,
                google.cloud.compute.v1.compute_pb2.License,
            ),
            '/google.cloud.compute.v1.Licenses/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetIamPolicyLicenseRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.Licenses/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertLicenseRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Licenses/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListLicensesRequest,
                google.cloud.compute.v1.compute_pb2.LicensesListResponse,
            ),
            '/google.cloud.compute.v1.Licenses/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetIamPolicyLicenseRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.Licenses/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsLicenseRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class LicensesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Licenses/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteLicenseRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Licenses/Get',
            google.cloud.compute.v1.compute_pb2.GetLicenseRequest,
            google.cloud.compute.v1.compute_pb2.License,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Licenses/GetIamPolicy',
            google.cloud.compute.v1.compute_pb2.GetIamPolicyLicenseRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Licenses/Insert',
            google.cloud.compute.v1.compute_pb2.InsertLicenseRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Licenses/List',
            google.cloud.compute.v1.compute_pb2.ListLicensesRequest,
            google.cloud.compute.v1.compute_pb2.LicensesListResponse,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Licenses/SetIamPolicy',
            google.cloud.compute.v1.compute_pb2.SetIamPolicyLicenseRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Licenses/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsLicenseRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class MachineTypesBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListMachineTypesRequest, google.cloud.compute.v1.compute_pb2.MachineTypeAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetMachineTypeRequest, google.cloud.compute.v1.compute_pb2.MachineType]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListMachineTypesRequest, google.cloud.compute.v1.compute_pb2.MachineTypeList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.MachineTypes/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListMachineTypesRequest,
                google.cloud.compute.v1.compute_pb2.MachineTypeAggregatedList,
            ),
            '/google.cloud.compute.v1.MachineTypes/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetMachineTypeRequest,
                google.cloud.compute.v1.compute_pb2.MachineType,
            ),
            '/google.cloud.compute.v1.MachineTypes/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListMachineTypesRequest,
                google.cloud.compute.v1.compute_pb2.MachineTypeList,
            ),
        }


class MachineTypesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.MachineTypes/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListMachineTypesRequest,
            google.cloud.compute.v1.compute_pb2.MachineTypeAggregatedList,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.MachineTypes/Get',
            google.cloud.compute.v1.compute_pb2.GetMachineTypeRequest,
            google.cloud.compute.v1.compute_pb2.MachineType,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.MachineTypes/List',
            google.cloud.compute.v1.compute_pb2.ListMachineTypesRequest,
            google.cloud.compute.v1.compute_pb2.MachineTypeList,
        )


class NetworkEndpointGroupsBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListNetworkEndpointGroupsRequest, google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def AttachNetworkEndpoints(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AttachNetworkEndpointsNetworkEndpointGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteNetworkEndpointGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DetachNetworkEndpoints(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DetachNetworkEndpointsNetworkEndpointGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetNetworkEndpointGroupRequest, google.cloud.compute.v1.compute_pb2.NetworkEndpointGroup]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertNetworkEndpointGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListNetworkEndpointGroupsRequest, google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupList]') -> None:
        pass

    @abc.abstractmethod
    async def ListNetworkEndpoints(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListNetworkEndpointsNetworkEndpointGroupsRequest, google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupsListNetworkEndpoints]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsNetworkEndpointGroupRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.NetworkEndpointGroups/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListNetworkEndpointGroupsRequest,
                google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupAggregatedList,
            ),
            '/google.cloud.compute.v1.NetworkEndpointGroups/AttachNetworkEndpoints': grpclib.const.Handler(
                self.AttachNetworkEndpoints,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AttachNetworkEndpointsNetworkEndpointGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.NetworkEndpointGroups/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteNetworkEndpointGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.NetworkEndpointGroups/DetachNetworkEndpoints': grpclib.const.Handler(
                self.DetachNetworkEndpoints,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DetachNetworkEndpointsNetworkEndpointGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.NetworkEndpointGroups/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetNetworkEndpointGroupRequest,
                google.cloud.compute.v1.compute_pb2.NetworkEndpointGroup,
            ),
            '/google.cloud.compute.v1.NetworkEndpointGroups/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertNetworkEndpointGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.NetworkEndpointGroups/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListNetworkEndpointGroupsRequest,
                google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupList,
            ),
            '/google.cloud.compute.v1.NetworkEndpointGroups/ListNetworkEndpoints': grpclib.const.Handler(
                self.ListNetworkEndpoints,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListNetworkEndpointsNetworkEndpointGroupsRequest,
                google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupsListNetworkEndpoints,
            ),
            '/google.cloud.compute.v1.NetworkEndpointGroups/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsNetworkEndpointGroupRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class NetworkEndpointGroupsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NetworkEndpointGroups/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListNetworkEndpointGroupsRequest,
            google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupAggregatedList,
        )
        self.AttachNetworkEndpoints = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NetworkEndpointGroups/AttachNetworkEndpoints',
            google.cloud.compute.v1.compute_pb2.AttachNetworkEndpointsNetworkEndpointGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NetworkEndpointGroups/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteNetworkEndpointGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.DetachNetworkEndpoints = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NetworkEndpointGroups/DetachNetworkEndpoints',
            google.cloud.compute.v1.compute_pb2.DetachNetworkEndpointsNetworkEndpointGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NetworkEndpointGroups/Get',
            google.cloud.compute.v1.compute_pb2.GetNetworkEndpointGroupRequest,
            google.cloud.compute.v1.compute_pb2.NetworkEndpointGroup,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NetworkEndpointGroups/Insert',
            google.cloud.compute.v1.compute_pb2.InsertNetworkEndpointGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NetworkEndpointGroups/List',
            google.cloud.compute.v1.compute_pb2.ListNetworkEndpointGroupsRequest,
            google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupList,
        )
        self.ListNetworkEndpoints = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NetworkEndpointGroups/ListNetworkEndpoints',
            google.cloud.compute.v1.compute_pb2.ListNetworkEndpointsNetworkEndpointGroupsRequest,
            google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupsListNetworkEndpoints,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NetworkEndpointGroups/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsNetworkEndpointGroupRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class NetworksBase(abc.ABC):

    @abc.abstractmethod
    async def AddPeering(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AddPeeringNetworkRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteNetworkRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetNetworkRequest, google.cloud.compute.v1.compute_pb2.Network]') -> None:
        pass

    @abc.abstractmethod
    async def GetEffectiveFirewalls(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetEffectiveFirewallsNetworkRequest, google.cloud.compute.v1.compute_pb2.NetworksGetEffectiveFirewallsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertNetworkRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListNetworksRequest, google.cloud.compute.v1.compute_pb2.NetworkList]') -> None:
        pass

    @abc.abstractmethod
    async def ListPeeringRoutes(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListPeeringRoutesNetworksRequest, google.cloud.compute.v1.compute_pb2.ExchangedPeeringRoutesList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchNetworkRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def RemovePeering(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.RemovePeeringNetworkRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SwitchToCustomMode(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SwitchToCustomModeNetworkRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def UpdatePeering(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdatePeeringNetworkRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Networks/AddPeering': grpclib.const.Handler(
                self.AddPeering,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AddPeeringNetworkRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Networks/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteNetworkRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Networks/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetNetworkRequest,
                google.cloud.compute.v1.compute_pb2.Network,
            ),
            '/google.cloud.compute.v1.Networks/GetEffectiveFirewalls': grpclib.const.Handler(
                self.GetEffectiveFirewalls,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetEffectiveFirewallsNetworkRequest,
                google.cloud.compute.v1.compute_pb2.NetworksGetEffectiveFirewallsResponse,
            ),
            '/google.cloud.compute.v1.Networks/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertNetworkRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Networks/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListNetworksRequest,
                google.cloud.compute.v1.compute_pb2.NetworkList,
            ),
            '/google.cloud.compute.v1.Networks/ListPeeringRoutes': grpclib.const.Handler(
                self.ListPeeringRoutes,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListPeeringRoutesNetworksRequest,
                google.cloud.compute.v1.compute_pb2.ExchangedPeeringRoutesList,
            ),
            '/google.cloud.compute.v1.Networks/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchNetworkRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Networks/RemovePeering': grpclib.const.Handler(
                self.RemovePeering,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.RemovePeeringNetworkRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Networks/SwitchToCustomMode': grpclib.const.Handler(
                self.SwitchToCustomMode,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SwitchToCustomModeNetworkRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Networks/UpdatePeering': grpclib.const.Handler(
                self.UpdatePeering,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdatePeeringNetworkRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class NetworksStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AddPeering = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Networks/AddPeering',
            google.cloud.compute.v1.compute_pb2.AddPeeringNetworkRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Networks/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteNetworkRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Networks/Get',
            google.cloud.compute.v1.compute_pb2.GetNetworkRequest,
            google.cloud.compute.v1.compute_pb2.Network,
        )
        self.GetEffectiveFirewalls = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Networks/GetEffectiveFirewalls',
            google.cloud.compute.v1.compute_pb2.GetEffectiveFirewallsNetworkRequest,
            google.cloud.compute.v1.compute_pb2.NetworksGetEffectiveFirewallsResponse,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Networks/Insert',
            google.cloud.compute.v1.compute_pb2.InsertNetworkRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Networks/List',
            google.cloud.compute.v1.compute_pb2.ListNetworksRequest,
            google.cloud.compute.v1.compute_pb2.NetworkList,
        )
        self.ListPeeringRoutes = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Networks/ListPeeringRoutes',
            google.cloud.compute.v1.compute_pb2.ListPeeringRoutesNetworksRequest,
            google.cloud.compute.v1.compute_pb2.ExchangedPeeringRoutesList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Networks/Patch',
            google.cloud.compute.v1.compute_pb2.PatchNetworkRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.RemovePeering = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Networks/RemovePeering',
            google.cloud.compute.v1.compute_pb2.RemovePeeringNetworkRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SwitchToCustomMode = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Networks/SwitchToCustomMode',
            google.cloud.compute.v1.compute_pb2.SwitchToCustomModeNetworkRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.UpdatePeering = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Networks/UpdatePeering',
            google.cloud.compute.v1.compute_pb2.UpdatePeeringNetworkRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class NodeGroupsBase(abc.ABC):

    @abc.abstractmethod
    async def AddNodes(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AddNodesNodeGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListNodeGroupsRequest, google.cloud.compute.v1.compute_pb2.NodeGroupAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteNodeGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteNodes(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteNodesNodeGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetNodeGroupRequest, google.cloud.compute.v1.compute_pb2.NodeGroup]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetIamPolicyNodeGroupRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertNodeGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListNodeGroupsRequest, google.cloud.compute.v1.compute_pb2.NodeGroupList]') -> None:
        pass

    @abc.abstractmethod
    async def ListNodes(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListNodesNodeGroupsRequest, google.cloud.compute.v1.compute_pb2.NodeGroupsListNodes]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchNodeGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetIamPolicyNodeGroupRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def SetNodeTemplate(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetNodeTemplateNodeGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsNodeGroupRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.NodeGroups/AddNodes': grpclib.const.Handler(
                self.AddNodes,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AddNodesNodeGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.NodeGroups/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListNodeGroupsRequest,
                google.cloud.compute.v1.compute_pb2.NodeGroupAggregatedList,
            ),
            '/google.cloud.compute.v1.NodeGroups/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteNodeGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.NodeGroups/DeleteNodes': grpclib.const.Handler(
                self.DeleteNodes,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteNodesNodeGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.NodeGroups/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetNodeGroupRequest,
                google.cloud.compute.v1.compute_pb2.NodeGroup,
            ),
            '/google.cloud.compute.v1.NodeGroups/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetIamPolicyNodeGroupRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.NodeGroups/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertNodeGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.NodeGroups/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListNodeGroupsRequest,
                google.cloud.compute.v1.compute_pb2.NodeGroupList,
            ),
            '/google.cloud.compute.v1.NodeGroups/ListNodes': grpclib.const.Handler(
                self.ListNodes,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListNodesNodeGroupsRequest,
                google.cloud.compute.v1.compute_pb2.NodeGroupsListNodes,
            ),
            '/google.cloud.compute.v1.NodeGroups/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchNodeGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.NodeGroups/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetIamPolicyNodeGroupRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.NodeGroups/SetNodeTemplate': grpclib.const.Handler(
                self.SetNodeTemplate,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetNodeTemplateNodeGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.NodeGroups/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsNodeGroupRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class NodeGroupsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AddNodes = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeGroups/AddNodes',
            google.cloud.compute.v1.compute_pb2.AddNodesNodeGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeGroups/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListNodeGroupsRequest,
            google.cloud.compute.v1.compute_pb2.NodeGroupAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeGroups/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteNodeGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.DeleteNodes = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeGroups/DeleteNodes',
            google.cloud.compute.v1.compute_pb2.DeleteNodesNodeGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeGroups/Get',
            google.cloud.compute.v1.compute_pb2.GetNodeGroupRequest,
            google.cloud.compute.v1.compute_pb2.NodeGroup,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeGroups/GetIamPolicy',
            google.cloud.compute.v1.compute_pb2.GetIamPolicyNodeGroupRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeGroups/Insert',
            google.cloud.compute.v1.compute_pb2.InsertNodeGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeGroups/List',
            google.cloud.compute.v1.compute_pb2.ListNodeGroupsRequest,
            google.cloud.compute.v1.compute_pb2.NodeGroupList,
        )
        self.ListNodes = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeGroups/ListNodes',
            google.cloud.compute.v1.compute_pb2.ListNodesNodeGroupsRequest,
            google.cloud.compute.v1.compute_pb2.NodeGroupsListNodes,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeGroups/Patch',
            google.cloud.compute.v1.compute_pb2.PatchNodeGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeGroups/SetIamPolicy',
            google.cloud.compute.v1.compute_pb2.SetIamPolicyNodeGroupRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.SetNodeTemplate = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeGroups/SetNodeTemplate',
            google.cloud.compute.v1.compute_pb2.SetNodeTemplateNodeGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeGroups/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsNodeGroupRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class NodeTemplatesBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListNodeTemplatesRequest, google.cloud.compute.v1.compute_pb2.NodeTemplateAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteNodeTemplateRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetNodeTemplateRequest, google.cloud.compute.v1.compute_pb2.NodeTemplate]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetIamPolicyNodeTemplateRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertNodeTemplateRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListNodeTemplatesRequest, google.cloud.compute.v1.compute_pb2.NodeTemplateList]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetIamPolicyNodeTemplateRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsNodeTemplateRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.NodeTemplates/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListNodeTemplatesRequest,
                google.cloud.compute.v1.compute_pb2.NodeTemplateAggregatedList,
            ),
            '/google.cloud.compute.v1.NodeTemplates/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteNodeTemplateRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.NodeTemplates/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetNodeTemplateRequest,
                google.cloud.compute.v1.compute_pb2.NodeTemplate,
            ),
            '/google.cloud.compute.v1.NodeTemplates/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetIamPolicyNodeTemplateRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.NodeTemplates/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertNodeTemplateRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.NodeTemplates/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListNodeTemplatesRequest,
                google.cloud.compute.v1.compute_pb2.NodeTemplateList,
            ),
            '/google.cloud.compute.v1.NodeTemplates/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetIamPolicyNodeTemplateRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.NodeTemplates/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsNodeTemplateRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class NodeTemplatesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeTemplates/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListNodeTemplatesRequest,
            google.cloud.compute.v1.compute_pb2.NodeTemplateAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeTemplates/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteNodeTemplateRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeTemplates/Get',
            google.cloud.compute.v1.compute_pb2.GetNodeTemplateRequest,
            google.cloud.compute.v1.compute_pb2.NodeTemplate,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeTemplates/GetIamPolicy',
            google.cloud.compute.v1.compute_pb2.GetIamPolicyNodeTemplateRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeTemplates/Insert',
            google.cloud.compute.v1.compute_pb2.InsertNodeTemplateRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeTemplates/List',
            google.cloud.compute.v1.compute_pb2.ListNodeTemplatesRequest,
            google.cloud.compute.v1.compute_pb2.NodeTemplateList,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeTemplates/SetIamPolicy',
            google.cloud.compute.v1.compute_pb2.SetIamPolicyNodeTemplateRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeTemplates/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsNodeTemplateRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class NodeTypesBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListNodeTypesRequest, google.cloud.compute.v1.compute_pb2.NodeTypeAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetNodeTypeRequest, google.cloud.compute.v1.compute_pb2.NodeType]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListNodeTypesRequest, google.cloud.compute.v1.compute_pb2.NodeTypeList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.NodeTypes/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListNodeTypesRequest,
                google.cloud.compute.v1.compute_pb2.NodeTypeAggregatedList,
            ),
            '/google.cloud.compute.v1.NodeTypes/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetNodeTypeRequest,
                google.cloud.compute.v1.compute_pb2.NodeType,
            ),
            '/google.cloud.compute.v1.NodeTypes/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListNodeTypesRequest,
                google.cloud.compute.v1.compute_pb2.NodeTypeList,
            ),
        }


class NodeTypesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeTypes/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListNodeTypesRequest,
            google.cloud.compute.v1.compute_pb2.NodeTypeAggregatedList,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeTypes/Get',
            google.cloud.compute.v1.compute_pb2.GetNodeTypeRequest,
            google.cloud.compute.v1.compute_pb2.NodeType,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.NodeTypes/List',
            google.cloud.compute.v1.compute_pb2.ListNodeTypesRequest,
            google.cloud.compute.v1.compute_pb2.NodeTypeList,
        )


class PacketMirroringsBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListPacketMirroringsRequest, google.cloud.compute.v1.compute_pb2.PacketMirroringAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeletePacketMirroringRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetPacketMirroringRequest, google.cloud.compute.v1.compute_pb2.PacketMirroring]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertPacketMirroringRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListPacketMirroringsRequest, google.cloud.compute.v1.compute_pb2.PacketMirroringList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchPacketMirroringRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsPacketMirroringRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.PacketMirrorings/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListPacketMirroringsRequest,
                google.cloud.compute.v1.compute_pb2.PacketMirroringAggregatedList,
            ),
            '/google.cloud.compute.v1.PacketMirrorings/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeletePacketMirroringRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.PacketMirrorings/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetPacketMirroringRequest,
                google.cloud.compute.v1.compute_pb2.PacketMirroring,
            ),
            '/google.cloud.compute.v1.PacketMirrorings/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertPacketMirroringRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.PacketMirrorings/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListPacketMirroringsRequest,
                google.cloud.compute.v1.compute_pb2.PacketMirroringList,
            ),
            '/google.cloud.compute.v1.PacketMirrorings/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchPacketMirroringRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.PacketMirrorings/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsPacketMirroringRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class PacketMirroringsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PacketMirrorings/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListPacketMirroringsRequest,
            google.cloud.compute.v1.compute_pb2.PacketMirroringAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PacketMirrorings/Delete',
            google.cloud.compute.v1.compute_pb2.DeletePacketMirroringRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PacketMirrorings/Get',
            google.cloud.compute.v1.compute_pb2.GetPacketMirroringRequest,
            google.cloud.compute.v1.compute_pb2.PacketMirroring,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PacketMirrorings/Insert',
            google.cloud.compute.v1.compute_pb2.InsertPacketMirroringRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PacketMirrorings/List',
            google.cloud.compute.v1.compute_pb2.ListPacketMirroringsRequest,
            google.cloud.compute.v1.compute_pb2.PacketMirroringList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PacketMirrorings/Patch',
            google.cloud.compute.v1.compute_pb2.PatchPacketMirroringRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PacketMirrorings/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsPacketMirroringRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class ProjectsBase(abc.ABC):

    @abc.abstractmethod
    async def DisableXpnHost(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DisableXpnHostProjectRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DisableXpnResource(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DisableXpnResourceProjectRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def EnableXpnHost(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.EnableXpnHostProjectRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def EnableXpnResource(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.EnableXpnResourceProjectRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetProjectRequest, google.cloud.compute.v1.compute_pb2.Project]') -> None:
        pass

    @abc.abstractmethod
    async def GetXpnHost(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetXpnHostProjectRequest, google.cloud.compute.v1.compute_pb2.Project]') -> None:
        pass

    @abc.abstractmethod
    async def GetXpnResources(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetXpnResourcesProjectsRequest, google.cloud.compute.v1.compute_pb2.ProjectsGetXpnResources]') -> None:
        pass

    @abc.abstractmethod
    async def ListXpnHosts(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListXpnHostsProjectsRequest, google.cloud.compute.v1.compute_pb2.XpnHostList]') -> None:
        pass

    @abc.abstractmethod
    async def MoveDisk(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.MoveDiskProjectRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def MoveInstance(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.MoveInstanceProjectRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetCommonInstanceMetadata(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetCommonInstanceMetadataProjectRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetDefaultNetworkTier(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetDefaultNetworkTierProjectRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetUsageExportBucket(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetUsageExportBucketProjectRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Projects/DisableXpnHost': grpclib.const.Handler(
                self.DisableXpnHost,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DisableXpnHostProjectRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Projects/DisableXpnResource': grpclib.const.Handler(
                self.DisableXpnResource,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DisableXpnResourceProjectRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Projects/EnableXpnHost': grpclib.const.Handler(
                self.EnableXpnHost,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.EnableXpnHostProjectRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Projects/EnableXpnResource': grpclib.const.Handler(
                self.EnableXpnResource,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.EnableXpnResourceProjectRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Projects/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetProjectRequest,
                google.cloud.compute.v1.compute_pb2.Project,
            ),
            '/google.cloud.compute.v1.Projects/GetXpnHost': grpclib.const.Handler(
                self.GetXpnHost,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetXpnHostProjectRequest,
                google.cloud.compute.v1.compute_pb2.Project,
            ),
            '/google.cloud.compute.v1.Projects/GetXpnResources': grpclib.const.Handler(
                self.GetXpnResources,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetXpnResourcesProjectsRequest,
                google.cloud.compute.v1.compute_pb2.ProjectsGetXpnResources,
            ),
            '/google.cloud.compute.v1.Projects/ListXpnHosts': grpclib.const.Handler(
                self.ListXpnHosts,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListXpnHostsProjectsRequest,
                google.cloud.compute.v1.compute_pb2.XpnHostList,
            ),
            '/google.cloud.compute.v1.Projects/MoveDisk': grpclib.const.Handler(
                self.MoveDisk,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.MoveDiskProjectRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Projects/MoveInstance': grpclib.const.Handler(
                self.MoveInstance,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.MoveInstanceProjectRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Projects/SetCommonInstanceMetadata': grpclib.const.Handler(
                self.SetCommonInstanceMetadata,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetCommonInstanceMetadataProjectRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Projects/SetDefaultNetworkTier': grpclib.const.Handler(
                self.SetDefaultNetworkTier,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetDefaultNetworkTierProjectRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Projects/SetUsageExportBucket': grpclib.const.Handler(
                self.SetUsageExportBucket,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetUsageExportBucketProjectRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class ProjectsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.DisableXpnHost = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Projects/DisableXpnHost',
            google.cloud.compute.v1.compute_pb2.DisableXpnHostProjectRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.DisableXpnResource = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Projects/DisableXpnResource',
            google.cloud.compute.v1.compute_pb2.DisableXpnResourceProjectRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.EnableXpnHost = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Projects/EnableXpnHost',
            google.cloud.compute.v1.compute_pb2.EnableXpnHostProjectRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.EnableXpnResource = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Projects/EnableXpnResource',
            google.cloud.compute.v1.compute_pb2.EnableXpnResourceProjectRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Projects/Get',
            google.cloud.compute.v1.compute_pb2.GetProjectRequest,
            google.cloud.compute.v1.compute_pb2.Project,
        )
        self.GetXpnHost = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Projects/GetXpnHost',
            google.cloud.compute.v1.compute_pb2.GetXpnHostProjectRequest,
            google.cloud.compute.v1.compute_pb2.Project,
        )
        self.GetXpnResources = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Projects/GetXpnResources',
            google.cloud.compute.v1.compute_pb2.GetXpnResourcesProjectsRequest,
            google.cloud.compute.v1.compute_pb2.ProjectsGetXpnResources,
        )
        self.ListXpnHosts = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Projects/ListXpnHosts',
            google.cloud.compute.v1.compute_pb2.ListXpnHostsProjectsRequest,
            google.cloud.compute.v1.compute_pb2.XpnHostList,
        )
        self.MoveDisk = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Projects/MoveDisk',
            google.cloud.compute.v1.compute_pb2.MoveDiskProjectRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.MoveInstance = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Projects/MoveInstance',
            google.cloud.compute.v1.compute_pb2.MoveInstanceProjectRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetCommonInstanceMetadata = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Projects/SetCommonInstanceMetadata',
            google.cloud.compute.v1.compute_pb2.SetCommonInstanceMetadataProjectRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetDefaultNetworkTier = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Projects/SetDefaultNetworkTier',
            google.cloud.compute.v1.compute_pb2.SetDefaultNetworkTierProjectRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetUsageExportBucket = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Projects/SetUsageExportBucket',
            google.cloud.compute.v1.compute_pb2.SetUsageExportBucketProjectRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class PublicAdvertisedPrefixesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeletePublicAdvertisedPrefixeRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetPublicAdvertisedPrefixeRequest, google.cloud.compute.v1.compute_pb2.PublicAdvertisedPrefix]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertPublicAdvertisedPrefixeRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListPublicAdvertisedPrefixesRequest, google.cloud.compute.v1.compute_pb2.PublicAdvertisedPrefixList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchPublicAdvertisedPrefixeRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.PublicAdvertisedPrefixes/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeletePublicAdvertisedPrefixeRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.PublicAdvertisedPrefixes/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetPublicAdvertisedPrefixeRequest,
                google.cloud.compute.v1.compute_pb2.PublicAdvertisedPrefix,
            ),
            '/google.cloud.compute.v1.PublicAdvertisedPrefixes/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertPublicAdvertisedPrefixeRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.PublicAdvertisedPrefixes/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListPublicAdvertisedPrefixesRequest,
                google.cloud.compute.v1.compute_pb2.PublicAdvertisedPrefixList,
            ),
            '/google.cloud.compute.v1.PublicAdvertisedPrefixes/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchPublicAdvertisedPrefixeRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class PublicAdvertisedPrefixesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PublicAdvertisedPrefixes/Delete',
            google.cloud.compute.v1.compute_pb2.DeletePublicAdvertisedPrefixeRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PublicAdvertisedPrefixes/Get',
            google.cloud.compute.v1.compute_pb2.GetPublicAdvertisedPrefixeRequest,
            google.cloud.compute.v1.compute_pb2.PublicAdvertisedPrefix,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PublicAdvertisedPrefixes/Insert',
            google.cloud.compute.v1.compute_pb2.InsertPublicAdvertisedPrefixeRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PublicAdvertisedPrefixes/List',
            google.cloud.compute.v1.compute_pb2.ListPublicAdvertisedPrefixesRequest,
            google.cloud.compute.v1.compute_pb2.PublicAdvertisedPrefixList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PublicAdvertisedPrefixes/Patch',
            google.cloud.compute.v1.compute_pb2.PatchPublicAdvertisedPrefixeRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class PublicDelegatedPrefixesBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListPublicDelegatedPrefixesRequest, google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefixAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeletePublicDelegatedPrefixeRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetPublicDelegatedPrefixeRequest, google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefix]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertPublicDelegatedPrefixeRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListPublicDelegatedPrefixesRequest, google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefixList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchPublicDelegatedPrefixeRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.PublicDelegatedPrefixes/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListPublicDelegatedPrefixesRequest,
                google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefixAggregatedList,
            ),
            '/google.cloud.compute.v1.PublicDelegatedPrefixes/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeletePublicDelegatedPrefixeRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.PublicDelegatedPrefixes/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetPublicDelegatedPrefixeRequest,
                google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefix,
            ),
            '/google.cloud.compute.v1.PublicDelegatedPrefixes/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertPublicDelegatedPrefixeRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.PublicDelegatedPrefixes/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListPublicDelegatedPrefixesRequest,
                google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefixList,
            ),
            '/google.cloud.compute.v1.PublicDelegatedPrefixes/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchPublicDelegatedPrefixeRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class PublicDelegatedPrefixesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PublicDelegatedPrefixes/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListPublicDelegatedPrefixesRequest,
            google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefixAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PublicDelegatedPrefixes/Delete',
            google.cloud.compute.v1.compute_pb2.DeletePublicDelegatedPrefixeRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PublicDelegatedPrefixes/Get',
            google.cloud.compute.v1.compute_pb2.GetPublicDelegatedPrefixeRequest,
            google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefix,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PublicDelegatedPrefixes/Insert',
            google.cloud.compute.v1.compute_pb2.InsertPublicDelegatedPrefixeRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PublicDelegatedPrefixes/List',
            google.cloud.compute.v1.compute_pb2.ListPublicDelegatedPrefixesRequest,
            google.cloud.compute.v1.compute_pb2.PublicDelegatedPrefixList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.PublicDelegatedPrefixes/Patch',
            google.cloud.compute.v1.compute_pb2.PatchPublicDelegatedPrefixeRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class RegionAutoscalersBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRegionAutoscalerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionAutoscalerRequest, google.cloud.compute.v1.compute_pb2.Autoscaler]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRegionAutoscalerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionAutoscalersRequest, google.cloud.compute.v1.compute_pb2.RegionAutoscalerList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchRegionAutoscalerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Update(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateRegionAutoscalerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionAutoscalers/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRegionAutoscalerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionAutoscalers/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionAutoscalerRequest,
                google.cloud.compute.v1.compute_pb2.Autoscaler,
            ),
            '/google.cloud.compute.v1.RegionAutoscalers/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRegionAutoscalerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionAutoscalers/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionAutoscalersRequest,
                google.cloud.compute.v1.compute_pb2.RegionAutoscalerList,
            ),
            '/google.cloud.compute.v1.RegionAutoscalers/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchRegionAutoscalerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionAutoscalers/Update': grpclib.const.Handler(
                self.Update,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateRegionAutoscalerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class RegionAutoscalersStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionAutoscalers/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRegionAutoscalerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionAutoscalers/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionAutoscalerRequest,
            google.cloud.compute.v1.compute_pb2.Autoscaler,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionAutoscalers/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRegionAutoscalerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionAutoscalers/List',
            google.cloud.compute.v1.compute_pb2.ListRegionAutoscalersRequest,
            google.cloud.compute.v1.compute_pb2.RegionAutoscalerList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionAutoscalers/Patch',
            google.cloud.compute.v1.compute_pb2.PatchRegionAutoscalerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Update = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionAutoscalers/Update',
            google.cloud.compute.v1.compute_pb2.UpdateRegionAutoscalerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class RegionBackendServicesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRegionBackendServiceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionBackendServiceRequest, google.cloud.compute.v1.compute_pb2.BackendService]') -> None:
        pass

    @abc.abstractmethod
    async def GetHealth(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetHealthRegionBackendServiceRequest, google.cloud.compute.v1.compute_pb2.BackendServiceGroupHealth]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRegionBackendServiceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionBackendServicesRequest, google.cloud.compute.v1.compute_pb2.BackendServiceList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchRegionBackendServiceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Update(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateRegionBackendServiceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionBackendServices/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRegionBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionBackendServices/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.BackendService,
            ),
            '/google.cloud.compute.v1.RegionBackendServices/GetHealth': grpclib.const.Handler(
                self.GetHealth,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetHealthRegionBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.BackendServiceGroupHealth,
            ),
            '/google.cloud.compute.v1.RegionBackendServices/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRegionBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionBackendServices/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionBackendServicesRequest,
                google.cloud.compute.v1.compute_pb2.BackendServiceList,
            ),
            '/google.cloud.compute.v1.RegionBackendServices/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchRegionBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionBackendServices/Update': grpclib.const.Handler(
                self.Update,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateRegionBackendServiceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class RegionBackendServicesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionBackendServices/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRegionBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionBackendServices/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.BackendService,
        )
        self.GetHealth = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionBackendServices/GetHealth',
            google.cloud.compute.v1.compute_pb2.GetHealthRegionBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.BackendServiceGroupHealth,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionBackendServices/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRegionBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionBackendServices/List',
            google.cloud.compute.v1.compute_pb2.ListRegionBackendServicesRequest,
            google.cloud.compute.v1.compute_pb2.BackendServiceList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionBackendServices/Patch',
            google.cloud.compute.v1.compute_pb2.PatchRegionBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Update = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionBackendServices/Update',
            google.cloud.compute.v1.compute_pb2.UpdateRegionBackendServiceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class RegionCommitmentsBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListRegionCommitmentsRequest, google.cloud.compute.v1.compute_pb2.CommitmentAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionCommitmentRequest, google.cloud.compute.v1.compute_pb2.Commitment]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRegionCommitmentRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionCommitmentsRequest, google.cloud.compute.v1.compute_pb2.CommitmentList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionCommitments/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListRegionCommitmentsRequest,
                google.cloud.compute.v1.compute_pb2.CommitmentAggregatedList,
            ),
            '/google.cloud.compute.v1.RegionCommitments/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionCommitmentRequest,
                google.cloud.compute.v1.compute_pb2.Commitment,
            ),
            '/google.cloud.compute.v1.RegionCommitments/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRegionCommitmentRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionCommitments/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionCommitmentsRequest,
                google.cloud.compute.v1.compute_pb2.CommitmentList,
            ),
        }


class RegionCommitmentsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionCommitments/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListRegionCommitmentsRequest,
            google.cloud.compute.v1.compute_pb2.CommitmentAggregatedList,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionCommitments/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionCommitmentRequest,
            google.cloud.compute.v1.compute_pb2.Commitment,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionCommitments/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRegionCommitmentRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionCommitments/List',
            google.cloud.compute.v1.compute_pb2.ListRegionCommitmentsRequest,
            google.cloud.compute.v1.compute_pb2.CommitmentList,
        )


class RegionDiskTypesBase(abc.ABC):

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionDiskTypeRequest, google.cloud.compute.v1.compute_pb2.DiskType]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionDiskTypesRequest, google.cloud.compute.v1.compute_pb2.RegionDiskTypeList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionDiskTypes/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionDiskTypeRequest,
                google.cloud.compute.v1.compute_pb2.DiskType,
            ),
            '/google.cloud.compute.v1.RegionDiskTypes/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionDiskTypesRequest,
                google.cloud.compute.v1.compute_pb2.RegionDiskTypeList,
            ),
        }


class RegionDiskTypesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionDiskTypes/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionDiskTypeRequest,
            google.cloud.compute.v1.compute_pb2.DiskType,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionDiskTypes/List',
            google.cloud.compute.v1.compute_pb2.ListRegionDiskTypesRequest,
            google.cloud.compute.v1.compute_pb2.RegionDiskTypeList,
        )


class RegionDisksBase(abc.ABC):

    @abc.abstractmethod
    async def AddResourcePolicies(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AddResourcePoliciesRegionDiskRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def CreateSnapshot(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.CreateSnapshotRegionDiskRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRegionDiskRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionDiskRequest, google.cloud.compute.v1.compute_pb2.Disk]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetIamPolicyRegionDiskRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRegionDiskRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionDisksRequest, google.cloud.compute.v1.compute_pb2.DiskList]') -> None:
        pass

    @abc.abstractmethod
    async def RemoveResourcePolicies(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.RemoveResourcePoliciesRegionDiskRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Resize(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ResizeRegionDiskRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetIamPolicyRegionDiskRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def SetLabels(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetLabelsRegionDiskRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsRegionDiskRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionDisks/AddResourcePolicies': grpclib.const.Handler(
                self.AddResourcePolicies,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AddResourcePoliciesRegionDiskRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionDisks/CreateSnapshot': grpclib.const.Handler(
                self.CreateSnapshot,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.CreateSnapshotRegionDiskRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionDisks/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRegionDiskRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionDisks/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionDiskRequest,
                google.cloud.compute.v1.compute_pb2.Disk,
            ),
            '/google.cloud.compute.v1.RegionDisks/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetIamPolicyRegionDiskRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.RegionDisks/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRegionDiskRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionDisks/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionDisksRequest,
                google.cloud.compute.v1.compute_pb2.DiskList,
            ),
            '/google.cloud.compute.v1.RegionDisks/RemoveResourcePolicies': grpclib.const.Handler(
                self.RemoveResourcePolicies,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.RemoveResourcePoliciesRegionDiskRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionDisks/Resize': grpclib.const.Handler(
                self.Resize,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ResizeRegionDiskRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionDisks/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetIamPolicyRegionDiskRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.RegionDisks/SetLabels': grpclib.const.Handler(
                self.SetLabels,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetLabelsRegionDiskRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionDisks/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsRegionDiskRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class RegionDisksStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AddResourcePolicies = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionDisks/AddResourcePolicies',
            google.cloud.compute.v1.compute_pb2.AddResourcePoliciesRegionDiskRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.CreateSnapshot = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionDisks/CreateSnapshot',
            google.cloud.compute.v1.compute_pb2.CreateSnapshotRegionDiskRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionDisks/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRegionDiskRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionDisks/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionDiskRequest,
            google.cloud.compute.v1.compute_pb2.Disk,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionDisks/GetIamPolicy',
            google.cloud.compute.v1.compute_pb2.GetIamPolicyRegionDiskRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionDisks/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRegionDiskRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionDisks/List',
            google.cloud.compute.v1.compute_pb2.ListRegionDisksRequest,
            google.cloud.compute.v1.compute_pb2.DiskList,
        )
        self.RemoveResourcePolicies = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionDisks/RemoveResourcePolicies',
            google.cloud.compute.v1.compute_pb2.RemoveResourcePoliciesRegionDiskRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Resize = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionDisks/Resize',
            google.cloud.compute.v1.compute_pb2.ResizeRegionDiskRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionDisks/SetIamPolicy',
            google.cloud.compute.v1.compute_pb2.SetIamPolicyRegionDiskRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.SetLabels = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionDisks/SetLabels',
            google.cloud.compute.v1.compute_pb2.SetLabelsRegionDiskRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionDisks/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsRegionDiskRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class RegionHealthCheckServicesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRegionHealthCheckServiceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionHealthCheckServiceRequest, google.cloud.compute.v1.compute_pb2.HealthCheckService]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRegionHealthCheckServiceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionHealthCheckServicesRequest, google.cloud.compute.v1.compute_pb2.HealthCheckServicesList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchRegionHealthCheckServiceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionHealthCheckServices/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRegionHealthCheckServiceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionHealthCheckServices/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionHealthCheckServiceRequest,
                google.cloud.compute.v1.compute_pb2.HealthCheckService,
            ),
            '/google.cloud.compute.v1.RegionHealthCheckServices/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRegionHealthCheckServiceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionHealthCheckServices/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionHealthCheckServicesRequest,
                google.cloud.compute.v1.compute_pb2.HealthCheckServicesList,
            ),
            '/google.cloud.compute.v1.RegionHealthCheckServices/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchRegionHealthCheckServiceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class RegionHealthCheckServicesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionHealthCheckServices/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRegionHealthCheckServiceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionHealthCheckServices/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionHealthCheckServiceRequest,
            google.cloud.compute.v1.compute_pb2.HealthCheckService,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionHealthCheckServices/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRegionHealthCheckServiceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionHealthCheckServices/List',
            google.cloud.compute.v1.compute_pb2.ListRegionHealthCheckServicesRequest,
            google.cloud.compute.v1.compute_pb2.HealthCheckServicesList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionHealthCheckServices/Patch',
            google.cloud.compute.v1.compute_pb2.PatchRegionHealthCheckServiceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class RegionHealthChecksBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRegionHealthCheckRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionHealthCheckRequest, google.cloud.compute.v1.compute_pb2.HealthCheck]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRegionHealthCheckRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionHealthChecksRequest, google.cloud.compute.v1.compute_pb2.HealthCheckList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchRegionHealthCheckRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Update(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateRegionHealthCheckRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionHealthChecks/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRegionHealthCheckRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionHealthChecks/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionHealthCheckRequest,
                google.cloud.compute.v1.compute_pb2.HealthCheck,
            ),
            '/google.cloud.compute.v1.RegionHealthChecks/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRegionHealthCheckRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionHealthChecks/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionHealthChecksRequest,
                google.cloud.compute.v1.compute_pb2.HealthCheckList,
            ),
            '/google.cloud.compute.v1.RegionHealthChecks/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchRegionHealthCheckRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionHealthChecks/Update': grpclib.const.Handler(
                self.Update,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateRegionHealthCheckRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class RegionHealthChecksStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionHealthChecks/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRegionHealthCheckRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionHealthChecks/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionHealthCheckRequest,
            google.cloud.compute.v1.compute_pb2.HealthCheck,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionHealthChecks/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRegionHealthCheckRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionHealthChecks/List',
            google.cloud.compute.v1.compute_pb2.ListRegionHealthChecksRequest,
            google.cloud.compute.v1.compute_pb2.HealthCheckList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionHealthChecks/Patch',
            google.cloud.compute.v1.compute_pb2.PatchRegionHealthCheckRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Update = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionHealthChecks/Update',
            google.cloud.compute.v1.compute_pb2.UpdateRegionHealthCheckRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class RegionInstanceGroupManagersBase(abc.ABC):

    @abc.abstractmethod
    async def AbandonInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AbandonInstancesRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def ApplyUpdatesToInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def CreateInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.CreateInstancesRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteInstancesRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DeletePerInstanceConfigs(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeletePerInstanceConfigsRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.InstanceGroupManager]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionInstanceGroupManagersRequest, google.cloud.compute.v1.compute_pb2.RegionInstanceGroupManagerList]') -> None:
        pass

    @abc.abstractmethod
    async def ListErrors(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListErrorsRegionInstanceGroupManagersRequest, google.cloud.compute.v1.compute_pb2.RegionInstanceGroupManagersListErrorsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListManagedInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListManagedInstancesRegionInstanceGroupManagersRequest, google.cloud.compute.v1.compute_pb2.RegionInstanceGroupManagersListInstancesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListPerInstanceConfigs(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListPerInstanceConfigsRegionInstanceGroupManagersRequest, google.cloud.compute.v1.compute_pb2.RegionInstanceGroupManagersListInstanceConfigsResp]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def PatchPerInstanceConfigs(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchPerInstanceConfigsRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def RecreateInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.RecreateInstancesRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Resize(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ResizeRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetInstanceTemplate(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetInstanceTemplateRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetTargetPools(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetTargetPoolsRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def UpdatePerInstanceConfigs(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/AbandonInstances': grpclib.const.Handler(
                self.AbandonInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AbandonInstancesRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/ApplyUpdatesToInstances': grpclib.const.Handler(
                self.ApplyUpdatesToInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/CreateInstances': grpclib.const.Handler(
                self.CreateInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.CreateInstancesRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/DeleteInstances': grpclib.const.Handler(
                self.DeleteInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteInstancesRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/DeletePerInstanceConfigs': grpclib.const.Handler(
                self.DeletePerInstanceConfigs,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeletePerInstanceConfigsRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.InstanceGroupManager,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionInstanceGroupManagersRequest,
                google.cloud.compute.v1.compute_pb2.RegionInstanceGroupManagerList,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/ListErrors': grpclib.const.Handler(
                self.ListErrors,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListErrorsRegionInstanceGroupManagersRequest,
                google.cloud.compute.v1.compute_pb2.RegionInstanceGroupManagersListErrorsResponse,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/ListManagedInstances': grpclib.const.Handler(
                self.ListManagedInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListManagedInstancesRegionInstanceGroupManagersRequest,
                google.cloud.compute.v1.compute_pb2.RegionInstanceGroupManagersListInstancesResponse,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/ListPerInstanceConfigs': grpclib.const.Handler(
                self.ListPerInstanceConfigs,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListPerInstanceConfigsRegionInstanceGroupManagersRequest,
                google.cloud.compute.v1.compute_pb2.RegionInstanceGroupManagersListInstanceConfigsResp,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/PatchPerInstanceConfigs': grpclib.const.Handler(
                self.PatchPerInstanceConfigs,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchPerInstanceConfigsRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/RecreateInstances': grpclib.const.Handler(
                self.RecreateInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.RecreateInstancesRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/Resize': grpclib.const.Handler(
                self.Resize,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ResizeRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/SetInstanceTemplate': grpclib.const.Handler(
                self.SetInstanceTemplate,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetInstanceTemplateRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/SetTargetPools': grpclib.const.Handler(
                self.SetTargetPools,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetTargetPoolsRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/UpdatePerInstanceConfigs': grpclib.const.Handler(
                self.UpdatePerInstanceConfigs,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class RegionInstanceGroupManagersStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AbandonInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/AbandonInstances',
            google.cloud.compute.v1.compute_pb2.AbandonInstancesRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.ApplyUpdatesToInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/ApplyUpdatesToInstances',
            google.cloud.compute.v1.compute_pb2.ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.CreateInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/CreateInstances',
            google.cloud.compute.v1.compute_pb2.CreateInstancesRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.DeleteInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/DeleteInstances',
            google.cloud.compute.v1.compute_pb2.DeleteInstancesRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.DeletePerInstanceConfigs = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/DeletePerInstanceConfigs',
            google.cloud.compute.v1.compute_pb2.DeletePerInstanceConfigsRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.InstanceGroupManager,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/List',
            google.cloud.compute.v1.compute_pb2.ListRegionInstanceGroupManagersRequest,
            google.cloud.compute.v1.compute_pb2.RegionInstanceGroupManagerList,
        )
        self.ListErrors = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/ListErrors',
            google.cloud.compute.v1.compute_pb2.ListErrorsRegionInstanceGroupManagersRequest,
            google.cloud.compute.v1.compute_pb2.RegionInstanceGroupManagersListErrorsResponse,
        )
        self.ListManagedInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/ListManagedInstances',
            google.cloud.compute.v1.compute_pb2.ListManagedInstancesRegionInstanceGroupManagersRequest,
            google.cloud.compute.v1.compute_pb2.RegionInstanceGroupManagersListInstancesResponse,
        )
        self.ListPerInstanceConfigs = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/ListPerInstanceConfigs',
            google.cloud.compute.v1.compute_pb2.ListPerInstanceConfigsRegionInstanceGroupManagersRequest,
            google.cloud.compute.v1.compute_pb2.RegionInstanceGroupManagersListInstanceConfigsResp,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/Patch',
            google.cloud.compute.v1.compute_pb2.PatchRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.PatchPerInstanceConfigs = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/PatchPerInstanceConfigs',
            google.cloud.compute.v1.compute_pb2.PatchPerInstanceConfigsRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.RecreateInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/RecreateInstances',
            google.cloud.compute.v1.compute_pb2.RecreateInstancesRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Resize = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/Resize',
            google.cloud.compute.v1.compute_pb2.ResizeRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetInstanceTemplate = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/SetInstanceTemplate',
            google.cloud.compute.v1.compute_pb2.SetInstanceTemplateRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetTargetPools = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/SetTargetPools',
            google.cloud.compute.v1.compute_pb2.SetTargetPoolsRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.UpdatePerInstanceConfigs = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroupManagers/UpdatePerInstanceConfigs',
            google.cloud.compute.v1.compute_pb2.UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class RegionInstanceGroupsBase(abc.ABC):

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionInstanceGroupRequest, google.cloud.compute.v1.compute_pb2.InstanceGroup]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionInstanceGroupsRequest, google.cloud.compute.v1.compute_pb2.RegionInstanceGroupList]') -> None:
        pass

    @abc.abstractmethod
    async def ListInstances(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListInstancesRegionInstanceGroupsRequest, google.cloud.compute.v1.compute_pb2.RegionInstanceGroupsListInstances]') -> None:
        pass

    @abc.abstractmethod
    async def SetNamedPorts(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetNamedPortsRegionInstanceGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionInstanceGroups/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionInstanceGroupRequest,
                google.cloud.compute.v1.compute_pb2.InstanceGroup,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroups/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionInstanceGroupsRequest,
                google.cloud.compute.v1.compute_pb2.RegionInstanceGroupList,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroups/ListInstances': grpclib.const.Handler(
                self.ListInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListInstancesRegionInstanceGroupsRequest,
                google.cloud.compute.v1.compute_pb2.RegionInstanceGroupsListInstances,
            ),
            '/google.cloud.compute.v1.RegionInstanceGroups/SetNamedPorts': grpclib.const.Handler(
                self.SetNamedPorts,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetNamedPortsRegionInstanceGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class RegionInstanceGroupsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroups/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionInstanceGroupRequest,
            google.cloud.compute.v1.compute_pb2.InstanceGroup,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroups/List',
            google.cloud.compute.v1.compute_pb2.ListRegionInstanceGroupsRequest,
            google.cloud.compute.v1.compute_pb2.RegionInstanceGroupList,
        )
        self.ListInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroups/ListInstances',
            google.cloud.compute.v1.compute_pb2.ListInstancesRegionInstanceGroupsRequest,
            google.cloud.compute.v1.compute_pb2.RegionInstanceGroupsListInstances,
        )
        self.SetNamedPorts = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstanceGroups/SetNamedPorts',
            google.cloud.compute.v1.compute_pb2.SetNamedPortsRegionInstanceGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class RegionInstancesBase(abc.ABC):

    @abc.abstractmethod
    async def BulkInsert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.BulkInsertRegionInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionInstances/BulkInsert': grpclib.const.Handler(
                self.BulkInsert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.BulkInsertRegionInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class RegionInstancesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.BulkInsert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionInstances/BulkInsert',
            google.cloud.compute.v1.compute_pb2.BulkInsertRegionInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class RegionNetworkEndpointGroupsBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRegionNetworkEndpointGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionNetworkEndpointGroupRequest, google.cloud.compute.v1.compute_pb2.NetworkEndpointGroup]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRegionNetworkEndpointGroupRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionNetworkEndpointGroupsRequest, google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionNetworkEndpointGroups/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRegionNetworkEndpointGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionNetworkEndpointGroups/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionNetworkEndpointGroupRequest,
                google.cloud.compute.v1.compute_pb2.NetworkEndpointGroup,
            ),
            '/google.cloud.compute.v1.RegionNetworkEndpointGroups/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRegionNetworkEndpointGroupRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionNetworkEndpointGroups/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionNetworkEndpointGroupsRequest,
                google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupList,
            ),
        }


class RegionNetworkEndpointGroupsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionNetworkEndpointGroups/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRegionNetworkEndpointGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionNetworkEndpointGroups/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionNetworkEndpointGroupRequest,
            google.cloud.compute.v1.compute_pb2.NetworkEndpointGroup,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionNetworkEndpointGroups/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRegionNetworkEndpointGroupRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionNetworkEndpointGroups/List',
            google.cloud.compute.v1.compute_pb2.ListRegionNetworkEndpointGroupsRequest,
            google.cloud.compute.v1.compute_pb2.NetworkEndpointGroupList,
        )


class RegionNotificationEndpointsBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRegionNotificationEndpointRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionNotificationEndpointRequest, google.cloud.compute.v1.compute_pb2.NotificationEndpoint]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRegionNotificationEndpointRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionNotificationEndpointsRequest, google.cloud.compute.v1.compute_pb2.NotificationEndpointList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionNotificationEndpoints/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRegionNotificationEndpointRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionNotificationEndpoints/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionNotificationEndpointRequest,
                google.cloud.compute.v1.compute_pb2.NotificationEndpoint,
            ),
            '/google.cloud.compute.v1.RegionNotificationEndpoints/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRegionNotificationEndpointRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionNotificationEndpoints/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionNotificationEndpointsRequest,
                google.cloud.compute.v1.compute_pb2.NotificationEndpointList,
            ),
        }


class RegionNotificationEndpointsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionNotificationEndpoints/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRegionNotificationEndpointRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionNotificationEndpoints/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionNotificationEndpointRequest,
            google.cloud.compute.v1.compute_pb2.NotificationEndpoint,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionNotificationEndpoints/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRegionNotificationEndpointRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionNotificationEndpoints/List',
            google.cloud.compute.v1.compute_pb2.ListRegionNotificationEndpointsRequest,
            google.cloud.compute.v1.compute_pb2.NotificationEndpointList,
        )


class RegionOperationsBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRegionOperationRequest, google.cloud.compute.v1.compute_pb2.DeleteRegionOperationResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionOperationRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionOperationsRequest, google.cloud.compute.v1.compute_pb2.OperationList]') -> None:
        pass

    @abc.abstractmethod
    async def Wait(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.WaitRegionOperationRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionOperations/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRegionOperationRequest,
                google.cloud.compute.v1.compute_pb2.DeleteRegionOperationResponse,
            ),
            '/google.cloud.compute.v1.RegionOperations/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionOperationRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionOperations/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionOperationsRequest,
                google.cloud.compute.v1.compute_pb2.OperationList,
            ),
            '/google.cloud.compute.v1.RegionOperations/Wait': grpclib.const.Handler(
                self.Wait,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.WaitRegionOperationRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class RegionOperationsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionOperations/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRegionOperationRequest,
            google.cloud.compute.v1.compute_pb2.DeleteRegionOperationResponse,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionOperations/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionOperationRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionOperations/List',
            google.cloud.compute.v1.compute_pb2.ListRegionOperationsRequest,
            google.cloud.compute.v1.compute_pb2.OperationList,
        )
        self.Wait = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionOperations/Wait',
            google.cloud.compute.v1.compute_pb2.WaitRegionOperationRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class RegionSslCertificatesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRegionSslCertificateRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionSslCertificateRequest, google.cloud.compute.v1.compute_pb2.SslCertificate]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRegionSslCertificateRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionSslCertificatesRequest, google.cloud.compute.v1.compute_pb2.SslCertificateList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionSslCertificates/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRegionSslCertificateRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionSslCertificates/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionSslCertificateRequest,
                google.cloud.compute.v1.compute_pb2.SslCertificate,
            ),
            '/google.cloud.compute.v1.RegionSslCertificates/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRegionSslCertificateRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionSslCertificates/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionSslCertificatesRequest,
                google.cloud.compute.v1.compute_pb2.SslCertificateList,
            ),
        }


class RegionSslCertificatesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionSslCertificates/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRegionSslCertificateRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionSslCertificates/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionSslCertificateRequest,
            google.cloud.compute.v1.compute_pb2.SslCertificate,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionSslCertificates/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRegionSslCertificateRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionSslCertificates/List',
            google.cloud.compute.v1.compute_pb2.ListRegionSslCertificatesRequest,
            google.cloud.compute.v1.compute_pb2.SslCertificateList,
        )


class RegionTargetHttpProxiesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRegionTargetHttpProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionTargetHttpProxyRequest, google.cloud.compute.v1.compute_pb2.TargetHttpProxy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRegionTargetHttpProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionTargetHttpProxiesRequest, google.cloud.compute.v1.compute_pb2.TargetHttpProxyList]') -> None:
        pass

    @abc.abstractmethod
    async def SetUrlMap(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetUrlMapRegionTargetHttpProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionTargetHttpProxies/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRegionTargetHttpProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionTargetHttpProxies/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionTargetHttpProxyRequest,
                google.cloud.compute.v1.compute_pb2.TargetHttpProxy,
            ),
            '/google.cloud.compute.v1.RegionTargetHttpProxies/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRegionTargetHttpProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionTargetHttpProxies/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionTargetHttpProxiesRequest,
                google.cloud.compute.v1.compute_pb2.TargetHttpProxyList,
            ),
            '/google.cloud.compute.v1.RegionTargetHttpProxies/SetUrlMap': grpclib.const.Handler(
                self.SetUrlMap,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetUrlMapRegionTargetHttpProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class RegionTargetHttpProxiesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionTargetHttpProxies/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRegionTargetHttpProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionTargetHttpProxies/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionTargetHttpProxyRequest,
            google.cloud.compute.v1.compute_pb2.TargetHttpProxy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionTargetHttpProxies/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRegionTargetHttpProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionTargetHttpProxies/List',
            google.cloud.compute.v1.compute_pb2.ListRegionTargetHttpProxiesRequest,
            google.cloud.compute.v1.compute_pb2.TargetHttpProxyList,
        )
        self.SetUrlMap = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionTargetHttpProxies/SetUrlMap',
            google.cloud.compute.v1.compute_pb2.SetUrlMapRegionTargetHttpProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class RegionTargetHttpsProxiesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRegionTargetHttpsProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionTargetHttpsProxyRequest, google.cloud.compute.v1.compute_pb2.TargetHttpsProxy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRegionTargetHttpsProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionTargetHttpsProxiesRequest, google.cloud.compute.v1.compute_pb2.TargetHttpsProxyList]') -> None:
        pass

    @abc.abstractmethod
    async def SetSslCertificates(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetSslCertificatesRegionTargetHttpsProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetUrlMap(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetUrlMapRegionTargetHttpsProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionTargetHttpsProxies/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRegionTargetHttpsProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionTargetHttpsProxies/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionTargetHttpsProxyRequest,
                google.cloud.compute.v1.compute_pb2.TargetHttpsProxy,
            ),
            '/google.cloud.compute.v1.RegionTargetHttpsProxies/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRegionTargetHttpsProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionTargetHttpsProxies/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionTargetHttpsProxiesRequest,
                google.cloud.compute.v1.compute_pb2.TargetHttpsProxyList,
            ),
            '/google.cloud.compute.v1.RegionTargetHttpsProxies/SetSslCertificates': grpclib.const.Handler(
                self.SetSslCertificates,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetSslCertificatesRegionTargetHttpsProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionTargetHttpsProxies/SetUrlMap': grpclib.const.Handler(
                self.SetUrlMap,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetUrlMapRegionTargetHttpsProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class RegionTargetHttpsProxiesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionTargetHttpsProxies/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRegionTargetHttpsProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionTargetHttpsProxies/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionTargetHttpsProxyRequest,
            google.cloud.compute.v1.compute_pb2.TargetHttpsProxy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionTargetHttpsProxies/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRegionTargetHttpsProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionTargetHttpsProxies/List',
            google.cloud.compute.v1.compute_pb2.ListRegionTargetHttpsProxiesRequest,
            google.cloud.compute.v1.compute_pb2.TargetHttpsProxyList,
        )
        self.SetSslCertificates = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionTargetHttpsProxies/SetSslCertificates',
            google.cloud.compute.v1.compute_pb2.SetSslCertificatesRegionTargetHttpsProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetUrlMap = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionTargetHttpsProxies/SetUrlMap',
            google.cloud.compute.v1.compute_pb2.SetUrlMapRegionTargetHttpsProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class RegionUrlMapsBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRegionUrlMapRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionUrlMapRequest, google.cloud.compute.v1.compute_pb2.UrlMap]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRegionUrlMapRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionUrlMapsRequest, google.cloud.compute.v1.compute_pb2.UrlMapList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchRegionUrlMapRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Update(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateRegionUrlMapRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Validate(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ValidateRegionUrlMapRequest, google.cloud.compute.v1.compute_pb2.UrlMapsValidateResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.RegionUrlMaps/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRegionUrlMapRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionUrlMaps/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionUrlMapRequest,
                google.cloud.compute.v1.compute_pb2.UrlMap,
            ),
            '/google.cloud.compute.v1.RegionUrlMaps/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRegionUrlMapRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionUrlMaps/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionUrlMapsRequest,
                google.cloud.compute.v1.compute_pb2.UrlMapList,
            ),
            '/google.cloud.compute.v1.RegionUrlMaps/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchRegionUrlMapRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionUrlMaps/Update': grpclib.const.Handler(
                self.Update,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateRegionUrlMapRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.RegionUrlMaps/Validate': grpclib.const.Handler(
                self.Validate,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ValidateRegionUrlMapRequest,
                google.cloud.compute.v1.compute_pb2.UrlMapsValidateResponse,
            ),
        }


class RegionUrlMapsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionUrlMaps/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRegionUrlMapRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionUrlMaps/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionUrlMapRequest,
            google.cloud.compute.v1.compute_pb2.UrlMap,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionUrlMaps/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRegionUrlMapRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionUrlMaps/List',
            google.cloud.compute.v1.compute_pb2.ListRegionUrlMapsRequest,
            google.cloud.compute.v1.compute_pb2.UrlMapList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionUrlMaps/Patch',
            google.cloud.compute.v1.compute_pb2.PatchRegionUrlMapRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Update = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionUrlMaps/Update',
            google.cloud.compute.v1.compute_pb2.UpdateRegionUrlMapRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Validate = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.RegionUrlMaps/Validate',
            google.cloud.compute.v1.compute_pb2.ValidateRegionUrlMapRequest,
            google.cloud.compute.v1.compute_pb2.UrlMapsValidateResponse,
        )


class RegionsBase(abc.ABC):

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRegionRequest, google.cloud.compute.v1.compute_pb2.Region]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRegionsRequest, google.cloud.compute.v1.compute_pb2.RegionList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Regions/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRegionRequest,
                google.cloud.compute.v1.compute_pb2.Region,
            ),
            '/google.cloud.compute.v1.Regions/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRegionsRequest,
                google.cloud.compute.v1.compute_pb2.RegionList,
            ),
        }


class RegionsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Regions/Get',
            google.cloud.compute.v1.compute_pb2.GetRegionRequest,
            google.cloud.compute.v1.compute_pb2.Region,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Regions/List',
            google.cloud.compute.v1.compute_pb2.ListRegionsRequest,
            google.cloud.compute.v1.compute_pb2.RegionList,
        )


class ReservationsBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListReservationsRequest, google.cloud.compute.v1.compute_pb2.ReservationAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteReservationRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetReservationRequest, google.cloud.compute.v1.compute_pb2.Reservation]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetIamPolicyReservationRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertReservationRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListReservationsRequest, google.cloud.compute.v1.compute_pb2.ReservationList]') -> None:
        pass

    @abc.abstractmethod
    async def Resize(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ResizeReservationRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetIamPolicyReservationRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsReservationRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Reservations/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListReservationsRequest,
                google.cloud.compute.v1.compute_pb2.ReservationAggregatedList,
            ),
            '/google.cloud.compute.v1.Reservations/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteReservationRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Reservations/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetReservationRequest,
                google.cloud.compute.v1.compute_pb2.Reservation,
            ),
            '/google.cloud.compute.v1.Reservations/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetIamPolicyReservationRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.Reservations/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertReservationRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Reservations/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListReservationsRequest,
                google.cloud.compute.v1.compute_pb2.ReservationList,
            ),
            '/google.cloud.compute.v1.Reservations/Resize': grpclib.const.Handler(
                self.Resize,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ResizeReservationRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Reservations/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetIamPolicyReservationRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.Reservations/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsReservationRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class ReservationsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Reservations/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListReservationsRequest,
            google.cloud.compute.v1.compute_pb2.ReservationAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Reservations/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteReservationRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Reservations/Get',
            google.cloud.compute.v1.compute_pb2.GetReservationRequest,
            google.cloud.compute.v1.compute_pb2.Reservation,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Reservations/GetIamPolicy',
            google.cloud.compute.v1.compute_pb2.GetIamPolicyReservationRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Reservations/Insert',
            google.cloud.compute.v1.compute_pb2.InsertReservationRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Reservations/List',
            google.cloud.compute.v1.compute_pb2.ListReservationsRequest,
            google.cloud.compute.v1.compute_pb2.ReservationList,
        )
        self.Resize = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Reservations/Resize',
            google.cloud.compute.v1.compute_pb2.ResizeReservationRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Reservations/SetIamPolicy',
            google.cloud.compute.v1.compute_pb2.SetIamPolicyReservationRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Reservations/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsReservationRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class ResourcePoliciesBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListResourcePoliciesRequest, google.cloud.compute.v1.compute_pb2.ResourcePolicyAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteResourcePolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetResourcePolicyRequest, google.cloud.compute.v1.compute_pb2.ResourcePolicy]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetIamPolicyResourcePolicyRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertResourcePolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListResourcePoliciesRequest, google.cloud.compute.v1.compute_pb2.ResourcePolicyList]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetIamPolicyResourcePolicyRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsResourcePolicyRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.ResourcePolicies/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListResourcePoliciesRequest,
                google.cloud.compute.v1.compute_pb2.ResourcePolicyAggregatedList,
            ),
            '/google.cloud.compute.v1.ResourcePolicies/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteResourcePolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.ResourcePolicies/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetResourcePolicyRequest,
                google.cloud.compute.v1.compute_pb2.ResourcePolicy,
            ),
            '/google.cloud.compute.v1.ResourcePolicies/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetIamPolicyResourcePolicyRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.ResourcePolicies/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertResourcePolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.ResourcePolicies/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListResourcePoliciesRequest,
                google.cloud.compute.v1.compute_pb2.ResourcePolicyList,
            ),
            '/google.cloud.compute.v1.ResourcePolicies/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetIamPolicyResourcePolicyRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.ResourcePolicies/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsResourcePolicyRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class ResourcePoliciesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ResourcePolicies/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListResourcePoliciesRequest,
            google.cloud.compute.v1.compute_pb2.ResourcePolicyAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ResourcePolicies/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteResourcePolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ResourcePolicies/Get',
            google.cloud.compute.v1.compute_pb2.GetResourcePolicyRequest,
            google.cloud.compute.v1.compute_pb2.ResourcePolicy,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ResourcePolicies/GetIamPolicy',
            google.cloud.compute.v1.compute_pb2.GetIamPolicyResourcePolicyRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ResourcePolicies/Insert',
            google.cloud.compute.v1.compute_pb2.InsertResourcePolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ResourcePolicies/List',
            google.cloud.compute.v1.compute_pb2.ListResourcePoliciesRequest,
            google.cloud.compute.v1.compute_pb2.ResourcePolicyList,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ResourcePolicies/SetIamPolicy',
            google.cloud.compute.v1.compute_pb2.SetIamPolicyResourcePolicyRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ResourcePolicies/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsResourcePolicyRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class RoutersBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListRoutersRequest, google.cloud.compute.v1.compute_pb2.RouterAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRouterRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRouterRequest, google.cloud.compute.v1.compute_pb2.Router]') -> None:
        pass

    @abc.abstractmethod
    async def GetNatMappingInfo(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetNatMappingInfoRoutersRequest, google.cloud.compute.v1.compute_pb2.VmEndpointNatMappingsList]') -> None:
        pass

    @abc.abstractmethod
    async def GetRouterStatus(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRouterStatusRouterRequest, google.cloud.compute.v1.compute_pb2.RouterStatusResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRouterRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRoutersRequest, google.cloud.compute.v1.compute_pb2.RouterList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchRouterRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Preview(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PreviewRouterRequest, google.cloud.compute.v1.compute_pb2.RoutersPreviewResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Update(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateRouterRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Routers/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListRoutersRequest,
                google.cloud.compute.v1.compute_pb2.RouterAggregatedList,
            ),
            '/google.cloud.compute.v1.Routers/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRouterRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Routers/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRouterRequest,
                google.cloud.compute.v1.compute_pb2.Router,
            ),
            '/google.cloud.compute.v1.Routers/GetNatMappingInfo': grpclib.const.Handler(
                self.GetNatMappingInfo,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetNatMappingInfoRoutersRequest,
                google.cloud.compute.v1.compute_pb2.VmEndpointNatMappingsList,
            ),
            '/google.cloud.compute.v1.Routers/GetRouterStatus': grpclib.const.Handler(
                self.GetRouterStatus,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRouterStatusRouterRequest,
                google.cloud.compute.v1.compute_pb2.RouterStatusResponse,
            ),
            '/google.cloud.compute.v1.Routers/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRouterRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Routers/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRoutersRequest,
                google.cloud.compute.v1.compute_pb2.RouterList,
            ),
            '/google.cloud.compute.v1.Routers/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchRouterRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Routers/Preview': grpclib.const.Handler(
                self.Preview,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PreviewRouterRequest,
                google.cloud.compute.v1.compute_pb2.RoutersPreviewResponse,
            ),
            '/google.cloud.compute.v1.Routers/Update': grpclib.const.Handler(
                self.Update,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateRouterRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class RoutersStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Routers/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListRoutersRequest,
            google.cloud.compute.v1.compute_pb2.RouterAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Routers/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRouterRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Routers/Get',
            google.cloud.compute.v1.compute_pb2.GetRouterRequest,
            google.cloud.compute.v1.compute_pb2.Router,
        )
        self.GetNatMappingInfo = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Routers/GetNatMappingInfo',
            google.cloud.compute.v1.compute_pb2.GetNatMappingInfoRoutersRequest,
            google.cloud.compute.v1.compute_pb2.VmEndpointNatMappingsList,
        )
        self.GetRouterStatus = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Routers/GetRouterStatus',
            google.cloud.compute.v1.compute_pb2.GetRouterStatusRouterRequest,
            google.cloud.compute.v1.compute_pb2.RouterStatusResponse,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Routers/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRouterRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Routers/List',
            google.cloud.compute.v1.compute_pb2.ListRoutersRequest,
            google.cloud.compute.v1.compute_pb2.RouterList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Routers/Patch',
            google.cloud.compute.v1.compute_pb2.PatchRouterRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Preview = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Routers/Preview',
            google.cloud.compute.v1.compute_pb2.PreviewRouterRequest,
            google.cloud.compute.v1.compute_pb2.RoutersPreviewResponse,
        )
        self.Update = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Routers/Update',
            google.cloud.compute.v1.compute_pb2.UpdateRouterRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class RoutesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteRouteRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRouteRequest, google.cloud.compute.v1.compute_pb2.Route]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertRouteRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListRoutesRequest, google.cloud.compute.v1.compute_pb2.RouteList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Routes/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteRouteRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Routes/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRouteRequest,
                google.cloud.compute.v1.compute_pb2.Route,
            ),
            '/google.cloud.compute.v1.Routes/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertRouteRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Routes/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListRoutesRequest,
                google.cloud.compute.v1.compute_pb2.RouteList,
            ),
        }


class RoutesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Routes/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteRouteRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Routes/Get',
            google.cloud.compute.v1.compute_pb2.GetRouteRequest,
            google.cloud.compute.v1.compute_pb2.Route,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Routes/Insert',
            google.cloud.compute.v1.compute_pb2.InsertRouteRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Routes/List',
            google.cloud.compute.v1.compute_pb2.ListRoutesRequest,
            google.cloud.compute.v1.compute_pb2.RouteList,
        )


class SecurityPoliciesBase(abc.ABC):

    @abc.abstractmethod
    async def AddRule(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AddRuleSecurityPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteSecurityPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetSecurityPolicyRequest, google.cloud.compute.v1.compute_pb2.SecurityPolicy]') -> None:
        pass

    @abc.abstractmethod
    async def GetRule(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetRuleSecurityPolicyRequest, google.cloud.compute.v1.compute_pb2.SecurityPolicyRule]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertSecurityPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListSecurityPoliciesRequest, google.cloud.compute.v1.compute_pb2.SecurityPolicyList]') -> None:
        pass

    @abc.abstractmethod
    async def ListPreconfiguredExpressionSets(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListPreconfiguredExpressionSetsSecurityPoliciesRequest, google.cloud.compute.v1.compute_pb2.SecurityPoliciesListPreconfiguredExpressionSetsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchSecurityPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def PatchRule(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchRuleSecurityPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def RemoveRule(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.RemoveRuleSecurityPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.SecurityPolicies/AddRule': grpclib.const.Handler(
                self.AddRule,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AddRuleSecurityPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.SecurityPolicies/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteSecurityPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.SecurityPolicies/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetSecurityPolicyRequest,
                google.cloud.compute.v1.compute_pb2.SecurityPolicy,
            ),
            '/google.cloud.compute.v1.SecurityPolicies/GetRule': grpclib.const.Handler(
                self.GetRule,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetRuleSecurityPolicyRequest,
                google.cloud.compute.v1.compute_pb2.SecurityPolicyRule,
            ),
            '/google.cloud.compute.v1.SecurityPolicies/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertSecurityPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.SecurityPolicies/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListSecurityPoliciesRequest,
                google.cloud.compute.v1.compute_pb2.SecurityPolicyList,
            ),
            '/google.cloud.compute.v1.SecurityPolicies/ListPreconfiguredExpressionSets': grpclib.const.Handler(
                self.ListPreconfiguredExpressionSets,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListPreconfiguredExpressionSetsSecurityPoliciesRequest,
                google.cloud.compute.v1.compute_pb2.SecurityPoliciesListPreconfiguredExpressionSetsResponse,
            ),
            '/google.cloud.compute.v1.SecurityPolicies/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchSecurityPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.SecurityPolicies/PatchRule': grpclib.const.Handler(
                self.PatchRule,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchRuleSecurityPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.SecurityPolicies/RemoveRule': grpclib.const.Handler(
                self.RemoveRule,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.RemoveRuleSecurityPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class SecurityPoliciesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AddRule = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SecurityPolicies/AddRule',
            google.cloud.compute.v1.compute_pb2.AddRuleSecurityPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SecurityPolicies/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteSecurityPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SecurityPolicies/Get',
            google.cloud.compute.v1.compute_pb2.GetSecurityPolicyRequest,
            google.cloud.compute.v1.compute_pb2.SecurityPolicy,
        )
        self.GetRule = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SecurityPolicies/GetRule',
            google.cloud.compute.v1.compute_pb2.GetRuleSecurityPolicyRequest,
            google.cloud.compute.v1.compute_pb2.SecurityPolicyRule,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SecurityPolicies/Insert',
            google.cloud.compute.v1.compute_pb2.InsertSecurityPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SecurityPolicies/List',
            google.cloud.compute.v1.compute_pb2.ListSecurityPoliciesRequest,
            google.cloud.compute.v1.compute_pb2.SecurityPolicyList,
        )
        self.ListPreconfiguredExpressionSets = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SecurityPolicies/ListPreconfiguredExpressionSets',
            google.cloud.compute.v1.compute_pb2.ListPreconfiguredExpressionSetsSecurityPoliciesRequest,
            google.cloud.compute.v1.compute_pb2.SecurityPoliciesListPreconfiguredExpressionSetsResponse,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SecurityPolicies/Patch',
            google.cloud.compute.v1.compute_pb2.PatchSecurityPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.PatchRule = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SecurityPolicies/PatchRule',
            google.cloud.compute.v1.compute_pb2.PatchRuleSecurityPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.RemoveRule = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SecurityPolicies/RemoveRule',
            google.cloud.compute.v1.compute_pb2.RemoveRuleSecurityPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class ServiceAttachmentsBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListServiceAttachmentsRequest, google.cloud.compute.v1.compute_pb2.ServiceAttachmentAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteServiceAttachmentRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetServiceAttachmentRequest, google.cloud.compute.v1.compute_pb2.ServiceAttachment]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetIamPolicyServiceAttachmentRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertServiceAttachmentRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListServiceAttachmentsRequest, google.cloud.compute.v1.compute_pb2.ServiceAttachmentList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchServiceAttachmentRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetIamPolicyServiceAttachmentRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsServiceAttachmentRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.ServiceAttachments/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListServiceAttachmentsRequest,
                google.cloud.compute.v1.compute_pb2.ServiceAttachmentAggregatedList,
            ),
            '/google.cloud.compute.v1.ServiceAttachments/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteServiceAttachmentRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.ServiceAttachments/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetServiceAttachmentRequest,
                google.cloud.compute.v1.compute_pb2.ServiceAttachment,
            ),
            '/google.cloud.compute.v1.ServiceAttachments/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetIamPolicyServiceAttachmentRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.ServiceAttachments/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertServiceAttachmentRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.ServiceAttachments/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListServiceAttachmentsRequest,
                google.cloud.compute.v1.compute_pb2.ServiceAttachmentList,
            ),
            '/google.cloud.compute.v1.ServiceAttachments/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchServiceAttachmentRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.ServiceAttachments/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetIamPolicyServiceAttachmentRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.ServiceAttachments/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsServiceAttachmentRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class ServiceAttachmentsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ServiceAttachments/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListServiceAttachmentsRequest,
            google.cloud.compute.v1.compute_pb2.ServiceAttachmentAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ServiceAttachments/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteServiceAttachmentRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ServiceAttachments/Get',
            google.cloud.compute.v1.compute_pb2.GetServiceAttachmentRequest,
            google.cloud.compute.v1.compute_pb2.ServiceAttachment,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ServiceAttachments/GetIamPolicy',
            google.cloud.compute.v1.compute_pb2.GetIamPolicyServiceAttachmentRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ServiceAttachments/Insert',
            google.cloud.compute.v1.compute_pb2.InsertServiceAttachmentRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ServiceAttachments/List',
            google.cloud.compute.v1.compute_pb2.ListServiceAttachmentsRequest,
            google.cloud.compute.v1.compute_pb2.ServiceAttachmentList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ServiceAttachments/Patch',
            google.cloud.compute.v1.compute_pb2.PatchServiceAttachmentRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ServiceAttachments/SetIamPolicy',
            google.cloud.compute.v1.compute_pb2.SetIamPolicyServiceAttachmentRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ServiceAttachments/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsServiceAttachmentRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class SnapshotsBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteSnapshotRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetSnapshotRequest, google.cloud.compute.v1.compute_pb2.Snapshot]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetIamPolicySnapshotRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListSnapshotsRequest, google.cloud.compute.v1.compute_pb2.SnapshotList]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetIamPolicySnapshotRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def SetLabels(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetLabelsSnapshotRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsSnapshotRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Snapshots/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteSnapshotRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Snapshots/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetSnapshotRequest,
                google.cloud.compute.v1.compute_pb2.Snapshot,
            ),
            '/google.cloud.compute.v1.Snapshots/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetIamPolicySnapshotRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.Snapshots/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListSnapshotsRequest,
                google.cloud.compute.v1.compute_pb2.SnapshotList,
            ),
            '/google.cloud.compute.v1.Snapshots/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetIamPolicySnapshotRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.Snapshots/SetLabels': grpclib.const.Handler(
                self.SetLabels,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetLabelsSnapshotRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Snapshots/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsSnapshotRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class SnapshotsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Snapshots/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteSnapshotRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Snapshots/Get',
            google.cloud.compute.v1.compute_pb2.GetSnapshotRequest,
            google.cloud.compute.v1.compute_pb2.Snapshot,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Snapshots/GetIamPolicy',
            google.cloud.compute.v1.compute_pb2.GetIamPolicySnapshotRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Snapshots/List',
            google.cloud.compute.v1.compute_pb2.ListSnapshotsRequest,
            google.cloud.compute.v1.compute_pb2.SnapshotList,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Snapshots/SetIamPolicy',
            google.cloud.compute.v1.compute_pb2.SetIamPolicySnapshotRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.SetLabels = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Snapshots/SetLabels',
            google.cloud.compute.v1.compute_pb2.SetLabelsSnapshotRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Snapshots/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsSnapshotRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class SslCertificatesBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListSslCertificatesRequest, google.cloud.compute.v1.compute_pb2.SslCertificateAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteSslCertificateRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetSslCertificateRequest, google.cloud.compute.v1.compute_pb2.SslCertificate]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertSslCertificateRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListSslCertificatesRequest, google.cloud.compute.v1.compute_pb2.SslCertificateList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.SslCertificates/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListSslCertificatesRequest,
                google.cloud.compute.v1.compute_pb2.SslCertificateAggregatedList,
            ),
            '/google.cloud.compute.v1.SslCertificates/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteSslCertificateRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.SslCertificates/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetSslCertificateRequest,
                google.cloud.compute.v1.compute_pb2.SslCertificate,
            ),
            '/google.cloud.compute.v1.SslCertificates/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertSslCertificateRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.SslCertificates/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListSslCertificatesRequest,
                google.cloud.compute.v1.compute_pb2.SslCertificateList,
            ),
        }


class SslCertificatesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SslCertificates/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListSslCertificatesRequest,
            google.cloud.compute.v1.compute_pb2.SslCertificateAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SslCertificates/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteSslCertificateRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SslCertificates/Get',
            google.cloud.compute.v1.compute_pb2.GetSslCertificateRequest,
            google.cloud.compute.v1.compute_pb2.SslCertificate,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SslCertificates/Insert',
            google.cloud.compute.v1.compute_pb2.InsertSslCertificateRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SslCertificates/List',
            google.cloud.compute.v1.compute_pb2.ListSslCertificatesRequest,
            google.cloud.compute.v1.compute_pb2.SslCertificateList,
        )


class SslPoliciesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteSslPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetSslPolicyRequest, google.cloud.compute.v1.compute_pb2.SslPolicy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertSslPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListSslPoliciesRequest, google.cloud.compute.v1.compute_pb2.SslPoliciesList]') -> None:
        pass

    @abc.abstractmethod
    async def ListAvailableFeatures(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListAvailableFeaturesSslPoliciesRequest, google.cloud.compute.v1.compute_pb2.SslPoliciesListAvailableFeaturesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchSslPolicyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.SslPolicies/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteSslPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.SslPolicies/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetSslPolicyRequest,
                google.cloud.compute.v1.compute_pb2.SslPolicy,
            ),
            '/google.cloud.compute.v1.SslPolicies/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertSslPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.SslPolicies/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListSslPoliciesRequest,
                google.cloud.compute.v1.compute_pb2.SslPoliciesList,
            ),
            '/google.cloud.compute.v1.SslPolicies/ListAvailableFeatures': grpclib.const.Handler(
                self.ListAvailableFeatures,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListAvailableFeaturesSslPoliciesRequest,
                google.cloud.compute.v1.compute_pb2.SslPoliciesListAvailableFeaturesResponse,
            ),
            '/google.cloud.compute.v1.SslPolicies/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchSslPolicyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class SslPoliciesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SslPolicies/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteSslPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SslPolicies/Get',
            google.cloud.compute.v1.compute_pb2.GetSslPolicyRequest,
            google.cloud.compute.v1.compute_pb2.SslPolicy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SslPolicies/Insert',
            google.cloud.compute.v1.compute_pb2.InsertSslPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SslPolicies/List',
            google.cloud.compute.v1.compute_pb2.ListSslPoliciesRequest,
            google.cloud.compute.v1.compute_pb2.SslPoliciesList,
        )
        self.ListAvailableFeatures = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SslPolicies/ListAvailableFeatures',
            google.cloud.compute.v1.compute_pb2.ListAvailableFeaturesSslPoliciesRequest,
            google.cloud.compute.v1.compute_pb2.SslPoliciesListAvailableFeaturesResponse,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.SslPolicies/Patch',
            google.cloud.compute.v1.compute_pb2.PatchSslPolicyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class SubnetworksBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListSubnetworksRequest, google.cloud.compute.v1.compute_pb2.SubnetworkAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteSubnetworkRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def ExpandIpCidrRange(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ExpandIpCidrRangeSubnetworkRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetSubnetworkRequest, google.cloud.compute.v1.compute_pb2.Subnetwork]') -> None:
        pass

    @abc.abstractmethod
    async def GetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetIamPolicySubnetworkRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertSubnetworkRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListSubnetworksRequest, google.cloud.compute.v1.compute_pb2.SubnetworkList]') -> None:
        pass

    @abc.abstractmethod
    async def ListUsable(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListUsableSubnetworksRequest, google.cloud.compute.v1.compute_pb2.UsableSubnetworksAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchSubnetworkRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetIamPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetIamPolicySubnetworkRequest, google.cloud.compute.v1.compute_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def SetPrivateIpGoogleAccess(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetPrivateIpGoogleAccessSubnetworkRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsSubnetworkRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Subnetworks/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListSubnetworksRequest,
                google.cloud.compute.v1.compute_pb2.SubnetworkAggregatedList,
            ),
            '/google.cloud.compute.v1.Subnetworks/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteSubnetworkRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Subnetworks/ExpandIpCidrRange': grpclib.const.Handler(
                self.ExpandIpCidrRange,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ExpandIpCidrRangeSubnetworkRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Subnetworks/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetSubnetworkRequest,
                google.cloud.compute.v1.compute_pb2.Subnetwork,
            ),
            '/google.cloud.compute.v1.Subnetworks/GetIamPolicy': grpclib.const.Handler(
                self.GetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetIamPolicySubnetworkRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.Subnetworks/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertSubnetworkRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Subnetworks/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListSubnetworksRequest,
                google.cloud.compute.v1.compute_pb2.SubnetworkList,
            ),
            '/google.cloud.compute.v1.Subnetworks/ListUsable': grpclib.const.Handler(
                self.ListUsable,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListUsableSubnetworksRequest,
                google.cloud.compute.v1.compute_pb2.UsableSubnetworksAggregatedList,
            ),
            '/google.cloud.compute.v1.Subnetworks/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchSubnetworkRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Subnetworks/SetIamPolicy': grpclib.const.Handler(
                self.SetIamPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetIamPolicySubnetworkRequest,
                google.cloud.compute.v1.compute_pb2.Policy,
            ),
            '/google.cloud.compute.v1.Subnetworks/SetPrivateIpGoogleAccess': grpclib.const.Handler(
                self.SetPrivateIpGoogleAccess,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetPrivateIpGoogleAccessSubnetworkRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.Subnetworks/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsSubnetworkRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class SubnetworksStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Subnetworks/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListSubnetworksRequest,
            google.cloud.compute.v1.compute_pb2.SubnetworkAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Subnetworks/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteSubnetworkRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.ExpandIpCidrRange = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Subnetworks/ExpandIpCidrRange',
            google.cloud.compute.v1.compute_pb2.ExpandIpCidrRangeSubnetworkRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Subnetworks/Get',
            google.cloud.compute.v1.compute_pb2.GetSubnetworkRequest,
            google.cloud.compute.v1.compute_pb2.Subnetwork,
        )
        self.GetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Subnetworks/GetIamPolicy',
            google.cloud.compute.v1.compute_pb2.GetIamPolicySubnetworkRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Subnetworks/Insert',
            google.cloud.compute.v1.compute_pb2.InsertSubnetworkRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Subnetworks/List',
            google.cloud.compute.v1.compute_pb2.ListSubnetworksRequest,
            google.cloud.compute.v1.compute_pb2.SubnetworkList,
        )
        self.ListUsable = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Subnetworks/ListUsable',
            google.cloud.compute.v1.compute_pb2.ListUsableSubnetworksRequest,
            google.cloud.compute.v1.compute_pb2.UsableSubnetworksAggregatedList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Subnetworks/Patch',
            google.cloud.compute.v1.compute_pb2.PatchSubnetworkRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetIamPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Subnetworks/SetIamPolicy',
            google.cloud.compute.v1.compute_pb2.SetIamPolicySubnetworkRequest,
            google.cloud.compute.v1.compute_pb2.Policy,
        )
        self.SetPrivateIpGoogleAccess = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Subnetworks/SetPrivateIpGoogleAccess',
            google.cloud.compute.v1.compute_pb2.SetPrivateIpGoogleAccessSubnetworkRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Subnetworks/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsSubnetworkRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class TargetGrpcProxiesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteTargetGrpcProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetTargetGrpcProxyRequest, google.cloud.compute.v1.compute_pb2.TargetGrpcProxy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertTargetGrpcProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListTargetGrpcProxiesRequest, google.cloud.compute.v1.compute_pb2.TargetGrpcProxyList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchTargetGrpcProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.TargetGrpcProxies/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteTargetGrpcProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetGrpcProxies/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetTargetGrpcProxyRequest,
                google.cloud.compute.v1.compute_pb2.TargetGrpcProxy,
            ),
            '/google.cloud.compute.v1.TargetGrpcProxies/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertTargetGrpcProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetGrpcProxies/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListTargetGrpcProxiesRequest,
                google.cloud.compute.v1.compute_pb2.TargetGrpcProxyList,
            ),
            '/google.cloud.compute.v1.TargetGrpcProxies/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchTargetGrpcProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class TargetGrpcProxiesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetGrpcProxies/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteTargetGrpcProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetGrpcProxies/Get',
            google.cloud.compute.v1.compute_pb2.GetTargetGrpcProxyRequest,
            google.cloud.compute.v1.compute_pb2.TargetGrpcProxy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetGrpcProxies/Insert',
            google.cloud.compute.v1.compute_pb2.InsertTargetGrpcProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetGrpcProxies/List',
            google.cloud.compute.v1.compute_pb2.ListTargetGrpcProxiesRequest,
            google.cloud.compute.v1.compute_pb2.TargetGrpcProxyList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetGrpcProxies/Patch',
            google.cloud.compute.v1.compute_pb2.PatchTargetGrpcProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class TargetHttpProxiesBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListTargetHttpProxiesRequest, google.cloud.compute.v1.compute_pb2.TargetHttpProxyAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteTargetHttpProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetTargetHttpProxyRequest, google.cloud.compute.v1.compute_pb2.TargetHttpProxy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertTargetHttpProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListTargetHttpProxiesRequest, google.cloud.compute.v1.compute_pb2.TargetHttpProxyList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchTargetHttpProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetUrlMap(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetUrlMapTargetHttpProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.TargetHttpProxies/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListTargetHttpProxiesRequest,
                google.cloud.compute.v1.compute_pb2.TargetHttpProxyAggregatedList,
            ),
            '/google.cloud.compute.v1.TargetHttpProxies/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteTargetHttpProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetHttpProxies/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetTargetHttpProxyRequest,
                google.cloud.compute.v1.compute_pb2.TargetHttpProxy,
            ),
            '/google.cloud.compute.v1.TargetHttpProxies/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertTargetHttpProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetHttpProxies/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListTargetHttpProxiesRequest,
                google.cloud.compute.v1.compute_pb2.TargetHttpProxyList,
            ),
            '/google.cloud.compute.v1.TargetHttpProxies/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchTargetHttpProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetHttpProxies/SetUrlMap': grpclib.const.Handler(
                self.SetUrlMap,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetUrlMapTargetHttpProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class TargetHttpProxiesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpProxies/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListTargetHttpProxiesRequest,
            google.cloud.compute.v1.compute_pb2.TargetHttpProxyAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpProxies/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteTargetHttpProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpProxies/Get',
            google.cloud.compute.v1.compute_pb2.GetTargetHttpProxyRequest,
            google.cloud.compute.v1.compute_pb2.TargetHttpProxy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpProxies/Insert',
            google.cloud.compute.v1.compute_pb2.InsertTargetHttpProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpProxies/List',
            google.cloud.compute.v1.compute_pb2.ListTargetHttpProxiesRequest,
            google.cloud.compute.v1.compute_pb2.TargetHttpProxyList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpProxies/Patch',
            google.cloud.compute.v1.compute_pb2.PatchTargetHttpProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetUrlMap = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpProxies/SetUrlMap',
            google.cloud.compute.v1.compute_pb2.SetUrlMapTargetHttpProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class TargetHttpsProxiesBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListTargetHttpsProxiesRequest, google.cloud.compute.v1.compute_pb2.TargetHttpsProxyAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteTargetHttpsProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetTargetHttpsProxyRequest, google.cloud.compute.v1.compute_pb2.TargetHttpsProxy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertTargetHttpsProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListTargetHttpsProxiesRequest, google.cloud.compute.v1.compute_pb2.TargetHttpsProxyList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchTargetHttpsProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetQuicOverride(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetQuicOverrideTargetHttpsProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetSslCertificates(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetSslCertificatesTargetHttpsProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetSslPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetSslPolicyTargetHttpsProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetUrlMap(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetUrlMapTargetHttpsProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.TargetHttpsProxies/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListTargetHttpsProxiesRequest,
                google.cloud.compute.v1.compute_pb2.TargetHttpsProxyAggregatedList,
            ),
            '/google.cloud.compute.v1.TargetHttpsProxies/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteTargetHttpsProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetHttpsProxies/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetTargetHttpsProxyRequest,
                google.cloud.compute.v1.compute_pb2.TargetHttpsProxy,
            ),
            '/google.cloud.compute.v1.TargetHttpsProxies/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertTargetHttpsProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetHttpsProxies/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListTargetHttpsProxiesRequest,
                google.cloud.compute.v1.compute_pb2.TargetHttpsProxyList,
            ),
            '/google.cloud.compute.v1.TargetHttpsProxies/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchTargetHttpsProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetHttpsProxies/SetQuicOverride': grpclib.const.Handler(
                self.SetQuicOverride,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetQuicOverrideTargetHttpsProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetHttpsProxies/SetSslCertificates': grpclib.const.Handler(
                self.SetSslCertificates,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetSslCertificatesTargetHttpsProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetHttpsProxies/SetSslPolicy': grpclib.const.Handler(
                self.SetSslPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetSslPolicyTargetHttpsProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetHttpsProxies/SetUrlMap': grpclib.const.Handler(
                self.SetUrlMap,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetUrlMapTargetHttpsProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class TargetHttpsProxiesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpsProxies/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListTargetHttpsProxiesRequest,
            google.cloud.compute.v1.compute_pb2.TargetHttpsProxyAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpsProxies/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteTargetHttpsProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpsProxies/Get',
            google.cloud.compute.v1.compute_pb2.GetTargetHttpsProxyRequest,
            google.cloud.compute.v1.compute_pb2.TargetHttpsProxy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpsProxies/Insert',
            google.cloud.compute.v1.compute_pb2.InsertTargetHttpsProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpsProxies/List',
            google.cloud.compute.v1.compute_pb2.ListTargetHttpsProxiesRequest,
            google.cloud.compute.v1.compute_pb2.TargetHttpsProxyList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpsProxies/Patch',
            google.cloud.compute.v1.compute_pb2.PatchTargetHttpsProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetQuicOverride = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpsProxies/SetQuicOverride',
            google.cloud.compute.v1.compute_pb2.SetQuicOverrideTargetHttpsProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetSslCertificates = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpsProxies/SetSslCertificates',
            google.cloud.compute.v1.compute_pb2.SetSslCertificatesTargetHttpsProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetSslPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpsProxies/SetSslPolicy',
            google.cloud.compute.v1.compute_pb2.SetSslPolicyTargetHttpsProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetUrlMap = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetHttpsProxies/SetUrlMap',
            google.cloud.compute.v1.compute_pb2.SetUrlMapTargetHttpsProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class TargetInstancesBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListTargetInstancesRequest, google.cloud.compute.v1.compute_pb2.TargetInstanceAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteTargetInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetTargetInstanceRequest, google.cloud.compute.v1.compute_pb2.TargetInstance]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertTargetInstanceRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListTargetInstancesRequest, google.cloud.compute.v1.compute_pb2.TargetInstanceList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.TargetInstances/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListTargetInstancesRequest,
                google.cloud.compute.v1.compute_pb2.TargetInstanceAggregatedList,
            ),
            '/google.cloud.compute.v1.TargetInstances/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteTargetInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetInstances/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetTargetInstanceRequest,
                google.cloud.compute.v1.compute_pb2.TargetInstance,
            ),
            '/google.cloud.compute.v1.TargetInstances/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertTargetInstanceRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetInstances/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListTargetInstancesRequest,
                google.cloud.compute.v1.compute_pb2.TargetInstanceList,
            ),
        }


class TargetInstancesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetInstances/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListTargetInstancesRequest,
            google.cloud.compute.v1.compute_pb2.TargetInstanceAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetInstances/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteTargetInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetInstances/Get',
            google.cloud.compute.v1.compute_pb2.GetTargetInstanceRequest,
            google.cloud.compute.v1.compute_pb2.TargetInstance,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetInstances/Insert',
            google.cloud.compute.v1.compute_pb2.InsertTargetInstanceRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetInstances/List',
            google.cloud.compute.v1.compute_pb2.ListTargetInstancesRequest,
            google.cloud.compute.v1.compute_pb2.TargetInstanceList,
        )


class TargetPoolsBase(abc.ABC):

    @abc.abstractmethod
    async def AddHealthCheck(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AddHealthCheckTargetPoolRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def AddInstance(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AddInstanceTargetPoolRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListTargetPoolsRequest, google.cloud.compute.v1.compute_pb2.TargetPoolAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteTargetPoolRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetTargetPoolRequest, google.cloud.compute.v1.compute_pb2.TargetPool]') -> None:
        pass

    @abc.abstractmethod
    async def GetHealth(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetHealthTargetPoolRequest, google.cloud.compute.v1.compute_pb2.TargetPoolInstanceHealth]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertTargetPoolRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListTargetPoolsRequest, google.cloud.compute.v1.compute_pb2.TargetPoolList]') -> None:
        pass

    @abc.abstractmethod
    async def RemoveHealthCheck(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.RemoveHealthCheckTargetPoolRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def RemoveInstance(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.RemoveInstanceTargetPoolRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetBackup(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetBackupTargetPoolRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.TargetPools/AddHealthCheck': grpclib.const.Handler(
                self.AddHealthCheck,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AddHealthCheckTargetPoolRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetPools/AddInstance': grpclib.const.Handler(
                self.AddInstance,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AddInstanceTargetPoolRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetPools/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListTargetPoolsRequest,
                google.cloud.compute.v1.compute_pb2.TargetPoolAggregatedList,
            ),
            '/google.cloud.compute.v1.TargetPools/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteTargetPoolRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetPools/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetTargetPoolRequest,
                google.cloud.compute.v1.compute_pb2.TargetPool,
            ),
            '/google.cloud.compute.v1.TargetPools/GetHealth': grpclib.const.Handler(
                self.GetHealth,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetHealthTargetPoolRequest,
                google.cloud.compute.v1.compute_pb2.TargetPoolInstanceHealth,
            ),
            '/google.cloud.compute.v1.TargetPools/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertTargetPoolRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetPools/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListTargetPoolsRequest,
                google.cloud.compute.v1.compute_pb2.TargetPoolList,
            ),
            '/google.cloud.compute.v1.TargetPools/RemoveHealthCheck': grpclib.const.Handler(
                self.RemoveHealthCheck,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.RemoveHealthCheckTargetPoolRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetPools/RemoveInstance': grpclib.const.Handler(
                self.RemoveInstance,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.RemoveInstanceTargetPoolRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetPools/SetBackup': grpclib.const.Handler(
                self.SetBackup,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetBackupTargetPoolRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class TargetPoolsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AddHealthCheck = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetPools/AddHealthCheck',
            google.cloud.compute.v1.compute_pb2.AddHealthCheckTargetPoolRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.AddInstance = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetPools/AddInstance',
            google.cloud.compute.v1.compute_pb2.AddInstanceTargetPoolRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetPools/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListTargetPoolsRequest,
            google.cloud.compute.v1.compute_pb2.TargetPoolAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetPools/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteTargetPoolRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetPools/Get',
            google.cloud.compute.v1.compute_pb2.GetTargetPoolRequest,
            google.cloud.compute.v1.compute_pb2.TargetPool,
        )
        self.GetHealth = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetPools/GetHealth',
            google.cloud.compute.v1.compute_pb2.GetHealthTargetPoolRequest,
            google.cloud.compute.v1.compute_pb2.TargetPoolInstanceHealth,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetPools/Insert',
            google.cloud.compute.v1.compute_pb2.InsertTargetPoolRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetPools/List',
            google.cloud.compute.v1.compute_pb2.ListTargetPoolsRequest,
            google.cloud.compute.v1.compute_pb2.TargetPoolList,
        )
        self.RemoveHealthCheck = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetPools/RemoveHealthCheck',
            google.cloud.compute.v1.compute_pb2.RemoveHealthCheckTargetPoolRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.RemoveInstance = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetPools/RemoveInstance',
            google.cloud.compute.v1.compute_pb2.RemoveInstanceTargetPoolRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetBackup = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetPools/SetBackup',
            google.cloud.compute.v1.compute_pb2.SetBackupTargetPoolRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class TargetSslProxiesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteTargetSslProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetTargetSslProxyRequest, google.cloud.compute.v1.compute_pb2.TargetSslProxy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertTargetSslProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListTargetSslProxiesRequest, google.cloud.compute.v1.compute_pb2.TargetSslProxyList]') -> None:
        pass

    @abc.abstractmethod
    async def SetBackendService(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetBackendServiceTargetSslProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetProxyHeader(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetProxyHeaderTargetSslProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetSslCertificates(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetSslCertificatesTargetSslProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetSslPolicy(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetSslPolicyTargetSslProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.TargetSslProxies/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteTargetSslProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetSslProxies/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetTargetSslProxyRequest,
                google.cloud.compute.v1.compute_pb2.TargetSslProxy,
            ),
            '/google.cloud.compute.v1.TargetSslProxies/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertTargetSslProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetSslProxies/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListTargetSslProxiesRequest,
                google.cloud.compute.v1.compute_pb2.TargetSslProxyList,
            ),
            '/google.cloud.compute.v1.TargetSslProxies/SetBackendService': grpclib.const.Handler(
                self.SetBackendService,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetBackendServiceTargetSslProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetSslProxies/SetProxyHeader': grpclib.const.Handler(
                self.SetProxyHeader,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetProxyHeaderTargetSslProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetSslProxies/SetSslCertificates': grpclib.const.Handler(
                self.SetSslCertificates,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetSslCertificatesTargetSslProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetSslProxies/SetSslPolicy': grpclib.const.Handler(
                self.SetSslPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetSslPolicyTargetSslProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class TargetSslProxiesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetSslProxies/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteTargetSslProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetSslProxies/Get',
            google.cloud.compute.v1.compute_pb2.GetTargetSslProxyRequest,
            google.cloud.compute.v1.compute_pb2.TargetSslProxy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetSslProxies/Insert',
            google.cloud.compute.v1.compute_pb2.InsertTargetSslProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetSslProxies/List',
            google.cloud.compute.v1.compute_pb2.ListTargetSslProxiesRequest,
            google.cloud.compute.v1.compute_pb2.TargetSslProxyList,
        )
        self.SetBackendService = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetSslProxies/SetBackendService',
            google.cloud.compute.v1.compute_pb2.SetBackendServiceTargetSslProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetProxyHeader = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetSslProxies/SetProxyHeader',
            google.cloud.compute.v1.compute_pb2.SetProxyHeaderTargetSslProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetSslCertificates = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetSslProxies/SetSslCertificates',
            google.cloud.compute.v1.compute_pb2.SetSslCertificatesTargetSslProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetSslPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetSslProxies/SetSslPolicy',
            google.cloud.compute.v1.compute_pb2.SetSslPolicyTargetSslProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class TargetTcpProxiesBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteTargetTcpProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetTargetTcpProxyRequest, google.cloud.compute.v1.compute_pb2.TargetTcpProxy]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertTargetTcpProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListTargetTcpProxiesRequest, google.cloud.compute.v1.compute_pb2.TargetTcpProxyList]') -> None:
        pass

    @abc.abstractmethod
    async def SetBackendService(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetBackendServiceTargetTcpProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def SetProxyHeader(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetProxyHeaderTargetTcpProxyRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.TargetTcpProxies/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteTargetTcpProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetTcpProxies/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetTargetTcpProxyRequest,
                google.cloud.compute.v1.compute_pb2.TargetTcpProxy,
            ),
            '/google.cloud.compute.v1.TargetTcpProxies/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertTargetTcpProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetTcpProxies/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListTargetTcpProxiesRequest,
                google.cloud.compute.v1.compute_pb2.TargetTcpProxyList,
            ),
            '/google.cloud.compute.v1.TargetTcpProxies/SetBackendService': grpclib.const.Handler(
                self.SetBackendService,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetBackendServiceTargetTcpProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetTcpProxies/SetProxyHeader': grpclib.const.Handler(
                self.SetProxyHeader,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetProxyHeaderTargetTcpProxyRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class TargetTcpProxiesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetTcpProxies/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteTargetTcpProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetTcpProxies/Get',
            google.cloud.compute.v1.compute_pb2.GetTargetTcpProxyRequest,
            google.cloud.compute.v1.compute_pb2.TargetTcpProxy,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetTcpProxies/Insert',
            google.cloud.compute.v1.compute_pb2.InsertTargetTcpProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetTcpProxies/List',
            google.cloud.compute.v1.compute_pb2.ListTargetTcpProxiesRequest,
            google.cloud.compute.v1.compute_pb2.TargetTcpProxyList,
        )
        self.SetBackendService = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetTcpProxies/SetBackendService',
            google.cloud.compute.v1.compute_pb2.SetBackendServiceTargetTcpProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.SetProxyHeader = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetTcpProxies/SetProxyHeader',
            google.cloud.compute.v1.compute_pb2.SetProxyHeaderTargetTcpProxyRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class TargetVpnGatewaysBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListTargetVpnGatewaysRequest, google.cloud.compute.v1.compute_pb2.TargetVpnGatewayAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteTargetVpnGatewayRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetTargetVpnGatewayRequest, google.cloud.compute.v1.compute_pb2.TargetVpnGateway]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertTargetVpnGatewayRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListTargetVpnGatewaysRequest, google.cloud.compute.v1.compute_pb2.TargetVpnGatewayList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.TargetVpnGateways/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListTargetVpnGatewaysRequest,
                google.cloud.compute.v1.compute_pb2.TargetVpnGatewayAggregatedList,
            ),
            '/google.cloud.compute.v1.TargetVpnGateways/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteTargetVpnGatewayRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetVpnGateways/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetTargetVpnGatewayRequest,
                google.cloud.compute.v1.compute_pb2.TargetVpnGateway,
            ),
            '/google.cloud.compute.v1.TargetVpnGateways/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertTargetVpnGatewayRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.TargetVpnGateways/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListTargetVpnGatewaysRequest,
                google.cloud.compute.v1.compute_pb2.TargetVpnGatewayList,
            ),
        }


class TargetVpnGatewaysStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetVpnGateways/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListTargetVpnGatewaysRequest,
            google.cloud.compute.v1.compute_pb2.TargetVpnGatewayAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetVpnGateways/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteTargetVpnGatewayRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetVpnGateways/Get',
            google.cloud.compute.v1.compute_pb2.GetTargetVpnGatewayRequest,
            google.cloud.compute.v1.compute_pb2.TargetVpnGateway,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetVpnGateways/Insert',
            google.cloud.compute.v1.compute_pb2.InsertTargetVpnGatewayRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.TargetVpnGateways/List',
            google.cloud.compute.v1.compute_pb2.ListTargetVpnGatewaysRequest,
            google.cloud.compute.v1.compute_pb2.TargetVpnGatewayList,
        )


class UrlMapsBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListUrlMapsRequest, google.cloud.compute.v1.compute_pb2.UrlMapsAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteUrlMapRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetUrlMapRequest, google.cloud.compute.v1.compute_pb2.UrlMap]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertUrlMapRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def InvalidateCache(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InvalidateCacheUrlMapRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListUrlMapsRequest, google.cloud.compute.v1.compute_pb2.UrlMapList]') -> None:
        pass

    @abc.abstractmethod
    async def Patch(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.PatchUrlMapRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Update(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.UpdateUrlMapRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Validate(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ValidateUrlMapRequest, google.cloud.compute.v1.compute_pb2.UrlMapsValidateResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.UrlMaps/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListUrlMapsRequest,
                google.cloud.compute.v1.compute_pb2.UrlMapsAggregatedList,
            ),
            '/google.cloud.compute.v1.UrlMaps/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteUrlMapRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.UrlMaps/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetUrlMapRequest,
                google.cloud.compute.v1.compute_pb2.UrlMap,
            ),
            '/google.cloud.compute.v1.UrlMaps/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertUrlMapRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.UrlMaps/InvalidateCache': grpclib.const.Handler(
                self.InvalidateCache,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InvalidateCacheUrlMapRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.UrlMaps/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListUrlMapsRequest,
                google.cloud.compute.v1.compute_pb2.UrlMapList,
            ),
            '/google.cloud.compute.v1.UrlMaps/Patch': grpclib.const.Handler(
                self.Patch,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.PatchUrlMapRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.UrlMaps/Update': grpclib.const.Handler(
                self.Update,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.UpdateUrlMapRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.UrlMaps/Validate': grpclib.const.Handler(
                self.Validate,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ValidateUrlMapRequest,
                google.cloud.compute.v1.compute_pb2.UrlMapsValidateResponse,
            ),
        }


class UrlMapsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.UrlMaps/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListUrlMapsRequest,
            google.cloud.compute.v1.compute_pb2.UrlMapsAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.UrlMaps/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteUrlMapRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.UrlMaps/Get',
            google.cloud.compute.v1.compute_pb2.GetUrlMapRequest,
            google.cloud.compute.v1.compute_pb2.UrlMap,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.UrlMaps/Insert',
            google.cloud.compute.v1.compute_pb2.InsertUrlMapRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.InvalidateCache = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.UrlMaps/InvalidateCache',
            google.cloud.compute.v1.compute_pb2.InvalidateCacheUrlMapRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.UrlMaps/List',
            google.cloud.compute.v1.compute_pb2.ListUrlMapsRequest,
            google.cloud.compute.v1.compute_pb2.UrlMapList,
        )
        self.Patch = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.UrlMaps/Patch',
            google.cloud.compute.v1.compute_pb2.PatchUrlMapRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Update = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.UrlMaps/Update',
            google.cloud.compute.v1.compute_pb2.UpdateUrlMapRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Validate = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.UrlMaps/Validate',
            google.cloud.compute.v1.compute_pb2.ValidateUrlMapRequest,
            google.cloud.compute.v1.compute_pb2.UrlMapsValidateResponse,
        )


class VpnGatewaysBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListVpnGatewaysRequest, google.cloud.compute.v1.compute_pb2.VpnGatewayAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteVpnGatewayRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetVpnGatewayRequest, google.cloud.compute.v1.compute_pb2.VpnGateway]') -> None:
        pass

    @abc.abstractmethod
    async def GetStatus(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetStatusVpnGatewayRequest, google.cloud.compute.v1.compute_pb2.VpnGatewaysGetStatusResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertVpnGatewayRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListVpnGatewaysRequest, google.cloud.compute.v1.compute_pb2.VpnGatewayList]') -> None:
        pass

    @abc.abstractmethod
    async def SetLabels(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.SetLabelsVpnGatewayRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def TestIamPermissions(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.TestIamPermissionsVpnGatewayRequest, google.cloud.compute.v1.compute_pb2.TestPermissionsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.VpnGateways/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListVpnGatewaysRequest,
                google.cloud.compute.v1.compute_pb2.VpnGatewayAggregatedList,
            ),
            '/google.cloud.compute.v1.VpnGateways/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteVpnGatewayRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.VpnGateways/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetVpnGatewayRequest,
                google.cloud.compute.v1.compute_pb2.VpnGateway,
            ),
            '/google.cloud.compute.v1.VpnGateways/GetStatus': grpclib.const.Handler(
                self.GetStatus,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetStatusVpnGatewayRequest,
                google.cloud.compute.v1.compute_pb2.VpnGatewaysGetStatusResponse,
            ),
            '/google.cloud.compute.v1.VpnGateways/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertVpnGatewayRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.VpnGateways/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListVpnGatewaysRequest,
                google.cloud.compute.v1.compute_pb2.VpnGatewayList,
            ),
            '/google.cloud.compute.v1.VpnGateways/SetLabels': grpclib.const.Handler(
                self.SetLabels,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.SetLabelsVpnGatewayRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.VpnGateways/TestIamPermissions': grpclib.const.Handler(
                self.TestIamPermissions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.TestIamPermissionsVpnGatewayRequest,
                google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
            ),
        }


class VpnGatewaysStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.VpnGateways/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListVpnGatewaysRequest,
            google.cloud.compute.v1.compute_pb2.VpnGatewayAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.VpnGateways/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteVpnGatewayRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.VpnGateways/Get',
            google.cloud.compute.v1.compute_pb2.GetVpnGatewayRequest,
            google.cloud.compute.v1.compute_pb2.VpnGateway,
        )
        self.GetStatus = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.VpnGateways/GetStatus',
            google.cloud.compute.v1.compute_pb2.GetStatusVpnGatewayRequest,
            google.cloud.compute.v1.compute_pb2.VpnGatewaysGetStatusResponse,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.VpnGateways/Insert',
            google.cloud.compute.v1.compute_pb2.InsertVpnGatewayRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.VpnGateways/List',
            google.cloud.compute.v1.compute_pb2.ListVpnGatewaysRequest,
            google.cloud.compute.v1.compute_pb2.VpnGatewayList,
        )
        self.SetLabels = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.VpnGateways/SetLabels',
            google.cloud.compute.v1.compute_pb2.SetLabelsVpnGatewayRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.TestIamPermissions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.VpnGateways/TestIamPermissions',
            google.cloud.compute.v1.compute_pb2.TestIamPermissionsVpnGatewayRequest,
            google.cloud.compute.v1.compute_pb2.TestPermissionsResponse,
        )


class VpnTunnelsBase(abc.ABC):

    @abc.abstractmethod
    async def AggregatedList(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.AggregatedListVpnTunnelsRequest, google.cloud.compute.v1.compute_pb2.VpnTunnelAggregatedList]') -> None:
        pass

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteVpnTunnelRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetVpnTunnelRequest, google.cloud.compute.v1.compute_pb2.VpnTunnel]') -> None:
        pass

    @abc.abstractmethod
    async def Insert(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.InsertVpnTunnelRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListVpnTunnelsRequest, google.cloud.compute.v1.compute_pb2.VpnTunnelList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.VpnTunnels/AggregatedList': grpclib.const.Handler(
                self.AggregatedList,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.AggregatedListVpnTunnelsRequest,
                google.cloud.compute.v1.compute_pb2.VpnTunnelAggregatedList,
            ),
            '/google.cloud.compute.v1.VpnTunnels/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteVpnTunnelRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.VpnTunnels/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetVpnTunnelRequest,
                google.cloud.compute.v1.compute_pb2.VpnTunnel,
            ),
            '/google.cloud.compute.v1.VpnTunnels/Insert': grpclib.const.Handler(
                self.Insert,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.InsertVpnTunnelRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.VpnTunnels/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListVpnTunnelsRequest,
                google.cloud.compute.v1.compute_pb2.VpnTunnelList,
            ),
        }


class VpnTunnelsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AggregatedList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.VpnTunnels/AggregatedList',
            google.cloud.compute.v1.compute_pb2.AggregatedListVpnTunnelsRequest,
            google.cloud.compute.v1.compute_pb2.VpnTunnelAggregatedList,
        )
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.VpnTunnels/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteVpnTunnelRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.VpnTunnels/Get',
            google.cloud.compute.v1.compute_pb2.GetVpnTunnelRequest,
            google.cloud.compute.v1.compute_pb2.VpnTunnel,
        )
        self.Insert = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.VpnTunnels/Insert',
            google.cloud.compute.v1.compute_pb2.InsertVpnTunnelRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.VpnTunnels/List',
            google.cloud.compute.v1.compute_pb2.ListVpnTunnelsRequest,
            google.cloud.compute.v1.compute_pb2.VpnTunnelList,
        )


class ZoneOperationsBase(abc.ABC):

    @abc.abstractmethod
    async def Delete(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.DeleteZoneOperationRequest, google.cloud.compute.v1.compute_pb2.DeleteZoneOperationResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetZoneOperationRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListZoneOperationsRequest, google.cloud.compute.v1.compute_pb2.OperationList]') -> None:
        pass

    @abc.abstractmethod
    async def Wait(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.WaitZoneOperationRequest, google.cloud.compute.v1.compute_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.ZoneOperations/Delete': grpclib.const.Handler(
                self.Delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.DeleteZoneOperationRequest,
                google.cloud.compute.v1.compute_pb2.DeleteZoneOperationResponse,
            ),
            '/google.cloud.compute.v1.ZoneOperations/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetZoneOperationRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
            '/google.cloud.compute.v1.ZoneOperations/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListZoneOperationsRequest,
                google.cloud.compute.v1.compute_pb2.OperationList,
            ),
            '/google.cloud.compute.v1.ZoneOperations/Wait': grpclib.const.Handler(
                self.Wait,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.WaitZoneOperationRequest,
                google.cloud.compute.v1.compute_pb2.Operation,
            ),
        }


class ZoneOperationsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ZoneOperations/Delete',
            google.cloud.compute.v1.compute_pb2.DeleteZoneOperationRequest,
            google.cloud.compute.v1.compute_pb2.DeleteZoneOperationResponse,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ZoneOperations/Get',
            google.cloud.compute.v1.compute_pb2.GetZoneOperationRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ZoneOperations/List',
            google.cloud.compute.v1.compute_pb2.ListZoneOperationsRequest,
            google.cloud.compute.v1.compute_pb2.OperationList,
        )
        self.Wait = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.ZoneOperations/Wait',
            google.cloud.compute.v1.compute_pb2.WaitZoneOperationRequest,
            google.cloud.compute.v1.compute_pb2.Operation,
        )


class ZonesBase(abc.ABC):

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.GetZoneRequest, google.cloud.compute.v1.compute_pb2.Zone]') -> None:
        pass

    @abc.abstractmethod
    async def List(self, stream: 'grpclib.server.Stream[google.cloud.compute.v1.compute_pb2.ListZonesRequest, google.cloud.compute.v1.compute_pb2.ZoneList]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.compute.v1.Zones/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.GetZoneRequest,
                google.cloud.compute.v1.compute_pb2.Zone,
            ),
            '/google.cloud.compute.v1.Zones/List': grpclib.const.Handler(
                self.List,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.compute.v1.compute_pb2.ListZonesRequest,
                google.cloud.compute.v1.compute_pb2.ZoneList,
            ),
        }


class ZonesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Zones/Get',
            google.cloud.compute.v1.compute_pb2.GetZoneRequest,
            google.cloud.compute.v1.compute_pb2.Zone,
        )
        self.List = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.compute.v1.Zones/List',
            google.cloud.compute.v1.compute_pb2.ListZonesRequest,
            google.cloud.compute.v1.compute_pb2.ZoneList,
        )
