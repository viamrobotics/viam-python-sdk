"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _MemcacheVersion:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _MemcacheVersionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MemcacheVersion.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    MEMCACHE_VERSION_UNSPECIFIED: MemcacheVersion.ValueType = ...  # 0
    MEMCACHE_1_5: MemcacheVersion.ValueType = ...  # 1
    """Memcached 1.5 version."""

class MemcacheVersion(_MemcacheVersion, metaclass=_MemcacheVersionEnumTypeWrapper):
    """Memcached versions supported by our service."""
    pass

MEMCACHE_VERSION_UNSPECIFIED: MemcacheVersion.ValueType = ...  # 0
MEMCACHE_1_5: MemcacheVersion.ValueType = ...  # 1
"""Memcached 1.5 version."""

global___MemcacheVersion = MemcacheVersion


class Instance(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _State:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_State.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        STATE_UNSPECIFIED: Instance.State.ValueType = ...  # 0
        """State not set."""

        CREATING: Instance.State.ValueType = ...  # 1
        """Memcached instance is being created."""

        READY: Instance.State.ValueType = ...  # 2
        """Memcached instance has been created and ready to be used."""

        DELETING: Instance.State.ValueType = ...  # 4
        """Memcached instance is being deleted."""

        PERFORMING_MAINTENANCE: Instance.State.ValueType = ...  # 5
        """Memcached instance is going through maintenance, e.g. data plane rollout."""

    class State(_State, metaclass=_StateEnumTypeWrapper):
        """Different states of a Memcached instance."""
        pass

    STATE_UNSPECIFIED: Instance.State.ValueType = ...  # 0
    """State not set."""

    CREATING: Instance.State.ValueType = ...  # 1
    """Memcached instance is being created."""

    READY: Instance.State.ValueType = ...  # 2
    """Memcached instance has been created and ready to be used."""

    DELETING: Instance.State.ValueType = ...  # 4
    """Memcached instance is being deleted."""

    PERFORMING_MAINTENANCE: Instance.State.ValueType = ...  # 5
    """Memcached instance is going through maintenance, e.g. data plane rollout."""


    class NodeConfig(google.protobuf.message.Message):
        """Configuration for a Memcached Node."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        CPU_COUNT_FIELD_NUMBER: builtins.int
        MEMORY_SIZE_MB_FIELD_NUMBER: builtins.int
        cpu_count: builtins.int = ...
        """Required. Number of cpus per Memcached node."""

        memory_size_mb: builtins.int = ...
        """Required. Memory size in MiB for each Memcached node."""

        def __init__(self,
            *,
            cpu_count : builtins.int = ...,
            memory_size_mb : builtins.int = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["cpu_count",b"cpu_count","memory_size_mb",b"memory_size_mb"]) -> None: ...

    class Node(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _State:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _StateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_State.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            STATE_UNSPECIFIED: Instance.Node.State.ValueType = ...  # 0
            """Node state is not set."""

            CREATING: Instance.Node.State.ValueType = ...  # 1
            """Node is being created."""

            READY: Instance.Node.State.ValueType = ...  # 2
            """Node has been created and ready to be used."""

            DELETING: Instance.Node.State.ValueType = ...  # 3
            """Node is being deleted."""

            UPDATING: Instance.Node.State.ValueType = ...  # 4
            """Node is being updated."""

        class State(_State, metaclass=_StateEnumTypeWrapper):
            """Different states of a Memcached node."""
            pass

        STATE_UNSPECIFIED: Instance.Node.State.ValueType = ...  # 0
        """Node state is not set."""

        CREATING: Instance.Node.State.ValueType = ...  # 1
        """Node is being created."""

        READY: Instance.Node.State.ValueType = ...  # 2
        """Node has been created and ready to be used."""

        DELETING: Instance.Node.State.ValueType = ...  # 3
        """Node is being deleted."""

        UPDATING: Instance.Node.State.ValueType = ...  # 4
        """Node is being updated."""


        NODE_ID_FIELD_NUMBER: builtins.int
        ZONE_FIELD_NUMBER: builtins.int
        STATE_FIELD_NUMBER: builtins.int
        HOST_FIELD_NUMBER: builtins.int
        PORT_FIELD_NUMBER: builtins.int
        PARAMETERS_FIELD_NUMBER: builtins.int
        node_id: typing.Text = ...
        """Output only. Identifier of the Memcached node. The node id does not
        include project or location like the Memcached instance name.
        """

        zone: typing.Text = ...
        """Output only. Location (GCP Zone) for the Memcached node."""

        state: global___Instance.Node.State.ValueType = ...
        """Output only. Current state of the Memcached node."""

        host: typing.Text = ...
        """Output only. Hostname or IP address of the Memcached node used by the
        clients to connect to the Memcached server on this node.
        """

        port: builtins.int = ...
        """Output only. The port number of the Memcached server on this node."""

        @property
        def parameters(self) -> global___MemcacheParameters:
            """User defined parameters currently applied to the node."""
            pass
        def __init__(self,
            *,
            node_id : typing.Text = ...,
            zone : typing.Text = ...,
            state : global___Instance.Node.State.ValueType = ...,
            host : typing.Text = ...,
            port : builtins.int = ...,
            parameters : typing.Optional[global___MemcacheParameters] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["parameters",b"parameters"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["host",b"host","node_id",b"node_id","parameters",b"parameters","port",b"port","state",b"state","zone",b"zone"]) -> None: ...

    class InstanceMessage(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _Code:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _CodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Code.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            CODE_UNSPECIFIED: Instance.InstanceMessage.Code.ValueType = ...  # 0
            """Message Code not set."""

            ZONE_DISTRIBUTION_UNBALANCED: Instance.InstanceMessage.Code.ValueType = ...  # 1
            """Memcached nodes are distributed unevenly."""

        class Code(_Code, metaclass=_CodeEnumTypeWrapper):
            pass

        CODE_UNSPECIFIED: Instance.InstanceMessage.Code.ValueType = ...  # 0
        """Message Code not set."""

        ZONE_DISTRIBUTION_UNBALANCED: Instance.InstanceMessage.Code.ValueType = ...  # 1
        """Memcached nodes are distributed unevenly."""


        CODE_FIELD_NUMBER: builtins.int
        MESSAGE_FIELD_NUMBER: builtins.int
        code: global___Instance.InstanceMessage.Code.ValueType = ...
        """A code that correspond to one type of user-facing message."""

        message: typing.Text = ...
        """Message on memcached instance which will be exposed to users."""

        def __init__(self,
            *,
            code : global___Instance.InstanceMessage.Code.ValueType = ...,
            message : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["code",b"code","message",b"message"]) -> None: ...

    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    AUTHORIZED_NETWORK_FIELD_NUMBER: builtins.int
    ZONES_FIELD_NUMBER: builtins.int
    NODE_COUNT_FIELD_NUMBER: builtins.int
    NODE_CONFIG_FIELD_NUMBER: builtins.int
    MEMCACHE_VERSION_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    MEMCACHE_NODES_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    MEMCACHE_FULL_VERSION_FIELD_NUMBER: builtins.int
    INSTANCE_MESSAGES_FIELD_NUMBER: builtins.int
    DISCOVERY_ENDPOINT_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Unique name of the resource in this scope including project and
    location using the form:
        `projects/{project_id}/locations/{location_id}/instances/{instance_id}`

    Note: Memcached instances are managed and addressed at regional level so
    location_id here refers to a GCP region; however, users may choose which
    zones Memcached nodes within an instances should be provisioned in.
    Refer to [zones] field for more details.
    """

    display_name: typing.Text = ...
    """User provided name for the instance only used for display
    purposes. Cannot be more than 80 characters.
    """

    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Resource labels to represent user-provided metadata.
        Refer to cloud documentation on labels for more details.
        https://cloud.google.com/compute/docs/labeling-resources
        """
        pass
    authorized_network: typing.Text = ...
    """The full name of the Google Compute Engine
    [network](/compute/docs/networks-and-firewalls#networks) to which the
    instance is connected. If left unspecified, the `default` network
    will be used.
    """

    @property
    def zones(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Zones where Memcached nodes should be provisioned in.
        Memcached nodes will be equally distributed across these zones. If not
        provided, the service will by default create nodes in all zones in the
        region for the instance.
        """
        pass
    node_count: builtins.int = ...
    """Required. Number of nodes in the Memcached instance."""

    @property
    def node_config(self) -> global___Instance.NodeConfig:
        """Required. Configuration for Memcached nodes."""
        pass
    memcache_version: global___MemcacheVersion.ValueType = ...
    """The major version of Memcached software.
    If not provided, latest supported version will be used. Currently the
    latest supported major version is MEMCACHE_1_5.
    The minor version will be automatically determined by our system based on
    the latest supported minor version.
    """

    @property
    def parameters(self) -> global___MemcacheParameters:
        """Optional: User defined parameters to apply to the memcached process
        on each node.
        """
        pass
    @property
    def memcache_nodes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Instance.Node]:
        """Output only. List of Memcached nodes.
        Refer to [Node] message for more details.
        """
        pass
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time the instance was created."""
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time the instance was updated."""
        pass
    state: global___Instance.State.ValueType = ...
    """Output only. The state of this Memcached instance."""

    memcache_full_version: typing.Text = ...
    """Output only. The full version of memcached server running on this instance.
    System automatically determines the full memcached version for an instance
    based on the input MemcacheVersion.
    The full version format will be "memcached-1.5.16".
    """

    @property
    def instance_messages(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Instance.InstanceMessage]:
        """List of messages that describe current statuses of memcached instance."""
        pass
    discovery_endpoint: typing.Text = ...
    """Output only. Endpoint for Discovery API"""

    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        authorized_network : typing.Text = ...,
        zones : typing.Optional[typing.Iterable[typing.Text]] = ...,
        node_count : builtins.int = ...,
        node_config : typing.Optional[global___Instance.NodeConfig] = ...,
        memcache_version : global___MemcacheVersion.ValueType = ...,
        parameters : typing.Optional[global___MemcacheParameters] = ...,
        memcache_nodes : typing.Optional[typing.Iterable[global___Instance.Node]] = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        state : global___Instance.State.ValueType = ...,
        memcache_full_version : typing.Text = ...,
        instance_messages : typing.Optional[typing.Iterable[global___Instance.InstanceMessage]] = ...,
        discovery_endpoint : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time","node_config",b"node_config","parameters",b"parameters","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["authorized_network",b"authorized_network","create_time",b"create_time","discovery_endpoint",b"discovery_endpoint","display_name",b"display_name","instance_messages",b"instance_messages","labels",b"labels","memcache_full_version",b"memcache_full_version","memcache_nodes",b"memcache_nodes","memcache_version",b"memcache_version","name",b"name","node_config",b"node_config","node_count",b"node_count","parameters",b"parameters","state",b"state","update_time",b"update_time","zones",b"zones"]) -> None: ...
global___Instance = Instance

class ListInstancesRequest(google.protobuf.message.Message):
    """Request for [ListInstances][google.cloud.memcache.v1.CloudMemcache.ListInstances]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The resource name of the instance location using the form:
        `projects/{project_id}/locations/{location_id}`
    where `location_id` refers to a GCP region
    """

    page_size: builtins.int = ...
    """The maximum number of items to return.

    If not specified, a default value of 1000 will be used by the service.
    Regardless of the page_size value, the response may include a partial list
    and a caller should only rely on response's
    [next_page_token][CloudMemcache.ListInstancesResponse.next_page_token]
    to determine if there are more instances left to be queried.
    """

    page_token: typing.Text = ...
    """The next_page_token value returned from a previous List request,
    if any.
    """

    filter: typing.Text = ...
    """List filter. For example, exclude all Memcached instances with name as
    my-instance by specifying "name != my-instance".
    """

    order_by: typing.Text = ...
    """Sort results. Supported values are "name", "name desc" or "" (unsorted)."""

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        filter : typing.Text = ...,
        order_by : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","order_by",b"order_by","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListInstancesRequest = ListInstancesRequest

class ListInstancesResponse(google.protobuf.message.Message):
    """Response for [ListInstances][google.cloud.memcache.v1.CloudMemcache.ListInstances]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INSTANCES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    UNREACHABLE_FIELD_NUMBER: builtins.int
    @property
    def instances(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Instance]:
        """A list of Memcached instances in the project in the specified location,
        or across all locations.

        If the `location_id` in the parent field of the request is "-", all regions
        available to the project are queried, and the results aggregated.
        """
        pass
    next_page_token: typing.Text = ...
    """Token to retrieve the next page of results, or empty if there are no more
    results in the list.
    """

    @property
    def unreachable(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Locations that could not be reached."""
        pass
    def __init__(self,
        *,
        instances : typing.Optional[typing.Iterable[global___Instance]] = ...,
        next_page_token : typing.Text = ...,
        unreachable : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["instances",b"instances","next_page_token",b"next_page_token","unreachable",b"unreachable"]) -> None: ...
global___ListInstancesResponse = ListInstancesResponse

class GetInstanceRequest(google.protobuf.message.Message):
    """Request for [GetInstance][google.cloud.memcache.v1.CloudMemcache.GetInstance]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Memcached instance resource name in the format:
        `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
    where `location_id` refers to a GCP region
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetInstanceRequest = GetInstanceRequest

class CreateInstanceRequest(google.protobuf.message.Message):
    """Request for [CreateInstance][google.cloud.memcache.v1.CloudMemcache.CreateInstance]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    INSTANCE_ID_FIELD_NUMBER: builtins.int
    INSTANCE_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The resource name of the instance location using the form:
        `projects/{project_id}/locations/{location_id}`
    where `location_id` refers to a GCP region
    """

    instance_id: typing.Text = ...
    """Required. The logical name of the Memcached instance in the user
    project with the following restrictions:

    * Must contain only lowercase letters, numbers, and hyphens.
    * Must start with a letter.
    * Must be between 1-40 characters.
    * Must end with a number or a letter.
    * Must be unique within the user project / location

    If any of the above are not met, will raise an invalid argument error.
    """

    @property
    def instance(self) -> global___Instance:
        """Required. A Memcached Instance"""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        instance_id : typing.Text = ...,
        instance : typing.Optional[global___Instance] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["instance",b"instance"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["instance",b"instance","instance_id",b"instance_id","parent",b"parent"]) -> None: ...
global___CreateInstanceRequest = CreateInstanceRequest

class UpdateInstanceRequest(google.protobuf.message.Message):
    """Request for [UpdateInstance][google.cloud.memcache.v1.CloudMemcache.UpdateInstance]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    INSTANCE_FIELD_NUMBER: builtins.int
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Required. Mask of fields to update.
         *   `displayName`
        """
        pass
    @property
    def instance(self) -> global___Instance:
        """Required. A Memcached Instance.
        Only fields specified in update_mask are updated.
        """
        pass
    def __init__(self,
        *,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        instance : typing.Optional[global___Instance] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["instance",b"instance","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["instance",b"instance","update_mask",b"update_mask"]) -> None: ...
global___UpdateInstanceRequest = UpdateInstanceRequest

class DeleteInstanceRequest(google.protobuf.message.Message):
    """Request for [DeleteInstance][google.cloud.memcache.v1.CloudMemcache.DeleteInstance]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Memcached instance resource name in the format:
        `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
    where `location_id` refers to a GCP region
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteInstanceRequest = DeleteInstanceRequest

class ApplyParametersRequest(google.protobuf.message.Message):
    """Request for [ApplyParameters][google.cloud.memcache.v1.CloudMemcache.ApplyParameters]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    NODE_IDS_FIELD_NUMBER: builtins.int
    APPLY_ALL_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Resource name of the Memcached instance for which parameter group updates
    should be applied.
    """

    @property
    def node_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Nodes to which we should apply the instance-level parameter group."""
        pass
    apply_all: builtins.bool = ...
    """Whether to apply instance-level parameter group to all nodes. If set to
    true, will explicitly restrict users from specifying any nodes, and apply
    parameter group updates to all nodes within the instance.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        node_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        apply_all : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["apply_all",b"apply_all","name",b"name","node_ids",b"node_ids"]) -> None: ...
global___ApplyParametersRequest = ApplyParametersRequest

class UpdateParametersRequest(google.protobuf.message.Message):
    """Request for [UpdateParameters][google.cloud.memcache.v1.CloudMemcache.UpdateParameters]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Resource name of the Memcached instance for which the parameters should be
    updated.
    """

    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Required. Mask of fields to update."""
        pass
    @property
    def parameters(self) -> global___MemcacheParameters:
        """The parameters to apply to the instance."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        parameters : typing.Optional[global___MemcacheParameters] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["parameters",b"parameters","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","parameters",b"parameters","update_mask",b"update_mask"]) -> None: ...
global___UpdateParametersRequest = UpdateParametersRequest

class MemcacheParameters(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ParamsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    PARAMS_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """Output only. The unique ID associated with this set of parameters. Users
    can use this id to determine if the parameters associated with the instance
    differ from the parameters associated with the nodes and any action needs
    to be taken to apply parameters on nodes.
    """

    @property
    def params(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """User defined set of parameters to use in the memcached process."""
        pass
    def __init__(self,
        *,
        id : typing.Text = ...,
        params : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id","params",b"params"]) -> None: ...
global___MemcacheParameters = MemcacheParameters

class OperationMetadata(google.protobuf.message.Message):
    """Represents the metadata of a long-running operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CREATE_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    TARGET_FIELD_NUMBER: builtins.int
    VERB_FIELD_NUMBER: builtins.int
    STATUS_DETAIL_FIELD_NUMBER: builtins.int
    CANCEL_REQUESTED_FIELD_NUMBER: builtins.int
    API_VERSION_FIELD_NUMBER: builtins.int
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Time when the operation was created."""
        pass
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Time when the operation finished running."""
        pass
    target: typing.Text = ...
    """Output only. Server-defined resource path for the target of the operation."""

    verb: typing.Text = ...
    """Output only. Name of the verb executed by the operation."""

    status_detail: typing.Text = ...
    """Output only. Human-readable status of the operation, if any."""

    cancel_requested: builtins.bool = ...
    """Output only. Identifies whether the user has requested cancellation
    of the operation. Operations that have successfully been cancelled
    have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
    corresponding to `Code.CANCELLED`.
    """

    api_version: typing.Text = ...
    """Output only. API version used to start the operation."""

    def __init__(self,
        *,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        end_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        target : typing.Text = ...,
        verb : typing.Text = ...,
        status_detail : typing.Text = ...,
        cancel_requested : builtins.bool = ...,
        api_version : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time","end_time",b"end_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["api_version",b"api_version","cancel_requested",b"cancel_requested","create_time",b"create_time","end_time",b"end_time","status_detail",b"status_detail","target",b"target","verb",b"verb"]) -> None: ...
global___OperationMetadata = OperationMetadata
