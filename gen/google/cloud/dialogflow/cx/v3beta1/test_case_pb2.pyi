"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.dialogflow.cx.v3beta1.flow_pb2
import google.cloud.dialogflow.cx.v3beta1.intent_pb2
import google.cloud.dialogflow.cx.v3beta1.page_pb2
import google.cloud.dialogflow.cx.v3beta1.response_message_pb2
import google.cloud.dialogflow.cx.v3beta1.session_pb2
import google.cloud.dialogflow.cx.v3beta1.transition_route_group_pb2
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import google.protobuf.timestamp_pb2
import google.rpc.status_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _TestResult:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _TestResultEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TestResult.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    TEST_RESULT_UNSPECIFIED: TestResult.ValueType = ...  # 0
    """Not specified. Should never be used."""

    PASSED: TestResult.ValueType = ...  # 1
    """The test passed."""

    FAILED: TestResult.ValueType = ...  # 2
    """The test did not pass."""

class TestResult(_TestResult, metaclass=_TestResultEnumTypeWrapper):
    """The test result for a test case and an agent environment."""
    pass

TEST_RESULT_UNSPECIFIED: TestResult.ValueType = ...  # 0
"""Not specified. Should never be used."""

PASSED: TestResult.ValueType = ...  # 1
"""The test passed."""

FAILED: TestResult.ValueType = ...  # 2
"""The test did not pass."""

global___TestResult = TestResult


class TestCase(google.protobuf.message.Message):
    """Represents a test case."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    TAGS_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    TEST_CONFIG_FIELD_NUMBER: builtins.int
    TEST_CASE_CONVERSATION_TURNS_FIELD_NUMBER: builtins.int
    CREATION_TIME_FIELD_NUMBER: builtins.int
    LAST_TEST_RESULT_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The unique identifier of the test case.
    [TestCases.CreateTestCase][google.cloud.dialogflow.cx.v3beta1.TestCases.CreateTestCase] will populate the name automatically.
    Otherwise use format: `projects/<Project ID>/locations/<LocationID>/agents/
    <AgentID>/testCases/<TestCase ID>`.
    """

    @property
    def tags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Tags are short descriptions that users may apply to test cases for
        organizational and filtering purposes. Each tag should start with "#" and
        has a limit of 30 characters.
        """
        pass
    display_name: typing.Text = ...
    """Required. The human-readable name of the test case, unique within the agent. Limit of
    200 characters.
    """

    notes: typing.Text = ...
    """Additional freeform notes about the test case. Limit of 400 characters."""

    @property
    def test_config(self) -> global___TestConfig:
        """Config for the test case."""
        pass
    @property
    def test_case_conversation_turns(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ConversationTurn]:
        """The conversation turns uttered when the test case was created, in
        chronological order. These include the canonical set of agent utterances
        that should occur when the agent is working properly.
        """
        pass
    @property
    def creation_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. When the test was created."""
        pass
    @property
    def last_test_result(self) -> global___TestCaseResult:
        """The latest test result."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        tags : typing.Optional[typing.Iterable[typing.Text]] = ...,
        display_name : typing.Text = ...,
        notes : typing.Text = ...,
        test_config : typing.Optional[global___TestConfig] = ...,
        test_case_conversation_turns : typing.Optional[typing.Iterable[global___ConversationTurn]] = ...,
        creation_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        last_test_result : typing.Optional[global___TestCaseResult] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["creation_time",b"creation_time","last_test_result",b"last_test_result","test_config",b"test_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["creation_time",b"creation_time","display_name",b"display_name","last_test_result",b"last_test_result","name",b"name","notes",b"notes","tags",b"tags","test_case_conversation_turns",b"test_case_conversation_turns","test_config",b"test_config"]) -> None: ...
global___TestCase = TestCase

class TestCaseResult(google.protobuf.message.Message):
    """Represents a result from running a test case in an agent environment."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    ENVIRONMENT_FIELD_NUMBER: builtins.int
    CONVERSATION_TURNS_FIELD_NUMBER: builtins.int
    TEST_RESULT_FIELD_NUMBER: builtins.int
    TEST_TIME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The resource name for the test case result. Format:
    `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/testCases/
    <TestCase ID>/results/<TestCaseResult ID>`.
    """

    environment: typing.Text = ...
    """Environment where the test was run. If not set, it indicates the draft
    environment.
    """

    @property
    def conversation_turns(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ConversationTurn]:
        """The conversation turns uttered during the test case replay in chronological
        order.
        """
        pass
    test_result: global___TestResult.ValueType = ...
    """Whether the test case passed in the agent environment."""

    @property
    def test_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time that the test was run."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        environment : typing.Text = ...,
        conversation_turns : typing.Optional[typing.Iterable[global___ConversationTurn]] = ...,
        test_result : global___TestResult.ValueType = ...,
        test_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["test_time",b"test_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["conversation_turns",b"conversation_turns","environment",b"environment","name",b"name","test_result",b"test_result","test_time",b"test_time"]) -> None: ...
global___TestCaseResult = TestCaseResult

class TestConfig(google.protobuf.message.Message):
    """Represents configurations for a test case."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TRACKING_PARAMETERS_FIELD_NUMBER: builtins.int
    FLOW_FIELD_NUMBER: builtins.int
    @property
    def tracking_parameters(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Session parameters to be compared when calculating differences."""
        pass
    flow: typing.Text = ...
    """Flow name. If not set, default start flow is assumed.
    Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
    ID>/flows/<Flow ID>`.
    """

    def __init__(self,
        *,
        tracking_parameters : typing.Optional[typing.Iterable[typing.Text]] = ...,
        flow : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["flow",b"flow","tracking_parameters",b"tracking_parameters"]) -> None: ...
global___TestConfig = TestConfig

class ConversationTurn(google.protobuf.message.Message):
    """One interaction between a human and virtual agent. The human provides some
    input and the virtual agent provides a response.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class UserInput(google.protobuf.message.Message):
        """The input from the human user."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        INPUT_FIELD_NUMBER: builtins.int
        INJECTED_PARAMETERS_FIELD_NUMBER: builtins.int
        IS_WEBHOOK_ENABLED_FIELD_NUMBER: builtins.int
        ENABLE_SENTIMENT_ANALYSIS_FIELD_NUMBER: builtins.int
        @property
        def input(self) -> google.cloud.dialogflow.cx.v3beta1.session_pb2.QueryInput:
            """Supports [text input][google.cloud.dialogflow.cx.v3beta1.QueryInput.text], [event input][google.cloud.dialogflow.cx.v3beta1.QueryInput.event],
            [dtmf input][google.cloud.dialogflow.cx.v3beta1.QueryInput.dtmf] in the test case.
            """
            pass
        @property
        def injected_parameters(self) -> google.protobuf.struct_pb2.Struct:
            """Parameters that need to be injected into the conversation during intent
            detection.
            """
            pass
        is_webhook_enabled: builtins.bool = ...
        """If webhooks should be allowed to trigger in response to the user
        utterance. Often if parameters are injected, webhooks should not be
        enabled.
        """

        enable_sentiment_analysis: builtins.bool = ...
        """Whether sentiment analysis is enabled."""

        def __init__(self,
            *,
            input : typing.Optional[google.cloud.dialogflow.cx.v3beta1.session_pb2.QueryInput] = ...,
            injected_parameters : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
            is_webhook_enabled : builtins.bool = ...,
            enable_sentiment_analysis : builtins.bool = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["injected_parameters",b"injected_parameters","input",b"input"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["enable_sentiment_analysis",b"enable_sentiment_analysis","injected_parameters",b"injected_parameters","input",b"input","is_webhook_enabled",b"is_webhook_enabled"]) -> None: ...

    class VirtualAgentOutput(google.protobuf.message.Message):
        """The output from the virtual agent."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        SESSION_PARAMETERS_FIELD_NUMBER: builtins.int
        DIFFERENCES_FIELD_NUMBER: builtins.int
        DIAGNOSTIC_INFO_FIELD_NUMBER: builtins.int
        TRIGGERED_INTENT_FIELD_NUMBER: builtins.int
        CURRENT_PAGE_FIELD_NUMBER: builtins.int
        TEXT_RESPONSES_FIELD_NUMBER: builtins.int
        STATUS_FIELD_NUMBER: builtins.int
        @property
        def session_parameters(self) -> google.protobuf.struct_pb2.Struct:
            """The session parameters available to the bot at this point."""
            pass
        @property
        def differences(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TestRunDifference]:
            """Output only. If this is part of a [result conversation
            turn][TestCaseResult.conversation_turns], the list of differences
            between the original run and the replay for this output, if any.
            """
            pass
        @property
        def diagnostic_info(self) -> google.protobuf.struct_pb2.Struct:
            """Required. Input only. The diagnostic
            [info][Session.DetectIntentResponse.QueryResult.diagnostic_info]
            output for the turn. Required to calculate the testing coverage.
            """
            pass
        @property
        def triggered_intent(self) -> google.cloud.dialogflow.cx.v3beta1.intent_pb2.Intent:
            """The [Intent][google.cloud.dialogflow.cx.v3beta1.Intent] that triggered the response. Only name and displayName
            will be set.
            """
            pass
        @property
        def current_page(self) -> google.cloud.dialogflow.cx.v3beta1.page_pb2.Page:
            """The [Page][google.cloud.dialogflow.cx.v3beta1.Page] on which the utterance was spoken. Only name and displayName
            will be set.
            """
            pass
        @property
        def text_responses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.dialogflow.cx.v3beta1.response_message_pb2.ResponseMessage.Text]:
            """The [text][google.cloud.dialogflow.cx.v3beta1.ResponseMessage.Text] responses from the agent for the turn."""
            pass
        @property
        def status(self) -> google.rpc.status_pb2.Status:
            """Response error from the agent in the test result. If set, other output
            is empty.
            """
            pass
        def __init__(self,
            *,
            session_parameters : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
            differences : typing.Optional[typing.Iterable[global___TestRunDifference]] = ...,
            diagnostic_info : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
            triggered_intent : typing.Optional[google.cloud.dialogflow.cx.v3beta1.intent_pb2.Intent] = ...,
            current_page : typing.Optional[google.cloud.dialogflow.cx.v3beta1.page_pb2.Page] = ...,
            text_responses : typing.Optional[typing.Iterable[google.cloud.dialogflow.cx.v3beta1.response_message_pb2.ResponseMessage.Text]] = ...,
            status : typing.Optional[google.rpc.status_pb2.Status] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["current_page",b"current_page","diagnostic_info",b"diagnostic_info","session_parameters",b"session_parameters","status",b"status","triggered_intent",b"triggered_intent"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["current_page",b"current_page","diagnostic_info",b"diagnostic_info","differences",b"differences","session_parameters",b"session_parameters","status",b"status","text_responses",b"text_responses","triggered_intent",b"triggered_intent"]) -> None: ...

    USER_INPUT_FIELD_NUMBER: builtins.int
    VIRTUAL_AGENT_OUTPUT_FIELD_NUMBER: builtins.int
    @property
    def user_input(self) -> global___ConversationTurn.UserInput:
        """The user input."""
        pass
    @property
    def virtual_agent_output(self) -> global___ConversationTurn.VirtualAgentOutput:
        """The virtual agent output."""
        pass
    def __init__(self,
        *,
        user_input : typing.Optional[global___ConversationTurn.UserInput] = ...,
        virtual_agent_output : typing.Optional[global___ConversationTurn.VirtualAgentOutput] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["user_input",b"user_input","virtual_agent_output",b"virtual_agent_output"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["user_input",b"user_input","virtual_agent_output",b"virtual_agent_output"]) -> None: ...
global___ConversationTurn = ConversationTurn

class TestRunDifference(google.protobuf.message.Message):
    """The description of differences between original and replayed agent output."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _DiffType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _DiffTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_DiffType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        DIFF_TYPE_UNSPECIFIED: TestRunDifference.DiffType.ValueType = ...  # 0
        """Should never be used."""

        INTENT: TestRunDifference.DiffType.ValueType = ...  # 1
        """The intent."""

        PAGE: TestRunDifference.DiffType.ValueType = ...  # 2
        """The page."""

        PARAMETERS: TestRunDifference.DiffType.ValueType = ...  # 3
        """The parameters."""

        UTTERANCE: TestRunDifference.DiffType.ValueType = ...  # 4
        """The message utterance."""

    class DiffType(_DiffType, metaclass=_DiffTypeEnumTypeWrapper):
        """What part of the message replay differs from the test case."""
        pass

    DIFF_TYPE_UNSPECIFIED: TestRunDifference.DiffType.ValueType = ...  # 0
    """Should never be used."""

    INTENT: TestRunDifference.DiffType.ValueType = ...  # 1
    """The intent."""

    PAGE: TestRunDifference.DiffType.ValueType = ...  # 2
    """The page."""

    PARAMETERS: TestRunDifference.DiffType.ValueType = ...  # 3
    """The parameters."""

    UTTERANCE: TestRunDifference.DiffType.ValueType = ...  # 4
    """The message utterance."""


    TYPE_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    type: global___TestRunDifference.DiffType.ValueType = ...
    """The type of diff."""

    description: typing.Text = ...
    """A description of the diff, showing the actual output vs expected output."""

    def __init__(self,
        *,
        type : global___TestRunDifference.DiffType.ValueType = ...,
        description : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","type",b"type"]) -> None: ...
global___TestRunDifference = TestRunDifference

class TransitionCoverage(google.protobuf.message.Message):
    """Transition coverage represents the percentage of all possible page
    transitions (page-level transition routes and event handlers, excluding
    transition route groups) present within any of a parent's test cases.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class TransitionNode(google.protobuf.message.Message):
        """The source or target of a transition."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        PAGE_FIELD_NUMBER: builtins.int
        FLOW_FIELD_NUMBER: builtins.int
        @property
        def page(self) -> google.cloud.dialogflow.cx.v3beta1.page_pb2.Page:
            """Indicates a transition to a [Page][google.cloud.dialogflow.cx.v3beta1.Page]. Only some fields such as name and
            displayname will be set.
            """
            pass
        @property
        def flow(self) -> google.cloud.dialogflow.cx.v3beta1.flow_pb2.Flow:
            """Indicates a transition to a [Flow][google.cloud.dialogflow.cx.v3beta1.Flow]. Only some fields such as name and
            displayname will be set.
            """
            pass
        def __init__(self,
            *,
            page : typing.Optional[google.cloud.dialogflow.cx.v3beta1.page_pb2.Page] = ...,
            flow : typing.Optional[google.cloud.dialogflow.cx.v3beta1.flow_pb2.Flow] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["flow",b"flow","kind",b"kind","page",b"page"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["flow",b"flow","kind",b"kind","page",b"page"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["kind",b"kind"]) -> typing.Optional[typing_extensions.Literal["page","flow"]]: ...

    class Transition(google.protobuf.message.Message):
        """A transition in a page."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        SOURCE_FIELD_NUMBER: builtins.int
        INDEX_FIELD_NUMBER: builtins.int
        TARGET_FIELD_NUMBER: builtins.int
        COVERED_FIELD_NUMBER: builtins.int
        TRANSITION_ROUTE_FIELD_NUMBER: builtins.int
        EVENT_HANDLER_FIELD_NUMBER: builtins.int
        @property
        def source(self) -> global___TransitionCoverage.TransitionNode:
            """The start node of a transition."""
            pass
        index: builtins.int = ...
        """The index of a transition in the transition list. Starting from 0."""

        @property
        def target(self) -> global___TransitionCoverage.TransitionNode:
            """The end node of a transition."""
            pass
        covered: builtins.bool = ...
        """Whether or not the transition is covered by at least one of the
        agent's test cases.
        """

        @property
        def transition_route(self) -> google.cloud.dialogflow.cx.v3beta1.page_pb2.TransitionRoute:
            """Intent route or condition route."""
            pass
        @property
        def event_handler(self) -> google.cloud.dialogflow.cx.v3beta1.page_pb2.EventHandler:
            """Event handler."""
            pass
        def __init__(self,
            *,
            source : typing.Optional[global___TransitionCoverage.TransitionNode] = ...,
            index : builtins.int = ...,
            target : typing.Optional[global___TransitionCoverage.TransitionNode] = ...,
            covered : builtins.bool = ...,
            transition_route : typing.Optional[google.cloud.dialogflow.cx.v3beta1.page_pb2.TransitionRoute] = ...,
            event_handler : typing.Optional[google.cloud.dialogflow.cx.v3beta1.page_pb2.EventHandler] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["detail",b"detail","event_handler",b"event_handler","source",b"source","target",b"target","transition_route",b"transition_route"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["covered",b"covered","detail",b"detail","event_handler",b"event_handler","index",b"index","source",b"source","target",b"target","transition_route",b"transition_route"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["detail",b"detail"]) -> typing.Optional[typing_extensions.Literal["transition_route","event_handler"]]: ...

    TRANSITIONS_FIELD_NUMBER: builtins.int
    COVERAGE_SCORE_FIELD_NUMBER: builtins.int
    @property
    def transitions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TransitionCoverage.Transition]:
        """The list of Transitions present in the agent."""
        pass
    coverage_score: builtins.float = ...
    """The percent of transitions in the agent that are covered."""

    def __init__(self,
        *,
        transitions : typing.Optional[typing.Iterable[global___TransitionCoverage.Transition]] = ...,
        coverage_score : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["coverage_score",b"coverage_score","transitions",b"transitions"]) -> None: ...
global___TransitionCoverage = TransitionCoverage

class TransitionRouteGroupCoverage(google.protobuf.message.Message):
    """Transition route group coverage represents the percentage of all possible
    transition routes present within any of a parent's test cases. The results
    are grouped by the transition route group.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Coverage(google.protobuf.message.Message):
        """Coverage result message for one transition route group."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class Transition(google.protobuf.message.Message):
            """A transition coverage in a transition route group."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            TRANSITION_ROUTE_FIELD_NUMBER: builtins.int
            COVERED_FIELD_NUMBER: builtins.int
            @property
            def transition_route(self) -> google.cloud.dialogflow.cx.v3beta1.page_pb2.TransitionRoute:
                """Intent route or condition route."""
                pass
            covered: builtins.bool = ...
            """Whether or not the transition route is covered by at least one of the
            agent's test cases.
            """

            def __init__(self,
                *,
                transition_route : typing.Optional[google.cloud.dialogflow.cx.v3beta1.page_pb2.TransitionRoute] = ...,
                covered : builtins.bool = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["transition_route",b"transition_route"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["covered",b"covered","transition_route",b"transition_route"]) -> None: ...

        ROUTE_GROUP_FIELD_NUMBER: builtins.int
        TRANSITIONS_FIELD_NUMBER: builtins.int
        COVERAGE_SCORE_FIELD_NUMBER: builtins.int
        @property
        def route_group(self) -> google.cloud.dialogflow.cx.v3beta1.transition_route_group_pb2.TransitionRouteGroup:
            """Transition route group metadata. Only name and displayName will be set."""
            pass
        @property
        def transitions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TransitionRouteGroupCoverage.Coverage.Transition]:
            """The list of transition routes and coverage in the transition route group."""
            pass
        coverage_score: builtins.float = ...
        """The percent of transition routes in the transition route group that are
        covered.
        """

        def __init__(self,
            *,
            route_group : typing.Optional[google.cloud.dialogflow.cx.v3beta1.transition_route_group_pb2.TransitionRouteGroup] = ...,
            transitions : typing.Optional[typing.Iterable[global___TransitionRouteGroupCoverage.Coverage.Transition]] = ...,
            coverage_score : builtins.float = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["route_group",b"route_group"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["coverage_score",b"coverage_score","route_group",b"route_group","transitions",b"transitions"]) -> None: ...

    COVERAGES_FIELD_NUMBER: builtins.int
    COVERAGE_SCORE_FIELD_NUMBER: builtins.int
    @property
    def coverages(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TransitionRouteGroupCoverage.Coverage]:
        """Transition route group coverages."""
        pass
    coverage_score: builtins.float = ...
    """The percent of transition routes in all the transition route groups that
    are covered.
    """

    def __init__(self,
        *,
        coverages : typing.Optional[typing.Iterable[global___TransitionRouteGroupCoverage.Coverage]] = ...,
        coverage_score : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["coverage_score",b"coverage_score","coverages",b"coverages"]) -> None: ...
global___TransitionRouteGroupCoverage = TransitionRouteGroupCoverage

class IntentCoverage(google.protobuf.message.Message):
    """Intent coverage represents the percentage of all possible intents in the
    agent that are triggered in any of a parent's test cases.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Intent(google.protobuf.message.Message):
        """The agent's intent."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        INTENT_FIELD_NUMBER: builtins.int
        COVERED_FIELD_NUMBER: builtins.int
        intent: typing.Text = ...
        """The intent full resource name"""

        covered: builtins.bool = ...
        """Whether or not the intent is covered by at least one of the agent's
        test cases.
        """

        def __init__(self,
            *,
            intent : typing.Text = ...,
            covered : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["covered",b"covered","intent",b"intent"]) -> None: ...

    INTENTS_FIELD_NUMBER: builtins.int
    COVERAGE_SCORE_FIELD_NUMBER: builtins.int
    @property
    def intents(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IntentCoverage.Intent]:
        """The list of Intents present in the agent"""
        pass
    coverage_score: builtins.float = ...
    """The percent of intents in the agent that are covered."""

    def __init__(self,
        *,
        intents : typing.Optional[typing.Iterable[global___IntentCoverage.Intent]] = ...,
        coverage_score : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["coverage_score",b"coverage_score","intents",b"intents"]) -> None: ...
global___IntentCoverage = IntentCoverage

class CalculateCoverageRequest(google.protobuf.message.Message):
    """The request message for [TestCases.CalculateCoverage][google.cloud.dialogflow.cx.v3beta1.TestCases.CalculateCoverage]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _CoverageType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _CoverageTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CoverageType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        COVERAGE_TYPE_UNSPECIFIED: CalculateCoverageRequest.CoverageType.ValueType = ...  # 0
        """Should never be used."""

        INTENT: CalculateCoverageRequest.CoverageType.ValueType = ...  # 1
        """Intent coverage."""

        PAGE_TRANSITION: CalculateCoverageRequest.CoverageType.ValueType = ...  # 2
        """Page transition coverage."""

        TRANSITION_ROUTE_GROUP: CalculateCoverageRequest.CoverageType.ValueType = ...  # 3
        """Transition route group coverage."""

    class CoverageType(_CoverageType, metaclass=_CoverageTypeEnumTypeWrapper):
        """The type of coverage score requested."""
        pass

    COVERAGE_TYPE_UNSPECIFIED: CalculateCoverageRequest.CoverageType.ValueType = ...  # 0
    """Should never be used."""

    INTENT: CalculateCoverageRequest.CoverageType.ValueType = ...  # 1
    """Intent coverage."""

    PAGE_TRANSITION: CalculateCoverageRequest.CoverageType.ValueType = ...  # 2
    """Page transition coverage."""

    TRANSITION_ROUTE_GROUP: CalculateCoverageRequest.CoverageType.ValueType = ...  # 3
    """Transition route group coverage."""


    AGENT_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    agent: typing.Text = ...
    """Required. The agent to calculate coverage for.
    Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
    """

    type: global___CalculateCoverageRequest.CoverageType.ValueType = ...
    """Required. The type of coverage requested."""

    def __init__(self,
        *,
        agent : typing.Text = ...,
        type : global___CalculateCoverageRequest.CoverageType.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["agent",b"agent","type",b"type"]) -> None: ...
global___CalculateCoverageRequest = CalculateCoverageRequest

class CalculateCoverageResponse(google.protobuf.message.Message):
    """The response message for [TestCases.CalculateCoverage][google.cloud.dialogflow.cx.v3beta1.TestCases.CalculateCoverage]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    AGENT_FIELD_NUMBER: builtins.int
    INTENT_COVERAGE_FIELD_NUMBER: builtins.int
    TRANSITION_COVERAGE_FIELD_NUMBER: builtins.int
    ROUTE_GROUP_COVERAGE_FIELD_NUMBER: builtins.int
    agent: typing.Text = ...
    """The agent to calculate coverage for.
    Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
    """

    @property
    def intent_coverage(self) -> global___IntentCoverage:
        """Intent coverage."""
        pass
    @property
    def transition_coverage(self) -> global___TransitionCoverage:
        """Transition (excluding transition route groups) coverage."""
        pass
    @property
    def route_group_coverage(self) -> global___TransitionRouteGroupCoverage:
        """Transition route group coverage."""
        pass
    def __init__(self,
        *,
        agent : typing.Text = ...,
        intent_coverage : typing.Optional[global___IntentCoverage] = ...,
        transition_coverage : typing.Optional[global___TransitionCoverage] = ...,
        route_group_coverage : typing.Optional[global___TransitionRouteGroupCoverage] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["coverage_type",b"coverage_type","intent_coverage",b"intent_coverage","route_group_coverage",b"route_group_coverage","transition_coverage",b"transition_coverage"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["agent",b"agent","coverage_type",b"coverage_type","intent_coverage",b"intent_coverage","route_group_coverage",b"route_group_coverage","transition_coverage",b"transition_coverage"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["coverage_type",b"coverage_type"]) -> typing.Optional[typing_extensions.Literal["intent_coverage","transition_coverage","route_group_coverage"]]: ...
global___CalculateCoverageResponse = CalculateCoverageResponse

class ListTestCasesRequest(google.protobuf.message.Message):
    """The request message for [TestCases.ListTestCases][google.cloud.dialogflow.cx.v3beta1.TestCases.ListTestCases]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _TestCaseView:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TestCaseViewEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TestCaseView.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        TEST_CASE_VIEW_UNSPECIFIED: ListTestCasesRequest.TestCaseView.ValueType = ...  # 0
        """The default / unset value.
        The API will default to the BASIC view.
        """

        BASIC: ListTestCasesRequest.TestCaseView.ValueType = ...  # 1
        """Include basic metadata about the test case, but not the conversation
        turns. This is the default value.
        """

        FULL: ListTestCasesRequest.TestCaseView.ValueType = ...  # 2
        """Include everything."""

    class TestCaseView(_TestCaseView, metaclass=_TestCaseViewEnumTypeWrapper):
        """Specifies how much test case information to include in the response."""
        pass

    TEST_CASE_VIEW_UNSPECIFIED: ListTestCasesRequest.TestCaseView.ValueType = ...  # 0
    """The default / unset value.
    The API will default to the BASIC view.
    """

    BASIC: ListTestCasesRequest.TestCaseView.ValueType = ...  # 1
    """Include basic metadata about the test case, but not the conversation
    turns. This is the default value.
    """

    FULL: ListTestCasesRequest.TestCaseView.ValueType = ...  # 2
    """Include everything."""


    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    VIEW_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The agent to list all pages for.
    Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
    """

    page_size: builtins.int = ...
    """The maximum number of items to return in a single page. By default 20.
    Note that when TestCaseView = FULL, the maximum page size allowed is 20.
    When TestCaseView = BASIC, the maximum page size allowed is 500.
    """

    page_token: typing.Text = ...
    """The next_page_token value returned from a previous list request."""

    view: global___ListTestCasesRequest.TestCaseView.ValueType = ...
    """Specifies whether response should include all fields or just the metadata."""

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        view : global___ListTestCasesRequest.TestCaseView.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent","view",b"view"]) -> None: ...
global___ListTestCasesRequest = ListTestCasesRequest

class ListTestCasesResponse(google.protobuf.message.Message):
    """The response message for [TestCases.ListTestCases][google.cloud.dialogflow.cx.v3beta1.TestCases.ListTestCases]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEST_CASES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def test_cases(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TestCase]:
        """The list of test cases. There will be a maximum number of items returned
        based on the page_size field in the request.
        """
        pass
    next_page_token: typing.Text = ...
    """Token to retrieve the next page of results, or empty if there are no more
    results in the list.
    """

    def __init__(self,
        *,
        test_cases : typing.Optional[typing.Iterable[global___TestCase]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","test_cases",b"test_cases"]) -> None: ...
global___ListTestCasesResponse = ListTestCasesResponse

class BatchDeleteTestCasesRequest(google.protobuf.message.Message):
    """The request message for [TestCases.BatchDeleteTestCases][google.cloud.dialogflow.cx.v3beta1.TestCases.BatchDeleteTestCases]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    NAMES_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The agent to delete test cases from.
    Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
    """

    @property
    def names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Required. Format of test case names: `projects/<Project ID>/locations/
        <Location ID>/agents/<AgentID>/testCases/<TestCase ID>`.
        """
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        names : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["names",b"names","parent",b"parent"]) -> None: ...
global___BatchDeleteTestCasesRequest = BatchDeleteTestCasesRequest

class CreateTestCaseRequest(google.protobuf.message.Message):
    """The request message for [TestCases.CreateTestCase][google.cloud.dialogflow.cx.v3beta1.TestCases.CreateTestCase]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    TEST_CASE_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The agent to create the test case for.
    Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
    """

    @property
    def test_case(self) -> global___TestCase:
        """Required. The test case to create."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        test_case : typing.Optional[global___TestCase] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["test_case",b"test_case"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent",b"parent","test_case",b"test_case"]) -> None: ...
global___CreateTestCaseRequest = CreateTestCaseRequest

class UpdateTestCaseRequest(google.protobuf.message.Message):
    """The request message for [TestCases.UpdateTestCase][google.cloud.dialogflow.cx.v3beta1.TestCases.UpdateTestCase]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEST_CASE_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def test_case(self) -> global___TestCase:
        """Required. The test case to update."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Required. The mask to specify which fields should be updated. The
        [`creationTime`][google.cloud.dialogflow.cx.v3beta1.TestCase.creation_time] and
        [`lastTestResult`][google.cloud.dialogflow.cx.v3beta1.TestCase.last_test_result] cannot be updated.
        """
        pass
    def __init__(self,
        *,
        test_case : typing.Optional[global___TestCase] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["test_case",b"test_case","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["test_case",b"test_case","update_mask",b"update_mask"]) -> None: ...
global___UpdateTestCaseRequest = UpdateTestCaseRequest

class GetTestCaseRequest(google.protobuf.message.Message):
    """The request message for [TestCases.GetTestCase][google.cloud.dialogflow.cx.v3beta1.TestCases.GetTestCase]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the testcase.
    Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
    ID>/testCases/<TestCase ID>`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetTestCaseRequest = GetTestCaseRequest

class RunTestCaseRequest(google.protobuf.message.Message):
    """The request message for [TestCases.RunTestCase][google.cloud.dialogflow.cx.v3beta1.TestCases.RunTestCase]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    ENVIRONMENT_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Format of test case name to run: `projects/<Project ID>/locations/
    <Location ID>/agents/<AgentID>/testCases/<TestCase ID>`.
    """

    environment: typing.Text = ...
    """Optional. Environment name. If not set, draft environment is assumed.
    Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
    ID>/environments/<Environment ID>`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        environment : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["environment",b"environment","name",b"name"]) -> None: ...
global___RunTestCaseRequest = RunTestCaseRequest

class RunTestCaseResponse(google.protobuf.message.Message):
    """The response message for [TestCases.RunTestCase][google.cloud.dialogflow.cx.v3beta1.TestCases.RunTestCase]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESULT_FIELD_NUMBER: builtins.int
    @property
    def result(self) -> global___TestCaseResult:
        """The result."""
        pass
    def __init__(self,
        *,
        result : typing.Optional[global___TestCaseResult] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["result",b"result"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["result",b"result"]) -> None: ...
global___RunTestCaseResponse = RunTestCaseResponse

class RunTestCaseMetadata(google.protobuf.message.Message):
    """Metadata returned for the [TestCases.RunTestCase][google.cloud.dialogflow.cx.v3beta1.TestCases.RunTestCase] long running operation.
    This message currently has no fields.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___RunTestCaseMetadata = RunTestCaseMetadata

class BatchRunTestCasesRequest(google.protobuf.message.Message):
    """The request message for [TestCases.BatchRunTestCases][google.cloud.dialogflow.cx.v3beta1.TestCases.BatchRunTestCases]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    ENVIRONMENT_FIELD_NUMBER: builtins.int
    TEST_CASES_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. Agent name. Format: `projects/<Project ID>/locations/<Location ID>/agents/
    <AgentID>`.
    """

    environment: typing.Text = ...
    """Optional. If not set, draft environment is assumed. Format: `projects/<Project
    ID>/locations/<Location ID>/agents/<Agent ID>/environments/<Environment
    ID>`.
    """

    @property
    def test_cases(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Required. Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
        ID>/testCases/<TestCase ID>`.
        """
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        environment : typing.Text = ...,
        test_cases : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["environment",b"environment","parent",b"parent","test_cases",b"test_cases"]) -> None: ...
global___BatchRunTestCasesRequest = BatchRunTestCasesRequest

class BatchRunTestCasesResponse(google.protobuf.message.Message):
    """The response message for [TestCases.BatchRunTestCases][google.cloud.dialogflow.cx.v3beta1.TestCases.BatchRunTestCases]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESULTS_FIELD_NUMBER: builtins.int
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TestCaseResult]:
        """The test case results. The detailed
        [conversation turns][google.cloud.dialogflow.cx.v3beta1.TestCaseResult.conversation_turns] are empty in this
        response.
        """
        pass
    def __init__(self,
        *,
        results : typing.Optional[typing.Iterable[global___TestCaseResult]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["results",b"results"]) -> None: ...
global___BatchRunTestCasesResponse = BatchRunTestCasesResponse

class BatchRunTestCasesMetadata(google.protobuf.message.Message):
    """Metadata returned for the [TestCases.BatchRunTestCases][google.cloud.dialogflow.cx.v3beta1.TestCases.BatchRunTestCases] long running
    operation.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ERRORS_FIELD_NUMBER: builtins.int
    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TestError]:
        """The test errors."""
        pass
    def __init__(self,
        *,
        errors : typing.Optional[typing.Iterable[global___TestError]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["errors",b"errors"]) -> None: ...
global___BatchRunTestCasesMetadata = BatchRunTestCasesMetadata

class TestError(google.protobuf.message.Message):
    """Error info for running a test."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEST_CASE_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    TEST_TIME_FIELD_NUMBER: builtins.int
    test_case: typing.Text = ...
    """The test case resource name."""

    @property
    def status(self) -> google.rpc.status_pb2.Status:
        """The status associated with the test."""
        pass
    @property
    def test_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The timestamp when the test was completed."""
        pass
    def __init__(self,
        *,
        test_case : typing.Text = ...,
        status : typing.Optional[google.rpc.status_pb2.Status] = ...,
        test_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["status",b"status","test_time",b"test_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["status",b"status","test_case",b"test_case","test_time",b"test_time"]) -> None: ...
global___TestError = TestError

class ImportTestCasesRequest(google.protobuf.message.Message):
    """The request message for [TestCases.ImportTestCases][google.cloud.dialogflow.cx.v3beta1.TestCases.ImportTestCases]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    GCS_URI_FIELD_NUMBER: builtins.int
    CONTENT_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The agent to import test cases to.
    Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
    """

    gcs_uri: typing.Text = ...
    """The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI
    to import test cases from. The format of this URI must be
    `gs://<bucket-name>/<object-name>`.
    """

    content: builtins.bytes = ...
    """Uncompressed raw byte content for test cases."""

    def __init__(self,
        *,
        parent : typing.Text = ...,
        gcs_uri : typing.Text = ...,
        content : builtins.bytes = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["content",b"content","gcs_uri",b"gcs_uri","source",b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["content",b"content","gcs_uri",b"gcs_uri","parent",b"parent","source",b"source"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source",b"source"]) -> typing.Optional[typing_extensions.Literal["gcs_uri","content"]]: ...
global___ImportTestCasesRequest = ImportTestCasesRequest

class ImportTestCasesResponse(google.protobuf.message.Message):
    """The response message for [TestCases.ImportTestCases][google.cloud.dialogflow.cx.v3beta1.TestCases.ImportTestCases]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAMES_FIELD_NUMBER: builtins.int
    @property
    def names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The unique identifiers of the new test cases.
        Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
        ID>/testCases/<TestCase ID>`.
        """
        pass
    def __init__(self,
        *,
        names : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["names",b"names"]) -> None: ...
global___ImportTestCasesResponse = ImportTestCasesResponse

class ImportTestCasesMetadata(google.protobuf.message.Message):
    """Metadata returned for the [TestCases.ImportTestCases][google.cloud.dialogflow.cx.v3beta1.TestCases.ImportTestCases] long running
    operation.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ERRORS_FIELD_NUMBER: builtins.int
    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TestCaseError]:
        """Errors for failed test cases."""
        pass
    def __init__(self,
        *,
        errors : typing.Optional[typing.Iterable[global___TestCaseError]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["errors",b"errors"]) -> None: ...
global___ImportTestCasesMetadata = ImportTestCasesMetadata

class TestCaseError(google.protobuf.message.Message):
    """Error info for importing a test."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEST_CASE_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    @property
    def test_case(self) -> global___TestCase:
        """The test case."""
        pass
    @property
    def status(self) -> google.rpc.status_pb2.Status:
        """The status associated with the test case."""
        pass
    def __init__(self,
        *,
        test_case : typing.Optional[global___TestCase] = ...,
        status : typing.Optional[google.rpc.status_pb2.Status] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["status",b"status","test_case",b"test_case"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["status",b"status","test_case",b"test_case"]) -> None: ...
global___TestCaseError = TestCaseError

class ExportTestCasesRequest(google.protobuf.message.Message):
    """The request message for [TestCases.ExportTestCases][google.cloud.dialogflow.cx.v3beta1.TestCases.ExportTestCases]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _DataFormat:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _DataFormatEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_DataFormat.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        DATA_FORMAT_UNSPECIFIED: ExportTestCasesRequest.DataFormat.ValueType = ...  # 0
        """Unspecified format."""

        BLOB: ExportTestCasesRequest.DataFormat.ValueType = ...  # 1
        """Raw bytes."""

        JSON: ExportTestCasesRequest.DataFormat.ValueType = ...  # 2
        """JSON format."""

    class DataFormat(_DataFormat, metaclass=_DataFormatEnumTypeWrapper):
        """Data format of the exported test cases."""
        pass

    DATA_FORMAT_UNSPECIFIED: ExportTestCasesRequest.DataFormat.ValueType = ...  # 0
    """Unspecified format."""

    BLOB: ExportTestCasesRequest.DataFormat.ValueType = ...  # 1
    """Raw bytes."""

    JSON: ExportTestCasesRequest.DataFormat.ValueType = ...  # 2
    """JSON format."""


    PARENT_FIELD_NUMBER: builtins.int
    GCS_URI_FIELD_NUMBER: builtins.int
    DATA_FORMAT_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The agent where to export test cases from.
    Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
    """

    gcs_uri: typing.Text = ...
    """The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to
    export the test cases to. The format of this URI must be
    `gs://<bucket-name>/<object-name>`. If unspecified, the serialized test
    cases is returned inline.
    """

    data_format: global___ExportTestCasesRequest.DataFormat.ValueType = ...
    """The data format of the exported test cases. If not specified, `BLOB` is
    assumed.
    """

    filter: typing.Text = ...
    """The filter expression used to filter exported test cases, see
    [API Filtering](https://aip.dev/160). The expression is case insensitive
    and supports the following syntax:

      name = <value> [OR name = <value>] ...

    For example:

    *   "name = t1 OR name = t2" matches the test case with the exact resource
        name "t1" or "t2".
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        gcs_uri : typing.Text = ...,
        data_format : global___ExportTestCasesRequest.DataFormat.ValueType = ...,
        filter : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["destination",b"destination","gcs_uri",b"gcs_uri"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["data_format",b"data_format","destination",b"destination","filter",b"filter","gcs_uri",b"gcs_uri","parent",b"parent"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["destination",b"destination"]) -> typing.Optional[typing_extensions.Literal["gcs_uri"]]: ...
global___ExportTestCasesRequest = ExportTestCasesRequest

class ExportTestCasesResponse(google.protobuf.message.Message):
    """The response message for [TestCases.ExportTestCases][google.cloud.dialogflow.cx.v3beta1.TestCases.ExportTestCases]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GCS_URI_FIELD_NUMBER: builtins.int
    CONTENT_FIELD_NUMBER: builtins.int
    gcs_uri: typing.Text = ...
    """The URI to a file containing the exported test cases. This field is
    populated only if `gcs_uri` is specified in
    [ExportTestCasesRequest][google.cloud.dialogflow.cx.v3beta1.ExportTestCasesRequest].
    """

    content: builtins.bytes = ...
    """Uncompressed raw byte content for test cases."""

    def __init__(self,
        *,
        gcs_uri : typing.Text = ...,
        content : builtins.bytes = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["content",b"content","destination",b"destination","gcs_uri",b"gcs_uri"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["content",b"content","destination",b"destination","gcs_uri",b"gcs_uri"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["destination",b"destination"]) -> typing.Optional[typing_extensions.Literal["gcs_uri","content"]]: ...
global___ExportTestCasesResponse = ExportTestCasesResponse

class ExportTestCasesMetadata(google.protobuf.message.Message):
    """Metadata returned for the [TestCases.ExportTestCases][google.cloud.dialogflow.cx.v3beta1.TestCases.ExportTestCases] long running
    operation.
    This message currently has no fields.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___ExportTestCasesMetadata = ExportTestCasesMetadata

class ListTestCaseResultsRequest(google.protobuf.message.Message):
    """The request message for [TestCases.ListTestCaseResults][google.cloud.dialogflow.cx.v3beta1.TestCases.ListTestCaseResults]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The test case to list results for.
    Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/
    testCases/<TestCase ID>`. Specify a `-` as a wildcard for TestCase ID to
    list results across multiple test cases.
    """

    page_size: builtins.int = ...
    """The maximum number of items to return in a single page. By default 100 and
    at most 1000.
    """

    page_token: typing.Text = ...
    """The next_page_token value returned from a previous list request."""

    filter: typing.Text = ...
    """The filter expression used to filter test case results. See
    [API Filtering](https://aip.dev/160).

    The expression is case insensitive. Only 'AND' is supported for logical
    operators. The supported syntax is listed below in detail:

      <field> <operator> <value> [AND <field> <operator> <value>] ...
      [AND latest]

    The supported fields and operators are:
    field                 operator
    `environment`         `=`, `IN`  (Use value `draft` for draft environment)
    `test_time`           `>`, `<`

    `latest` only returns the latest test result in all results for each test
    case.

    Examples:
    *   "environment=draft AND latest" matches the latest test result for each
        test case in the draft environment.
    *   "environment IN (e1,e2)" matches any test case results with an
        environment resource name of either "e1" or "e2".
    *   "test_time > 1602540713" matches any test case results with test time
        later than a unix timestamp in seconds 1602540713.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        filter : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListTestCaseResultsRequest = ListTestCaseResultsRequest

class ListTestCaseResultsResponse(google.protobuf.message.Message):
    """The response message for [TestCases.ListTestCaseResults][google.cloud.dialogflow.cx.v3beta1.TestCases.ListTestCaseResults]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEST_CASE_RESULTS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def test_case_results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TestCaseResult]:
        """The list of test case results."""
        pass
    next_page_token: typing.Text = ...
    """Token to retrieve the next page of results, or empty if there are no more
    results in the list.
    """

    def __init__(self,
        *,
        test_case_results : typing.Optional[typing.Iterable[global___TestCaseResult]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","test_case_results",b"test_case_results"]) -> None: ...
global___ListTestCaseResultsResponse = ListTestCaseResultsResponse

class GetTestCaseResultRequest(google.protobuf.message.Message):
    """The request message for [TestCases.GetTestCaseResult][google.cloud.dialogflow.cx.v3beta1.TestCases.GetTestCaseResult]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the testcase.
    Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
    ID>/testCases/<TestCase ID>/results/<TestCaseResult ID>`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetTestCaseResultRequest = GetTestCaseResultRequest
