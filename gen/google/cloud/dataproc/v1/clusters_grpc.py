# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/cloud/dataproc/v1/clusters.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.api.client_pb2
import google.api.field_behavior_pb2
import google.api.resource_pb2
import google.cloud.dataproc.v1.shared_pb2
import google.longrunning.operations_pb2
import google.protobuf.duration_pb2
import google.protobuf.field_mask_pb2
import google.protobuf.timestamp_pb2
import google.cloud.dataproc.v1.clusters_pb2


class ClusterControllerBase(abc.ABC):

    @abc.abstractmethod
    async def CreateCluster(self, stream: 'grpclib.server.Stream[google.cloud.dataproc.v1.clusters_pb2.CreateClusterRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateCluster(self, stream: 'grpclib.server.Stream[google.cloud.dataproc.v1.clusters_pb2.UpdateClusterRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def StopCluster(self, stream: 'grpclib.server.Stream[google.cloud.dataproc.v1.clusters_pb2.StopClusterRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def StartCluster(self, stream: 'grpclib.server.Stream[google.cloud.dataproc.v1.clusters_pb2.StartClusterRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteCluster(self, stream: 'grpclib.server.Stream[google.cloud.dataproc.v1.clusters_pb2.DeleteClusterRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def GetCluster(self, stream: 'grpclib.server.Stream[google.cloud.dataproc.v1.clusters_pb2.GetClusterRequest, google.cloud.dataproc.v1.clusters_pb2.Cluster]') -> None:
        pass

    @abc.abstractmethod
    async def ListClusters(self, stream: 'grpclib.server.Stream[google.cloud.dataproc.v1.clusters_pb2.ListClustersRequest, google.cloud.dataproc.v1.clusters_pb2.ListClustersResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DiagnoseCluster(self, stream: 'grpclib.server.Stream[google.cloud.dataproc.v1.clusters_pb2.DiagnoseClusterRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.dataproc.v1.ClusterController/CreateCluster': grpclib.const.Handler(
                self.CreateCluster,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.dataproc.v1.clusters_pb2.CreateClusterRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.cloud.dataproc.v1.ClusterController/UpdateCluster': grpclib.const.Handler(
                self.UpdateCluster,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.dataproc.v1.clusters_pb2.UpdateClusterRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.cloud.dataproc.v1.ClusterController/StopCluster': grpclib.const.Handler(
                self.StopCluster,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.dataproc.v1.clusters_pb2.StopClusterRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.cloud.dataproc.v1.ClusterController/StartCluster': grpclib.const.Handler(
                self.StartCluster,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.dataproc.v1.clusters_pb2.StartClusterRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.cloud.dataproc.v1.ClusterController/DeleteCluster': grpclib.const.Handler(
                self.DeleteCluster,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.dataproc.v1.clusters_pb2.DeleteClusterRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.cloud.dataproc.v1.ClusterController/GetCluster': grpclib.const.Handler(
                self.GetCluster,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.dataproc.v1.clusters_pb2.GetClusterRequest,
                google.cloud.dataproc.v1.clusters_pb2.Cluster,
            ),
            '/google.cloud.dataproc.v1.ClusterController/ListClusters': grpclib.const.Handler(
                self.ListClusters,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.dataproc.v1.clusters_pb2.ListClustersRequest,
                google.cloud.dataproc.v1.clusters_pb2.ListClustersResponse,
            ),
            '/google.cloud.dataproc.v1.ClusterController/DiagnoseCluster': grpclib.const.Handler(
                self.DiagnoseCluster,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.dataproc.v1.clusters_pb2.DiagnoseClusterRequest,
                google.longrunning.operations_pb2.Operation,
            ),
        }


class ClusterControllerStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.CreateCluster = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.dataproc.v1.ClusterController/CreateCluster',
            google.cloud.dataproc.v1.clusters_pb2.CreateClusterRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.UpdateCluster = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.dataproc.v1.ClusterController/UpdateCluster',
            google.cloud.dataproc.v1.clusters_pb2.UpdateClusterRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.StopCluster = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.dataproc.v1.ClusterController/StopCluster',
            google.cloud.dataproc.v1.clusters_pb2.StopClusterRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.StartCluster = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.dataproc.v1.ClusterController/StartCluster',
            google.cloud.dataproc.v1.clusters_pb2.StartClusterRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.DeleteCluster = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.dataproc.v1.ClusterController/DeleteCluster',
            google.cloud.dataproc.v1.clusters_pb2.DeleteClusterRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.GetCluster = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.dataproc.v1.ClusterController/GetCluster',
            google.cloud.dataproc.v1.clusters_pb2.GetClusterRequest,
            google.cloud.dataproc.v1.clusters_pb2.Cluster,
        )
        self.ListClusters = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.dataproc.v1.ClusterController/ListClusters',
            google.cloud.dataproc.v1.clusters_pb2.ListClustersRequest,
            google.cloud.dataproc.v1.clusters_pb2.ListClustersResponse,
        )
        self.DiagnoseCluster = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.dataproc.v1.ClusterController/DiagnoseCluster',
            google.cloud.dataproc.v1.clusters_pb2.DiagnoseClusterRequest,
            google.longrunning.operations_pb2.Operation,
        )
