"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class ProductLevelConfig(google.protobuf.message.Message):
    """Configures what level the product should be uploaded with regards to
    how users will be send events and how predictions will be made.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INGESTION_PRODUCT_TYPE_FIELD_NUMBER: builtins.int
    MERCHANT_CENTER_PRODUCT_ID_FIELD_FIELD_NUMBER: builtins.int
    ingestion_product_type: typing.Text = ...
    """The type of [Product][google.cloud.retail.v2alpha.Product]s allowed to be
    ingested into the catalog. Acceptable values are:

    * `primary` (default): You can ingest
    [Product][google.cloud.retail.v2alpha.Product]s of all types. When
      ingesting a [Product][google.cloud.retail.v2alpha.Product], its type will
      default to
      [Product.Type.PRIMARY][google.cloud.retail.v2alpha.Product.Type.PRIMARY]
      if unset.
    * `variant`: You can only ingest
    [Product.Type.VARIANT][google.cloud.retail.v2alpha.Product.Type.VARIANT]
    [Product][google.cloud.retail.v2alpha.Product]s.
      This means
      [Product.primary_product_id][google.cloud.retail.v2alpha.Product.primary_product_id]
      cannot be empty.

    If this field is set to an invalid value other than these, an
    INVALID_ARGUMENT error is returned.

    If this field is `variant` and
    [merchant_center_product_id_field][google.cloud.retail.v2alpha.ProductLevelConfig.merchant_center_product_id_field]
    is `itemGroupId`, an INVALID_ARGUMENT error is returned.

    See [Using product
    levels](https://cloud.google.com/retail/recommendations-ai/docs/catalog#product-levels)
    for more details.
    """

    merchant_center_product_id_field: typing.Text = ...
    """Which field of [Merchant Center
    Product](/bigquery-transfer/docs/merchant-center-products-schema) should be
    imported as [Product.id][google.cloud.retail.v2alpha.Product.id].
    Acceptable values are:

    * `offerId` (default): Import `offerId` as the product ID.
    * `itemGroupId`: Import `itemGroupId` as the product ID. Notice that Retail
      API will choose one item from the ones with the same `itemGroupId`, and
      use it to represent the item group.

    If this field is set to an invalid value other than these, an
    INVALID_ARGUMENT error is returned.

    If this field is `itemGroupId` and
    [ingestion_product_type][google.cloud.retail.v2alpha.ProductLevelConfig.ingestion_product_type]
    is `variant`, an INVALID_ARGUMENT error is returned.

    See [Using product
    levels](https://cloud.google.com/retail/recommendations-ai/docs/catalog#product-levels)
    for more details.
    """

    def __init__(self,
        *,
        ingestion_product_type : typing.Text = ...,
        merchant_center_product_id_field : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ingestion_product_type",b"ingestion_product_type","merchant_center_product_id_field",b"merchant_center_product_id_field"]) -> None: ...
global___ProductLevelConfig = ProductLevelConfig

class MerchantCenterLink(google.protobuf.message.Message):
    """Represents a link between a Merchant Center account and a branch.
    Once a link is established, products from the linked merchant center account
    will be streamed to the linked branch.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    MERCHANT_CENTER_ACCOUNT_ID_FIELD_NUMBER: builtins.int
    BRANCH_ID_FIELD_NUMBER: builtins.int
    DESTINATIONS_FIELD_NUMBER: builtins.int
    merchant_center_account_id: builtins.int = ...
    """Required. The linked [Merchant center account
    id](https://developers.google.com/shopping-content/guides/accountstatuses).
    The account must be a standalone account or a sub-account of a MCA.
    """

    branch_id: typing.Text = ...
    """The branch id (e.g. 0/1/2) within this catalog that products from
    merchant_center_account_id are streamed to. When updating this field, an
    empty value will use the currently configured default branch. However,
    changing the default branch later on won't change the linked branch here.

    A single branch id can only have one linked merchant center account id.
    """

    @property
    def destinations(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """String representing the destination to import for, all if left empty.
        List of possible values can be found here.
        [https://support.google.com/merchants/answer/7501026]
        List of allowed string values:
        "Shopping_ads", "Buy_on_google_listings", "Display_ads", "Local_inventory
        _ads", "Free_listings", "Free_local_listings"
        NOTE: The string values are case sensitive.
        """
        pass
    def __init__(self,
        *,
        merchant_center_account_id : builtins.int = ...,
        branch_id : typing.Text = ...,
        destinations : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["branch_id",b"branch_id","destinations",b"destinations","merchant_center_account_id",b"merchant_center_account_id"]) -> None: ...
global___MerchantCenterLink = MerchantCenterLink

class MerchantCenterLinkingConfig(google.protobuf.message.Message):
    """Configures Merchant Center linking.
    Links contained in the config will be used to sync data from a Merchant
    Center account to a Cloud Retail branch.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    LINKS_FIELD_NUMBER: builtins.int
    @property
    def links(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MerchantCenterLink]:
        """Links between Merchant Center accounts and branches."""
        pass
    def __init__(self,
        *,
        links : typing.Optional[typing.Iterable[global___MerchantCenterLink]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["links",b"links"]) -> None: ...
global___MerchantCenterLinkingConfig = MerchantCenterLinkingConfig

class Catalog(google.protobuf.message.Message):
    """The catalog configuration."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    PRODUCT_LEVEL_CONFIG_FIELD_NUMBER: builtins.int
    MERCHANT_CENTER_LINKING_CONFIG_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Immutable. The fully qualified resource name of the catalog."""

    display_name: typing.Text = ...
    """Required. Immutable. The catalog display name.

    This field must be a UTF-8 encoded string with a length limit of 128
    characters. Otherwise, an INVALID_ARGUMENT error is returned.
    """

    @property
    def product_level_config(self) -> global___ProductLevelConfig:
        """Required. The product level configuration."""
        pass
    @property
    def merchant_center_linking_config(self) -> global___MerchantCenterLinkingConfig:
        """The Merchant Center linking configuration.
        Once a link is added, the data stream from Merchant Center to Cloud Retail
        will be enabled automatically. The requester must have access to the
        merchant center account in order to make changes to this field.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        product_level_config : typing.Optional[global___ProductLevelConfig] = ...,
        merchant_center_linking_config : typing.Optional[global___MerchantCenterLinkingConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["merchant_center_linking_config",b"merchant_center_linking_config","product_level_config",b"product_level_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name","merchant_center_linking_config",b"merchant_center_linking_config","name",b"name","product_level_config",b"product_level_config"]) -> None: ...
global___Catalog = Catalog
