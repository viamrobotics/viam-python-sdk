# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/cloud/dataqna/v1alpha/question_service.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.api.client_pb2
import google.api.field_behavior_pb2
import google.api.resource_pb2
import google.cloud.dataqna.v1alpha.question_pb2
import google.cloud.dataqna.v1alpha.user_feedback_pb2
import google.protobuf.field_mask_pb2
import google.cloud.dataqna.v1alpha.question_service_pb2


class QuestionServiceBase(abc.ABC):

    @abc.abstractmethod
    async def GetQuestion(self, stream: 'grpclib.server.Stream[google.cloud.dataqna.v1alpha.question_service_pb2.GetQuestionRequest, google.cloud.dataqna.v1alpha.question_pb2.Question]') -> None:
        pass

    @abc.abstractmethod
    async def CreateQuestion(self, stream: 'grpclib.server.Stream[google.cloud.dataqna.v1alpha.question_service_pb2.CreateQuestionRequest, google.cloud.dataqna.v1alpha.question_pb2.Question]') -> None:
        pass

    @abc.abstractmethod
    async def ExecuteQuestion(self, stream: 'grpclib.server.Stream[google.cloud.dataqna.v1alpha.question_service_pb2.ExecuteQuestionRequest, google.cloud.dataqna.v1alpha.question_pb2.Question]') -> None:
        pass

    @abc.abstractmethod
    async def GetUserFeedback(self, stream: 'grpclib.server.Stream[google.cloud.dataqna.v1alpha.question_service_pb2.GetUserFeedbackRequest, google.cloud.dataqna.v1alpha.user_feedback_pb2.UserFeedback]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateUserFeedback(self, stream: 'grpclib.server.Stream[google.cloud.dataqna.v1alpha.question_service_pb2.UpdateUserFeedbackRequest, google.cloud.dataqna.v1alpha.user_feedback_pb2.UserFeedback]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.dataqna.v1alpha.QuestionService/GetQuestion': grpclib.const.Handler(
                self.GetQuestion,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.dataqna.v1alpha.question_service_pb2.GetQuestionRequest,
                google.cloud.dataqna.v1alpha.question_pb2.Question,
            ),
            '/google.cloud.dataqna.v1alpha.QuestionService/CreateQuestion': grpclib.const.Handler(
                self.CreateQuestion,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.dataqna.v1alpha.question_service_pb2.CreateQuestionRequest,
                google.cloud.dataqna.v1alpha.question_pb2.Question,
            ),
            '/google.cloud.dataqna.v1alpha.QuestionService/ExecuteQuestion': grpclib.const.Handler(
                self.ExecuteQuestion,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.dataqna.v1alpha.question_service_pb2.ExecuteQuestionRequest,
                google.cloud.dataqna.v1alpha.question_pb2.Question,
            ),
            '/google.cloud.dataqna.v1alpha.QuestionService/GetUserFeedback': grpclib.const.Handler(
                self.GetUserFeedback,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.dataqna.v1alpha.question_service_pb2.GetUserFeedbackRequest,
                google.cloud.dataqna.v1alpha.user_feedback_pb2.UserFeedback,
            ),
            '/google.cloud.dataqna.v1alpha.QuestionService/UpdateUserFeedback': grpclib.const.Handler(
                self.UpdateUserFeedback,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.dataqna.v1alpha.question_service_pb2.UpdateUserFeedbackRequest,
                google.cloud.dataqna.v1alpha.user_feedback_pb2.UserFeedback,
            ),
        }


class QuestionServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetQuestion = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.dataqna.v1alpha.QuestionService/GetQuestion',
            google.cloud.dataqna.v1alpha.question_service_pb2.GetQuestionRequest,
            google.cloud.dataqna.v1alpha.question_pb2.Question,
        )
        self.CreateQuestion = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.dataqna.v1alpha.QuestionService/CreateQuestion',
            google.cloud.dataqna.v1alpha.question_service_pb2.CreateQuestionRequest,
            google.cloud.dataqna.v1alpha.question_pb2.Question,
        )
        self.ExecuteQuestion = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.dataqna.v1alpha.QuestionService/ExecuteQuestion',
            google.cloud.dataqna.v1alpha.question_service_pb2.ExecuteQuestionRequest,
            google.cloud.dataqna.v1alpha.question_pb2.Question,
        )
        self.GetUserFeedback = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.dataqna.v1alpha.QuestionService/GetUserFeedback',
            google.cloud.dataqna.v1alpha.question_service_pb2.GetUserFeedbackRequest,
            google.cloud.dataqna.v1alpha.user_feedback_pb2.UserFeedback,
        )
        self.UpdateUserFeedback = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.dataqna.v1alpha.QuestionService/UpdateUserFeedback',
            google.cloud.dataqna.v1alpha.question_service_pb2.UpdateUserFeedbackRequest,
            google.cloud.dataqna.v1alpha.user_feedback_pb2.UserFeedback,
        )
