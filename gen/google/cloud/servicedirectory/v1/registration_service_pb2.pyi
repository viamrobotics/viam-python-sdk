"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.servicedirectory.v1.endpoint_pb2
import google.cloud.servicedirectory.v1.namespace_pb2
import google.cloud.servicedirectory.v1.service_pb2
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class CreateNamespaceRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.CreateNamespace][google.cloud.servicedirectory.v1.RegistrationService.CreateNamespace].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    NAMESPACE_ID_FIELD_NUMBER: builtins.int
    NAMESPACE_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The resource name of the project and location the namespace
    will be created in.
    """

    namespace_id: typing.Text = ...
    """Required. The Resource ID must be 1-63 characters long, and comply with
    <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
    Specifically, the name must be 1-63 characters long and match the regular
    expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
    character must be a lowercase letter, and all following characters must
    be a dash, lowercase letter, or digit, except the last character, which
    cannot be a dash.
    """

    @property
    def namespace(self) -> google.cloud.servicedirectory.v1.namespace_pb2.Namespace:
        """Required. A namespace with initial fields set."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        namespace_id : typing.Text = ...,
        namespace : typing.Optional[google.cloud.servicedirectory.v1.namespace_pb2.Namespace] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["namespace",b"namespace"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["namespace",b"namespace","namespace_id",b"namespace_id","parent",b"parent"]) -> None: ...
global___CreateNamespaceRequest = CreateNamespaceRequest

class ListNamespacesRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.ListNamespaces][google.cloud.servicedirectory.v1.RegistrationService.ListNamespaces].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The resource name of the project and location whose namespaces
    we'd like to list.
    """

    page_size: builtins.int = ...
    """Optional. The maximum number of items to return."""

    page_token: typing.Text = ...
    """Optional. The next_page_token value returned from a previous List request,
    if any.
    """

    filter: typing.Text = ...
    """Optional. The filter to list result by.

    General filter string syntax:
    <field> <operator> <value> (<logical connector>)
    <field> can be "name", or "labels.<key>" for map field.
    <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
    is roughly the same as "=".
    <value> must be the same data type as field.
    <logical connector> can be "AND, OR, NOT".

    Examples of valid filters:
    * "labels.owner" returns Namespaces that have a label with the key "owner"
      this is the same as "labels:owner".
    * "labels.protocol=gRPC" returns Namespaces that have key/value
      "protocol=gRPC".
    * "name>projects/my-project/locations/us-east/namespaces/namespace-c"
      returns Namespaces that have name that is alphabetically later than the
      string, so "namespace-e" will be returned but "namespace-a" will not be.
    * "labels.owner!=sd AND labels.foo=bar" returns Namespaces that have
      "owner" in label key but value is not "sd" AND have key/value foo=bar.
    * "doesnotexist.foo=bar" returns an empty list. Note that Namespace doesn't
      have a field called "doesnotexist". Since the filter does not match any
      Namespaces, it returns no results.
    """

    order_by: typing.Text = ...
    """Optional. The order to list result by.

    General order by string syntax:
    <field> (<asc|desc>) (,)
    <field> allows values {"name"}
    <asc/desc> ascending or descending order by <field>. If this is left
    blank, "asc" is used.
    Note that an empty order_by string result in default order, which is order
    by name in ascending order.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        filter : typing.Text = ...,
        order_by : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","order_by",b"order_by","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListNamespacesRequest = ListNamespacesRequest

class ListNamespacesResponse(google.protobuf.message.Message):
    """The response message for
    [RegistrationService.ListNamespaces][google.cloud.servicedirectory.v1.RegistrationService.ListNamespaces].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAMESPACES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def namespaces(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.servicedirectory.v1.namespace_pb2.Namespace]:
        """The list of namespaces."""
        pass
    next_page_token: typing.Text = ...
    """Token to retrieve the next page of results, or empty if there are no
    more results in the list.
    """

    def __init__(self,
        *,
        namespaces : typing.Optional[typing.Iterable[google.cloud.servicedirectory.v1.namespace_pb2.Namespace]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["namespaces",b"namespaces","next_page_token",b"next_page_token"]) -> None: ...
global___ListNamespacesResponse = ListNamespacesResponse

class GetNamespaceRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.GetNamespace][google.cloud.servicedirectory.v1.RegistrationService.GetNamespace].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the namespace to retrieve."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetNamespaceRequest = GetNamespaceRequest

class UpdateNamespaceRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.UpdateNamespace][google.cloud.servicedirectory.v1.RegistrationService.UpdateNamespace].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAMESPACE_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def namespace(self) -> google.cloud.servicedirectory.v1.namespace_pb2.Namespace:
        """Required. The updated namespace."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Required. List of fields to be updated in this request."""
        pass
    def __init__(self,
        *,
        namespace : typing.Optional[google.cloud.servicedirectory.v1.namespace_pb2.Namespace] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["namespace",b"namespace","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["namespace",b"namespace","update_mask",b"update_mask"]) -> None: ...
global___UpdateNamespaceRequest = UpdateNamespaceRequest

class DeleteNamespaceRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.DeleteNamespace][google.cloud.servicedirectory.v1.RegistrationService.DeleteNamespace].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the namespace to delete."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteNamespaceRequest = DeleteNamespaceRequest

class CreateServiceRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.CreateService][google.cloud.servicedirectory.v1.RegistrationService.CreateService].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    SERVICE_ID_FIELD_NUMBER: builtins.int
    SERVICE_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The resource name of the namespace this service will belong to."""

    service_id: typing.Text = ...
    """Required. The Resource ID must be 1-63 characters long, and comply with
    <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
    Specifically, the name must be 1-63 characters long and match the regular
    expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
    character must be a lowercase letter, and all following characters must
    be a dash, lowercase letter, or digit, except the last character, which
    cannot be a dash.
    """

    @property
    def service(self) -> google.cloud.servicedirectory.v1.service_pb2.Service:
        """Required. A service  with initial fields set."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        service_id : typing.Text = ...,
        service : typing.Optional[google.cloud.servicedirectory.v1.service_pb2.Service] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["service",b"service"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent",b"parent","service",b"service","service_id",b"service_id"]) -> None: ...
global___CreateServiceRequest = CreateServiceRequest

class ListServicesRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.ListServices][google.cloud.servicedirectory.v1.RegistrationService.ListServices].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The resource name of the namespace whose services we'd
    like to list.
    """

    page_size: builtins.int = ...
    """Optional. The maximum number of items to return."""

    page_token: typing.Text = ...
    """Optional. The next_page_token value returned from a previous List request,
    if any.
    """

    filter: typing.Text = ...
    """Optional. The filter to list result by.

    General filter string syntax:
    <field> <operator> <value> (<logical connector>)
    <field> can be "name", or "metadata.<key>" for map field.
    <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
    is roughly the same as "=".
    <value> must be the same data type as field.
    <logical connector> can be "AND, OR, NOT".

    Examples of valid filters:
    * "metadata.owner" returns Services that have a label with the key "owner"
      this is the same as "metadata:owner".
    * "metadata.protocol=gRPC" returns Services that have key/value
      "protocol=gRPC".
    * "name>projects/my-project/locations/us-east/namespaces/my-namespace/services/service-c"
      returns Services that have name that is alphabetically later than the
      string, so "service-e" will be returned but "service-a" will not be.
    * "metadata.owner!=sd AND metadata.foo=bar" returns Services that have
      "owner" in label key but value is not "sd" AND have key/value foo=bar.
    * "doesnotexist.foo=bar" returns an empty list. Note that Service doesn't
      have a field called "doesnotexist". Since the filter does not match any
      Services, it returns no results.
    """

    order_by: typing.Text = ...
    """Optional. The order to list result by."""

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        filter : typing.Text = ...,
        order_by : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","order_by",b"order_by","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListServicesRequest = ListServicesRequest

class ListServicesResponse(google.protobuf.message.Message):
    """The response message for
    [RegistrationService.ListServices][google.cloud.servicedirectory.v1.RegistrationService.ListServices].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SERVICES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def services(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.servicedirectory.v1.service_pb2.Service]:
        """The list of services."""
        pass
    next_page_token: typing.Text = ...
    """Token to retrieve the next page of results, or empty if there are no
    more results in the list.
    """

    def __init__(self,
        *,
        services : typing.Optional[typing.Iterable[google.cloud.servicedirectory.v1.service_pb2.Service]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","services",b"services"]) -> None: ...
global___ListServicesResponse = ListServicesResponse

class GetServiceRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.GetService][google.cloud.servicedirectory.v1.RegistrationService.GetService].
    This should not be used for looking up a service. Insead, use the `resolve`
    method as it will contain all endpoints and associated metadata.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the service to get."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetServiceRequest = GetServiceRequest

class UpdateServiceRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.UpdateService][google.cloud.servicedirectory.v1.RegistrationService.UpdateService].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SERVICE_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def service(self) -> google.cloud.servicedirectory.v1.service_pb2.Service:
        """Required. The updated service."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Required. List of fields to be updated in this request."""
        pass
    def __init__(self,
        *,
        service : typing.Optional[google.cloud.servicedirectory.v1.service_pb2.Service] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["service",b"service","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["service",b"service","update_mask",b"update_mask"]) -> None: ...
global___UpdateServiceRequest = UpdateServiceRequest

class DeleteServiceRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.DeleteService][google.cloud.servicedirectory.v1.RegistrationService.DeleteService].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the service to delete."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteServiceRequest = DeleteServiceRequest

class CreateEndpointRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.CreateEndpoint][google.cloud.servicedirectory.v1.RegistrationService.CreateEndpoint].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    ENDPOINT_ID_FIELD_NUMBER: builtins.int
    ENDPOINT_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The resource name of the service that this endpoint provides."""

    endpoint_id: typing.Text = ...
    """Required. The Resource ID must be 1-63 characters long, and comply with
    <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
    Specifically, the name must be 1-63 characters long and match the regular
    expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
    character must be a lowercase letter, and all following characters must
    be a dash, lowercase letter, or digit, except the last character, which
    cannot be a dash.
    """

    @property
    def endpoint(self) -> google.cloud.servicedirectory.v1.endpoint_pb2.Endpoint:
        """Required. A endpoint with initial fields set."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        endpoint_id : typing.Text = ...,
        endpoint : typing.Optional[google.cloud.servicedirectory.v1.endpoint_pb2.Endpoint] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["endpoint",b"endpoint"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["endpoint",b"endpoint","endpoint_id",b"endpoint_id","parent",b"parent"]) -> None: ...
global___CreateEndpointRequest = CreateEndpointRequest

class ListEndpointsRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.ListEndpoints][google.cloud.servicedirectory.v1.RegistrationService.ListEndpoints].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The resource name of the service whose endpoints we'd like to
    list.
    """

    page_size: builtins.int = ...
    """Optional. The maximum number of items to return."""

    page_token: typing.Text = ...
    """Optional. The next_page_token value returned from a previous List request,
    if any.
    """

    filter: typing.Text = ...
    """Optional. The filter to list result by.

    General filter string syntax:
    <field> <operator> <value> (<logical connector>)
    <field> can be "name", "address", "port" or "metadata.<key>" for map field.
    <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
    is roughly the same as "=".
    <value> must be the same data type as field.
    <logical connector> can be "AND, OR, NOT".

    Examples of valid filters:
    * "metadata.owner" returns Endpoints that have a label with the key "owner"
      this is the same as "metadata:owner".
    * "metadata.protocol=gRPC" returns Endpoints that have key/value
      "protocol=gRPC".
    * "address=192.108.1.105" returns Endpoints that have this address.
    * "port>8080" returns Endpoints that have port number larger than 8080.
    * "name>projects/my-project/locations/us-east/namespaces/my-namespace/services/my-service/endpoints/endpoint-c"
      returns Endpoints that have name that is alphabetically later than the
      string, so "endpoint-e" will be returned but "endpoint-a" will not be.
    * "metadata.owner!=sd AND metadata.foo=bar" returns Endpoints that have
      "owner" in label key but value is not "sd" AND have key/value foo=bar.
    * "doesnotexist.foo=bar" returns an empty list. Note that Endpoint doesn't
      have a field called "doesnotexist". Since the filter does not match any
      Endpoints, it returns no results.
    """

    order_by: typing.Text = ...
    """Optional. The order to list result by."""

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        filter : typing.Text = ...,
        order_by : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","order_by",b"order_by","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListEndpointsRequest = ListEndpointsRequest

class ListEndpointsResponse(google.protobuf.message.Message):
    """The response message for
    [RegistrationService.ListEndpoints][google.cloud.servicedirectory.v1.RegistrationService.ListEndpoints].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ENDPOINTS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def endpoints(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.servicedirectory.v1.endpoint_pb2.Endpoint]:
        """The list of endpoints."""
        pass
    next_page_token: typing.Text = ...
    """Token to retrieve the next page of results, or empty if there are no
    more results in the list.
    """

    def __init__(self,
        *,
        endpoints : typing.Optional[typing.Iterable[google.cloud.servicedirectory.v1.endpoint_pb2.Endpoint]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["endpoints",b"endpoints","next_page_token",b"next_page_token"]) -> None: ...
global___ListEndpointsResponse = ListEndpointsResponse

class GetEndpointRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.GetEndpoint][google.cloud.servicedirectory.v1.RegistrationService.GetEndpoint].
    This should not be used to lookup endpoints at runtime. Instead, use
    the `resolve` method.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the endpoint to get."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetEndpointRequest = GetEndpointRequest

class UpdateEndpointRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.UpdateEndpoint][google.cloud.servicedirectory.v1.RegistrationService.UpdateEndpoint].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ENDPOINT_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def endpoint(self) -> google.cloud.servicedirectory.v1.endpoint_pb2.Endpoint:
        """Required. The updated endpoint."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Required. List of fields to be updated in this request."""
        pass
    def __init__(self,
        *,
        endpoint : typing.Optional[google.cloud.servicedirectory.v1.endpoint_pb2.Endpoint] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["endpoint",b"endpoint","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["endpoint",b"endpoint","update_mask",b"update_mask"]) -> None: ...
global___UpdateEndpointRequest = UpdateEndpointRequest

class DeleteEndpointRequest(google.protobuf.message.Message):
    """The request message for
    [RegistrationService.DeleteEndpoint][google.cloud.servicedirectory.v1.RegistrationService.DeleteEndpoint].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the endpoint to delete."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteEndpointRequest = DeleteEndpointRequest
