"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.servicedirectory.v1.service_pb2
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class ResolveServiceRequest(google.protobuf.message.Message):
    """The request message for
    [LookupService.ResolveService][google.cloud.servicedirectory.v1.LookupService.ResolveService].
    Looks up a service by its name, returns the service and its endpoints.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    MAX_ENDPOINTS_FIELD_NUMBER: builtins.int
    ENDPOINT_FILTER_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the service to resolve."""

    max_endpoints: builtins.int = ...
    """Optional. The maximum number of endpoints to return. Defaults to 25.
    Maximum is 100. If a value less than one is specified, the Default is used.
    If a value greater than the Maximum is specified, the Maximum is used.
    """

    endpoint_filter: typing.Text = ...
    """Optional. The filter applied to the endpoints of the resolved service.

    General filter string syntax:
    <field> <operator> <value> (<logical connector>)
    <field> can be "name" or "metadata.<key>" for map field.
    <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS and is
    roughly the same as "=".
    <value> must be the same data type as the field.
    <logical connector> can be "AND, OR, NOT".

    Examples of valid filters:
    * "metadata.owner" returns Endpoints that have a label with the
      key "owner", this is the same as "metadata:owner"
    * "metadata.protocol=gRPC" returns Endpoints that have key/value
      "protocol=gRPC"
    * "metadata.owner!=sd AND metadata.foo=bar" returns
      Endpoints that have "owner" field in metadata with a value that is not
      "sd" AND have the key/value foo=bar.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        max_endpoints : builtins.int = ...,
        endpoint_filter : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["endpoint_filter",b"endpoint_filter","max_endpoints",b"max_endpoints","name",b"name"]) -> None: ...
global___ResolveServiceRequest = ResolveServiceRequest

class ResolveServiceResponse(google.protobuf.message.Message):
    """The response message for
    [LookupService.ResolveService][google.cloud.servicedirectory.v1.LookupService.ResolveService].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SERVICE_FIELD_NUMBER: builtins.int
    @property
    def service(self) -> google.cloud.servicedirectory.v1.service_pb2.Service: ...
    def __init__(self,
        *,
        service : typing.Optional[google.cloud.servicedirectory.v1.service_pb2.Service] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["service",b"service"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["service",b"service"]) -> None: ...
global___ResolveServiceResponse = ResolveServiceResponse
