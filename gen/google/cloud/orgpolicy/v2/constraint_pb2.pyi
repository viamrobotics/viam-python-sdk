"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Constraint(google.protobuf.message.Message):
    """A `constraint` describes a way to restrict resource's configuration. For
    example, you could enforce a constraint that controls which cloud services
    can be activated across an organization, or whether a Compute Engine instance
    can have serial port connections established. `Constraints` can be configured
    by the organization's policy adminstrator to fit the needs of the organzation
    by setting a `policy` that includes `constraints` at different locations in
    the organization's resource hierarchy. Policies are inherited down the
    resource hierarchy from higher levels, but can also be overridden. For
    details about the inheritance rules please read about
    [`policies`][google.cloud.OrgPolicy.v2.Policy].

    `Constraints` have a default behavior determined by the `constraint_default`
    field, which is the enforcement behavior that is used in the absence of a
    `policy` being defined or inherited for the resource in question.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _ConstraintDefault:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ConstraintDefaultEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ConstraintDefault.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        CONSTRAINT_DEFAULT_UNSPECIFIED: Constraint.ConstraintDefault.ValueType = ...  # 0
        """This is only used for distinguishing unset values and should never be
        used.
        """

        ALLOW: Constraint.ConstraintDefault.ValueType = ...  # 1
        """Indicate that all values are allowed for list constraints.
        Indicate that enforcement is off for boolean constraints.
        """

        DENY: Constraint.ConstraintDefault.ValueType = ...  # 2
        """Indicate that all values are denied for list constraints.
        Indicate that enforcement is on for boolean constraints.
        """

    class ConstraintDefault(_ConstraintDefault, metaclass=_ConstraintDefaultEnumTypeWrapper):
        """Specifies the default behavior in the absence of any `Policy` for the
        `Constraint`. This must not be `CONSTRAINT_DEFAULT_UNSPECIFIED`.

        Immutable after creation.
        """
        pass

    CONSTRAINT_DEFAULT_UNSPECIFIED: Constraint.ConstraintDefault.ValueType = ...  # 0
    """This is only used for distinguishing unset values and should never be
    used.
    """

    ALLOW: Constraint.ConstraintDefault.ValueType = ...  # 1
    """Indicate that all values are allowed for list constraints.
    Indicate that enforcement is off for boolean constraints.
    """

    DENY: Constraint.ConstraintDefault.ValueType = ...  # 2
    """Indicate that all values are denied for list constraints.
    Indicate that enforcement is on for boolean constraints.
    """


    class ListConstraint(google.protobuf.message.Message):
        """A `Constraint` that allows or disallows a list of string values, which are
        configured by an Organization's policy administrator with a `Policy`.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        SUPPORTS_IN_FIELD_NUMBER: builtins.int
        SUPPORTS_UNDER_FIELD_NUMBER: builtins.int
        supports_in: builtins.bool = ...
        """Indicates whether values grouped into categories can be used in
        `Policy.allowed_values` and `Policy.denied_values`. For example,
        `"in:Python"` would match any value in the 'Python' group.
        """

        supports_under: builtins.bool = ...
        """Indicates whether subtrees of Cloud Resource Manager resource hierarchy
        can be used in `Policy.allowed_values` and `Policy.denied_values`. For
        example, `"under:folders/123"` would match any resource under the
        'folders/123' folder.
        """

        def __init__(self,
            *,
            supports_in : builtins.bool = ...,
            supports_under : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["supports_in",b"supports_in","supports_under",b"supports_under"]) -> None: ...

    class BooleanConstraint(google.protobuf.message.Message):
        """A `Constraint` that is either enforced or not.

        For example a constraint `constraints/compute.disableSerialPortAccess`.
        If it is enforced on a VM instance, serial port connections will not be
        opened to that instance.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    CONSTRAINT_DEFAULT_FIELD_NUMBER: builtins.int
    LIST_CONSTRAINT_FIELD_NUMBER: builtins.int
    BOOLEAN_CONSTRAINT_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Immutable. The resource name of the Constraint. Must be in one of
    the following forms:
    * `projects/{project_number}/constraints/{constraint_name}`
    * `folders/{folder_id}/constraints/{constraint_name}`
    * `organizations/{organization_id}/constraints/{constraint_name}`

    For example, "/projects/123/constraints/compute.disableSerialPortAccess".
    """

    display_name: typing.Text = ...
    """The human readable name.

    Mutable.
    """

    description: typing.Text = ...
    """Detailed description of what this `Constraint` controls as well as how and
    where it is enforced.

    Mutable.
    """

    constraint_default: global___Constraint.ConstraintDefault.ValueType = ...
    """The evaluation behavior of this constraint in the absence of 'Policy'."""

    @property
    def list_constraint(self) -> global___Constraint.ListConstraint:
        """Defines this constraint as being a ListConstraint."""
        pass
    @property
    def boolean_constraint(self) -> global___Constraint.BooleanConstraint:
        """Defines this constraint as being a BooleanConstraint."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        description : typing.Text = ...,
        constraint_default : global___Constraint.ConstraintDefault.ValueType = ...,
        list_constraint : typing.Optional[global___Constraint.ListConstraint] = ...,
        boolean_constraint : typing.Optional[global___Constraint.BooleanConstraint] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["boolean_constraint",b"boolean_constraint","constraint_type",b"constraint_type","list_constraint",b"list_constraint"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["boolean_constraint",b"boolean_constraint","constraint_default",b"constraint_default","constraint_type",b"constraint_type","description",b"description","display_name",b"display_name","list_constraint",b"list_constraint","name",b"name"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["constraint_type",b"constraint_type"]) -> typing.Optional[typing_extensions.Literal["list_constraint","boolean_constraint"]]: ...
global___Constraint = Constraint
