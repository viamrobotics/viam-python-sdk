"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class UserActionReference(google.protobuf.message.Message):
    """References an API call. It contains more information about long running
    operation and Jobs that are triggered by the API call.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    OPERATION_FIELD_NUMBER: builtins.int
    DATA_LABELING_JOB_FIELD_NUMBER: builtins.int
    METHOD_FIELD_NUMBER: builtins.int
    operation: typing.Text = ...
    """For API calls that return a long running operation.
    Resource name of the long running operation.
    Format:
    'projects/{project}/locations/{location}/operations/{operation}'
    """

    data_labeling_job: typing.Text = ...
    """For API calls that start a LabelingJob.
    Resource name of the LabelingJob.
    Format:
    'projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}'
    """

    method: typing.Text = ...
    """The method name of the API RPC call. For example,
    "/google.cloud.aiplatform.{apiVersion}.DatasetService.CreateDataset"
    """

    def __init__(self,
        *,
        operation : typing.Text = ...,
        data_labeling_job : typing.Text = ...,
        method : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["data_labeling_job",b"data_labeling_job","operation",b"operation","reference",b"reference"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["data_labeling_job",b"data_labeling_job","method",b"method","operation",b"operation","reference",b"reference"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["reference",b"reference"]) -> typing.Optional[typing_extensions.Literal["operation","data_labeling_job"]]: ...
global___UserActionReference = UserActionReference
