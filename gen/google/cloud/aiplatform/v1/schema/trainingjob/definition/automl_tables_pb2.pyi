"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.aiplatform.v1.schema.trainingjob.definition.export_evaluated_data_items_config_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class AutoMlTables(google.protobuf.message.Message):
    """A TrainingJob that trains and uploads an AutoML Tables Model."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INPUTS_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    @property
    def inputs(self) -> global___AutoMlTablesInputs:
        """The input parameters of this TrainingJob."""
        pass
    @property
    def metadata(self) -> global___AutoMlTablesMetadata:
        """The metadata information."""
        pass
    def __init__(self,
        *,
        inputs : typing.Optional[global___AutoMlTablesInputs] = ...,
        metadata : typing.Optional[global___AutoMlTablesMetadata] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["inputs",b"inputs","metadata",b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["inputs",b"inputs","metadata",b"metadata"]) -> None: ...
global___AutoMlTables = AutoMlTables

class AutoMlTablesInputs(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Transformation(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class AutoTransformation(google.protobuf.message.Message):
            """Training pipeline will infer the proper transformation based on the
            statistic of dataset.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            COLUMN_NAME_FIELD_NUMBER: builtins.int
            column_name: typing.Text = ...
            def __init__(self,
                *,
                column_name : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["column_name",b"column_name"]) -> None: ...

        class NumericTransformation(google.protobuf.message.Message):
            """Training pipeline will perform following transformation functions.
            *  The value converted to float32.
            *  The z_score of the value.
            *  log(value+1) when the value is greater than or equal to 0. Otherwise,
               this transformation is not applied and the value is considered a
               missing value.
            *  z_score of log(value+1) when the value is greater than or equal to 0.
               Otherwise, this transformation is not applied and the value is
               considered a missing value.
            *  A boolean value that indicates whether the value is valid.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            COLUMN_NAME_FIELD_NUMBER: builtins.int
            INVALID_VALUES_ALLOWED_FIELD_NUMBER: builtins.int
            column_name: typing.Text = ...
            invalid_values_allowed: builtins.bool = ...
            """If invalid values is allowed, the training pipeline will create a
            boolean feature that indicated whether the value is valid.
            Otherwise, the training pipeline will discard the input row from
            trainining data.
            """

            def __init__(self,
                *,
                column_name : typing.Text = ...,
                invalid_values_allowed : builtins.bool = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["column_name",b"column_name","invalid_values_allowed",b"invalid_values_allowed"]) -> None: ...

        class CategoricalTransformation(google.protobuf.message.Message):
            """Training pipeline will perform following transformation functions.
            *  The categorical string as is--no change to case, punctuation,
            spelling,
               tense, and so on.
            *  Convert the category name to a dictionary lookup index and generate an
               embedding for each index.
            *  Categories that appear less than 5 times in the training dataset are
               treated as the "unknown" category. The "unknown" category gets its own
               special lookup index and resulting embedding.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            COLUMN_NAME_FIELD_NUMBER: builtins.int
            column_name: typing.Text = ...
            def __init__(self,
                *,
                column_name : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["column_name",b"column_name"]) -> None: ...

        class TimestampTransformation(google.protobuf.message.Message):
            """Training pipeline will perform following transformation functions.
            *  Apply the transformation functions for Numerical columns.
            *  Determine the year, month, day,and weekday. Treat each value from the
            *  timestamp as a Categorical column.
            *  Invalid numerical values (for example, values that fall outside of a
               typical timestamp range, or are extreme values) receive no special
               treatment and are not removed.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            COLUMN_NAME_FIELD_NUMBER: builtins.int
            TIME_FORMAT_FIELD_NUMBER: builtins.int
            INVALID_VALUES_ALLOWED_FIELD_NUMBER: builtins.int
            column_name: typing.Text = ...
            time_format: typing.Text = ...
            """The format in which that time field is expressed. The time_format must
            either be one of:
            * `unix-seconds`
            * `unix-milliseconds`
            * `unix-microseconds`
            * `unix-nanoseconds`
            (for respectively number of seconds, milliseconds, microseconds and
            nanoseconds since start of the Unix epoch);
            or be written in `strftime` syntax. If time_format is not set, then the
            default format is RFC 3339 `date-time` format, where
            `time-offset` = `"Z"` (e.g. 1985-04-12T23:20:50.52Z)
            """

            invalid_values_allowed: builtins.bool = ...
            """If invalid values is allowed, the training pipeline will create a
            boolean feature that indicated whether the value is valid.
            Otherwise, the training pipeline will discard the input row from
            trainining data.
            """

            def __init__(self,
                *,
                column_name : typing.Text = ...,
                time_format : typing.Text = ...,
                invalid_values_allowed : builtins.bool = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["column_name",b"column_name","invalid_values_allowed",b"invalid_values_allowed","time_format",b"time_format"]) -> None: ...

        class TextTransformation(google.protobuf.message.Message):
            """Training pipeline will perform following transformation functions.
            *  The text as is--no change to case, punctuation, spelling, tense, and
            so
               on.
            *  Tokenize text to words. Convert each words to a dictionary lookup
            index
               and generate an embedding for each index. Combine the embedding of all
               elements into a single embedding using the mean.
            *  Tokenization is based on unicode script boundaries.
            *  Missing values get their own lookup index and resulting embedding.
            *  Stop-words receive no special treatment and are not removed.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            COLUMN_NAME_FIELD_NUMBER: builtins.int
            column_name: typing.Text = ...
            def __init__(self,
                *,
                column_name : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["column_name",b"column_name"]) -> None: ...

        class NumericArrayTransformation(google.protobuf.message.Message):
            """Treats the column as numerical array and performs following
            transformation functions.
            *  All transformations for Numerical types applied to the average of the
               all elements.
            *  The average of empty arrays is treated as zero.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            COLUMN_NAME_FIELD_NUMBER: builtins.int
            INVALID_VALUES_ALLOWED_FIELD_NUMBER: builtins.int
            column_name: typing.Text = ...
            invalid_values_allowed: builtins.bool = ...
            """If invalid values is allowed, the training pipeline will create a
            boolean feature that indicated whether the value is valid.
            Otherwise, the training pipeline will discard the input row from
            trainining data.
            """

            def __init__(self,
                *,
                column_name : typing.Text = ...,
                invalid_values_allowed : builtins.bool = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["column_name",b"column_name","invalid_values_allowed",b"invalid_values_allowed"]) -> None: ...

        class CategoricalArrayTransformation(google.protobuf.message.Message):
            """Treats the column as categorical array and performs following
            transformation functions.
            *  For each element in the array, convert the category name to a
            dictionary
               lookup index and generate an embedding for each index.
               Combine the embedding of all elements into a single embedding using
               the mean.
            *  Empty arrays treated as an embedding of zeroes.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            COLUMN_NAME_FIELD_NUMBER: builtins.int
            column_name: typing.Text = ...
            def __init__(self,
                *,
                column_name : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["column_name",b"column_name"]) -> None: ...

        class TextArrayTransformation(google.protobuf.message.Message):
            """Treats the column as text array and performs following transformation
            functions.
            *  Concatenate all text values in the array into a single text value
            using
               a space (" ") as a delimiter, and then treat the result as a single
               text value. Apply the transformations for Text columns.
            *  Empty arrays treated as an empty text.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            COLUMN_NAME_FIELD_NUMBER: builtins.int
            column_name: typing.Text = ...
            def __init__(self,
                *,
                column_name : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["column_name",b"column_name"]) -> None: ...

        AUTO_FIELD_NUMBER: builtins.int
        NUMERIC_FIELD_NUMBER: builtins.int
        CATEGORICAL_FIELD_NUMBER: builtins.int
        TIMESTAMP_FIELD_NUMBER: builtins.int
        TEXT_FIELD_NUMBER: builtins.int
        REPEATED_NUMERIC_FIELD_NUMBER: builtins.int
        REPEATED_CATEGORICAL_FIELD_NUMBER: builtins.int
        REPEATED_TEXT_FIELD_NUMBER: builtins.int
        @property
        def auto(self) -> global___AutoMlTablesInputs.Transformation.AutoTransformation: ...
        @property
        def numeric(self) -> global___AutoMlTablesInputs.Transformation.NumericTransformation: ...
        @property
        def categorical(self) -> global___AutoMlTablesInputs.Transformation.CategoricalTransformation: ...
        @property
        def timestamp(self) -> global___AutoMlTablesInputs.Transformation.TimestampTransformation: ...
        @property
        def text(self) -> global___AutoMlTablesInputs.Transformation.TextTransformation: ...
        @property
        def repeated_numeric(self) -> global___AutoMlTablesInputs.Transformation.NumericArrayTransformation: ...
        @property
        def repeated_categorical(self) -> global___AutoMlTablesInputs.Transformation.CategoricalArrayTransformation: ...
        @property
        def repeated_text(self) -> global___AutoMlTablesInputs.Transformation.TextArrayTransformation: ...
        def __init__(self,
            *,
            auto : typing.Optional[global___AutoMlTablesInputs.Transformation.AutoTransformation] = ...,
            numeric : typing.Optional[global___AutoMlTablesInputs.Transformation.NumericTransformation] = ...,
            categorical : typing.Optional[global___AutoMlTablesInputs.Transformation.CategoricalTransformation] = ...,
            timestamp : typing.Optional[global___AutoMlTablesInputs.Transformation.TimestampTransformation] = ...,
            text : typing.Optional[global___AutoMlTablesInputs.Transformation.TextTransformation] = ...,
            repeated_numeric : typing.Optional[global___AutoMlTablesInputs.Transformation.NumericArrayTransformation] = ...,
            repeated_categorical : typing.Optional[global___AutoMlTablesInputs.Transformation.CategoricalArrayTransformation] = ...,
            repeated_text : typing.Optional[global___AutoMlTablesInputs.Transformation.TextArrayTransformation] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["auto",b"auto","categorical",b"categorical","numeric",b"numeric","repeated_categorical",b"repeated_categorical","repeated_numeric",b"repeated_numeric","repeated_text",b"repeated_text","text",b"text","timestamp",b"timestamp","transformation_detail",b"transformation_detail"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["auto",b"auto","categorical",b"categorical","numeric",b"numeric","repeated_categorical",b"repeated_categorical","repeated_numeric",b"repeated_numeric","repeated_text",b"repeated_text","text",b"text","timestamp",b"timestamp","transformation_detail",b"transformation_detail"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["transformation_detail",b"transformation_detail"]) -> typing.Optional[typing_extensions.Literal["auto","numeric","categorical","timestamp","text","repeated_numeric","repeated_categorical","repeated_text"]]: ...

    OPTIMIZATION_OBJECTIVE_RECALL_VALUE_FIELD_NUMBER: builtins.int
    OPTIMIZATION_OBJECTIVE_PRECISION_VALUE_FIELD_NUMBER: builtins.int
    PREDICTION_TYPE_FIELD_NUMBER: builtins.int
    TARGET_COLUMN_FIELD_NUMBER: builtins.int
    TRANSFORMATIONS_FIELD_NUMBER: builtins.int
    OPTIMIZATION_OBJECTIVE_FIELD_NUMBER: builtins.int
    TRAIN_BUDGET_MILLI_NODE_HOURS_FIELD_NUMBER: builtins.int
    DISABLE_EARLY_STOPPING_FIELD_NUMBER: builtins.int
    WEIGHT_COLUMN_NAME_FIELD_NUMBER: builtins.int
    EXPORT_EVALUATED_DATA_ITEMS_CONFIG_FIELD_NUMBER: builtins.int
    ADDITIONAL_EXPERIMENTS_FIELD_NUMBER: builtins.int
    optimization_objective_recall_value: builtins.float = ...
    """Required when optimization_objective is "maximize-precision-at-recall".
    Must be between 0 and 1, inclusive.
    """

    optimization_objective_precision_value: builtins.float = ...
    """Required when optimization_objective is "maximize-recall-at-precision".
    Must be between 0 and 1, inclusive.
    """

    prediction_type: typing.Text = ...
    """The type of prediction the Model is to produce.
      "classification" - Predict one out of multiple target values is
                         picked for each row.
      "regression" - Predict a value based on its relation to other values.
                     This type is available only to columns that contain
                     semantically numeric values, i.e. integers or floating
                     point number, even if stored as e.g. strings.
    """

    target_column: typing.Text = ...
    """The column name of the target column that the model is to predict."""

    @property
    def transformations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AutoMlTablesInputs.Transformation]:
        """Each transformation will apply transform function to given input column.
        And the result will be used for training.
        When creating transformation for BigQuery Struct column, the column should
        be flattened using "." as the delimiter.
        """
        pass
    optimization_objective: typing.Text = ...
    """Objective function the model is optimizing towards. The training process
    creates a model that maximizes/minimizes the value of the objective
    function over the validation set.

    The supported optimization objectives depend on the prediction type.
    If the field is not set, a default objective function is used.

    classification (binary):
      "maximize-au-roc" (default) - Maximize the area under the receiver
                                    operating characteristic (ROC) curve.
      "minimize-log-loss" - Minimize log loss.
      "maximize-au-prc" - Maximize the area under the precision-recall curve.
      "maximize-precision-at-recall" - Maximize precision for a specified
                                      recall value.
      "maximize-recall-at-precision" - Maximize recall for a specified
                                       precision value.

    classification (multi-class):
      "minimize-log-loss" (default) - Minimize log loss.

    regression:
      "minimize-rmse" (default) - Minimize root-mean-squared error (RMSE).
      "minimize-mae" - Minimize mean-absolute error (MAE).
      "minimize-rmsle" - Minimize root-mean-squared log error (RMSLE).
    """

    train_budget_milli_node_hours: builtins.int = ...
    """Required. The train budget of creating this model, expressed in milli node
    hours i.e. 1,000 value in this field means 1 node hour.

    The training cost of the model will not exceed this budget. The final cost
    will be attempted to be close to the budget, though may end up being (even)
    noticeably smaller - at the backend's discretion. This especially may
    happen when further model training ceases to provide any improvements.

    If the budget is set to a value known to be insufficient to train a
    model for the given dataset, the training won't be attempted and
    will error.

    The train budget must be between 1,000 and 72,000 milli node hours,
    inclusive.
    """

    disable_early_stopping: builtins.bool = ...
    """Use the entire training budget. This disables the early stopping feature.
    By default, the early stopping feature is enabled, which means that AutoML
    Tables might stop training before the entire training budget has been used.
    """

    weight_column_name: typing.Text = ...
    """Column name that should be used as the weight column.
    Higher values in this column give more importance to the row
    during model training. The column must have numeric values between 0 and
    10000 inclusively; 0 means the row is ignored for training. If weight
    column field is not set, then all rows are assumed to have equal weight
    of 1.
    """

    @property
    def export_evaluated_data_items_config(self) -> google.cloud.aiplatform.v1.schema.trainingjob.definition.export_evaluated_data_items_config_pb2.ExportEvaluatedDataItemsConfig:
        """Configuration for exporting test set predictions to a BigQuery table. If
        this configuration is absent, then the export is not performed.
        """
        pass
    @property
    def additional_experiments(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Additional experiment flags for the Tables training pipeline."""
        pass
    def __init__(self,
        *,
        optimization_objective_recall_value : builtins.float = ...,
        optimization_objective_precision_value : builtins.float = ...,
        prediction_type : typing.Text = ...,
        target_column : typing.Text = ...,
        transformations : typing.Optional[typing.Iterable[global___AutoMlTablesInputs.Transformation]] = ...,
        optimization_objective : typing.Text = ...,
        train_budget_milli_node_hours : builtins.int = ...,
        disable_early_stopping : builtins.bool = ...,
        weight_column_name : typing.Text = ...,
        export_evaluated_data_items_config : typing.Optional[google.cloud.aiplatform.v1.schema.trainingjob.definition.export_evaluated_data_items_config_pb2.ExportEvaluatedDataItemsConfig] = ...,
        additional_experiments : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["additional_optimization_objective_config",b"additional_optimization_objective_config","export_evaluated_data_items_config",b"export_evaluated_data_items_config","optimization_objective_precision_value",b"optimization_objective_precision_value","optimization_objective_recall_value",b"optimization_objective_recall_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["additional_experiments",b"additional_experiments","additional_optimization_objective_config",b"additional_optimization_objective_config","disable_early_stopping",b"disable_early_stopping","export_evaluated_data_items_config",b"export_evaluated_data_items_config","optimization_objective",b"optimization_objective","optimization_objective_precision_value",b"optimization_objective_precision_value","optimization_objective_recall_value",b"optimization_objective_recall_value","prediction_type",b"prediction_type","target_column",b"target_column","train_budget_milli_node_hours",b"train_budget_milli_node_hours","transformations",b"transformations","weight_column_name",b"weight_column_name"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["additional_optimization_objective_config",b"additional_optimization_objective_config"]) -> typing.Optional[typing_extensions.Literal["optimization_objective_recall_value","optimization_objective_precision_value"]]: ...
global___AutoMlTablesInputs = AutoMlTablesInputs

class AutoMlTablesMetadata(google.protobuf.message.Message):
    """Model metadata specific to AutoML Tables."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TRAIN_COST_MILLI_NODE_HOURS_FIELD_NUMBER: builtins.int
    train_cost_milli_node_hours: builtins.int = ...
    """Output only. The actual training cost of the model, expressed in milli
    node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed
    to not exceed the train budget.
    """

    def __init__(self,
        *,
        train_cost_milli_node_hours : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["train_cost_milli_node_hours",b"train_cost_milli_node_hours"]) -> None: ...
global___AutoMlTablesMetadata = AutoMlTablesMetadata
