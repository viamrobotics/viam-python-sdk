"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class GrpcEndpoint(google.protobuf.message.Message):
    """Specification of the GRPC Endpoint."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TARGET_URI_FIELD_NUMBER: builtins.int
    target_uri: typing.Text = ...
    """Required. The target URI of the gRPC endpoint. Only UDS path is supported, and
    should start with “unix:”.
    """

    def __init__(self,
        *,
        target_uri : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["target_uri",b"target_uri"]) -> None: ...
global___GrpcEndpoint = GrpcEndpoint

class ValidationCA(google.protobuf.message.Message):
    """Specification of ValidationCA. Defines the mechanism to obtain the
    Certificate Authority certificate to validate the peer certificate.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GRPC_ENDPOINT_FIELD_NUMBER: builtins.int
    CERTIFICATE_PROVIDER_INSTANCE_FIELD_NUMBER: builtins.int
    @property
    def grpc_endpoint(self) -> global___GrpcEndpoint:
        """gRPC specific configuration to access the gRPC server to
        obtain the CA certificate.
        """
        pass
    @property
    def certificate_provider_instance(self) -> global___CertificateProviderInstance:
        """The certificate provider instance specification that will be passed to
        the data plane, which will be used to load necessary credential
        information.
        """
        pass
    def __init__(self,
        *,
        grpc_endpoint : typing.Optional[global___GrpcEndpoint] = ...,
        certificate_provider_instance : typing.Optional[global___CertificateProviderInstance] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["certificate_provider_instance",b"certificate_provider_instance","grpc_endpoint",b"grpc_endpoint","type",b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["certificate_provider_instance",b"certificate_provider_instance","grpc_endpoint",b"grpc_endpoint","type",b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["type",b"type"]) -> typing.Optional[typing_extensions.Literal["grpc_endpoint","certificate_provider_instance"]]: ...
global___ValidationCA = ValidationCA

class CertificateProviderInstance(google.protobuf.message.Message):
    """Specification of a TLS certificate provider instance. Workloads may have one
    or more CertificateProvider instances (plugins) and one of them is enabled
    and configured by specifying this message. Workloads use the values from this
    message to locate and load the CertificateProvider instance configuration.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PLUGIN_INSTANCE_FIELD_NUMBER: builtins.int
    plugin_instance: typing.Text = ...
    """Required. Plugin instance name, used to locate and load CertificateProvider instance
    configuration. Set to "google_cloud_private_spiffe" to use Certificate
    Authority Service certificate provider instance.
    """

    def __init__(self,
        *,
        plugin_instance : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["plugin_instance",b"plugin_instance"]) -> None: ...
global___CertificateProviderInstance = CertificateProviderInstance

class CertificateProvider(google.protobuf.message.Message):
    """Specification of certificate provider. Defines the mechanism to obtain the
    certificate and private key for peer to peer authentication.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GRPC_ENDPOINT_FIELD_NUMBER: builtins.int
    CERTIFICATE_PROVIDER_INSTANCE_FIELD_NUMBER: builtins.int
    @property
    def grpc_endpoint(self) -> global___GrpcEndpoint:
        """gRPC specific configuration to access the gRPC server to
        obtain the cert and private key.
        """
        pass
    @property
    def certificate_provider_instance(self) -> global___CertificateProviderInstance:
        """The certificate provider instance specification that will be passed to
        the data plane, which will be used to load necessary credential
        information.
        """
        pass
    def __init__(self,
        *,
        grpc_endpoint : typing.Optional[global___GrpcEndpoint] = ...,
        certificate_provider_instance : typing.Optional[global___CertificateProviderInstance] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["certificate_provider_instance",b"certificate_provider_instance","grpc_endpoint",b"grpc_endpoint","type",b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["certificate_provider_instance",b"certificate_provider_instance","grpc_endpoint",b"grpc_endpoint","type",b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["type",b"type"]) -> typing.Optional[typing_extensions.Literal["grpc_endpoint","certificate_provider_instance"]]: ...
global___CertificateProvider = CertificateProvider
