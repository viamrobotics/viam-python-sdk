"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.channel.v1.common_pb2
import google.cloud.channel.v1.offers_pb2
import google.cloud.channel.v1.products_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Entitlement(google.protobuf.message.Message):
    """An entitlement is a representation of a customer's ability to use a service."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _ProvisioningState:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ProvisioningStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ProvisioningState.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        PROVISIONING_STATE_UNSPECIFIED: Entitlement.ProvisioningState.ValueType = ...  # 0
        """Not used."""

        ACTIVE: Entitlement.ProvisioningState.ValueType = ...  # 1
        """The entitlement is currently active."""

        SUSPENDED: Entitlement.ProvisioningState.ValueType = ...  # 5
        """The entitlement is currently suspended."""

    class ProvisioningState(_ProvisioningState, metaclass=_ProvisioningStateEnumTypeWrapper):
        """Indicates the current provisioning state of the entitlement."""
        pass

    PROVISIONING_STATE_UNSPECIFIED: Entitlement.ProvisioningState.ValueType = ...  # 0
    """Not used."""

    ACTIVE: Entitlement.ProvisioningState.ValueType = ...  # 1
    """The entitlement is currently active."""

    SUSPENDED: Entitlement.ProvisioningState.ValueType = ...  # 5
    """The entitlement is currently suspended."""


    class _SuspensionReason:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _SuspensionReasonEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SuspensionReason.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        SUSPENSION_REASON_UNSPECIFIED: Entitlement.SuspensionReason.ValueType = ...  # 0
        """Not used."""

        RESELLER_INITIATED: Entitlement.SuspensionReason.ValueType = ...  # 1
        """Entitlement was manually suspended by the Reseller."""

        TRIAL_ENDED: Entitlement.SuspensionReason.ValueType = ...  # 2
        """Trial ended."""

        RENEWAL_WITH_TYPE_CANCEL: Entitlement.SuspensionReason.ValueType = ...  # 3
        """Entitlement renewal was canceled."""

        PENDING_TOS_ACCEPTANCE: Entitlement.SuspensionReason.ValueType = ...  # 4
        """Entitlement was automatically suspended on creation for pending ToS
        acceptance on customer.
        """

        OTHER: Entitlement.SuspensionReason.ValueType = ...  # 100
        """Other reasons (internal reasons, abuse, etc.)."""

    class SuspensionReason(_SuspensionReason, metaclass=_SuspensionReasonEnumTypeWrapper):
        """Suspension reason for an entitlement if [provisioning_state][google.cloud.channel.v1.Entitlement.provisioning_state] = SUSPENDED."""
        pass

    SUSPENSION_REASON_UNSPECIFIED: Entitlement.SuspensionReason.ValueType = ...  # 0
    """Not used."""

    RESELLER_INITIATED: Entitlement.SuspensionReason.ValueType = ...  # 1
    """Entitlement was manually suspended by the Reseller."""

    TRIAL_ENDED: Entitlement.SuspensionReason.ValueType = ...  # 2
    """Trial ended."""

    RENEWAL_WITH_TYPE_CANCEL: Entitlement.SuspensionReason.ValueType = ...  # 3
    """Entitlement renewal was canceled."""

    PENDING_TOS_ACCEPTANCE: Entitlement.SuspensionReason.ValueType = ...  # 4
    """Entitlement was automatically suspended on creation for pending ToS
    acceptance on customer.
    """

    OTHER: Entitlement.SuspensionReason.ValueType = ...  # 100
    """Other reasons (internal reasons, abuse, etc.)."""


    NAME_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    OFFER_FIELD_NUMBER: builtins.int
    COMMITMENT_SETTINGS_FIELD_NUMBER: builtins.int
    PROVISIONING_STATE_FIELD_NUMBER: builtins.int
    PROVISIONED_SERVICE_FIELD_NUMBER: builtins.int
    SUSPENSION_REASONS_FIELD_NUMBER: builtins.int
    PURCHASE_ORDER_ID_FIELD_NUMBER: builtins.int
    TRIAL_SETTINGS_FIELD_NUMBER: builtins.int
    ASSOCIATION_INFO_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. Resource name of an entitlement in the form:
    accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}.
    """

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time at which the entitlement is created."""
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time at which the entitlement is updated."""
        pass
    offer: typing.Text = ...
    """Required. The offer resource name for which the entitlement is to be
    created. Takes the form: accounts/{account_id}/offers/{offer_id}.
    """

    @property
    def commitment_settings(self) -> global___CommitmentSettings:
        """Commitment settings for a commitment-based Offer.
        Required for commitment based offers.
        """
        pass
    provisioning_state: global___Entitlement.ProvisioningState.ValueType = ...
    """Output only. Current provisioning state of the entitlement."""

    @property
    def provisioned_service(self) -> global___ProvisionedService:
        """Output only. Service provisioning details for the entitlement."""
        pass
    @property
    def suspension_reasons(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___Entitlement.SuspensionReason.ValueType]:
        """Output only. Enumerable of all current suspension reasons for an entitlement."""
        pass
    purchase_order_id: typing.Text = ...
    """Optional. This purchase order (PO) information is for resellers to use for their
    company tracking usage. If a purchaseOrderId value is given, it appears in
    the API responses and shows up in the invoice. The property accepts up to
    80 plain text characters.
    """

    @property
    def trial_settings(self) -> global___TrialSettings:
        """Output only. Settings for trial offers."""
        pass
    @property
    def association_info(self) -> global___AssociationInfo:
        """Association information to other entitlements."""
        pass
    @property
    def parameters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Parameter]:
        """Extended entitlement parameters. When creating an entitlement, valid
        parameter names and values are defined in the
        [Offer.parameter_definitions][google.cloud.channel.v1.Offer.parameter_definitions].

        The response may include the following output-only Parameters:

        - assigned_units: The number of licenses assigned to users.

        - max_units: The maximum assignable units for a flexible offer.

        - num_units: The total commitment for commitment-based offers.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        offer : typing.Text = ...,
        commitment_settings : typing.Optional[global___CommitmentSettings] = ...,
        provisioning_state : global___Entitlement.ProvisioningState.ValueType = ...,
        provisioned_service : typing.Optional[global___ProvisionedService] = ...,
        suspension_reasons : typing.Optional[typing.Iterable[global___Entitlement.SuspensionReason.ValueType]] = ...,
        purchase_order_id : typing.Text = ...,
        trial_settings : typing.Optional[global___TrialSettings] = ...,
        association_info : typing.Optional[global___AssociationInfo] = ...,
        parameters : typing.Optional[typing.Iterable[global___Parameter]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["association_info",b"association_info","commitment_settings",b"commitment_settings","create_time",b"create_time","provisioned_service",b"provisioned_service","trial_settings",b"trial_settings","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["association_info",b"association_info","commitment_settings",b"commitment_settings","create_time",b"create_time","name",b"name","offer",b"offer","parameters",b"parameters","provisioned_service",b"provisioned_service","provisioning_state",b"provisioning_state","purchase_order_id",b"purchase_order_id","suspension_reasons",b"suspension_reasons","trial_settings",b"trial_settings","update_time",b"update_time"]) -> None: ...
global___Entitlement = Entitlement

class Parameter(google.protobuf.message.Message):
    """Definition for extended entitlement parameters."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    EDITABLE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Name of the parameter."""

    @property
    def value(self) -> google.cloud.channel.v1.common_pb2.Value:
        """Value of the parameter."""
        pass
    editable: builtins.bool = ...
    """Output only. Specifies whether this parameter is allowed to be changed. For example, for
    a Google Workspace Business Starter entitlement in commitment plan,
    num_units is editable when entitlement is active.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        value : typing.Optional[google.cloud.channel.v1.common_pb2.Value] = ...,
        editable : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["editable",b"editable","name",b"name","value",b"value"]) -> None: ...
global___Parameter = Parameter

class AssociationInfo(google.protobuf.message.Message):
    """Association links that an entitlement has to other entitlements."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BASE_ENTITLEMENT_FIELD_NUMBER: builtins.int
    base_entitlement: typing.Text = ...
    """The name of the base entitlement, for which this entitlement is an add-on."""

    def __init__(self,
        *,
        base_entitlement : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["base_entitlement",b"base_entitlement"]) -> None: ...
global___AssociationInfo = AssociationInfo

class ProvisionedService(google.protobuf.message.Message):
    """Service provisioned for an entitlement."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROVISIONING_ID_FIELD_NUMBER: builtins.int
    PRODUCT_ID_FIELD_NUMBER: builtins.int
    SKU_ID_FIELD_NUMBER: builtins.int
    provisioning_id: typing.Text = ...
    """Output only. Provisioning ID of the entitlement. For Google Workspace, this would be the
    underlying Subscription ID.
    """

    product_id: typing.Text = ...
    """Output only. The product pertaining to the provisioning resource as specified in the
    Offer.
    """

    sku_id: typing.Text = ...
    """Output only. The SKU pertaining to the provisioning resource as specified in the Offer."""

    def __init__(self,
        *,
        provisioning_id : typing.Text = ...,
        product_id : typing.Text = ...,
        sku_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["product_id",b"product_id","provisioning_id",b"provisioning_id","sku_id",b"sku_id"]) -> None: ...
global___ProvisionedService = ProvisionedService

class CommitmentSettings(google.protobuf.message.Message):
    """Commitment settings for commitment-based offers."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    RENEWAL_SETTINGS_FIELD_NUMBER: builtins.int
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Commitment start timestamp."""
        pass
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Commitment end timestamp."""
        pass
    @property
    def renewal_settings(self) -> global___RenewalSettings:
        """Optional. Renewal settings applicable for a commitment-based Offer."""
        pass
    def __init__(self,
        *,
        start_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        end_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        renewal_settings : typing.Optional[global___RenewalSettings] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_time",b"end_time","renewal_settings",b"renewal_settings","start_time",b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_time",b"end_time","renewal_settings",b"renewal_settings","start_time",b"start_time"]) -> None: ...
global___CommitmentSettings = CommitmentSettings

class RenewalSettings(google.protobuf.message.Message):
    """Renewal settings for renewable Offers."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ENABLE_RENEWAL_FIELD_NUMBER: builtins.int
    RESIZE_UNIT_COUNT_FIELD_NUMBER: builtins.int
    PAYMENT_PLAN_FIELD_NUMBER: builtins.int
    PAYMENT_CYCLE_FIELD_NUMBER: builtins.int
    enable_renewal: builtins.bool = ...
    """If false, the plan will be completed at the end date."""

    resize_unit_count: builtins.bool = ...
    """If true and enable_renewal = true, the unit (for example seats or licenses)
    will be set to the number of active units at renewal time.
    """

    payment_plan: google.cloud.channel.v1.offers_pb2.PaymentPlan.ValueType = ...
    """Describes how a reseller will be billed."""

    @property
    def payment_cycle(self) -> google.cloud.channel.v1.offers_pb2.Period:
        """Describes how frequently the reseller will be billed, such as
        once per month.
        """
        pass
    def __init__(self,
        *,
        enable_renewal : builtins.bool = ...,
        resize_unit_count : builtins.bool = ...,
        payment_plan : google.cloud.channel.v1.offers_pb2.PaymentPlan.ValueType = ...,
        payment_cycle : typing.Optional[google.cloud.channel.v1.offers_pb2.Period] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["payment_cycle",b"payment_cycle"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["enable_renewal",b"enable_renewal","payment_cycle",b"payment_cycle","payment_plan",b"payment_plan","resize_unit_count",b"resize_unit_count"]) -> None: ...
global___RenewalSettings = RenewalSettings

class TrialSettings(google.protobuf.message.Message):
    """Settings for trial offers."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TRIAL_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    trial: builtins.bool = ...
    """Determines if the entitlement is in a trial or not:

    * `true` - The entitlement is in trial.
    * `false` - The entitlement is not in trial.
    """

    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Date when the trial ends. The value is in milliseconds
        using the UNIX Epoch format. See an example [Epoch
        converter](https://www.epochconverter.com).
        """
        pass
    def __init__(self,
        *,
        trial : builtins.bool = ...,
        end_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_time",b"end_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_time",b"end_time","trial",b"trial"]) -> None: ...
global___TrialSettings = TrialSettings

class TransferableSku(google.protobuf.message.Message):
    """TransferableSku represents information a reseller needs to view existing
    provisioned services for a customer that they do not own.
    Read-only.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TRANSFER_ELIGIBILITY_FIELD_NUMBER: builtins.int
    SKU_FIELD_NUMBER: builtins.int
    LEGACY_SKU_FIELD_NUMBER: builtins.int
    @property
    def transfer_eligibility(self) -> global___TransferEligibility:
        """Describes the transfer eligibility of a SKU."""
        pass
    @property
    def sku(self) -> google.cloud.channel.v1.products_pb2.Sku:
        """The SKU pertaining to the provisioning resource as specified in the Offer."""
        pass
    @property
    def legacy_sku(self) -> google.cloud.channel.v1.products_pb2.Sku:
        """Optional. The customer to transfer has an entitlement with the populated legacy SKU."""
        pass
    def __init__(self,
        *,
        transfer_eligibility : typing.Optional[global___TransferEligibility] = ...,
        sku : typing.Optional[google.cloud.channel.v1.products_pb2.Sku] = ...,
        legacy_sku : typing.Optional[google.cloud.channel.v1.products_pb2.Sku] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["legacy_sku",b"legacy_sku","sku",b"sku","transfer_eligibility",b"transfer_eligibility"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["legacy_sku",b"legacy_sku","sku",b"sku","transfer_eligibility",b"transfer_eligibility"]) -> None: ...
global___TransferableSku = TransferableSku

class TransferEligibility(google.protobuf.message.Message):
    """Specifies transfer eligibility of a SKU."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Reason:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ReasonEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Reason.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        REASON_UNSPECIFIED: TransferEligibility.Reason.ValueType = ...  # 0
        """Not used."""

        PENDING_TOS_ACCEPTANCE: TransferEligibility.Reason.ValueType = ...  # 1
        """Reseller needs to accept TOS before transferring the SKU."""

        SKU_NOT_ELIGIBLE: TransferEligibility.Reason.ValueType = ...  # 2
        """Reseller not eligible to sell the SKU."""

        SKU_SUSPENDED: TransferEligibility.Reason.ValueType = ...  # 3
        """SKU subscription is suspended"""

    class Reason(_Reason, metaclass=_ReasonEnumTypeWrapper):
        """Reason of ineligibility."""
        pass

    REASON_UNSPECIFIED: TransferEligibility.Reason.ValueType = ...  # 0
    """Not used."""

    PENDING_TOS_ACCEPTANCE: TransferEligibility.Reason.ValueType = ...  # 1
    """Reseller needs to accept TOS before transferring the SKU."""

    SKU_NOT_ELIGIBLE: TransferEligibility.Reason.ValueType = ...  # 2
    """Reseller not eligible to sell the SKU."""

    SKU_SUSPENDED: TransferEligibility.Reason.ValueType = ...  # 3
    """SKU subscription is suspended"""


    IS_ELIGIBLE_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    INELIGIBILITY_REASON_FIELD_NUMBER: builtins.int
    is_eligible: builtins.bool = ...
    """Whether reseller is eligible to transfer the SKU."""

    description: typing.Text = ...
    """Localized description if reseller is not eligible to transfer the SKU."""

    ineligibility_reason: global___TransferEligibility.Reason.ValueType = ...
    """Specified the reason for ineligibility."""

    def __init__(self,
        *,
        is_eligible : builtins.bool = ...,
        description : typing.Text = ...,
        ineligibility_reason : global___TransferEligibility.Reason.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","ineligibility_reason",b"ineligibility_reason","is_eligible",b"is_eligible"]) -> None: ...
global___TransferEligibility = TransferEligibility
