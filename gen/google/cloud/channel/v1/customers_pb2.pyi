"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.channel.v1.common_pb2
import google.protobuf.descriptor
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.type.postal_address_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Customer(google.protobuf.message.Message):
    """Entity representing a customer of a reseller or distributor."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    ORG_DISPLAY_NAME_FIELD_NUMBER: builtins.int
    ORG_POSTAL_ADDRESS_FIELD_NUMBER: builtins.int
    PRIMARY_CONTACT_INFO_FIELD_NUMBER: builtins.int
    ALTERNATE_EMAIL_FIELD_NUMBER: builtins.int
    DOMAIN_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    CLOUD_IDENTITY_ID_FIELD_NUMBER: builtins.int
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    CLOUD_IDENTITY_INFO_FIELD_NUMBER: builtins.int
    CHANNEL_PARTNER_ID_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. Resource name of the customer.
    Format: accounts/{account_id}/customers/{customer_id}
    """

    org_display_name: typing.Text = ...
    """Required. Name of the organization that the customer entity represents."""

    @property
    def org_postal_address(self) -> google.type.postal_address_pb2.PostalAddress:
        """Required. The organization address for the customer. To enforce US laws and
        embargoes, we require a region and zip code. You must provide valid
        addresses for every customer. To set the customer's language, use the
        Customer-level language code.
        """
        pass
    @property
    def primary_contact_info(self) -> global___ContactInfo:
        """Primary contact info."""
        pass
    alternate_email: typing.Text = ...
    """Secondary contact email. You need to provide an alternate email to create
    different domains if a primary contact email already exists. Users will
    receive a notification with credentials when you create an admin.google.com
    account. Secondary emails are also recovery email addresses. Alternate
    emails are optional when you create Team customers.
    """

    domain: typing.Text = ...
    """Required. The customer's primary domain. Must match the primary contact
    email's domain.
    """

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Time when the customer was created."""
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Time when the customer was updated."""
        pass
    cloud_identity_id: typing.Text = ...
    """Output only. The customer's Cloud Identity ID if the customer has a Cloud
    Identity resource.
    """

    language_code: typing.Text = ...
    """Optional. The BCP-47 language code, such as "en-US" or "sr-Latn". For more
    information, see
    https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
    """

    @property
    def cloud_identity_info(self) -> google.cloud.channel.v1.common_pb2.CloudIdentityInfo:
        """Output only. Cloud Identity information for the customer.
        Populated only if a Cloud Identity account exists for this customer.
        """
        pass
    channel_partner_id: typing.Text = ...
    """Cloud Identity ID of the customer's channel partner.
    Populated only if a channel partner exists for this customer.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        org_display_name : typing.Text = ...,
        org_postal_address : typing.Optional[google.type.postal_address_pb2.PostalAddress] = ...,
        primary_contact_info : typing.Optional[global___ContactInfo] = ...,
        alternate_email : typing.Text = ...,
        domain : typing.Text = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        cloud_identity_id : typing.Text = ...,
        language_code : typing.Text = ...,
        cloud_identity_info : typing.Optional[google.cloud.channel.v1.common_pb2.CloudIdentityInfo] = ...,
        channel_partner_id : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cloud_identity_info",b"cloud_identity_info","create_time",b"create_time","org_postal_address",b"org_postal_address","primary_contact_info",b"primary_contact_info","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["alternate_email",b"alternate_email","channel_partner_id",b"channel_partner_id","cloud_identity_id",b"cloud_identity_id","cloud_identity_info",b"cloud_identity_info","create_time",b"create_time","domain",b"domain","language_code",b"language_code","name",b"name","org_display_name",b"org_display_name","org_postal_address",b"org_postal_address","primary_contact_info",b"primary_contact_info","update_time",b"update_time"]) -> None: ...
global___Customer = Customer

class ContactInfo(google.protobuf.message.Message):
    """Contact information for a customer account."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FIRST_NAME_FIELD_NUMBER: builtins.int
    LAST_NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    EMAIL_FIELD_NUMBER: builtins.int
    TITLE_FIELD_NUMBER: builtins.int
    PHONE_FIELD_NUMBER: builtins.int
    first_name: typing.Text = ...
    """The customer account contact's first name. Optional for Team customers."""

    last_name: typing.Text = ...
    """The customer account contact's last name. Optional for Team customers."""

    display_name: typing.Text = ...
    """Output only. The customer account contact's display name, formatted as a
    combination of the customer's first and last name.
    """

    email: typing.Text = ...
    """The customer account's contact email. Required for entitlements that create
    admin.google.com accounts, and serves as the customer's username for those
    accounts. Use this email to invite Team customers.
    """

    title: typing.Text = ...
    """Optional. The customer account contact's job title."""

    phone: typing.Text = ...
    """The customer account's contact phone number."""

    def __init__(self,
        *,
        first_name : typing.Text = ...,
        last_name : typing.Text = ...,
        display_name : typing.Text = ...,
        email : typing.Text = ...,
        title : typing.Text = ...,
        phone : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name","email",b"email","first_name",b"first_name","last_name",b"last_name","phone",b"phone","title",b"title"]) -> None: ...
global___ContactInfo = ContactInfo
