"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.recommendationengine.v1beta1.catalog_pb2
import google.cloud.recommendationengine.v1beta1.common_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class UserEvent(google.protobuf.message.Message):
    """UserEvent captures all metadata information recommendation engine needs to
    know about how end users interact with customers' website.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _EventSource:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _EventSourceEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_EventSource.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        EVENT_SOURCE_UNSPECIFIED: UserEvent.EventSource.ValueType = ...  # 0
        """Unspecified event source."""

        AUTOML: UserEvent.EventSource.ValueType = ...  # 1
        """The event is ingested via a javascript pixel or Recommendations AI Tag
        through automl datalayer or JS Macros.
        """

        ECOMMERCE: UserEvent.EventSource.ValueType = ...  # 2
        """The event is ingested via Recommendations AI Tag through Enhanced
        Ecommerce datalayer.
        """

        BATCH_UPLOAD: UserEvent.EventSource.ValueType = ...  # 3
        """The event is ingested via Import user events API."""

    class EventSource(_EventSource, metaclass=_EventSourceEnumTypeWrapper):
        """User event source."""
        pass

    EVENT_SOURCE_UNSPECIFIED: UserEvent.EventSource.ValueType = ...  # 0
    """Unspecified event source."""

    AUTOML: UserEvent.EventSource.ValueType = ...  # 1
    """The event is ingested via a javascript pixel or Recommendations AI Tag
    through automl datalayer or JS Macros.
    """

    ECOMMERCE: UserEvent.EventSource.ValueType = ...  # 2
    """The event is ingested via Recommendations AI Tag through Enhanced
    Ecommerce datalayer.
    """

    BATCH_UPLOAD: UserEvent.EventSource.ValueType = ...  # 3
    """The event is ingested via Import user events API."""


    EVENT_TYPE_FIELD_NUMBER: builtins.int
    USER_INFO_FIELD_NUMBER: builtins.int
    EVENT_DETAIL_FIELD_NUMBER: builtins.int
    PRODUCT_EVENT_DETAIL_FIELD_NUMBER: builtins.int
    EVENT_TIME_FIELD_NUMBER: builtins.int
    EVENT_SOURCE_FIELD_NUMBER: builtins.int
    event_type: typing.Text = ...
    """Required. User event type. Allowed values are:

    * `add-to-cart` Products being added to cart.
    * `add-to-list` Items being added to a list (shopping list, favorites
      etc).
    * `category-page-view` Special pages such as sale or promotion pages
      viewed.
    * `checkout-start` User starting a checkout process.
    * `detail-page-view` Products detail page viewed.
    * `home-page-view` Homepage viewed.
    * `page-visit` Generic page visits not included in the event types above.
    * `purchase-complete` User finishing a purchase.
    * `refund` Purchased items being refunded or returned.
    * `remove-from-cart` Products being removed from cart.
    * `remove-from-list` Items being removed from a list.
    * `search` Product search.
    * `shopping-cart-page-view` User viewing a shopping cart.
    * `impression` List of items displayed. Used by Google Tag Manager.
    """

    @property
    def user_info(self) -> global___UserInfo:
        """Required. User information."""
        pass
    @property
    def event_detail(self) -> global___EventDetail:
        """Optional. User event detailed information common across different
        recommendation types.
        """
        pass
    @property
    def product_event_detail(self) -> global___ProductEventDetail:
        """Optional. Retail product specific user event metadata.

        This field is required for the following event types:

        * `add-to-cart`
        * `add-to-list`
        * `category-page-view`
        * `checkout-start`
        * `detail-page-view`
        * `purchase-complete`
        * `refund`
        * `remove-from-cart`
        * `remove-from-list`
        * `search`

        This field is optional for the following event types:

        * `page-visit`
        * `shopping-cart-page-view` - note that 'product_event_detail' should be
          set for this unless the shopping cart is empty.

        This field is not allowed for the following event types:

        * `home-page-view`
        """
        pass
    @property
    def event_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Optional. Only required for ImportUserEvents method. Timestamp of user
        event created.
        """
        pass
    event_source: global___UserEvent.EventSource.ValueType = ...
    """Optional. This field should *not* be set when using JavaScript pixel
    or the Recommendations AI Tag. Defaults to `EVENT_SOURCE_UNSPECIFIED`.
    """

    def __init__(self,
        *,
        event_type : typing.Text = ...,
        user_info : typing.Optional[global___UserInfo] = ...,
        event_detail : typing.Optional[global___EventDetail] = ...,
        product_event_detail : typing.Optional[global___ProductEventDetail] = ...,
        event_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        event_source : global___UserEvent.EventSource.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["event_detail",b"event_detail","event_time",b"event_time","product_event_detail",b"product_event_detail","user_info",b"user_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["event_detail",b"event_detail","event_source",b"event_source","event_time",b"event_time","event_type",b"event_type","product_event_detail",b"product_event_detail","user_info",b"user_info"]) -> None: ...
global___UserEvent = UserEvent

class UserInfo(google.protobuf.message.Message):
    """Information of end users."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VISITOR_ID_FIELD_NUMBER: builtins.int
    USER_ID_FIELD_NUMBER: builtins.int
    IP_ADDRESS_FIELD_NUMBER: builtins.int
    USER_AGENT_FIELD_NUMBER: builtins.int
    DIRECT_USER_REQUEST_FIELD_NUMBER: builtins.int
    visitor_id: typing.Text = ...
    """Required. A unique identifier for tracking visitors with a length limit of
    128 bytes.

    For example, this could be implemented with a http cookie, which should be
    able to uniquely identify a visitor on a single device. This unique
    identifier should not change if the visitor log in/out of the website.
    Maximum length 128 bytes. Cannot be empty.
    """

    user_id: typing.Text = ...
    """Optional. Unique identifier for logged-in user with a length limit of 128
    bytes. Required only for logged-in users.
    """

    ip_address: typing.Text = ...
    """Optional. IP address of the user. This could be either IPv4 (e.g. 104.133.9.80) or
    IPv6 (e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334). This should *not* be
    set when using the javascript pixel or if `direct_user_request` is set.
    Used to extract location information for personalization.
    """

    user_agent: typing.Text = ...
    """Optional. User agent as included in the HTTP header. UTF-8 encoded string
    with a length limit of 1 KiB.

    This should *not* be set when using the JavaScript pixel or if
    `directUserRequest` is set.
    """

    direct_user_request: builtins.bool = ...
    """Optional. Indicates if the request is made directly from the end user
    in which case the user_agent and ip_address fields can be populated
    from the HTTP request. This should *not* be set when using the javascript
    pixel. This flag should be set only if the API request is made directly
    from the end user such as a mobile app (and not if a gateway or a server is
    processing and pushing the user events).
    """

    def __init__(self,
        *,
        visitor_id : typing.Text = ...,
        user_id : typing.Text = ...,
        ip_address : typing.Text = ...,
        user_agent : typing.Text = ...,
        direct_user_request : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["direct_user_request",b"direct_user_request","ip_address",b"ip_address","user_agent",b"user_agent","user_id",b"user_id","visitor_id",b"visitor_id"]) -> None: ...
global___UserInfo = UserInfo

class EventDetail(google.protobuf.message.Message):
    """User event details shared by all recommendation types."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    URI_FIELD_NUMBER: builtins.int
    REFERRER_URI_FIELD_NUMBER: builtins.int
    PAGE_VIEW_ID_FIELD_NUMBER: builtins.int
    EXPERIMENT_IDS_FIELD_NUMBER: builtins.int
    RECOMMENDATION_TOKEN_FIELD_NUMBER: builtins.int
    EVENT_ATTRIBUTES_FIELD_NUMBER: builtins.int
    uri: typing.Text = ...
    """Optional. Complete url (window.location.href) of the user's current page.
    When using the JavaScript pixel, this value is filled in automatically.
    Maximum length 5KB.
    """

    referrer_uri: typing.Text = ...
    """Optional. The referrer url of the current page. When using
    the JavaScript pixel, this value is filled in automatically.
    """

    page_view_id: typing.Text = ...
    """Optional. A unique id of a web page view.
    This should be kept the same for all user events triggered from the same
    pageview. For example, an item detail page view could trigger multiple
    events as the user is browsing the page.
    The `pageViewId` property should be kept the same for all these events so
    that they can be grouped together properly. This `pageViewId` will be
    automatically generated if using the JavaScript pixel.
    """

    @property
    def experiment_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Optional. A list of identifiers for the independent experiment groups
        this user event belongs to. This is used to distinguish between user events
        associated with different experiment setups (e.g. using Recommendation
        Engine system, using different recommendation models).
        """
        pass
    recommendation_token: typing.Text = ...
    """Optional. Recommendation token included in the recommendation prediction
    response.

    This field enables accurate attribution of recommendation model
    performance.

    This token enables us to accurately attribute page view or purchase back to
    the event and the particular predict response containing this
    clicked/purchased item. If user clicks on product K in the recommendation
    results, pass the `PredictResponse.recommendationToken` property as a url
    parameter to product K's page. When recording events on product K's page,
    log the PredictResponse.recommendation_token to this field.

    Optional, but highly encouraged for user events that are the result of a
    recommendation prediction query.
    """

    @property
    def event_attributes(self) -> google.cloud.recommendationengine.v1beta1.common_pb2.FeatureMap:
        """Optional. Extra user event features to include in the recommendation
        model.

        For product recommendation, an example of extra user information is
        traffic_channel, i.e. how user arrives at the site. Users can arrive
        at the site by coming to the site directly, or coming through Google
        search, and etc.
        """
        pass
    def __init__(self,
        *,
        uri : typing.Text = ...,
        referrer_uri : typing.Text = ...,
        page_view_id : typing.Text = ...,
        experiment_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        recommendation_token : typing.Text = ...,
        event_attributes : typing.Optional[google.cloud.recommendationengine.v1beta1.common_pb2.FeatureMap] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["event_attributes",b"event_attributes"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["event_attributes",b"event_attributes","experiment_ids",b"experiment_ids","page_view_id",b"page_view_id","recommendation_token",b"recommendation_token","referrer_uri",b"referrer_uri","uri",b"uri"]) -> None: ...
global___EventDetail = EventDetail

class ProductEventDetail(google.protobuf.message.Message):
    """ProductEventDetail captures user event information specific to retail
    products.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SEARCH_QUERY_FIELD_NUMBER: builtins.int
    PAGE_CATEGORIES_FIELD_NUMBER: builtins.int
    PRODUCT_DETAILS_FIELD_NUMBER: builtins.int
    LIST_ID_FIELD_NUMBER: builtins.int
    CART_ID_FIELD_NUMBER: builtins.int
    PURCHASE_TRANSACTION_FIELD_NUMBER: builtins.int
    search_query: typing.Text = ...
    """Required for `search` events. Other event types should not set this field.
    The user's search query as UTF-8 encoded text with a length limit of 5 KiB.
    """

    @property
    def page_categories(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.recommendationengine.v1beta1.catalog_pb2.CatalogItem.CategoryHierarchy]:
        """Required for `category-page-view` events. Other event types should not set
        this field.
        The categories associated with a category page.
        Category pages include special pages such as sales or promotions. For
        instance, a special sale page may have the category hierarchy:
        categories : ["Sales", "2017 Black Friday Deals"].
        """
        pass
    @property
    def product_details(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ProductDetail]:
        """The main product details related to the event.

        This field is required for the following event types:

        * `add-to-cart`
        * `add-to-list`
        * `checkout-start`
        * `detail-page-view`
        * `purchase-complete`
        * `refund`
        * `remove-from-cart`
        * `remove-from-list`

        This field is optional for the following event types:

        * `page-visit`
        * `shopping-cart-page-view` - note that 'product_details' should be set for
          this unless the shopping cart is empty.

        This field is not allowed for the following event types:

        * `category-page-view`
        * `home-page-view`
        * `search`
        """
        pass
    list_id: typing.Text = ...
    """Required for `add-to-list` and `remove-from-list` events. The id or name of
    the list that the item is being added to or removed from. Other event types
    should not set this field.
    """

    cart_id: typing.Text = ...
    """Optional. The id or name of the associated shopping cart. This id is used
    to associate multiple items added or present in the cart before purchase.

    This can only be set for `add-to-cart`, `remove-from-cart`,
    `checkout-start`, `purchase-complete`, or `shopping-cart-page-view` events.
    """

    @property
    def purchase_transaction(self) -> global___PurchaseTransaction:
        """Optional. A transaction represents the entire purchase transaction.
        Required for `purchase-complete` events. Optional for `checkout-start`
        events. Other event types should not set this field.
        """
        pass
    def __init__(self,
        *,
        search_query : typing.Text = ...,
        page_categories : typing.Optional[typing.Iterable[google.cloud.recommendationengine.v1beta1.catalog_pb2.CatalogItem.CategoryHierarchy]] = ...,
        product_details : typing.Optional[typing.Iterable[global___ProductDetail]] = ...,
        list_id : typing.Text = ...,
        cart_id : typing.Text = ...,
        purchase_transaction : typing.Optional[global___PurchaseTransaction] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["purchase_transaction",b"purchase_transaction"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cart_id",b"cart_id","list_id",b"list_id","page_categories",b"page_categories","product_details",b"product_details","purchase_transaction",b"purchase_transaction","search_query",b"search_query"]) -> None: ...
global___ProductEventDetail = ProductEventDetail

class PurchaseTransaction(google.protobuf.message.Message):
    """A transaction represents the entire purchase transaction."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class TaxesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: builtins.float = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class CostsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: builtins.float = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    REVENUE_FIELD_NUMBER: builtins.int
    TAXES_FIELD_NUMBER: builtins.int
    COSTS_FIELD_NUMBER: builtins.int
    CURRENCY_CODE_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """Optional. The transaction ID with a length limit of 128 bytes."""

    revenue: builtins.float = ...
    """Required. Total revenue or grand total associated with the transaction.
    This value include shipping, tax, or other adjustments to total revenue
    that you want to include as part of your revenue calculations. This field
    is not required if the event type is `refund`.
    """

    @property
    def taxes(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, builtins.float]:
        """Optional. All the taxes associated with the transaction."""
        pass
    @property
    def costs(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, builtins.float]:
        """Optional. All the costs associated with the product. These can be
        manufacturing costs, shipping expenses not borne by the end user, or any
        other costs.

        Total product cost such that
          profit = revenue - (sum(taxes) + sum(costs))
        If product_cost is not set, then
          profit = revenue - tax - shipping - sum(CatalogItem.costs).

        If CatalogItem.cost is not specified for one of the items, CatalogItem.cost
        based profit *cannot* be calculated for this Transaction.
        """
        pass
    currency_code: typing.Text = ...
    """Required. Currency code. Use three-character ISO-4217 code. This field
    is not required if the event type is `refund`.
    """

    def __init__(self,
        *,
        id : typing.Text = ...,
        revenue : builtins.float = ...,
        taxes : typing.Optional[typing.Mapping[typing.Text, builtins.float]] = ...,
        costs : typing.Optional[typing.Mapping[typing.Text, builtins.float]] = ...,
        currency_code : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["costs",b"costs","currency_code",b"currency_code","id",b"id","revenue",b"revenue","taxes",b"taxes"]) -> None: ...
global___PurchaseTransaction = PurchaseTransaction

class ProductDetail(google.protobuf.message.Message):
    """Detailed product information associated with a user event."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ID_FIELD_NUMBER: builtins.int
    CURRENCY_CODE_FIELD_NUMBER: builtins.int
    ORIGINAL_PRICE_FIELD_NUMBER: builtins.int
    DISPLAY_PRICE_FIELD_NUMBER: builtins.int
    STOCK_STATE_FIELD_NUMBER: builtins.int
    QUANTITY_FIELD_NUMBER: builtins.int
    AVAILABLE_QUANTITY_FIELD_NUMBER: builtins.int
    ITEM_ATTRIBUTES_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """Required. Catalog item ID. UTF-8 encoded string with a length limit of 128
    characters.
    """

    currency_code: typing.Text = ...
    """Optional. Currency code for price/costs. Use three-character ISO-4217
    code. Required only if originalPrice or displayPrice is set.
    """

    original_price: builtins.float = ...
    """Optional. Original price of the product. If provided, this will override
    the original price in Catalog for this product.
    """

    display_price: builtins.float = ...
    """Optional. Display price of the product (e.g. discounted price). If
    provided, this will override the display price in Catalog for this product.
    """

    stock_state: google.cloud.recommendationengine.v1beta1.catalog_pb2.ProductCatalogItem.StockState.ValueType = ...
    """Optional. Item stock state. If provided, this overrides the stock state
    in Catalog for items in this event.
    """

    quantity: builtins.int = ...
    """Optional. Quantity of the product associated with the user event. For
    example, this field will be 2 if two products are added to the shopping
    cart for `add-to-cart` event. Required for `add-to-cart`, `add-to-list`,
    `remove-from-cart`, `checkout-start`, `purchase-complete`, `refund` event
    types.
    """

    available_quantity: builtins.int = ...
    """Optional. Quantity of the products in stock when a user event happens.
    Optional. If provided, this overrides the available quantity in Catalog for
    this event. and can only be set if `stock_status` is set to `IN_STOCK`.

    Note that if an item is out of stock, you must set the `stock_state` field
    to be `OUT_OF_STOCK`. Leaving this field unspecified / as zero is not
    sufficient to mark the item out of stock.
    """

    @property
    def item_attributes(self) -> google.cloud.recommendationengine.v1beta1.common_pb2.FeatureMap:
        """Optional. Extra features associated with a product in the user event."""
        pass
    def __init__(self,
        *,
        id : typing.Text = ...,
        currency_code : typing.Text = ...,
        original_price : builtins.float = ...,
        display_price : builtins.float = ...,
        stock_state : google.cloud.recommendationengine.v1beta1.catalog_pb2.ProductCatalogItem.StockState.ValueType = ...,
        quantity : builtins.int = ...,
        available_quantity : builtins.int = ...,
        item_attributes : typing.Optional[google.cloud.recommendationengine.v1beta1.common_pb2.FeatureMap] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["item_attributes",b"item_attributes"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["available_quantity",b"available_quantity","currency_code",b"currency_code","display_price",b"display_price","id",b"id","item_attributes",b"item_attributes","original_price",b"original_price","quantity",b"quantity","stock_state",b"stock_state"]) -> None: ...
global___ProductDetail = ProductDetail
