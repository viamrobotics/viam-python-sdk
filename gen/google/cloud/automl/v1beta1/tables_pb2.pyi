"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.automl.v1beta1.column_spec_pb2
import google.cloud.automl.v1beta1.data_stats_pb2
import google.cloud.automl.v1beta1.ranges_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.struct_pb2
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class TablesDatasetMetadata(google.protobuf.message.Message):
    """Metadata for a dataset used for AutoML Tables."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class TargetColumnCorrelationsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> google.cloud.automl.v1beta1.data_stats_pb2.CorrelationStats: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[google.cloud.automl.v1beta1.data_stats_pb2.CorrelationStats] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    PRIMARY_TABLE_SPEC_ID_FIELD_NUMBER: builtins.int
    TARGET_COLUMN_SPEC_ID_FIELD_NUMBER: builtins.int
    WEIGHT_COLUMN_SPEC_ID_FIELD_NUMBER: builtins.int
    ML_USE_COLUMN_SPEC_ID_FIELD_NUMBER: builtins.int
    TARGET_COLUMN_CORRELATIONS_FIELD_NUMBER: builtins.int
    STATS_UPDATE_TIME_FIELD_NUMBER: builtins.int
    primary_table_spec_id: typing.Text = ...
    """Output only. The table_spec_id of the primary table of this dataset."""

    target_column_spec_id: typing.Text = ...
    """column_spec_id of the primary table's column that should be used as the
    training & prediction target.
    This column must be non-nullable and have one of following data types
    (otherwise model creation will error):

    * CATEGORY

    * FLOAT64

    If the type is CATEGORY , only up to
    100 unique values may exist in that column across all rows.

    NOTE: Updates of this field will instantly affect any other users
    concurrently working with the dataset.
    """

    weight_column_spec_id: typing.Text = ...
    """column_spec_id of the primary table's column that should be used as the
    weight column, i.e. the higher the value the more important the row will be
    during model training.
    Required type: FLOAT64.
    Allowed values: 0 to 10000, inclusive on both ends; 0 means the row is
                    ignored for training.
    If not set all rows are assumed to have equal weight of 1.
    NOTE: Updates of this field will instantly affect any other users
    concurrently working with the dataset.
    """

    ml_use_column_spec_id: typing.Text = ...
    """column_spec_id of the primary table column which specifies a possible ML
    use of the row, i.e. the column will be used to split the rows into TRAIN,
    VALIDATE and TEST sets.
    Required type: STRING.
    This column, if set, must either have all of `TRAIN`, `VALIDATE`, `TEST`
    among its values, or only have `TEST`, `UNASSIGNED` values. In the latter
    case the rows with `UNASSIGNED` value will be assigned by AutoML. Note
    that if a given ml use distribution makes it impossible to create a "good"
    model, that call will error describing the issue.
    If both this column_spec_id and primary table's time_column_spec_id are not
    set, then all rows are treated as `UNASSIGNED`.
    NOTE: Updates of this field will instantly affect any other users
    concurrently working with the dataset.
    """

    @property
    def target_column_correlations(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, google.cloud.automl.v1beta1.data_stats_pb2.CorrelationStats]:
        """Output only. Correlations between

        [TablesDatasetMetadata.target_column_spec_id][google.cloud.automl.v1beta1.TablesDatasetMetadata.target_column_spec_id],
        and other columns of the

        [TablesDatasetMetadataprimary_table][google.cloud.automl.v1beta1.TablesDatasetMetadata.primary_table_spec_id].
        Only set if the target column is set. Mapping from other column spec id to
        its CorrelationStats with the target column.
        This field may be stale, see the stats_update_time field for
        for the timestamp at which these stats were last updated.
        """
        pass
    @property
    def stats_update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The most recent timestamp when target_column_correlations
        field and all descendant ColumnSpec.data_stats and
        ColumnSpec.top_correlated_columns fields were last (re-)generated. Any
        changes that happened to the dataset afterwards are not reflected in these
        fields values. The regeneration happens in the background on a best effort
        basis.
        """
        pass
    def __init__(self,
        *,
        primary_table_spec_id : typing.Text = ...,
        target_column_spec_id : typing.Text = ...,
        weight_column_spec_id : typing.Text = ...,
        ml_use_column_spec_id : typing.Text = ...,
        target_column_correlations : typing.Optional[typing.Mapping[typing.Text, google.cloud.automl.v1beta1.data_stats_pb2.CorrelationStats]] = ...,
        stats_update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["stats_update_time",b"stats_update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["ml_use_column_spec_id",b"ml_use_column_spec_id","primary_table_spec_id",b"primary_table_spec_id","stats_update_time",b"stats_update_time","target_column_correlations",b"target_column_correlations","target_column_spec_id",b"target_column_spec_id","weight_column_spec_id",b"weight_column_spec_id"]) -> None: ...
global___TablesDatasetMetadata = TablesDatasetMetadata

class TablesModelMetadata(google.protobuf.message.Message):
    """Model metadata specific to AutoML Tables."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    OPTIMIZATION_OBJECTIVE_RECALL_VALUE_FIELD_NUMBER: builtins.int
    OPTIMIZATION_OBJECTIVE_PRECISION_VALUE_FIELD_NUMBER: builtins.int
    TARGET_COLUMN_SPEC_FIELD_NUMBER: builtins.int
    INPUT_FEATURE_COLUMN_SPECS_FIELD_NUMBER: builtins.int
    OPTIMIZATION_OBJECTIVE_FIELD_NUMBER: builtins.int
    TABLES_MODEL_COLUMN_INFO_FIELD_NUMBER: builtins.int
    TRAIN_BUDGET_MILLI_NODE_HOURS_FIELD_NUMBER: builtins.int
    TRAIN_COST_MILLI_NODE_HOURS_FIELD_NUMBER: builtins.int
    DISABLE_EARLY_STOPPING_FIELD_NUMBER: builtins.int
    optimization_objective_recall_value: builtins.float = ...
    """Required when optimization_objective is "MAXIMIZE_PRECISION_AT_RECALL".
    Must be between 0 and 1, inclusive.
    """

    optimization_objective_precision_value: builtins.float = ...
    """Required when optimization_objective is "MAXIMIZE_RECALL_AT_PRECISION".
    Must be between 0 and 1, inclusive.
    """

    @property
    def target_column_spec(self) -> google.cloud.automl.v1beta1.column_spec_pb2.ColumnSpec:
        """Column spec of the dataset's primary table's column the model is
        predicting. Snapshotted when model creation started.
        Only 3 fields are used:
        name - May be set on CreateModel, if it's not then the ColumnSpec
               corresponding to the current target_column_spec_id of the dataset
               the model is trained from is used.
               If neither is set, CreateModel will error.
        display_name - Output only.
        data_type - Output only.
        """
        pass
    @property
    def input_feature_column_specs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.automl.v1beta1.column_spec_pb2.ColumnSpec]:
        """Column specs of the dataset's primary table's columns, on which
        the model is trained and which are used as the input for predictions.
        The

        [target_column][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec]
        as well as, according to dataset's state upon model creation,

        [weight_column][google.cloud.automl.v1beta1.TablesDatasetMetadata.weight_column_spec_id],
        and

        [ml_use_column][google.cloud.automl.v1beta1.TablesDatasetMetadata.ml_use_column_spec_id]
        must never be included here.

        Only 3 fields are used:

        * name - May be set on CreateModel, if set only the columns specified are
          used, otherwise all primary table's columns (except the ones listed
          above) are used for the training and prediction input.

        * display_name - Output only.

        * data_type - Output only.
        """
        pass
    optimization_objective: typing.Text = ...
    """Objective function the model is optimizing towards. The training process
    creates a model that maximizes/minimizes the value of the objective
    function over the validation set.

    The supported optimization objectives depend on the prediction type.
    If the field is not set, a default objective function is used.

    CLASSIFICATION_BINARY:
      "MAXIMIZE_AU_ROC" (default) - Maximize the area under the receiver
                                    operating characteristic (ROC) curve.
      "MINIMIZE_LOG_LOSS" - Minimize log loss.
      "MAXIMIZE_AU_PRC" - Maximize the area under the precision-recall curve.
      "MAXIMIZE_PRECISION_AT_RECALL" - Maximize precision for a specified
                                      recall value.
      "MAXIMIZE_RECALL_AT_PRECISION" - Maximize recall for a specified
                                       precision value.

    CLASSIFICATION_MULTI_CLASS :
      "MINIMIZE_LOG_LOSS" (default) - Minimize log loss.


    REGRESSION:
      "MINIMIZE_RMSE" (default) - Minimize root-mean-squared error (RMSE).
      "MINIMIZE_MAE" - Minimize mean-absolute error (MAE).
      "MINIMIZE_RMSLE" - Minimize root-mean-squared log error (RMSLE).
    """

    @property
    def tables_model_column_info(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TablesModelColumnInfo]:
        """Output only. Auxiliary information for each of the
        input_feature_column_specs with respect to this particular model.
        """
        pass
    train_budget_milli_node_hours: builtins.int = ...
    """Required. The train budget of creating this model, expressed in milli node
    hours i.e. 1,000 value in this field means 1 node hour.

    The training cost of the model will not exceed this budget. The final cost
    will be attempted to be close to the budget, though may end up being (even)
    noticeably smaller - at the backend's discretion. This especially may
    happen when further model training ceases to provide any improvements.

    If the budget is set to a value known to be insufficient to train a
    model for the given dataset, the training won't be attempted and
    will error.

    The train budget must be between 1,000 and 72,000 milli node hours,
    inclusive.
    """

    train_cost_milli_node_hours: builtins.int = ...
    """Output only. The actual training cost of the model, expressed in milli
    node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed
    to not exceed the train budget.
    """

    disable_early_stopping: builtins.bool = ...
    """Use the entire training budget. This disables the early stopping feature.
    By default, the early stopping feature is enabled, which means that AutoML
    Tables might stop training before the entire training budget has been used.
    """

    def __init__(self,
        *,
        optimization_objective_recall_value : builtins.float = ...,
        optimization_objective_precision_value : builtins.float = ...,
        target_column_spec : typing.Optional[google.cloud.automl.v1beta1.column_spec_pb2.ColumnSpec] = ...,
        input_feature_column_specs : typing.Optional[typing.Iterable[google.cloud.automl.v1beta1.column_spec_pb2.ColumnSpec]] = ...,
        optimization_objective : typing.Text = ...,
        tables_model_column_info : typing.Optional[typing.Iterable[global___TablesModelColumnInfo]] = ...,
        train_budget_milli_node_hours : builtins.int = ...,
        train_cost_milli_node_hours : builtins.int = ...,
        disable_early_stopping : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["additional_optimization_objective_config",b"additional_optimization_objective_config","optimization_objective_precision_value",b"optimization_objective_precision_value","optimization_objective_recall_value",b"optimization_objective_recall_value","target_column_spec",b"target_column_spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["additional_optimization_objective_config",b"additional_optimization_objective_config","disable_early_stopping",b"disable_early_stopping","input_feature_column_specs",b"input_feature_column_specs","optimization_objective",b"optimization_objective","optimization_objective_precision_value",b"optimization_objective_precision_value","optimization_objective_recall_value",b"optimization_objective_recall_value","tables_model_column_info",b"tables_model_column_info","target_column_spec",b"target_column_spec","train_budget_milli_node_hours",b"train_budget_milli_node_hours","train_cost_milli_node_hours",b"train_cost_milli_node_hours"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["additional_optimization_objective_config",b"additional_optimization_objective_config"]) -> typing.Optional[typing_extensions.Literal["optimization_objective_recall_value","optimization_objective_precision_value"]]: ...
global___TablesModelMetadata = TablesModelMetadata

class TablesAnnotation(google.protobuf.message.Message):
    """Contains annotation details specific to Tables."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SCORE_FIELD_NUMBER: builtins.int
    PREDICTION_INTERVAL_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    TABLES_MODEL_COLUMN_INFO_FIELD_NUMBER: builtins.int
    BASELINE_SCORE_FIELD_NUMBER: builtins.int
    score: builtins.float = ...
    """Output only. A confidence estimate between 0.0 and 1.0, inclusive. A higher
    value means greater confidence in the returned value.
    For

    [target_column_spec][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec]
    of FLOAT64 data type the score is not populated.
    """

    @property
    def prediction_interval(self) -> google.cloud.automl.v1beta1.ranges_pb2.DoubleRange:
        """Output only. Only populated when

        [target_column_spec][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec]
        has FLOAT64 data type. An interval in which the exactly correct target
        value has 95% chance to be in.
        """
        pass
    @property
    def value(self) -> google.protobuf.struct_pb2.Value:
        """The predicted value of the row's

        [target_column][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec].
        The value depends on the column's DataType:

        * CATEGORY - the predicted (with the above confidence `score`) CATEGORY
          value.

        * FLOAT64 - the predicted (with above `prediction_interval`) FLOAT64 value.
        """
        pass
    @property
    def tables_model_column_info(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TablesModelColumnInfo]:
        """Output only. Auxiliary information for each of the model's

        [input_feature_column_specs][google.cloud.automl.v1beta1.TablesModelMetadata.input_feature_column_specs]
        with respect to this particular prediction.
        If no other fields than

        [column_spec_name][google.cloud.automl.v1beta1.TablesModelColumnInfo.column_spec_name]
        and

        [column_display_name][google.cloud.automl.v1beta1.TablesModelColumnInfo.column_display_name]
        would be populated, then this whole field is not.
        """
        pass
    baseline_score: builtins.float = ...
    """Output only. Stores the prediction score for the baseline example, which
    is defined as the example with all values set to their baseline values.
    This is used as part of the Sampled Shapley explanation of the model's
    prediction. This field is populated only when feature importance is
    requested. For regression models, this holds the baseline prediction for
    the baseline example. For classification models, this holds the baseline
    prediction for the baseline example for the argmax class.
    """

    def __init__(self,
        *,
        score : builtins.float = ...,
        prediction_interval : typing.Optional[google.cloud.automl.v1beta1.ranges_pb2.DoubleRange] = ...,
        value : typing.Optional[google.protobuf.struct_pb2.Value] = ...,
        tables_model_column_info : typing.Optional[typing.Iterable[global___TablesModelColumnInfo]] = ...,
        baseline_score : builtins.float = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["prediction_interval",b"prediction_interval","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["baseline_score",b"baseline_score","prediction_interval",b"prediction_interval","score",b"score","tables_model_column_info",b"tables_model_column_info","value",b"value"]) -> None: ...
global___TablesAnnotation = TablesAnnotation

class TablesModelColumnInfo(google.protobuf.message.Message):
    """An information specific to given column and Tables Model, in context
    of the Model and the predictions created by it.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    COLUMN_SPEC_NAME_FIELD_NUMBER: builtins.int
    COLUMN_DISPLAY_NAME_FIELD_NUMBER: builtins.int
    FEATURE_IMPORTANCE_FIELD_NUMBER: builtins.int
    column_spec_name: typing.Text = ...
    """Output only. The name of the ColumnSpec describing the column. Not
    populated when this proto is outputted to BigQuery.
    """

    column_display_name: typing.Text = ...
    """Output only. The display name of the column (same as the display_name of
    its ColumnSpec).
    """

    feature_importance: builtins.float = ...
    """Output only. When given as part of a Model (always populated):
    Measurement of how much model predictions correctness on the TEST data
    depend on values in this column. A value between 0 and 1, higher means
    higher influence. These values are normalized - for all input feature
    columns of a given model they add to 1.

    When given back by Predict (populated iff
    [feature_importance
    param][google.cloud.automl.v1beta1.PredictRequest.params] is set) or Batch
    Predict (populated iff
    [feature_importance][google.cloud.automl.v1beta1.PredictRequest.params]
    param is set):
    Measurement of how impactful for the prediction returned for the given row
    the value in this column was. Specifically, the feature importance
    specifies the marginal contribution that the feature made to the prediction
    score compared to the baseline score. These values are computed using the
    Sampled Shapley method.
    """

    def __init__(self,
        *,
        column_spec_name : typing.Text = ...,
        column_display_name : typing.Text = ...,
        feature_importance : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["column_display_name",b"column_display_name","column_spec_name",b"column_spec_name","feature_importance",b"feature_importance"]) -> None: ...
global___TablesModelColumnInfo = TablesModelColumnInfo
