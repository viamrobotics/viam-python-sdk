"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.automl.v1beta1.annotation_payload_pb2
import google.cloud.automl.v1beta1.data_items_pb2
import google.cloud.automl.v1beta1.io_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class PredictRequest(google.protobuf.message.Message):
    """Request message for [PredictionService.Predict][google.cloud.automl.v1beta1.PredictionService.Predict]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ParamsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    PAYLOAD_FIELD_NUMBER: builtins.int
    PARAMS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Name of the model requested to serve the prediction."""

    @property
    def payload(self) -> google.cloud.automl.v1beta1.data_items_pb2.ExamplePayload:
        """Required. Payload to perform a prediction on. The payload must match the
        problem type that the model was trained to solve.
        """
        pass
    @property
    def params(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Additional domain-specific parameters, any string must be up to 25000
        characters long.

        *  For Image Classification:

           `score_threshold` - (float) A value from 0.0 to 1.0. When the model
            makes predictions for an image, it will only produce results that have
            at least this confidence score. The default is 0.5.

         *  For Image Object Detection:
           `score_threshold` - (float) When Model detects objects on the image,
               it will only produce bounding boxes which have at least this
               confidence score. Value in 0 to 1 range, default is 0.5.
           `max_bounding_box_count` - (int64) No more than this number of bounding
               boxes will be returned in the response. Default is 100, the
               requested value may be limited by server.
        *  For Tables:
           feature_imp<span>ortan</span>ce - (boolean) Whether feature importance
               should be populated in the returned TablesAnnotation.
               The default is false.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        payload : typing.Optional[google.cloud.automl.v1beta1.data_items_pb2.ExamplePayload] = ...,
        params : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["payload",b"payload"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","params",b"params","payload",b"payload"]) -> None: ...
global___PredictRequest = PredictRequest

class PredictResponse(google.protobuf.message.Message):
    """Response message for [PredictionService.Predict][google.cloud.automl.v1beta1.PredictionService.Predict]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    PAYLOAD_FIELD_NUMBER: builtins.int
    PREPROCESSED_INPUT_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    @property
    def payload(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.automl.v1beta1.annotation_payload_pb2.AnnotationPayload]:
        """Prediction result.
        Translation and Text Sentiment will return precisely one payload.
        """
        pass
    @property
    def preprocessed_input(self) -> google.cloud.automl.v1beta1.data_items_pb2.ExamplePayload:
        """The preprocessed example that AutoML actually makes prediction on.
        Empty if AutoML does not preprocess the input example.
        * For Text Extraction:
          If the input is a .pdf file, the OCR'ed text will be provided in
          [document_text][google.cloud.automl.v1beta1.Document.document_text].
        """
        pass
    @property
    def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Additional domain-specific prediction response metadata.

        * For Image Object Detection:
         `max_bounding_box_count` - (int64) At most that many bounding boxes per
             image could have been returned.

        * For Text Sentiment:
         `sentiment_score` - (float, deprecated) A value between -1 and 1,
             -1 maps to least positive sentiment, while 1 maps to the most positive
             one and the higher the score, the more positive the sentiment in the
             document is. Yet these values are relative to the training data, so
             e.g. if all data was positive then -1 will be also positive (though
             the least).
             The sentiment_score shouldn't be confused with "score" or "magnitude"
             from the previous Natural Language Sentiment Analysis API.
        """
        pass
    def __init__(self,
        *,
        payload : typing.Optional[typing.Iterable[google.cloud.automl.v1beta1.annotation_payload_pb2.AnnotationPayload]] = ...,
        preprocessed_input : typing.Optional[google.cloud.automl.v1beta1.data_items_pb2.ExamplePayload] = ...,
        metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["preprocessed_input",b"preprocessed_input"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["metadata",b"metadata","payload",b"payload","preprocessed_input",b"preprocessed_input"]) -> None: ...
global___PredictResponse = PredictResponse

class BatchPredictRequest(google.protobuf.message.Message):
    """Request message for [PredictionService.BatchPredict][google.cloud.automl.v1beta1.PredictionService.BatchPredict]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ParamsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    INPUT_CONFIG_FIELD_NUMBER: builtins.int
    OUTPUT_CONFIG_FIELD_NUMBER: builtins.int
    PARAMS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Name of the model requested to serve the batch prediction."""

    @property
    def input_config(self) -> google.cloud.automl.v1beta1.io_pb2.BatchPredictInputConfig:
        """Required. The input configuration for batch prediction."""
        pass
    @property
    def output_config(self) -> google.cloud.automl.v1beta1.io_pb2.BatchPredictOutputConfig:
        """Required. The Configuration specifying where output predictions should
        be written.
        """
        pass
    @property
    def params(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Required. Additional domain-specific parameters for the predictions, any string must
        be up to 25000 characters long.

        *  For Text Classification:

           `score_threshold` - (float) A value from 0.0 to 1.0. When the model
                makes predictions for a text snippet, it will only produce results
                that have at least this confidence score. The default is 0.5.

        *  For Image Classification:

           `score_threshold` - (float) A value from 0.0 to 1.0. When the model
                makes predictions for an image, it will only produce results that
                have at least this confidence score. The default is 0.5.

        *  For Image Object Detection:

           `score_threshold` - (float) When Model detects objects on the image,
               it will only produce bounding boxes which have at least this
               confidence score. Value in 0 to 1 range, default is 0.5.
           `max_bounding_box_count` - (int64) No more than this number of bounding
               boxes will be produced per image. Default is 100, the
               requested value may be limited by server.

        *  For Video Classification :

           `score_threshold` - (float) A value from 0.0 to 1.0. When the model
               makes predictions for a video, it will only produce results that
               have at least this confidence score. The default is 0.5.
           `segment_classification` - (boolean) Set to true to request
               segment-level classification. AutoML Video Intelligence returns
               labels and their confidence scores for the entire segment of the
               video that user specified in the request configuration.
               The default is "true".
           `shot_classification` - (boolean) Set to true to request shot-level
               classification. AutoML Video Intelligence determines the boundaries
               for each camera shot in the entire segment of the video that user
               specified in the request configuration. AutoML Video Intelligence
               then returns labels and their confidence scores for each detected
               shot, along with the start and end time of the shot.
               WARNING: Model evaluation is not done for this classification type,
               the quality of it depends on training data, but there are no metrics
               provided to describe that quality. The default is "false".
           `1s_interval_classification` - (boolean) Set to true to request
               classification for a video at one-second intervals. AutoML Video
               Intelligence returns labels and their confidence scores for each
               second of the entire segment of the video that user specified in the
               request configuration.
               WARNING: Model evaluation is not done for this classification
               type, the quality of it depends on training data, but there are no
               metrics provided to describe that quality. The default is
               "false".

        *  For Tables:

           feature_imp<span>ortan</span>ce - (boolean) Whether feature importance
               should be populated in the returned TablesAnnotations. The
               default is false.

        *  For Video Object Tracking:

           `score_threshold` - (float) When Model detects objects on video frames,
               it will only produce bounding boxes which have at least this
               confidence score. Value in 0 to 1 range, default is 0.5.
           `max_bounding_box_count` - (int64) No more than this number of bounding
               boxes will be returned per frame. Default is 100, the requested
               value may be limited by server.
           `min_bounding_box_size` - (float) Only bounding boxes with shortest edge
             at least that long as a relative value of video frame size will be
             returned. Value in 0 to 1 range. Default is 0.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        input_config : typing.Optional[google.cloud.automl.v1beta1.io_pb2.BatchPredictInputConfig] = ...,
        output_config : typing.Optional[google.cloud.automl.v1beta1.io_pb2.BatchPredictOutputConfig] = ...,
        params : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["input_config",b"input_config","output_config",b"output_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["input_config",b"input_config","name",b"name","output_config",b"output_config","params",b"params"]) -> None: ...
global___BatchPredictRequest = BatchPredictRequest

class BatchPredictResult(google.protobuf.message.Message):
    """Result of the Batch Predict. This message is returned in
    [response][google.longrunning.Operation.response] of the operation returned
    by the [PredictionService.BatchPredict][google.cloud.automl.v1beta1.PredictionService.BatchPredict].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    METADATA_FIELD_NUMBER: builtins.int
    @property
    def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Additional domain-specific prediction response metadata.

        *  For Image Object Detection:
         `max_bounding_box_count` - (int64) At most that many bounding boxes per
             image could have been returned.

        *  For Video Object Tracking:
         `max_bounding_box_count` - (int64) At most that many bounding boxes per
             frame could have been returned.
        """
        pass
    def __init__(self,
        *,
        metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["metadata",b"metadata"]) -> None: ...
global___BatchPredictResult = BatchPredictResult
