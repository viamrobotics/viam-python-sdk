"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _TypeCode:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _TypeCodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TypeCode.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    TYPE_CODE_UNSPECIFIED: TypeCode.ValueType = ...  # 0
    """Not specified. Should not be used."""

    FLOAT64: TypeCode.ValueType = ...  # 3
    """Encoded as `number`, or the strings `"NaN"`, `"Infinity"`, or
    `"-Infinity"`.
    """

    TIMESTAMP: TypeCode.ValueType = ...  # 4
    """Must be between 0AD and 9999AD. Encoded as `string` according to
    [time_format][google.cloud.automl.v1beta1.DataType.time_format], or, if
    that format is not set, then in RFC 3339 `date-time` format, where
    `time-offset` = `"Z"` (e.g. 1985-04-12T23:20:50.52Z).
    """

    STRING: TypeCode.ValueType = ...  # 6
    """Encoded as `string`."""

    ARRAY: TypeCode.ValueType = ...  # 8
    """Encoded as `list`, where the list elements are represented according to

    [list_element_type][google.cloud.automl.v1beta1.DataType.list_element_type].
    """

    STRUCT: TypeCode.ValueType = ...  # 9
    """Encoded as `struct`, where field values are represented according to
    [struct_type][google.cloud.automl.v1beta1.DataType.struct_type].
    """

    CATEGORY: TypeCode.ValueType = ...  # 10
    """Values of this type are not further understood by AutoML,
    e.g. AutoML is unable to tell the order of values (as it could with
    FLOAT64), or is unable to say if one value contains another (as it
    could with STRING).
    Encoded as `string` (bytes should be base64-encoded, as described in RFC
    4648, section 4).
    """

class TypeCode(_TypeCode, metaclass=_TypeCodeEnumTypeWrapper):
    """`TypeCode` is used as a part of
    [DataType][google.cloud.automl.v1beta1.DataType].
    """
    pass

TYPE_CODE_UNSPECIFIED: TypeCode.ValueType = ...  # 0
"""Not specified. Should not be used."""

FLOAT64: TypeCode.ValueType = ...  # 3
"""Encoded as `number`, or the strings `"NaN"`, `"Infinity"`, or
`"-Infinity"`.
"""

TIMESTAMP: TypeCode.ValueType = ...  # 4
"""Must be between 0AD and 9999AD. Encoded as `string` according to
[time_format][google.cloud.automl.v1beta1.DataType.time_format], or, if
that format is not set, then in RFC 3339 `date-time` format, where
`time-offset` = `"Z"` (e.g. 1985-04-12T23:20:50.52Z).
"""

STRING: TypeCode.ValueType = ...  # 6
"""Encoded as `string`."""

ARRAY: TypeCode.ValueType = ...  # 8
"""Encoded as `list`, where the list elements are represented according to

[list_element_type][google.cloud.automl.v1beta1.DataType.list_element_type].
"""

STRUCT: TypeCode.ValueType = ...  # 9
"""Encoded as `struct`, where field values are represented according to
[struct_type][google.cloud.automl.v1beta1.DataType.struct_type].
"""

CATEGORY: TypeCode.ValueType = ...  # 10
"""Values of this type are not further understood by AutoML,
e.g. AutoML is unable to tell the order of values (as it could with
FLOAT64), or is unable to say if one value contains another (as it
could with STRING).
Encoded as `string` (bytes should be base64-encoded, as described in RFC
4648, section 4).
"""

global___TypeCode = TypeCode


class DataType(google.protobuf.message.Message):
    """Indicated the type of data that can be stored in a structured data entity
    (e.g. a table).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    LIST_ELEMENT_TYPE_FIELD_NUMBER: builtins.int
    STRUCT_TYPE_FIELD_NUMBER: builtins.int
    TIME_FORMAT_FIELD_NUMBER: builtins.int
    TYPE_CODE_FIELD_NUMBER: builtins.int
    NULLABLE_FIELD_NUMBER: builtins.int
    @property
    def list_element_type(self) -> global___DataType:
        """If [type_code][google.cloud.automl.v1beta1.DataType.type_code] == [ARRAY][google.cloud.automl.v1beta1.TypeCode.ARRAY],
        then `list_element_type` is the type of the elements.
        """
        pass
    @property
    def struct_type(self) -> global___StructType:
        """If [type_code][google.cloud.automl.v1beta1.DataType.type_code] == [STRUCT][google.cloud.automl.v1beta1.TypeCode.STRUCT], then `struct_type`
        provides type information for the struct's fields.
        """
        pass
    time_format: typing.Text = ...
    """If [type_code][google.cloud.automl.v1beta1.DataType.type_code] == [TIMESTAMP][google.cloud.automl.v1beta1.TypeCode.TIMESTAMP]
    then `time_format` provides the format in which that time field is
    expressed. The time_format must either be one of:
    * `UNIX_SECONDS`
    * `UNIX_MILLISECONDS`
    * `UNIX_MICROSECONDS`
    * `UNIX_NANOSECONDS`
    (for respectively number of seconds, milliseconds, microseconds and
    nanoseconds since start of the Unix epoch);
    or be written in `strftime` syntax. If time_format is not set, then the
    default format as described on the type_code is used.
    """

    type_code: global___TypeCode.ValueType = ...
    """Required. The [TypeCode][google.cloud.automl.v1beta1.TypeCode] for this type."""

    nullable: builtins.bool = ...
    """If true, this DataType can also be `NULL`. In .CSV files `NULL` value is
    expressed as an empty string.
    """

    def __init__(self,
        *,
        list_element_type : typing.Optional[global___DataType] = ...,
        struct_type : typing.Optional[global___StructType] = ...,
        time_format : typing.Text = ...,
        type_code : global___TypeCode.ValueType = ...,
        nullable : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["details",b"details","list_element_type",b"list_element_type","struct_type",b"struct_type","time_format",b"time_format"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["details",b"details","list_element_type",b"list_element_type","nullable",b"nullable","struct_type",b"struct_type","time_format",b"time_format","type_code",b"type_code"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["details",b"details"]) -> typing.Optional[typing_extensions.Literal["list_element_type","struct_type","time_format"]]: ...
global___DataType = DataType

class StructType(google.protobuf.message.Message):
    """`StructType` defines the DataType-s of a [STRUCT][google.cloud.automl.v1beta1.TypeCode.STRUCT] type."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class FieldsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___DataType: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___DataType] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    FIELDS_FIELD_NUMBER: builtins.int
    @property
    def fields(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___DataType]:
        """Unordered map of struct field names to their data types.
        Fields cannot be added or removed via Update. Their names and
        data types are still mutable.
        """
        pass
    def __init__(self,
        *,
        fields : typing.Optional[typing.Mapping[typing.Text, global___DataType]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["fields",b"fields"]) -> None: ...
global___StructType = StructType
