"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Trigger(google.protobuf.message.Message):
    """A representation of the trigger resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    UID_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    EVENT_FILTERS_FIELD_NUMBER: builtins.int
    SERVICE_ACCOUNT_FIELD_NUMBER: builtins.int
    DESTINATION_FIELD_NUMBER: builtins.int
    TRANSPORT_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    ETAG_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the trigger. Must be unique within the
    location on the project and must be in
    `projects/{project}/locations/{location}/triggers/{trigger}` format.
    """

    uid: typing.Text = ...
    """Output only. Server assigned unique identifier for the trigger. The value
    is a UUID4 string and guaranteed to remain unchanged until the resource is
    deleted.
    """

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The creation time."""
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The last-modified time."""
        pass
    @property
    def event_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EventFilter]:
        """Required. null The list of filters that applies to event attributes. Only
        events that match all the provided filters will be sent to the destination.
        """
        pass
    service_account: typing.Text = ...
    """Optional. The IAM service account email associated with the trigger. The
    service account represents the identity of the trigger.

    The principal who calls this API must have `iam.serviceAccounts.actAs`
    permission in the service account. See
    https://cloud.google.com/iam/docs/understanding-service-accounts?hl=en#sa_common
    for more information.

    For Cloud Run destinations, this service account is used to generate
    identity tokens when invoking the service. See
    https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account
    for information on how to invoke authenticated Cloud Run services.
    In order to create Audit Log triggers, the service account should also
    have `roles/eventarc.eventReceiver` IAM role.
    """

    @property
    def destination(self) -> global___Destination:
        """Required. Destination specifies where the events should be sent to."""
        pass
    @property
    def transport(self) -> global___Transport:
        """Optional. In order to deliver messages, Eventarc may use other GCP
        products as transport intermediary. This field contains a reference to that
        transport intermediary. This information can be used for debugging
        purposes.
        """
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Optional. User labels attached to the triggers that can be used to group
        resources.
        """
        pass
    etag: typing.Text = ...
    """Output only. This checksum is computed by the server based on the value of
    other fields, and may be sent only on create requests to ensure the client
    has an up-to-date value before proceeding.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        uid : typing.Text = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        event_filters : typing.Optional[typing.Iterable[global___EventFilter]] = ...,
        service_account : typing.Text = ...,
        destination : typing.Optional[global___Destination] = ...,
        transport : typing.Optional[global___Transport] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        etag : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time","destination",b"destination","transport",b"transport","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["create_time",b"create_time","destination",b"destination","etag",b"etag","event_filters",b"event_filters","labels",b"labels","name",b"name","service_account",b"service_account","transport",b"transport","uid",b"uid","update_time",b"update_time"]) -> None: ...
global___Trigger = Trigger

class EventFilter(google.protobuf.message.Message):
    """Filters events based on exact matches on the CloudEvents attributes."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ATTRIBUTE_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    attribute: typing.Text = ...
    """Required. The name of a CloudEvents attribute. Currently, only a subset of
    attributes are supported for filtering.

    All triggers MUST provide a filter for the 'type' attribute.
    """

    value: typing.Text = ...
    """Required. The value for the attribute."""

    def __init__(self,
        *,
        attribute : typing.Text = ...,
        value : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["attribute",b"attribute","value",b"value"]) -> None: ...
global___EventFilter = EventFilter

class Destination(google.protobuf.message.Message):
    """Represents a target of an invocation over HTTP."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CLOUD_RUN_FIELD_NUMBER: builtins.int
    @property
    def cloud_run(self) -> global___CloudRun:
        """Cloud Run fully-managed service that receives the events. The service
        should be running in the same project of the trigger.
        """
        pass
    def __init__(self,
        *,
        cloud_run : typing.Optional[global___CloudRun] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cloud_run",b"cloud_run","descriptor",b"descriptor"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cloud_run",b"cloud_run","descriptor",b"descriptor"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["descriptor",b"descriptor"]) -> typing.Optional[typing_extensions.Literal["cloud_run"]]: ...
global___Destination = Destination

class Transport(google.protobuf.message.Message):
    """Represents the transport intermediaries created for the trigger in order to
    deliver events.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PUBSUB_FIELD_NUMBER: builtins.int
    @property
    def pubsub(self) -> global___Pubsub:
        """The Pub/Sub topic and subscription used by Eventarc as delivery
        intermediary.
        """
        pass
    def __init__(self,
        *,
        pubsub : typing.Optional[global___Pubsub] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["intermediary",b"intermediary","pubsub",b"pubsub"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["intermediary",b"intermediary","pubsub",b"pubsub"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["intermediary",b"intermediary"]) -> typing.Optional[typing_extensions.Literal["pubsub"]]: ...
global___Transport = Transport

class CloudRun(google.protobuf.message.Message):
    """Represents a Cloud Run destination."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SERVICE_FIELD_NUMBER: builtins.int
    PATH_FIELD_NUMBER: builtins.int
    REGION_FIELD_NUMBER: builtins.int
    service: typing.Text = ...
    """Required. The name of the Cloud Run service being addressed. See
    https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services.

    Only services located in the same project of the trigger object
    can be addressed.
    """

    path: typing.Text = ...
    """Optional. The relative path on the Cloud Run service the events should be
    sent to.

    The value must conform to the definition of URI path segment (section 3.3
    of RFC2396). Examples: "/route", "route", "route/subroute".
    """

    region: typing.Text = ...
    """Required. The region the Cloud Run service is deployed in."""

    def __init__(self,
        *,
        service : typing.Text = ...,
        path : typing.Text = ...,
        region : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["path",b"path","region",b"region","service",b"service"]) -> None: ...
global___CloudRun = CloudRun

class Pubsub(google.protobuf.message.Message):
    """Represents a Pub/Sub transport."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TOPIC_FIELD_NUMBER: builtins.int
    SUBSCRIPTION_FIELD_NUMBER: builtins.int
    topic: typing.Text = ...
    """Optional. The name of the Pub/Sub topic created and managed by Eventarc
    system as a transport for the event delivery. Format:
    `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`.

    You may set an existing topic for triggers of the type
    `google.cloud.pubsub.topic.v1.messagePublished` only. The topic you provide
    here will not be deleted by Eventarc at trigger deletion.
    """

    subscription: typing.Text = ...
    """Output only. The name of the Pub/Sub subscription created and managed by
    Eventarc system as a transport for the event delivery. Format:
    `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
    """

    def __init__(self,
        *,
        topic : typing.Text = ...,
        subscription : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["subscription",b"subscription","topic",b"topic"]) -> None: ...
global___Pubsub = Pubsub
