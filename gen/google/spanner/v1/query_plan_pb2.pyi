"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class PlanNode(google.protobuf.message.Message):
    """Node information for nodes appearing in a [QueryPlan.plan_nodes][google.spanner.v1.QueryPlan.plan_nodes]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Kind:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _KindEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Kind.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        KIND_UNSPECIFIED: PlanNode.Kind.ValueType = ...  # 0
        """Not specified."""

        RELATIONAL: PlanNode.Kind.ValueType = ...  # 1
        """Denotes a Relational operator node in the expression tree. Relational
        operators represent iterative processing of rows during query execution.
        For example, a `TableScan` operation that reads rows from a table.
        """

        SCALAR: PlanNode.Kind.ValueType = ...  # 2
        """Denotes a Scalar node in the expression tree. Scalar nodes represent
        non-iterable entities in the query plan. For example, constants or
        arithmetic operators appearing inside predicate expressions or references
        to column names.
        """

    class Kind(_Kind, metaclass=_KindEnumTypeWrapper):
        """The kind of [PlanNode][google.spanner.v1.PlanNode]. Distinguishes between the two different kinds of
        nodes that can appear in a query plan.
        """
        pass

    KIND_UNSPECIFIED: PlanNode.Kind.ValueType = ...  # 0
    """Not specified."""

    RELATIONAL: PlanNode.Kind.ValueType = ...  # 1
    """Denotes a Relational operator node in the expression tree. Relational
    operators represent iterative processing of rows during query execution.
    For example, a `TableScan` operation that reads rows from a table.
    """

    SCALAR: PlanNode.Kind.ValueType = ...  # 2
    """Denotes a Scalar node in the expression tree. Scalar nodes represent
    non-iterable entities in the query plan. For example, constants or
    arithmetic operators appearing inside predicate expressions or references
    to column names.
    """


    class ChildLink(google.protobuf.message.Message):
        """Metadata associated with a parent-child relationship appearing in a
        [PlanNode][google.spanner.v1.PlanNode].
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        CHILD_INDEX_FIELD_NUMBER: builtins.int
        TYPE_FIELD_NUMBER: builtins.int
        VARIABLE_FIELD_NUMBER: builtins.int
        child_index: builtins.int = ...
        """The node to which the link points."""

        type: typing.Text = ...
        """The type of the link. For example, in Hash Joins this could be used to
        distinguish between the build child and the probe child, or in the case
        of the child being an output variable, to represent the tag associated
        with the output variable.
        """

        variable: typing.Text = ...
        """Only present if the child node is [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] and corresponds
        to an output variable of the parent node. The field carries the name of
        the output variable.
        For example, a `TableScan` operator that reads rows from a table will
        have child links to the `SCALAR` nodes representing the output variables
        created for each column that is read by the operator. The corresponding
        `variable` fields will be set to the variable names assigned to the
        columns.
        """

        def __init__(self,
            *,
            child_index : builtins.int = ...,
            type : typing.Text = ...,
            variable : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["child_index",b"child_index","type",b"type","variable",b"variable"]) -> None: ...

    class ShortRepresentation(google.protobuf.message.Message):
        """Condensed representation of a node and its subtree. Only present for
        `SCALAR` [PlanNode(s)][google.spanner.v1.PlanNode].
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class SubqueriesEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            value: builtins.int = ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : builtins.int = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        DESCRIPTION_FIELD_NUMBER: builtins.int
        SUBQUERIES_FIELD_NUMBER: builtins.int
        description: typing.Text = ...
        """A string representation of the expression subtree rooted at this node."""

        @property
        def subqueries(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, builtins.int]:
            """A mapping of (subquery variable name) -> (subquery node id) for cases
            where the `description` string of this node references a `SCALAR`
            subquery contained in the expression subtree rooted at this node. The
            referenced `SCALAR` subquery may not necessarily be a direct child of
            this node.
            """
            pass
        def __init__(self,
            *,
            description : typing.Text = ...,
            subqueries : typing.Optional[typing.Mapping[typing.Text, builtins.int]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["description",b"description","subqueries",b"subqueries"]) -> None: ...

    INDEX_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    CHILD_LINKS_FIELD_NUMBER: builtins.int
    SHORT_REPRESENTATION_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    EXECUTION_STATS_FIELD_NUMBER: builtins.int
    index: builtins.int = ...
    """The `PlanNode`'s index in [node list][google.spanner.v1.QueryPlan.plan_nodes]."""

    kind: global___PlanNode.Kind.ValueType = ...
    """Used to determine the type of node. May be needed for visualizing
    different kinds of nodes differently. For example, If the node is a
    [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] node, it will have a condensed representation
    which can be used to directly embed a description of the node in its
    parent.
    """

    display_name: typing.Text = ...
    """The display name for the node."""

    @property
    def child_links(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PlanNode.ChildLink]:
        """List of child node `index`es and their relationship to this parent."""
        pass
    @property
    def short_representation(self) -> global___PlanNode.ShortRepresentation:
        """Condensed representation for [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] nodes."""
        pass
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct:
        """Attributes relevant to the node contained in a group of key-value pairs.
        For example, a Parameter Reference node could have the following
        information in its metadata:

            {
              "parameter_reference": "param1",
              "parameter_type": "array"
            }
        """
        pass
    @property
    def execution_stats(self) -> google.protobuf.struct_pb2.Struct:
        """The execution statistics associated with the node, contained in a group of
        key-value pairs. Only present if the plan was returned as a result of a
        profile query. For example, number of executions, number of rows/time per
        execution etc.
        """
        pass
    def __init__(self,
        *,
        index : builtins.int = ...,
        kind : global___PlanNode.Kind.ValueType = ...,
        display_name : typing.Text = ...,
        child_links : typing.Optional[typing.Iterable[global___PlanNode.ChildLink]] = ...,
        short_representation : typing.Optional[global___PlanNode.ShortRepresentation] = ...,
        metadata : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        execution_stats : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["execution_stats",b"execution_stats","metadata",b"metadata","short_representation",b"short_representation"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["child_links",b"child_links","display_name",b"display_name","execution_stats",b"execution_stats","index",b"index","kind",b"kind","metadata",b"metadata","short_representation",b"short_representation"]) -> None: ...
global___PlanNode = PlanNode

class QueryPlan(google.protobuf.message.Message):
    """Contains an ordered list of nodes appearing in the query plan."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PLAN_NODES_FIELD_NUMBER: builtins.int
    @property
    def plan_nodes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PlanNode]:
        """The nodes in the query plan. Plan nodes are returned in pre-order starting
        with the plan root. Each [PlanNode][google.spanner.v1.PlanNode]'s `id` corresponds to its index in
        `plan_nodes`.
        """
        pass
    def __init__(self,
        *,
        plan_nodes : typing.Optional[typing.Iterable[global___PlanNode]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["plan_nodes",b"plan_nodes"]) -> None: ...
global___QueryPlan = QueryPlan
