# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/analytics/data/v1beta/analytics_data_api.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.analytics.data.v1beta.data_pb2
import google.api.annotations_pb2
import google.api.client_pb2
import google.api.field_behavior_pb2
import google.api.resource_pb2
import google.analytics.data.v1beta.analytics_data_api_pb2


class BetaAnalyticsDataBase(abc.ABC):

    @abc.abstractmethod
    async def RunReport(self, stream: 'grpclib.server.Stream[google.analytics.data.v1beta.analytics_data_api_pb2.RunReportRequest, google.analytics.data.v1beta.analytics_data_api_pb2.RunReportResponse]') -> None:
        pass

    @abc.abstractmethod
    async def RunPivotReport(self, stream: 'grpclib.server.Stream[google.analytics.data.v1beta.analytics_data_api_pb2.RunPivotReportRequest, google.analytics.data.v1beta.analytics_data_api_pb2.RunPivotReportResponse]') -> None:
        pass

    @abc.abstractmethod
    async def BatchRunReports(self, stream: 'grpclib.server.Stream[google.analytics.data.v1beta.analytics_data_api_pb2.BatchRunReportsRequest, google.analytics.data.v1beta.analytics_data_api_pb2.BatchRunReportsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def BatchRunPivotReports(self, stream: 'grpclib.server.Stream[google.analytics.data.v1beta.analytics_data_api_pb2.BatchRunPivotReportsRequest, google.analytics.data.v1beta.analytics_data_api_pb2.BatchRunPivotReportsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetMetadata(self, stream: 'grpclib.server.Stream[google.analytics.data.v1beta.analytics_data_api_pb2.GetMetadataRequest, google.analytics.data.v1beta.analytics_data_api_pb2.Metadata]') -> None:
        pass

    @abc.abstractmethod
    async def RunRealtimeReport(self, stream: 'grpclib.server.Stream[google.analytics.data.v1beta.analytics_data_api_pb2.RunRealtimeReportRequest, google.analytics.data.v1beta.analytics_data_api_pb2.RunRealtimeReportResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CheckCompatibility(self, stream: 'grpclib.server.Stream[google.analytics.data.v1beta.analytics_data_api_pb2.CheckCompatibilityRequest, google.analytics.data.v1beta.analytics_data_api_pb2.CheckCompatibilityResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.analytics.data.v1beta.BetaAnalyticsData/RunReport': grpclib.const.Handler(
                self.RunReport,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.analytics.data.v1beta.analytics_data_api_pb2.RunReportRequest,
                google.analytics.data.v1beta.analytics_data_api_pb2.RunReportResponse,
            ),
            '/google.analytics.data.v1beta.BetaAnalyticsData/RunPivotReport': grpclib.const.Handler(
                self.RunPivotReport,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.analytics.data.v1beta.analytics_data_api_pb2.RunPivotReportRequest,
                google.analytics.data.v1beta.analytics_data_api_pb2.RunPivotReportResponse,
            ),
            '/google.analytics.data.v1beta.BetaAnalyticsData/BatchRunReports': grpclib.const.Handler(
                self.BatchRunReports,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.analytics.data.v1beta.analytics_data_api_pb2.BatchRunReportsRequest,
                google.analytics.data.v1beta.analytics_data_api_pb2.BatchRunReportsResponse,
            ),
            '/google.analytics.data.v1beta.BetaAnalyticsData/BatchRunPivotReports': grpclib.const.Handler(
                self.BatchRunPivotReports,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.analytics.data.v1beta.analytics_data_api_pb2.BatchRunPivotReportsRequest,
                google.analytics.data.v1beta.analytics_data_api_pb2.BatchRunPivotReportsResponse,
            ),
            '/google.analytics.data.v1beta.BetaAnalyticsData/GetMetadata': grpclib.const.Handler(
                self.GetMetadata,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.analytics.data.v1beta.analytics_data_api_pb2.GetMetadataRequest,
                google.analytics.data.v1beta.analytics_data_api_pb2.Metadata,
            ),
            '/google.analytics.data.v1beta.BetaAnalyticsData/RunRealtimeReport': grpclib.const.Handler(
                self.RunRealtimeReport,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.analytics.data.v1beta.analytics_data_api_pb2.RunRealtimeReportRequest,
                google.analytics.data.v1beta.analytics_data_api_pb2.RunRealtimeReportResponse,
            ),
            '/google.analytics.data.v1beta.BetaAnalyticsData/CheckCompatibility': grpclib.const.Handler(
                self.CheckCompatibility,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.analytics.data.v1beta.analytics_data_api_pb2.CheckCompatibilityRequest,
                google.analytics.data.v1beta.analytics_data_api_pb2.CheckCompatibilityResponse,
            ),
        }


class BetaAnalyticsDataStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.RunReport = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.analytics.data.v1beta.BetaAnalyticsData/RunReport',
            google.analytics.data.v1beta.analytics_data_api_pb2.RunReportRequest,
            google.analytics.data.v1beta.analytics_data_api_pb2.RunReportResponse,
        )
        self.RunPivotReport = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.analytics.data.v1beta.BetaAnalyticsData/RunPivotReport',
            google.analytics.data.v1beta.analytics_data_api_pb2.RunPivotReportRequest,
            google.analytics.data.v1beta.analytics_data_api_pb2.RunPivotReportResponse,
        )
        self.BatchRunReports = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.analytics.data.v1beta.BetaAnalyticsData/BatchRunReports',
            google.analytics.data.v1beta.analytics_data_api_pb2.BatchRunReportsRequest,
            google.analytics.data.v1beta.analytics_data_api_pb2.BatchRunReportsResponse,
        )
        self.BatchRunPivotReports = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.analytics.data.v1beta.BetaAnalyticsData/BatchRunPivotReports',
            google.analytics.data.v1beta.analytics_data_api_pb2.BatchRunPivotReportsRequest,
            google.analytics.data.v1beta.analytics_data_api_pb2.BatchRunPivotReportsResponse,
        )
        self.GetMetadata = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.analytics.data.v1beta.BetaAnalyticsData/GetMetadata',
            google.analytics.data.v1beta.analytics_data_api_pb2.GetMetadataRequest,
            google.analytics.data.v1beta.analytics_data_api_pb2.Metadata,
        )
        self.RunRealtimeReport = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.analytics.data.v1beta.BetaAnalyticsData/RunRealtimeReport',
            google.analytics.data.v1beta.analytics_data_api_pb2.RunRealtimeReportRequest,
            google.analytics.data.v1beta.analytics_data_api_pb2.RunRealtimeReportResponse,
        )
        self.CheckCompatibility = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.analytics.data.v1beta.BetaAnalyticsData/CheckCompatibility',
            google.analytics.data.v1beta.analytics_data_api_pb2.CheckCompatibilityRequest,
            google.analytics.data.v1beta.analytics_data_api_pb2.CheckCompatibilityResponse,
        )
