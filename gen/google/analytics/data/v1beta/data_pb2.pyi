"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _MetricAggregation:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _MetricAggregationEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MetricAggregation.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    METRIC_AGGREGATION_UNSPECIFIED: MetricAggregation.ValueType = ...  # 0
    """Unspecified operator."""

    TOTAL: MetricAggregation.ValueType = ...  # 1
    """SUM operator."""

    MINIMUM: MetricAggregation.ValueType = ...  # 5
    """Minimum operator."""

    MAXIMUM: MetricAggregation.ValueType = ...  # 6
    """Maximum operator."""

    COUNT: MetricAggregation.ValueType = ...  # 4
    """Count operator."""

class MetricAggregation(_MetricAggregation, metaclass=_MetricAggregationEnumTypeWrapper):
    """Represents aggregation of metrics."""
    pass

METRIC_AGGREGATION_UNSPECIFIED: MetricAggregation.ValueType = ...  # 0
"""Unspecified operator."""

TOTAL: MetricAggregation.ValueType = ...  # 1
"""SUM operator."""

MINIMUM: MetricAggregation.ValueType = ...  # 5
"""Minimum operator."""

MAXIMUM: MetricAggregation.ValueType = ...  # 6
"""Maximum operator."""

COUNT: MetricAggregation.ValueType = ...  # 4
"""Count operator."""

global___MetricAggregation = MetricAggregation


class _MetricType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _MetricTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MetricType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    METRIC_TYPE_UNSPECIFIED: MetricType.ValueType = ...  # 0
    """Unspecified type."""

    TYPE_INTEGER: MetricType.ValueType = ...  # 1
    """Integer type."""

    TYPE_FLOAT: MetricType.ValueType = ...  # 2
    """Floating point type."""

    TYPE_SECONDS: MetricType.ValueType = ...  # 4
    """A duration of seconds; a special floating point type."""

    TYPE_MILLISECONDS: MetricType.ValueType = ...  # 5
    """A duration in milliseconds; a special floating point type."""

    TYPE_MINUTES: MetricType.ValueType = ...  # 6
    """A duration in minutes; a special floating point type."""

    TYPE_HOURS: MetricType.ValueType = ...  # 7
    """A duration in hours; a special floating point type."""

    TYPE_STANDARD: MetricType.ValueType = ...  # 8
    """A custom metric of standard type; a special floating point type."""

    TYPE_CURRENCY: MetricType.ValueType = ...  # 9
    """An amount of money; a special floating point type."""

    TYPE_FEET: MetricType.ValueType = ...  # 10
    """A length in feet; a special floating point type."""

    TYPE_MILES: MetricType.ValueType = ...  # 11
    """A length in miles; a special floating point type."""

    TYPE_METERS: MetricType.ValueType = ...  # 12
    """A length in meters; a special floating point type."""

    TYPE_KILOMETERS: MetricType.ValueType = ...  # 13
    """A length in kilometers; a special floating point type."""

class MetricType(_MetricType, metaclass=_MetricTypeEnumTypeWrapper):
    """A metric's value type."""
    pass

METRIC_TYPE_UNSPECIFIED: MetricType.ValueType = ...  # 0
"""Unspecified type."""

TYPE_INTEGER: MetricType.ValueType = ...  # 1
"""Integer type."""

TYPE_FLOAT: MetricType.ValueType = ...  # 2
"""Floating point type."""

TYPE_SECONDS: MetricType.ValueType = ...  # 4
"""A duration of seconds; a special floating point type."""

TYPE_MILLISECONDS: MetricType.ValueType = ...  # 5
"""A duration in milliseconds; a special floating point type."""

TYPE_MINUTES: MetricType.ValueType = ...  # 6
"""A duration in minutes; a special floating point type."""

TYPE_HOURS: MetricType.ValueType = ...  # 7
"""A duration in hours; a special floating point type."""

TYPE_STANDARD: MetricType.ValueType = ...  # 8
"""A custom metric of standard type; a special floating point type."""

TYPE_CURRENCY: MetricType.ValueType = ...  # 9
"""An amount of money; a special floating point type."""

TYPE_FEET: MetricType.ValueType = ...  # 10
"""A length in feet; a special floating point type."""

TYPE_MILES: MetricType.ValueType = ...  # 11
"""A length in miles; a special floating point type."""

TYPE_METERS: MetricType.ValueType = ...  # 12
"""A length in meters; a special floating point type."""

TYPE_KILOMETERS: MetricType.ValueType = ...  # 13
"""A length in kilometers; a special floating point type."""

global___MetricType = MetricType


class _RestrictedMetricType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _RestrictedMetricTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RestrictedMetricType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    RESTRICTED_METRIC_TYPE_UNSPECIFIED: RestrictedMetricType.ValueType = ...  # 0
    """Unspecified type."""

    COST_DATA: RestrictedMetricType.ValueType = ...  # 1
    """Cost metrics such as `adCost`."""

    REVENUE_DATA: RestrictedMetricType.ValueType = ...  # 2
    """Revenue metrics such as `purchaseRevenue`."""

class RestrictedMetricType(_RestrictedMetricType, metaclass=_RestrictedMetricTypeEnumTypeWrapper):
    """Categories of data that you may be restricted from viewing on certain GA4
    properties.
    """
    pass

RESTRICTED_METRIC_TYPE_UNSPECIFIED: RestrictedMetricType.ValueType = ...  # 0
"""Unspecified type."""

COST_DATA: RestrictedMetricType.ValueType = ...  # 1
"""Cost metrics such as `adCost`."""

REVENUE_DATA: RestrictedMetricType.ValueType = ...  # 2
"""Revenue metrics such as `purchaseRevenue`."""

global___RestrictedMetricType = RestrictedMetricType


class _Compatibility:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _CompatibilityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Compatibility.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    COMPATIBILITY_UNSPECIFIED: Compatibility.ValueType = ...  # 0
    """Unspecified compatibility."""

    COMPATIBLE: Compatibility.ValueType = ...  # 1
    """The dimension or metric is compatible. This dimension or metric can be
    successfully added to a report.
    """

    INCOMPATIBLE: Compatibility.ValueType = ...  # 2
    """The dimension or metric is incompatible. This dimension or metric cannot be
    successfully added to a report.
    """

class Compatibility(_Compatibility, metaclass=_CompatibilityEnumTypeWrapper):
    """The compatibility types for a single dimension or metric."""
    pass

COMPATIBILITY_UNSPECIFIED: Compatibility.ValueType = ...  # 0
"""Unspecified compatibility."""

COMPATIBLE: Compatibility.ValueType = ...  # 1
"""The dimension or metric is compatible. This dimension or metric can be
successfully added to a report.
"""

INCOMPATIBLE: Compatibility.ValueType = ...  # 2
"""The dimension or metric is incompatible. This dimension or metric cannot be
successfully added to a report.
"""

global___Compatibility = Compatibility


class DateRange(google.protobuf.message.Message):
    """A contiguous set of days: startDate, startDate + 1, ..., endDate. Requests
    are allowed up to 4 date ranges.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    START_DATE_FIELD_NUMBER: builtins.int
    END_DATE_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    start_date: typing.Text = ...
    """The inclusive start date for the query in the format `YYYY-MM-DD`. Cannot
    be after `end_date`. The format `NdaysAgo`, `yesterday`, or `today` is also
    accepted, and in that case, the date is inferred based on the property's
    reporting time zone.
    """

    end_date: typing.Text = ...
    """The inclusive end date for the query in the format `YYYY-MM-DD`. Cannot
    be before `start_date`. The format `NdaysAgo`, `yesterday`, or `today` is
    also accepted, and in that case, the date is inferred based on the
    property's reporting time zone.
    """

    name: typing.Text = ...
    """Assigns a name to this date range. The dimension `dateRange` is valued to
    this name in a report response. If set, cannot begin with `date_range_` or
    `RESERVED_`. If not set, date ranges are named by their zero based index in
    the request: `date_range_0`, `date_range_1`, etc.
    """

    def __init__(self,
        *,
        start_date : typing.Text = ...,
        end_date : typing.Text = ...,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_date",b"end_date","name",b"name","start_date",b"start_date"]) -> None: ...
global___DateRange = DateRange

class MinuteRange(google.protobuf.message.Message):
    """A contiguous set of minutes: startMinutesAgo, startMinutesAgo + 1, ...,
    endMinutesAgo. Requests are allowed up to 2 minute ranges.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    START_MINUTES_AGO_FIELD_NUMBER: builtins.int
    END_MINUTES_AGO_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    start_minutes_ago: builtins.int = ...
    """The inclusive start minute for the query as a number of minutes before now.
    For example, `"startMinutesAgo": 29` specifies the report should include
    event data from 29 minutes ago and after. Cannot be after `endMinutesAgo`.

    If unspecified, `startMinutesAgo` is defaulted to 29. Standard Analytics
    properties can request up to the last 30 minutes of event data
    (`startMinutesAgo <= 29`), and 360 Analytics properties can request up to
    the last 60 minutes of event data (`startMinutesAgo <= 59`).
    """

    end_minutes_ago: builtins.int = ...
    """The inclusive end minute for the query as a number of minutes before now.
    Cannot be before `startMinutesAgo`. For example, `"endMinutesAgo": 15`
    specifies the report should include event data from prior to 15 minutes
    ago.

    If unspecified, `endMinutesAgo` is defaulted to 0. Standard Analytics
    properties can request any minute in the last 30 minutes of event data
    (`endMinutesAgo <= 29`), and 360 Analytics properties can request any
    minute in the last 60 minutes of event data (`endMinutesAgo <= 59`).
    """

    name: typing.Text = ...
    """Assigns a name to this minute range. The dimension `dateRange` is valued to
    this name in a report response. If set, cannot begin with `date_range_` or
    `RESERVED_`. If not set, minute ranges are named by their zero based index
    in the request: `date_range_0`, `date_range_1`, etc.
    """

    def __init__(self,
        *,
        start_minutes_ago : typing.Optional[builtins.int] = ...,
        end_minutes_ago : typing.Optional[builtins.int] = ...,
        name : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_end_minutes_ago",b"_end_minutes_ago","_start_minutes_ago",b"_start_minutes_ago","end_minutes_ago",b"end_minutes_ago","start_minutes_ago",b"start_minutes_ago"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_end_minutes_ago",b"_end_minutes_ago","_start_minutes_ago",b"_start_minutes_ago","end_minutes_ago",b"end_minutes_ago","name",b"name","start_minutes_ago",b"start_minutes_ago"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_end_minutes_ago",b"_end_minutes_ago"]) -> typing.Optional[typing_extensions.Literal["end_minutes_ago"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_start_minutes_ago",b"_start_minutes_ago"]) -> typing.Optional[typing_extensions.Literal["start_minutes_ago"]]: ...
global___MinuteRange = MinuteRange

class Dimension(google.protobuf.message.Message):
    """Dimensions are attributes of your data. For example, the dimension city
    indicates the city from which an event originates. Dimension values in report
    responses are strings; for example, city could be "Paris" or "New York".
    Requests are allowed up to 9 dimensions.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DIMENSION_EXPRESSION_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the dimension. See the [API
    Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#dimensions)
    for the list of dimension names.

    If `dimensionExpression` is specified, `name` can be any string that you
    would like within the allowed character set. For example if a
    `dimensionExpression` concatenates `country` and `city`, you could call
    that dimension `countryAndCity`. Dimension names that you choose must match
    the regular expression `^[a-zA-Z0-9_]$`.

    Dimensions are referenced by `name` in `dimensionFilter`, `orderBys`,
    `dimensionExpression`, and `pivots`.
    """

    @property
    def dimension_expression(self) -> global___DimensionExpression:
        """One dimension can be the result of an expression of multiple dimensions.
        For example, dimension "country, city": concatenate(country, ", ", city).
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        dimension_expression : typing.Optional[global___DimensionExpression] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dimension_expression",b"dimension_expression"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dimension_expression",b"dimension_expression","name",b"name"]) -> None: ...
global___Dimension = Dimension

class DimensionExpression(google.protobuf.message.Message):
    """Used to express a dimension which is the result of a formula of multiple
    dimensions. Example usages:
    1) lower_case(dimension)
    2) concatenate(dimension1, symbol, dimension2).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class CaseExpression(google.protobuf.message.Message):
        """Used to convert a dimension value to a single case."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        DIMENSION_NAME_FIELD_NUMBER: builtins.int
        dimension_name: typing.Text = ...
        """Name of a dimension. The name must refer back to a name in dimensions
        field of the request.
        """

        def __init__(self,
            *,
            dimension_name : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["dimension_name",b"dimension_name"]) -> None: ...

    class ConcatenateExpression(google.protobuf.message.Message):
        """Used to combine dimension values to a single dimension."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        DIMENSION_NAMES_FIELD_NUMBER: builtins.int
        DELIMITER_FIELD_NUMBER: builtins.int
        @property
        def dimension_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """Names of dimensions. The names must refer back to names in the dimensions
            field of the request.
            """
            pass
        delimiter: typing.Text = ...
        """The delimiter placed between dimension names.

        Delimiters are often single characters such as "|" or "," but can be
        longer strings. If a dimension value contains the delimiter, both will be
        present in response with no distinction. For example if dimension 1 value
        = "US,FR", dimension 2 value = "JP", and delimiter = ",", then the
        response will contain "US,FR,JP".
        """

        def __init__(self,
            *,
            dimension_names : typing.Optional[typing.Iterable[typing.Text]] = ...,
            delimiter : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["delimiter",b"delimiter","dimension_names",b"dimension_names"]) -> None: ...

    LOWER_CASE_FIELD_NUMBER: builtins.int
    UPPER_CASE_FIELD_NUMBER: builtins.int
    CONCATENATE_FIELD_NUMBER: builtins.int
    @property
    def lower_case(self) -> global___DimensionExpression.CaseExpression:
        """Used to convert a dimension value to lower case."""
        pass
    @property
    def upper_case(self) -> global___DimensionExpression.CaseExpression:
        """Used to convert a dimension value to upper case."""
        pass
    @property
    def concatenate(self) -> global___DimensionExpression.ConcatenateExpression:
        """Used to combine dimension values to a single dimension.
        For example, dimension "country, city": concatenate(country, ", ", city).
        """
        pass
    def __init__(self,
        *,
        lower_case : typing.Optional[global___DimensionExpression.CaseExpression] = ...,
        upper_case : typing.Optional[global___DimensionExpression.CaseExpression] = ...,
        concatenate : typing.Optional[global___DimensionExpression.ConcatenateExpression] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["concatenate",b"concatenate","lower_case",b"lower_case","one_expression",b"one_expression","upper_case",b"upper_case"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["concatenate",b"concatenate","lower_case",b"lower_case","one_expression",b"one_expression","upper_case",b"upper_case"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["one_expression",b"one_expression"]) -> typing.Optional[typing_extensions.Literal["lower_case","upper_case","concatenate"]]: ...
global___DimensionExpression = DimensionExpression

class Metric(google.protobuf.message.Message):
    """The quantitative measurements of a report. For example, the metric
    `eventCount` is the total number of events. Requests are allowed up to 10
    metrics.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    EXPRESSION_FIELD_NUMBER: builtins.int
    INVISIBLE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the metric. See the [API
    Metrics](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#metrics)
    for the list of metric names.

    If `expression` is specified, `name` can be any string that you would like
    within the allowed character set. For example if `expression` is
    `screenPageViews/sessions`, you could call that metric's name =
    `viewsPerSession`. Metric names that you choose must match the regular
    expression `^[a-zA-Z0-9_]$`.

    Metrics are referenced by `name` in `metricFilter`, `orderBys`, and metric
    `expression`.
    """

    expression: typing.Text = ...
    """A mathematical expression for derived metrics. For example, the metric
    Event count per user is `eventCount/totalUsers`.
    """

    invisible: builtins.bool = ...
    """Indicates if a metric is invisible in the report response. If a metric is
    invisible, the metric will not produce a column in the response, but can be
    used in `metricFilter`, `orderBys`, or a metric `expression`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        expression : typing.Text = ...,
        invisible : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["expression",b"expression","invisible",b"invisible","name",b"name"]) -> None: ...
global___Metric = Metric

class FilterExpression(google.protobuf.message.Message):
    """To express dimension or metric filters.
    The fields in the same FilterExpression need to be either all dimensions or
    all metrics.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    AND_GROUP_FIELD_NUMBER: builtins.int
    OR_GROUP_FIELD_NUMBER: builtins.int
    NOT_EXPRESSION_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    @property
    def and_group(self) -> global___FilterExpressionList:
        """The FilterExpressions in and_group have an AND relationship."""
        pass
    @property
    def or_group(self) -> global___FilterExpressionList:
        """The FilterExpressions in or_group have an OR relationship."""
        pass
    @property
    def not_expression(self) -> global___FilterExpression:
        """The FilterExpression is NOT of not_expression."""
        pass
    @property
    def filter(self) -> global___Filter:
        """A primitive filter.
        All fields in filter in same FilterExpression needs to be either all
        dimensions or metrics.
        """
        pass
    def __init__(self,
        *,
        and_group : typing.Optional[global___FilterExpressionList] = ...,
        or_group : typing.Optional[global___FilterExpressionList] = ...,
        not_expression : typing.Optional[global___FilterExpression] = ...,
        filter : typing.Optional[global___Filter] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["and_group",b"and_group","expr",b"expr","filter",b"filter","not_expression",b"not_expression","or_group",b"or_group"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["and_group",b"and_group","expr",b"expr","filter",b"filter","not_expression",b"not_expression","or_group",b"or_group"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["expr",b"expr"]) -> typing.Optional[typing_extensions.Literal["and_group","or_group","not_expression","filter"]]: ...
global___FilterExpression = FilterExpression

class FilterExpressionList(google.protobuf.message.Message):
    """A list of filter expressions."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    EXPRESSIONS_FIELD_NUMBER: builtins.int
    @property
    def expressions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___FilterExpression]:
        """A list of filter expressions."""
        pass
    def __init__(self,
        *,
        expressions : typing.Optional[typing.Iterable[global___FilterExpression]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["expressions",b"expressions"]) -> None: ...
global___FilterExpressionList = FilterExpressionList

class Filter(google.protobuf.message.Message):
    """An expression to filter dimension or metric values."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class StringFilter(google.protobuf.message.Message):
        """The filter for string"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _MatchType:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _MatchTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MatchType.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            MATCH_TYPE_UNSPECIFIED: Filter.StringFilter.MatchType.ValueType = ...  # 0
            """Unspecified"""

            EXACT: Filter.StringFilter.MatchType.ValueType = ...  # 1
            """Exact match of the string value."""

            BEGINS_WITH: Filter.StringFilter.MatchType.ValueType = ...  # 2
            """Begins with the string value."""

            ENDS_WITH: Filter.StringFilter.MatchType.ValueType = ...  # 3
            """Ends with the string value."""

            CONTAINS: Filter.StringFilter.MatchType.ValueType = ...  # 4
            """Contains the string value."""

            FULL_REGEXP: Filter.StringFilter.MatchType.ValueType = ...  # 5
            """Full regular expression match with the string value."""

            PARTIAL_REGEXP: Filter.StringFilter.MatchType.ValueType = ...  # 6
            """Partial regular expression match with the string value."""

        class MatchType(_MatchType, metaclass=_MatchTypeEnumTypeWrapper):
            """The match type of a string filter"""
            pass

        MATCH_TYPE_UNSPECIFIED: Filter.StringFilter.MatchType.ValueType = ...  # 0
        """Unspecified"""

        EXACT: Filter.StringFilter.MatchType.ValueType = ...  # 1
        """Exact match of the string value."""

        BEGINS_WITH: Filter.StringFilter.MatchType.ValueType = ...  # 2
        """Begins with the string value."""

        ENDS_WITH: Filter.StringFilter.MatchType.ValueType = ...  # 3
        """Ends with the string value."""

        CONTAINS: Filter.StringFilter.MatchType.ValueType = ...  # 4
        """Contains the string value."""

        FULL_REGEXP: Filter.StringFilter.MatchType.ValueType = ...  # 5
        """Full regular expression match with the string value."""

        PARTIAL_REGEXP: Filter.StringFilter.MatchType.ValueType = ...  # 6
        """Partial regular expression match with the string value."""


        MATCH_TYPE_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        CASE_SENSITIVE_FIELD_NUMBER: builtins.int
        match_type: global___Filter.StringFilter.MatchType.ValueType = ...
        """The match type for this filter."""

        value: typing.Text = ...
        """The string value used for the matching."""

        case_sensitive: builtins.bool = ...
        """If true, the string value is case sensitive."""

        def __init__(self,
            *,
            match_type : global___Filter.StringFilter.MatchType.ValueType = ...,
            value : typing.Text = ...,
            case_sensitive : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["case_sensitive",b"case_sensitive","match_type",b"match_type","value",b"value"]) -> None: ...

    class InListFilter(google.protobuf.message.Message):
        """The result needs to be in a list of string values."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        VALUES_FIELD_NUMBER: builtins.int
        CASE_SENSITIVE_FIELD_NUMBER: builtins.int
        @property
        def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """The list of string values.
            Must be non-empty.
            """
            pass
        case_sensitive: builtins.bool = ...
        """If true, the string value is case sensitive."""

        def __init__(self,
            *,
            values : typing.Optional[typing.Iterable[typing.Text]] = ...,
            case_sensitive : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["case_sensitive",b"case_sensitive","values",b"values"]) -> None: ...

    class NumericFilter(google.protobuf.message.Message):
        """Filters for numeric or date values."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _Operation:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _OperationEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Operation.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            OPERATION_UNSPECIFIED: Filter.NumericFilter.Operation.ValueType = ...  # 0
            """Unspecified."""

            EQUAL: Filter.NumericFilter.Operation.ValueType = ...  # 1
            """Equal"""

            LESS_THAN: Filter.NumericFilter.Operation.ValueType = ...  # 2
            """Less than"""

            LESS_THAN_OR_EQUAL: Filter.NumericFilter.Operation.ValueType = ...  # 3
            """Less than or equal"""

            GREATER_THAN: Filter.NumericFilter.Operation.ValueType = ...  # 4
            """Greater than"""

            GREATER_THAN_OR_EQUAL: Filter.NumericFilter.Operation.ValueType = ...  # 5
            """Greater than or equal"""

        class Operation(_Operation, metaclass=_OperationEnumTypeWrapper):
            """The operation applied to a numeric filter"""
            pass

        OPERATION_UNSPECIFIED: Filter.NumericFilter.Operation.ValueType = ...  # 0
        """Unspecified."""

        EQUAL: Filter.NumericFilter.Operation.ValueType = ...  # 1
        """Equal"""

        LESS_THAN: Filter.NumericFilter.Operation.ValueType = ...  # 2
        """Less than"""

        LESS_THAN_OR_EQUAL: Filter.NumericFilter.Operation.ValueType = ...  # 3
        """Less than or equal"""

        GREATER_THAN: Filter.NumericFilter.Operation.ValueType = ...  # 4
        """Greater than"""

        GREATER_THAN_OR_EQUAL: Filter.NumericFilter.Operation.ValueType = ...  # 5
        """Greater than or equal"""


        OPERATION_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        operation: global___Filter.NumericFilter.Operation.ValueType = ...
        """The operation type for this filter."""

        @property
        def value(self) -> global___NumericValue:
            """A numeric value or a date value."""
            pass
        def __init__(self,
            *,
            operation : global___Filter.NumericFilter.Operation.ValueType = ...,
            value : typing.Optional[global___NumericValue] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["operation",b"operation","value",b"value"]) -> None: ...

    class BetweenFilter(google.protobuf.message.Message):
        """To express that the result needs to be between two numbers (inclusive)."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        FROM_VALUE_FIELD_NUMBER: builtins.int
        TO_VALUE_FIELD_NUMBER: builtins.int
        @property
        def from_value(self) -> global___NumericValue:
            """Begins with this number."""
            pass
        @property
        def to_value(self) -> global___NumericValue:
            """Ends with this number."""
            pass
        def __init__(self,
            *,
            from_value : typing.Optional[global___NumericValue] = ...,
            to_value : typing.Optional[global___NumericValue] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["from_value",b"from_value","to_value",b"to_value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["from_value",b"from_value","to_value",b"to_value"]) -> None: ...

    FIELD_NAME_FIELD_NUMBER: builtins.int
    STRING_FILTER_FIELD_NUMBER: builtins.int
    IN_LIST_FILTER_FIELD_NUMBER: builtins.int
    NUMERIC_FILTER_FIELD_NUMBER: builtins.int
    BETWEEN_FILTER_FIELD_NUMBER: builtins.int
    field_name: typing.Text = ...
    """The dimension name or metric name. Must be a name defined in dimensions
    or metrics.
    """

    @property
    def string_filter(self) -> global___Filter.StringFilter:
        """Strings related filter."""
        pass
    @property
    def in_list_filter(self) -> global___Filter.InListFilter:
        """A filter for in list values."""
        pass
    @property
    def numeric_filter(self) -> global___Filter.NumericFilter:
        """A filter for numeric or date values."""
        pass
    @property
    def between_filter(self) -> global___Filter.BetweenFilter:
        """A filter for two values."""
        pass
    def __init__(self,
        *,
        field_name : typing.Text = ...,
        string_filter : typing.Optional[global___Filter.StringFilter] = ...,
        in_list_filter : typing.Optional[global___Filter.InListFilter] = ...,
        numeric_filter : typing.Optional[global___Filter.NumericFilter] = ...,
        between_filter : typing.Optional[global___Filter.BetweenFilter] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["between_filter",b"between_filter","in_list_filter",b"in_list_filter","numeric_filter",b"numeric_filter","one_filter",b"one_filter","string_filter",b"string_filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["between_filter",b"between_filter","field_name",b"field_name","in_list_filter",b"in_list_filter","numeric_filter",b"numeric_filter","one_filter",b"one_filter","string_filter",b"string_filter"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["one_filter",b"one_filter"]) -> typing.Optional[typing_extensions.Literal["string_filter","in_list_filter","numeric_filter","between_filter"]]: ...
global___Filter = Filter

class OrderBy(google.protobuf.message.Message):
    """The sort options."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class MetricOrderBy(google.protobuf.message.Message):
        """Sorts by metric values."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        METRIC_NAME_FIELD_NUMBER: builtins.int
        metric_name: typing.Text = ...
        """A metric name in the request to order by."""

        def __init__(self,
            *,
            metric_name : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["metric_name",b"metric_name"]) -> None: ...

    class DimensionOrderBy(google.protobuf.message.Message):
        """Sorts by dimension values."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _OrderType:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _OrderTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_OrderType.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            ORDER_TYPE_UNSPECIFIED: OrderBy.DimensionOrderBy.OrderType.ValueType = ...  # 0
            """Unspecified."""

            ALPHANUMERIC: OrderBy.DimensionOrderBy.OrderType.ValueType = ...  # 1
            """Alphanumeric sort by Unicode code point. For example, "2" < "A" < "X" <
            "b" < "z".
            """

            CASE_INSENSITIVE_ALPHANUMERIC: OrderBy.DimensionOrderBy.OrderType.ValueType = ...  # 2
            """Case insensitive alphanumeric sort by lower case Unicode code point.
            For example, "2" < "A" < "b" < "X" < "z".
            """

            NUMERIC: OrderBy.DimensionOrderBy.OrderType.ValueType = ...  # 3
            """Dimension values are converted to numbers before sorting. For example
            in NUMERIC sort, "25" < "100", and in `ALPHANUMERIC` sort, "100" <
            "25". Non-numeric dimension values all have equal ordering value below
            all numeric values.
            """

        class OrderType(_OrderType, metaclass=_OrderTypeEnumTypeWrapper):
            """Rule to order the string dimension values by."""
            pass

        ORDER_TYPE_UNSPECIFIED: OrderBy.DimensionOrderBy.OrderType.ValueType = ...  # 0
        """Unspecified."""

        ALPHANUMERIC: OrderBy.DimensionOrderBy.OrderType.ValueType = ...  # 1
        """Alphanumeric sort by Unicode code point. For example, "2" < "A" < "X" <
        "b" < "z".
        """

        CASE_INSENSITIVE_ALPHANUMERIC: OrderBy.DimensionOrderBy.OrderType.ValueType = ...  # 2
        """Case insensitive alphanumeric sort by lower case Unicode code point.
        For example, "2" < "A" < "b" < "X" < "z".
        """

        NUMERIC: OrderBy.DimensionOrderBy.OrderType.ValueType = ...  # 3
        """Dimension values are converted to numbers before sorting. For example
        in NUMERIC sort, "25" < "100", and in `ALPHANUMERIC` sort, "100" <
        "25". Non-numeric dimension values all have equal ordering value below
        all numeric values.
        """


        DIMENSION_NAME_FIELD_NUMBER: builtins.int
        ORDER_TYPE_FIELD_NUMBER: builtins.int
        dimension_name: typing.Text = ...
        """A dimension name in the request to order by."""

        order_type: global___OrderBy.DimensionOrderBy.OrderType.ValueType = ...
        """Controls the rule for dimension value ordering."""

        def __init__(self,
            *,
            dimension_name : typing.Text = ...,
            order_type : global___OrderBy.DimensionOrderBy.OrderType.ValueType = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["dimension_name",b"dimension_name","order_type",b"order_type"]) -> None: ...

    class PivotOrderBy(google.protobuf.message.Message):
        """Sorts by a pivot column group."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class PivotSelection(google.protobuf.message.Message):
            """A pair of dimension names and values. Rows with this dimension pivot pair
            are ordered by the metric's value.

            For example if pivots = {{"browser", "Chrome"}} and
            metric_name = "Sessions",
            then the rows will be sorted based on Sessions in Chrome.

                ---------|----------|----------------|----------|----------------
                         |  Chrome  |    Chrome      |  Safari  |     Safari
                ---------|----------|----------------|----------|----------------
                 Country | Sessions | Pages/Sessions | Sessions | Pages/Sessions
                ---------|----------|----------------|----------|----------------
                    US   |    2     |       2        |     3    |        1
                ---------|----------|----------------|----------|----------------
                  Canada |    3     |       1        |     4    |        1
                ---------|----------|----------------|----------|----------------
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            DIMENSION_NAME_FIELD_NUMBER: builtins.int
            DIMENSION_VALUE_FIELD_NUMBER: builtins.int
            dimension_name: typing.Text = ...
            """Must be a dimension name from the request."""

            dimension_value: typing.Text = ...
            """Order by only when the named dimension is this value."""

            def __init__(self,
                *,
                dimension_name : typing.Text = ...,
                dimension_value : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["dimension_name",b"dimension_name","dimension_value",b"dimension_value"]) -> None: ...

        METRIC_NAME_FIELD_NUMBER: builtins.int
        PIVOT_SELECTIONS_FIELD_NUMBER: builtins.int
        metric_name: typing.Text = ...
        """In the response to order by, order rows by this column. Must be a metric
        name from the request.
        """

        @property
        def pivot_selections(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___OrderBy.PivotOrderBy.PivotSelection]:
            """Used to select a dimension name and value pivot. If multiple pivot
            selections are given, the sort occurs on rows where all pivot selection
            dimension name and value pairs match the row's dimension name and value
            pair.
            """
            pass
        def __init__(self,
            *,
            metric_name : typing.Text = ...,
            pivot_selections : typing.Optional[typing.Iterable[global___OrderBy.PivotOrderBy.PivotSelection]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["metric_name",b"metric_name","pivot_selections",b"pivot_selections"]) -> None: ...

    METRIC_FIELD_NUMBER: builtins.int
    DIMENSION_FIELD_NUMBER: builtins.int
    PIVOT_FIELD_NUMBER: builtins.int
    DESC_FIELD_NUMBER: builtins.int
    @property
    def metric(self) -> global___OrderBy.MetricOrderBy:
        """Sorts results by a metric's values."""
        pass
    @property
    def dimension(self) -> global___OrderBy.DimensionOrderBy:
        """Sorts results by a dimension's values."""
        pass
    @property
    def pivot(self) -> global___OrderBy.PivotOrderBy:
        """Sorts results by a metric's values within a pivot column group."""
        pass
    desc: builtins.bool = ...
    """If true, sorts by descending order."""

    def __init__(self,
        *,
        metric : typing.Optional[global___OrderBy.MetricOrderBy] = ...,
        dimension : typing.Optional[global___OrderBy.DimensionOrderBy] = ...,
        pivot : typing.Optional[global___OrderBy.PivotOrderBy] = ...,
        desc : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dimension",b"dimension","metric",b"metric","one_order_by",b"one_order_by","pivot",b"pivot"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["desc",b"desc","dimension",b"dimension","metric",b"metric","one_order_by",b"one_order_by","pivot",b"pivot"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["one_order_by",b"one_order_by"]) -> typing.Optional[typing_extensions.Literal["metric","dimension","pivot"]]: ...
global___OrderBy = OrderBy

class Pivot(google.protobuf.message.Message):
    """Describes the visible dimension columns and rows in the report response."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FIELD_NAMES_FIELD_NUMBER: builtins.int
    ORDER_BYS_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    LIMIT_FIELD_NUMBER: builtins.int
    METRIC_AGGREGATIONS_FIELD_NUMBER: builtins.int
    @property
    def field_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Dimension names for visible columns in the report response. Including
        "dateRange" produces a date range column; for each row in the response,
        dimension values in the date range column will indicate the corresponding
        date range from the request.
        """
        pass
    @property
    def order_bys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___OrderBy]:
        """Specifies how dimensions are ordered in the pivot. In the first Pivot, the
        OrderBys determine Row and PivotDimensionHeader ordering; in subsequent
        Pivots, the OrderBys determine only PivotDimensionHeader ordering.
        Dimensions specified in these OrderBys must be a subset of
        Pivot.field_names.
        """
        pass
    offset: builtins.int = ...
    """The row count of the start row. The first row is counted as row 0."""

    limit: builtins.int = ...
    """The number of unique combinations of dimension values to return in this
    pivot. The `limit` parameter is required. A `limit` of 10,000 is common for
    single pivot requests.

    The product of the `limit` for each `pivot` in a `RunPivotReportRequest`
    must not exceed 100,000. For example, a two pivot request with `limit:
    1000` in each pivot will fail because the product is `1,000,000`.
    """

    @property
    def metric_aggregations(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___MetricAggregation.ValueType]:
        """Aggregate the metrics by dimensions in this pivot using the specified
        metric_aggregations.
        """
        pass
    def __init__(self,
        *,
        field_names : typing.Optional[typing.Iterable[typing.Text]] = ...,
        order_bys : typing.Optional[typing.Iterable[global___OrderBy]] = ...,
        offset : builtins.int = ...,
        limit : builtins.int = ...,
        metric_aggregations : typing.Optional[typing.Iterable[global___MetricAggregation.ValueType]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["field_names",b"field_names","limit",b"limit","metric_aggregations",b"metric_aggregations","offset",b"offset","order_bys",b"order_bys"]) -> None: ...
global___Pivot = Pivot

class CohortSpec(google.protobuf.message.Message):
    """The specification of cohorts for a cohort report.

    Cohort reports create a time series of user retention for the cohort. For
    example, you could select the cohort of users that were acquired in the first
    week of September and follow that cohort for the next six weeks. Selecting
    the users acquired in the first week of September cohort is specified in the
    `cohort` object. Following that cohort for the next six weeks is specified in
    the `cohortsRange` object.

    For examples, see [Cohort Report
    Examples](https://developers.google.com/analytics/devguides/reporting/data/v1/advanced#cohort_report_examples).

    The report response could show a weekly time series where say your app has
    retained 60% of this cohort after three weeks and 25% of this cohort after
    six weeks. These two percentages can be calculated by the metric
    `cohortActiveUsers/cohortTotalUsers` and will be separate rows in the report.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    COHORTS_FIELD_NUMBER: builtins.int
    COHORTS_RANGE_FIELD_NUMBER: builtins.int
    COHORT_REPORT_SETTINGS_FIELD_NUMBER: builtins.int
    @property
    def cohorts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Cohort]:
        """Defines the selection criteria to group users into cohorts.

        Most cohort reports define only a single cohort. If multiple cohorts are
        specified, each cohort can be recognized in the report by their name.
        """
        pass
    @property
    def cohorts_range(self) -> global___CohortsRange:
        """Cohort reports follow cohorts over an extended reporting date range. This
        range specifies an offset duration to follow the cohorts over.
        """
        pass
    @property
    def cohort_report_settings(self) -> global___CohortReportSettings:
        """Optional settings for a cohort report."""
        pass
    def __init__(self,
        *,
        cohorts : typing.Optional[typing.Iterable[global___Cohort]] = ...,
        cohorts_range : typing.Optional[global___CohortsRange] = ...,
        cohort_report_settings : typing.Optional[global___CohortReportSettings] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cohort_report_settings",b"cohort_report_settings","cohorts_range",b"cohorts_range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cohort_report_settings",b"cohort_report_settings","cohorts",b"cohorts","cohorts_range",b"cohorts_range"]) -> None: ...
global___CohortSpec = CohortSpec

class Cohort(google.protobuf.message.Message):
    """Defines a cohort selection criteria. A cohort is a group of users who share
    a common characteristic. For example, users with the same `firstSessionDate`
    belong to the same cohort.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DIMENSION_FIELD_NUMBER: builtins.int
    DATE_RANGE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Assigns a name to this cohort. The dimension `cohort` is valued to this
    name in a report response. If set, cannot begin with `cohort_` or
    `RESERVED_`. If not set, cohorts are named by their zero based index
    `cohort_0`, `cohort_1`, etc.
    """

    dimension: typing.Text = ...
    """Dimension used by the cohort. Required and only supports
    `firstSessionDate`.
    """

    @property
    def date_range(self) -> global___DateRange:
        """The cohort selects users whose first touch date is between start date and
        end date defined in the `dateRange`. This `dateRange` does not specify the
        full date range of event data that is present in a cohort report. In a
        cohort report, this `dateRange` is extended by the granularity and offset
        present in the `cohortsRange`; event data for the extended reporting date
        range is present in a cohort report.

        In a cohort request, this `dateRange` is required and the `dateRanges` in
        the `RunReportRequest` or `RunPivotReportRequest` must be unspecified.

        This `dateRange` should generally be aligned with the cohort's granularity.
        If `CohortsRange` uses daily granularity, this `dateRange` can be a single
        day. If `CohortsRange` uses weekly granularity, this `dateRange` can be
        aligned to a week boundary, starting at Sunday and ending Saturday. If
        `CohortsRange` uses monthly granularity, this `dateRange` can be aligned to
        a month, starting at the first and ending on the last day of the month.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        dimension : typing.Text = ...,
        date_range : typing.Optional[global___DateRange] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["date_range",b"date_range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["date_range",b"date_range","dimension",b"dimension","name",b"name"]) -> None: ...
global___Cohort = Cohort

class CohortsRange(google.protobuf.message.Message):
    """Configures the extended reporting date range for a cohort report. Specifies
    an offset duration to follow the cohorts over.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Granularity:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _GranularityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Granularity.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        GRANULARITY_UNSPECIFIED: CohortsRange.Granularity.ValueType = ...  # 0
        """Should never be specified."""

        DAILY: CohortsRange.Granularity.ValueType = ...  # 1
        """Daily granularity. Commonly used if the cohort's `dateRange` is a single
        day and the request contains `cohortNthDay`.
        """

        WEEKLY: CohortsRange.Granularity.ValueType = ...  # 2
        """Weekly granularity. Commonly used if the cohort's `dateRange` is a week
        in duration (starting on Sunday and ending on Saturday) and the request
        contains `cohortNthWeek`.
        """

        MONTHLY: CohortsRange.Granularity.ValueType = ...  # 3
        """Monthly granularity. Commonly used if the cohort's `dateRange` is a month
        in duration and the request contains `cohortNthMonth`.
        """

    class Granularity(_Granularity, metaclass=_GranularityEnumTypeWrapper):
        """The granularity used to interpret the `startOffset` and `endOffset` for the
        extended reporting date range for a cohort report.
        """
        pass

    GRANULARITY_UNSPECIFIED: CohortsRange.Granularity.ValueType = ...  # 0
    """Should never be specified."""

    DAILY: CohortsRange.Granularity.ValueType = ...  # 1
    """Daily granularity. Commonly used if the cohort's `dateRange` is a single
    day and the request contains `cohortNthDay`.
    """

    WEEKLY: CohortsRange.Granularity.ValueType = ...  # 2
    """Weekly granularity. Commonly used if the cohort's `dateRange` is a week
    in duration (starting on Sunday and ending on Saturday) and the request
    contains `cohortNthWeek`.
    """

    MONTHLY: CohortsRange.Granularity.ValueType = ...  # 3
    """Monthly granularity. Commonly used if the cohort's `dateRange` is a month
    in duration and the request contains `cohortNthMonth`.
    """


    GRANULARITY_FIELD_NUMBER: builtins.int
    START_OFFSET_FIELD_NUMBER: builtins.int
    END_OFFSET_FIELD_NUMBER: builtins.int
    granularity: global___CohortsRange.Granularity.ValueType = ...
    """Required. The granularity used to interpret the `startOffset` and
    `endOffset` for the extended reporting date range for a cohort report.
    """

    start_offset: builtins.int = ...
    """`startOffset` specifies the start date of the extended reporting date range
    for a cohort report. `startOffset` is commonly set to 0 so that reports
    contain data from the acquisition of the cohort forward.

    If `granularity` is `DAILY`, the `startDate` of the extended reporting date
    range is `startDate` of the cohort plus `startOffset` days.

    If `granularity` is `WEEKLY`, the `startDate` of the extended reporting
    date range is `startDate` of the cohort plus `startOffset * 7` days.

    If `granularity` is `MONTHLY`, the `startDate` of the extended reporting
    date range is `startDate` of the cohort plus `startOffset * 30` days.
    """

    end_offset: builtins.int = ...
    """Required. `endOffset` specifies the end date of the extended reporting date
    range for a cohort report. `endOffset` can be any positive integer but is
    commonly set to 5 to 10 so that reports contain data on the cohort for the
    next several granularity time periods.

    If `granularity` is `DAILY`, the `endDate` of the extended reporting date
    range is `endDate` of the cohort plus `endOffset` days.

    If `granularity` is `WEEKLY`, the `endDate` of the extended reporting date
    range is `endDate` of the cohort plus `endOffset * 7` days.

    If `granularity` is `MONTHLY`, the `endDate` of the extended reporting date
    range is `endDate` of the cohort plus `endOffset * 30` days.
    """

    def __init__(self,
        *,
        granularity : global___CohortsRange.Granularity.ValueType = ...,
        start_offset : builtins.int = ...,
        end_offset : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_offset",b"end_offset","granularity",b"granularity","start_offset",b"start_offset"]) -> None: ...
global___CohortsRange = CohortsRange

class CohortReportSettings(google.protobuf.message.Message):
    """Optional settings of a cohort report."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ACCUMULATE_FIELD_NUMBER: builtins.int
    accumulate: builtins.bool = ...
    """If true, accumulates the result from first touch day to the end day. Not
    supported in `RunReportRequest`.
    """

    def __init__(self,
        *,
        accumulate : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["accumulate",b"accumulate"]) -> None: ...
global___CohortReportSettings = CohortReportSettings

class ResponseMetaData(google.protobuf.message.Message):
    """Response's metadata carrying additional information about the report content."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class SchemaRestrictionResponse(google.protobuf.message.Message):
        """The schema restrictions actively enforced in creating this report. To learn
        more, see [Access and data-restriction
        management](https://support.google.com/analytics/answer/10851388).
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class ActiveMetricRestriction(google.protobuf.message.Message):
            """A metric actively restricted in creating the report."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            METRIC_NAME_FIELD_NUMBER: builtins.int
            RESTRICTED_METRIC_TYPES_FIELD_NUMBER: builtins.int
            metric_name: typing.Text = ...
            """The name of the restricted metric."""

            @property
            def restricted_metric_types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___RestrictedMetricType.ValueType]:
                """The reason for this metric's restriction."""
                pass
            def __init__(self,
                *,
                metric_name : typing.Optional[typing.Text] = ...,
                restricted_metric_types : typing.Optional[typing.Iterable[global___RestrictedMetricType.ValueType]] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["_metric_name",b"_metric_name","metric_name",b"metric_name"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["_metric_name",b"_metric_name","metric_name",b"metric_name","restricted_metric_types",b"restricted_metric_types"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal["_metric_name",b"_metric_name"]) -> typing.Optional[typing_extensions.Literal["metric_name"]]: ...

        ACTIVE_METRIC_RESTRICTIONS_FIELD_NUMBER: builtins.int
        @property
        def active_metric_restrictions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ResponseMetaData.SchemaRestrictionResponse.ActiveMetricRestriction]:
            """All restrictions actively enforced in creating the report. For example,
            `purchaseRevenue` always has the restriction type `REVENUE_DATA`.
            However, this active response restriction is only populated if the user's
            custom role disallows access to `REVENUE_DATA`.
            """
            pass
        def __init__(self,
            *,
            active_metric_restrictions : typing.Optional[typing.Iterable[global___ResponseMetaData.SchemaRestrictionResponse.ActiveMetricRestriction]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["active_metric_restrictions",b"active_metric_restrictions"]) -> None: ...

    DATA_LOSS_FROM_OTHER_ROW_FIELD_NUMBER: builtins.int
    SCHEMA_RESTRICTION_RESPONSE_FIELD_NUMBER: builtins.int
    CURRENCY_CODE_FIELD_NUMBER: builtins.int
    TIME_ZONE_FIELD_NUMBER: builtins.int
    EMPTY_REASON_FIELD_NUMBER: builtins.int
    data_loss_from_other_row: builtins.bool = ...
    """If true, indicates some buckets of dimension combinations are rolled into
    "(other)" row. This can happen for high cardinality reports.
    """

    @property
    def schema_restriction_response(self) -> global___ResponseMetaData.SchemaRestrictionResponse:
        """Describes the schema restrictions actively enforced in creating this
        report. To learn more, see [Access and data-restriction
        management](https://support.google.com/analytics/answer/10851388).
        """
        pass
    currency_code: typing.Text = ...
    """The currency code used in this report. Intended to be used in formatting
    currency metrics like `purchaseRevenue` for visualization. If currency_code
    was specified in the request, this response parameter will echo the request
    parameter; otherwise, this response parameter is the property's current
    currency_code.

    Currency codes are string encodings of currency types from the ISO 4217
    standard (https://en.wikipedia.org/wiki/ISO_4217); for example "USD",
    "EUR", "JPY". To learn more, see
    https://support.google.com/analytics/answer/9796179.
    """

    time_zone: typing.Text = ...
    """The property's current timezone. Intended to be used to interpret
    time-based dimensions like `hour` and `minute`. Formatted as strings from
    the IANA Time Zone database (https://www.iana.org/time-zones); for example
    "America/New_York" or "Asia/Tokyo".
    """

    empty_reason: typing.Text = ...
    """If empty reason is specified, the report is empty for this reason."""

    def __init__(self,
        *,
        data_loss_from_other_row : builtins.bool = ...,
        schema_restriction_response : typing.Optional[global___ResponseMetaData.SchemaRestrictionResponse] = ...,
        currency_code : typing.Optional[typing.Text] = ...,
        time_zone : typing.Optional[typing.Text] = ...,
        empty_reason : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_currency_code",b"_currency_code","_empty_reason",b"_empty_reason","_schema_restriction_response",b"_schema_restriction_response","_time_zone",b"_time_zone","currency_code",b"currency_code","empty_reason",b"empty_reason","schema_restriction_response",b"schema_restriction_response","time_zone",b"time_zone"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_currency_code",b"_currency_code","_empty_reason",b"_empty_reason","_schema_restriction_response",b"_schema_restriction_response","_time_zone",b"_time_zone","currency_code",b"currency_code","data_loss_from_other_row",b"data_loss_from_other_row","empty_reason",b"empty_reason","schema_restriction_response",b"schema_restriction_response","time_zone",b"time_zone"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_currency_code",b"_currency_code"]) -> typing.Optional[typing_extensions.Literal["currency_code"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_empty_reason",b"_empty_reason"]) -> typing.Optional[typing_extensions.Literal["empty_reason"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_schema_restriction_response",b"_schema_restriction_response"]) -> typing.Optional[typing_extensions.Literal["schema_restriction_response"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_time_zone",b"_time_zone"]) -> typing.Optional[typing_extensions.Literal["time_zone"]]: ...
global___ResponseMetaData = ResponseMetaData

class DimensionHeader(google.protobuf.message.Message):
    """Describes a dimension column in the report. Dimensions requested in a report
    produce column entries within rows and DimensionHeaders. However, dimensions
    used exclusively within filters or expressions do not produce columns in a
    report; correspondingly, those dimensions do not produce headers.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The dimension's name."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DimensionHeader = DimensionHeader

class MetricHeader(google.protobuf.message.Message):
    """Describes a metric column in the report. Visible metrics requested in a
    report produce column entries within rows and MetricHeaders. However,
    metrics used exclusively within filters or expressions do not produce columns
    in a report; correspondingly, those metrics do not produce headers.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The metric's name."""

    type: global___MetricType.ValueType = ...
    """The metric's data type."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        type : global___MetricType.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","type",b"type"]) -> None: ...
global___MetricHeader = MetricHeader

class PivotHeader(google.protobuf.message.Message):
    """Dimensions' values in a single pivot."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PIVOT_DIMENSION_HEADERS_FIELD_NUMBER: builtins.int
    ROW_COUNT_FIELD_NUMBER: builtins.int
    @property
    def pivot_dimension_headers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PivotDimensionHeader]:
        """The size is the same as the cardinality of the corresponding dimension
        combinations.
        """
        pass
    row_count: builtins.int = ...
    """The cardinality of the pivot. The total number of rows for this pivot's
    fields regardless of how the parameters `offset` and `limit` are specified
    in the request.
    """

    def __init__(self,
        *,
        pivot_dimension_headers : typing.Optional[typing.Iterable[global___PivotDimensionHeader]] = ...,
        row_count : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["pivot_dimension_headers",b"pivot_dimension_headers","row_count",b"row_count"]) -> None: ...
global___PivotHeader = PivotHeader

class PivotDimensionHeader(google.protobuf.message.Message):
    """Summarizes dimension values from a row for this pivot."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DIMENSION_VALUES_FIELD_NUMBER: builtins.int
    @property
    def dimension_values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DimensionValue]:
        """Values of multiple dimensions in a pivot."""
        pass
    def __init__(self,
        *,
        dimension_values : typing.Optional[typing.Iterable[global___DimensionValue]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dimension_values",b"dimension_values"]) -> None: ...
global___PivotDimensionHeader = PivotDimensionHeader

class Row(google.protobuf.message.Message):
    """Report data for each row.
    For example if RunReportRequest contains:

    ```none
    "dimensions": [
      {
        "name": "eventName"
      },
      {
        "name": "countryId"
      }
    ],
    "metrics": [
      {
        "name": "eventCount"
      }
    ]
    ```

    One row with 'in_app_purchase' as the eventName, 'JP' as the countryId, and
    15 as the eventCount, would be:

    ```none
    "dimensionValues": [
      {
        "value": "in_app_purchase"
      },
      {
        "value": "JP"
      }
    ],
    "metricValues": [
      {
        "value": "15"
      }
    ]
    ```
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DIMENSION_VALUES_FIELD_NUMBER: builtins.int
    METRIC_VALUES_FIELD_NUMBER: builtins.int
    @property
    def dimension_values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DimensionValue]:
        """List of requested dimension values. In a PivotReport, dimension_values
        are only listed for dimensions included in a pivot.
        """
        pass
    @property
    def metric_values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MetricValue]:
        """List of requested visible metric values."""
        pass
    def __init__(self,
        *,
        dimension_values : typing.Optional[typing.Iterable[global___DimensionValue]] = ...,
        metric_values : typing.Optional[typing.Iterable[global___MetricValue]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dimension_values",b"dimension_values","metric_values",b"metric_values"]) -> None: ...
global___Row = Row

class DimensionValue(google.protobuf.message.Message):
    """The value of a dimension."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VALUE_FIELD_NUMBER: builtins.int
    value: typing.Text = ...
    """Value as a string if the dimension type is a string."""

    def __init__(self,
        *,
        value : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["one_value",b"one_value","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["one_value",b"one_value","value",b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["one_value",b"one_value"]) -> typing.Optional[typing_extensions.Literal["value"]]: ...
global___DimensionValue = DimensionValue

class MetricValue(google.protobuf.message.Message):
    """The value of a metric."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VALUE_FIELD_NUMBER: builtins.int
    value: typing.Text = ...
    """Measurement value. See MetricHeader for type."""

    def __init__(self,
        *,
        value : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["one_value",b"one_value","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["one_value",b"one_value","value",b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["one_value",b"one_value"]) -> typing.Optional[typing_extensions.Literal["value"]]: ...
global___MetricValue = MetricValue

class NumericValue(google.protobuf.message.Message):
    """To represent a number."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INT64_VALUE_FIELD_NUMBER: builtins.int
    DOUBLE_VALUE_FIELD_NUMBER: builtins.int
    int64_value: builtins.int = ...
    """Integer value"""

    double_value: builtins.float = ...
    """Double value"""

    def __init__(self,
        *,
        int64_value : builtins.int = ...,
        double_value : builtins.float = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["double_value",b"double_value","int64_value",b"int64_value","one_value",b"one_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["double_value",b"double_value","int64_value",b"int64_value","one_value",b"one_value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["one_value",b"one_value"]) -> typing.Optional[typing_extensions.Literal["int64_value","double_value"]]: ...
global___NumericValue = NumericValue

class PropertyQuota(google.protobuf.message.Message):
    """Current state of all quotas for this Analytics Property. If any quota for a
    property is exhausted, all requests to that property will return Resource
    Exhausted errors.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TOKENS_PER_DAY_FIELD_NUMBER: builtins.int
    TOKENS_PER_HOUR_FIELD_NUMBER: builtins.int
    CONCURRENT_REQUESTS_FIELD_NUMBER: builtins.int
    SERVER_ERRORS_PER_PROJECT_PER_HOUR_FIELD_NUMBER: builtins.int
    POTENTIALLY_THRESHOLDED_REQUESTS_PER_HOUR_FIELD_NUMBER: builtins.int
    @property
    def tokens_per_day(self) -> global___QuotaStatus:
        """Standard Analytics Properties can use up to 25,000 tokens per day;
        Analytics 360 Properties can use 250,000 tokens per day. Most requests
        consume fewer than 10 tokens.
        """
        pass
    @property
    def tokens_per_hour(self) -> global___QuotaStatus:
        """Standard Analytics Properties can use up to 5,000 tokens per hour;
        Analytics 360 Properties can use 50,000 tokens per hour. An API request
        consumes a single number of tokens, and that number is deducted from both
        the hourly and daily quotas.
        """
        pass
    @property
    def concurrent_requests(self) -> global___QuotaStatus:
        """Standard Analytics Properties can send up to 10 concurrent requests;
        Analytics 360 Properties can use up to 50 concurrent requests.
        """
        pass
    @property
    def server_errors_per_project_per_hour(self) -> global___QuotaStatus:
        """Standard Analytics Properties and cloud project pairs can have up to 10
        server errors per hour; Analytics 360 Properties and cloud project pairs
        can have up to 50 server errors per hour.
        """
        pass
    @property
    def potentially_thresholded_requests_per_hour(self) -> global___QuotaStatus:
        """Analytics Properties can send up to 120 requests with potentially
        thresholded dimensions per hour. In a batch request, each report request
        is individually counted for this quota if the request contains potentially
        thresholded dimensions.
        """
        pass
    def __init__(self,
        *,
        tokens_per_day : typing.Optional[global___QuotaStatus] = ...,
        tokens_per_hour : typing.Optional[global___QuotaStatus] = ...,
        concurrent_requests : typing.Optional[global___QuotaStatus] = ...,
        server_errors_per_project_per_hour : typing.Optional[global___QuotaStatus] = ...,
        potentially_thresholded_requests_per_hour : typing.Optional[global___QuotaStatus] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["concurrent_requests",b"concurrent_requests","potentially_thresholded_requests_per_hour",b"potentially_thresholded_requests_per_hour","server_errors_per_project_per_hour",b"server_errors_per_project_per_hour","tokens_per_day",b"tokens_per_day","tokens_per_hour",b"tokens_per_hour"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["concurrent_requests",b"concurrent_requests","potentially_thresholded_requests_per_hour",b"potentially_thresholded_requests_per_hour","server_errors_per_project_per_hour",b"server_errors_per_project_per_hour","tokens_per_day",b"tokens_per_day","tokens_per_hour",b"tokens_per_hour"]) -> None: ...
global___PropertyQuota = PropertyQuota

class QuotaStatus(google.protobuf.message.Message):
    """Current state for a particular quota group."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONSUMED_FIELD_NUMBER: builtins.int
    REMAINING_FIELD_NUMBER: builtins.int
    consumed: builtins.int = ...
    """Quota consumed by this request."""

    remaining: builtins.int = ...
    """Quota remaining after this request."""

    def __init__(self,
        *,
        consumed : builtins.int = ...,
        remaining : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["consumed",b"consumed","remaining",b"remaining"]) -> None: ...
global___QuotaStatus = QuotaStatus

class DimensionMetadata(google.protobuf.message.Message):
    """Explains a dimension."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    API_NAME_FIELD_NUMBER: builtins.int
    UI_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    DEPRECATED_API_NAMES_FIELD_NUMBER: builtins.int
    CUSTOM_DEFINITION_FIELD_NUMBER: builtins.int
    CATEGORY_FIELD_NUMBER: builtins.int
    api_name: typing.Text = ...
    """This dimension's name. Useable in [Dimension](#Dimension)'s `name`. For
    example, `eventName`.
    """

    ui_name: typing.Text = ...
    """This dimension's name within the Google Analytics user interface. For
    example, `Event name`.
    """

    description: typing.Text = ...
    """Description of how this dimension is used and calculated."""

    @property
    def deprecated_api_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Still usable but deprecated names for this dimension. If populated, this
        dimension is available by either `apiName` or one of `deprecatedApiNames`
        for a period of time. After the deprecation period, the dimension will be
        available only by `apiName`.
        """
        pass
    custom_definition: builtins.bool = ...
    """True if the dimension is a custom dimension for this property."""

    category: typing.Text = ...
    """The display name of the category that this dimension belongs to. Similar
    dimensions and metrics are categorized together.
    """

    def __init__(self,
        *,
        api_name : typing.Text = ...,
        ui_name : typing.Text = ...,
        description : typing.Text = ...,
        deprecated_api_names : typing.Optional[typing.Iterable[typing.Text]] = ...,
        custom_definition : builtins.bool = ...,
        category : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["api_name",b"api_name","category",b"category","custom_definition",b"custom_definition","deprecated_api_names",b"deprecated_api_names","description",b"description","ui_name",b"ui_name"]) -> None: ...
global___DimensionMetadata = DimensionMetadata

class MetricMetadata(google.protobuf.message.Message):
    """Explains a metric."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _BlockedReason:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _BlockedReasonEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_BlockedReason.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        BLOCKED_REASON_UNSPECIFIED: MetricMetadata.BlockedReason.ValueType = ...  # 0
        """Will never be specified in API response."""

        NO_REVENUE_METRICS: MetricMetadata.BlockedReason.ValueType = ...  # 1
        """If present, your access is blocked to revenue related metrics for this
        property, and this metric is revenue related.
        """

        NO_COST_METRICS: MetricMetadata.BlockedReason.ValueType = ...  # 2
        """If present, your access is blocked to cost related metrics for this
        property, and this metric is cost related.
        """

    class BlockedReason(_BlockedReason, metaclass=_BlockedReasonEnumTypeWrapper):
        """Justifications for why this metric is blocked."""
        pass

    BLOCKED_REASON_UNSPECIFIED: MetricMetadata.BlockedReason.ValueType = ...  # 0
    """Will never be specified in API response."""

    NO_REVENUE_METRICS: MetricMetadata.BlockedReason.ValueType = ...  # 1
    """If present, your access is blocked to revenue related metrics for this
    property, and this metric is revenue related.
    """

    NO_COST_METRICS: MetricMetadata.BlockedReason.ValueType = ...  # 2
    """If present, your access is blocked to cost related metrics for this
    property, and this metric is cost related.
    """


    API_NAME_FIELD_NUMBER: builtins.int
    UI_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    DEPRECATED_API_NAMES_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    EXPRESSION_FIELD_NUMBER: builtins.int
    CUSTOM_DEFINITION_FIELD_NUMBER: builtins.int
    BLOCKED_REASONS_FIELD_NUMBER: builtins.int
    CATEGORY_FIELD_NUMBER: builtins.int
    api_name: typing.Text = ...
    """A metric name. Useable in [Metric](#Metric)'s `name`. For example,
    `eventCount`.
    """

    ui_name: typing.Text = ...
    """This metric's name within the Google Analytics user interface. For example,
    `Event count`.
    """

    description: typing.Text = ...
    """Description of how this metric is used and calculated."""

    @property
    def deprecated_api_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Still usable but deprecated names for this metric. If populated, this
        metric is available by either `apiName` or one of `deprecatedApiNames`
        for a period of time. After the deprecation period, the metric will be
        available only by `apiName`.
        """
        pass
    type: global___MetricType.ValueType = ...
    """The type of this metric."""

    expression: typing.Text = ...
    """The mathematical expression for this derived metric. Can be used in
    [Metric](#Metric)'s `expression` field for equivalent reports. Most metrics
    are not expressions, and for non-expressions, this field is empty.
    """

    custom_definition: builtins.bool = ...
    """True if the metric is a custom metric for this property."""

    @property
    def blocked_reasons(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___MetricMetadata.BlockedReason.ValueType]:
        """If reasons are specified, your access is blocked to this metric for this
        property. API requests from you to this property for this metric will
        succeed; however, the report will contain only zeros for this metric. API
        requests with metric filters on blocked metrics will fail. If reasons are
        empty, you have access to this metric.

        To learn more, see [Access and data-restriction
        management](https://support.google.com/analytics/answer/10851388).
        """
        pass
    category: typing.Text = ...
    """The display name of the category that this metrics belongs to. Similar
    dimensions and metrics are categorized together.
    """

    def __init__(self,
        *,
        api_name : typing.Text = ...,
        ui_name : typing.Text = ...,
        description : typing.Text = ...,
        deprecated_api_names : typing.Optional[typing.Iterable[typing.Text]] = ...,
        type : global___MetricType.ValueType = ...,
        expression : typing.Text = ...,
        custom_definition : builtins.bool = ...,
        blocked_reasons : typing.Optional[typing.Iterable[global___MetricMetadata.BlockedReason.ValueType]] = ...,
        category : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["api_name",b"api_name","blocked_reasons",b"blocked_reasons","category",b"category","custom_definition",b"custom_definition","deprecated_api_names",b"deprecated_api_names","description",b"description","expression",b"expression","type",b"type","ui_name",b"ui_name"]) -> None: ...
global___MetricMetadata = MetricMetadata

class DimensionCompatibility(google.protobuf.message.Message):
    """The compatibility for a single dimension."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DIMENSION_METADATA_FIELD_NUMBER: builtins.int
    COMPATIBILITY_FIELD_NUMBER: builtins.int
    @property
    def dimension_metadata(self) -> global___DimensionMetadata:
        """The dimension metadata contains the API name for this compatibility
        information. The dimension metadata also contains other helpful information
        like the UI name and description.
        """
        pass
    compatibility: global___Compatibility.ValueType = ...
    """The compatibility of this dimension. If the compatibility is COMPATIBLE,
    this dimension can be successfully added to the report.
    """

    def __init__(self,
        *,
        dimension_metadata : typing.Optional[global___DimensionMetadata] = ...,
        compatibility : typing.Optional[global___Compatibility.ValueType] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_compatibility",b"_compatibility","_dimension_metadata",b"_dimension_metadata","compatibility",b"compatibility","dimension_metadata",b"dimension_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_compatibility",b"_compatibility","_dimension_metadata",b"_dimension_metadata","compatibility",b"compatibility","dimension_metadata",b"dimension_metadata"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_compatibility",b"_compatibility"]) -> typing.Optional[typing_extensions.Literal["compatibility"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_dimension_metadata",b"_dimension_metadata"]) -> typing.Optional[typing_extensions.Literal["dimension_metadata"]]: ...
global___DimensionCompatibility = DimensionCompatibility

class MetricCompatibility(google.protobuf.message.Message):
    """The compatibility for a single metric."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    METRIC_METADATA_FIELD_NUMBER: builtins.int
    COMPATIBILITY_FIELD_NUMBER: builtins.int
    @property
    def metric_metadata(self) -> global___MetricMetadata:
        """The metric metadata contains the API name for this compatibility
        information. The metric metadata also contains other helpful information
        like the UI name and description.
        """
        pass
    compatibility: global___Compatibility.ValueType = ...
    """The compatibility of this metric. If the compatibility is COMPATIBLE,
    this metric can be successfully added to the report.
    """

    def __init__(self,
        *,
        metric_metadata : typing.Optional[global___MetricMetadata] = ...,
        compatibility : typing.Optional[global___Compatibility.ValueType] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_compatibility",b"_compatibility","_metric_metadata",b"_metric_metadata","compatibility",b"compatibility","metric_metadata",b"metric_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_compatibility",b"_compatibility","_metric_metadata",b"_metric_metadata","compatibility",b"compatibility","metric_metadata",b"metric_metadata"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_compatibility",b"_compatibility"]) -> typing.Optional[typing_extensions.Literal["compatibility"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_metric_metadata",b"_metric_metadata"]) -> typing.Optional[typing_extensions.Literal["metric_metadata"]]: ...
global___MetricCompatibility = MetricCompatibility
