"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.firestore.admin.v1.database_pb2
import google.firestore.admin.v1.field_pb2
import google.firestore.admin.v1.index_pb2
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class ListDatabasesRequest(google.protobuf.message.Message):
    """A request to list the Firestore Databases in all locations for a project."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. A parent name of the form
    `projects/{project_id}`
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent",b"parent"]) -> None: ...
global___ListDatabasesRequest = ListDatabasesRequest

class ListDatabasesResponse(google.protobuf.message.Message):
    """The list of databases for a project."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DATABASES_FIELD_NUMBER: builtins.int
    @property
    def databases(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.firestore.admin.v1.database_pb2.Database]:
        """The databases in the project."""
        pass
    def __init__(self,
        *,
        databases : typing.Optional[typing.Iterable[google.firestore.admin.v1.database_pb2.Database]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["databases",b"databases"]) -> None: ...
global___ListDatabasesResponse = ListDatabasesResponse

class GetDatabaseRequest(google.protobuf.message.Message):
    """The request for [FirestoreAdmin.GetDatabase][google.firestore.admin.v1.FirestoreAdmin.GetDatabase]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. A name of the form
    `projects/{project_id}/databases/{database_id}`
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetDatabaseRequest = GetDatabaseRequest

class UpdateDatabaseRequest(google.protobuf.message.Message):
    """The request for [FirestoreAdmin.UpdateDatabase][google.firestore.admin.v1.FirestoreAdmin.UpdateDatabase]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DATABASE_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def database(self) -> google.firestore.admin.v1.database_pb2.Database:
        """Required. The database to update."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """The list of fields to be updated."""
        pass
    def __init__(self,
        *,
        database : typing.Optional[google.firestore.admin.v1.database_pb2.Database] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["database",b"database","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["database",b"database","update_mask",b"update_mask"]) -> None: ...
global___UpdateDatabaseRequest = UpdateDatabaseRequest

class UpdateDatabaseMetadata(google.protobuf.message.Message):
    """Metadata related to the update database operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___UpdateDatabaseMetadata = UpdateDatabaseMetadata

class CreateIndexRequest(google.protobuf.message.Message):
    """The request for [FirestoreAdmin.CreateIndex][google.firestore.admin.v1.FirestoreAdmin.CreateIndex]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    INDEX_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. A parent name of the form
    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
    """

    @property
    def index(self) -> google.firestore.admin.v1.index_pb2.Index:
        """Required. The composite index to create."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        index : typing.Optional[google.firestore.admin.v1.index_pb2.Index] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["index",b"index"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["index",b"index","parent",b"parent"]) -> None: ...
global___CreateIndexRequest = CreateIndexRequest

class ListIndexesRequest(google.protobuf.message.Message):
    """The request for [FirestoreAdmin.ListIndexes][google.firestore.admin.v1.FirestoreAdmin.ListIndexes]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. A parent name of the form
    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
    """

    filter: typing.Text = ...
    """The filter to apply to list results."""

    page_size: builtins.int = ...
    """The number of results to return."""

    page_token: typing.Text = ...
    """A page token, returned from a previous call to
    [FirestoreAdmin.ListIndexes][google.firestore.admin.v1.FirestoreAdmin.ListIndexes], that may be used to get the next
    page of results.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        filter : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListIndexesRequest = ListIndexesRequest

class ListIndexesResponse(google.protobuf.message.Message):
    """The response for [FirestoreAdmin.ListIndexes][google.firestore.admin.v1.FirestoreAdmin.ListIndexes]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INDEXES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def indexes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.firestore.admin.v1.index_pb2.Index]:
        """The requested indexes."""
        pass
    next_page_token: typing.Text = ...
    """A page token that may be used to request another page of results. If blank,
    this is the last page.
    """

    def __init__(self,
        *,
        indexes : typing.Optional[typing.Iterable[google.firestore.admin.v1.index_pb2.Index]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["indexes",b"indexes","next_page_token",b"next_page_token"]) -> None: ...
global___ListIndexesResponse = ListIndexesResponse

class GetIndexRequest(google.protobuf.message.Message):
    """The request for [FirestoreAdmin.GetIndex][google.firestore.admin.v1.FirestoreAdmin.GetIndex]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. A name of the form
    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetIndexRequest = GetIndexRequest

class DeleteIndexRequest(google.protobuf.message.Message):
    """The request for [FirestoreAdmin.DeleteIndex][google.firestore.admin.v1.FirestoreAdmin.DeleteIndex]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. A name of the form
    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteIndexRequest = DeleteIndexRequest

class UpdateFieldRequest(google.protobuf.message.Message):
    """The request for [FirestoreAdmin.UpdateField][google.firestore.admin.v1.FirestoreAdmin.UpdateField]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FIELD_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def field(self) -> google.firestore.admin.v1.field_pb2.Field:
        """Required. The field to be updated."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """A mask, relative to the field. If specified, only configuration specified
        by this field_mask will be updated in the field.
        """
        pass
    def __init__(self,
        *,
        field : typing.Optional[google.firestore.admin.v1.field_pb2.Field] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["field",b"field","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["field",b"field","update_mask",b"update_mask"]) -> None: ...
global___UpdateFieldRequest = UpdateFieldRequest

class GetFieldRequest(google.protobuf.message.Message):
    """The request for [FirestoreAdmin.GetField][google.firestore.admin.v1.FirestoreAdmin.GetField]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. A name of the form
    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetFieldRequest = GetFieldRequest

class ListFieldsRequest(google.protobuf.message.Message):
    """The request for [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. A parent name of the form
    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
    """

    filter: typing.Text = ...
    """The filter to apply to list results. Currently,
    [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields] only supports listing fields
    that have been explicitly overridden. To issue this query, call
    [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields] with a filter that includes
    `indexConfig.usesAncestorConfig:false` .
    """

    page_size: builtins.int = ...
    """The number of results to return."""

    page_token: typing.Text = ...
    """A page token, returned from a previous call to
    [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields], that may be used to get the next
    page of results.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        filter : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListFieldsRequest = ListFieldsRequest

class ListFieldsResponse(google.protobuf.message.Message):
    """The response for [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FIELDS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def fields(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.firestore.admin.v1.field_pb2.Field]:
        """The requested fields."""
        pass
    next_page_token: typing.Text = ...
    """A page token that may be used to request another page of results. If blank,
    this is the last page.
    """

    def __init__(self,
        *,
        fields : typing.Optional[typing.Iterable[google.firestore.admin.v1.field_pb2.Field]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["fields",b"fields","next_page_token",b"next_page_token"]) -> None: ...
global___ListFieldsResponse = ListFieldsResponse

class ExportDocumentsRequest(google.protobuf.message.Message):
    """The request for [FirestoreAdmin.ExportDocuments][google.firestore.admin.v1.FirestoreAdmin.ExportDocuments]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    COLLECTION_IDS_FIELD_NUMBER: builtins.int
    OUTPUT_URI_PREFIX_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Database to export. Should be of the form:
    `projects/{project_id}/databases/{database_id}`.
    """

    @property
    def collection_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Which collection ids to export. Unspecified means all collections."""
        pass
    output_uri_prefix: typing.Text = ...
    """The output URI. Currently only supports Google Cloud Storage URIs of the
    form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name
    of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional
    Google Cloud Storage namespace path. When
    choosing a name, be sure to consider Google Cloud Storage naming
    guidelines: https://cloud.google.com/storage/docs/naming.
    If the URI is a bucket (without a namespace path), a prefix will be
    generated based on the start time.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        collection_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        output_uri_prefix : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["collection_ids",b"collection_ids","name",b"name","output_uri_prefix",b"output_uri_prefix"]) -> None: ...
global___ExportDocumentsRequest = ExportDocumentsRequest

class ImportDocumentsRequest(google.protobuf.message.Message):
    """The request for [FirestoreAdmin.ImportDocuments][google.firestore.admin.v1.FirestoreAdmin.ImportDocuments]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    COLLECTION_IDS_FIELD_NUMBER: builtins.int
    INPUT_URI_PREFIX_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Database to import into. Should be of the form:
    `projects/{project_id}/databases/{database_id}`.
    """

    @property
    def collection_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Which collection ids to import. Unspecified means all collections included
        in the import.
        """
        pass
    input_uri_prefix: typing.Text = ...
    """Location of the exported files.
    This must match the output_uri_prefix of an ExportDocumentsResponse from
    an export that has completed successfully.
    See:
    [google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix][google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix].
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        collection_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        input_uri_prefix : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["collection_ids",b"collection_ids","input_uri_prefix",b"input_uri_prefix","name",b"name"]) -> None: ...
global___ImportDocumentsRequest = ImportDocumentsRequest
