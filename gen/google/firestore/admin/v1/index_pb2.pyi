"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Index(google.protobuf.message.Message):
    """Cloud Firestore indexes enable simple and complex queries against
    documents in a database.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _QueryScope:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _QueryScopeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_QueryScope.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        QUERY_SCOPE_UNSPECIFIED: Index.QueryScope.ValueType = ...  # 0
        """The query scope is unspecified. Not a valid option."""

        COLLECTION: Index.QueryScope.ValueType = ...  # 1
        """Indexes with a collection query scope specified allow queries
        against a collection that is the child of a specific document, specified
        at query time, and that has the collection id specified by the index.
        """

        COLLECTION_GROUP: Index.QueryScope.ValueType = ...  # 2
        """Indexes with a collection group query scope specified allow queries
        against all collections that has the collection id specified by the
        index.
        """

    class QueryScope(_QueryScope, metaclass=_QueryScopeEnumTypeWrapper):
        """Query Scope defines the scope at which a query is run. This is specified on
        a StructuredQuery's `from` field.
        """
        pass

    QUERY_SCOPE_UNSPECIFIED: Index.QueryScope.ValueType = ...  # 0
    """The query scope is unspecified. Not a valid option."""

    COLLECTION: Index.QueryScope.ValueType = ...  # 1
    """Indexes with a collection query scope specified allow queries
    against a collection that is the child of a specific document, specified
    at query time, and that has the collection id specified by the index.
    """

    COLLECTION_GROUP: Index.QueryScope.ValueType = ...  # 2
    """Indexes with a collection group query scope specified allow queries
    against all collections that has the collection id specified by the
    index.
    """


    class _State:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_State.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        STATE_UNSPECIFIED: Index.State.ValueType = ...  # 0
        """The state is unspecified."""

        CREATING: Index.State.ValueType = ...  # 1
        """The index is being created.
        There is an active long-running operation for the index.
        The index is updated when writing a document.
        Some index data may exist.
        """

        READY: Index.State.ValueType = ...  # 2
        """The index is ready to be used.
        The index is updated when writing a document.
        The index is fully populated from all stored documents it applies to.
        """

        NEEDS_REPAIR: Index.State.ValueType = ...  # 3
        """The index was being created, but something went wrong.
        There is no active long-running operation for the index,
        and the most recently finished long-running operation failed.
        The index is not updated when writing a document.
        Some index data may exist.
        Use the google.longrunning.Operations API to determine why the operation
        that last attempted to create this index failed, then re-create the
        index.
        """

    class State(_State, metaclass=_StateEnumTypeWrapper):
        """The state of an index. During index creation, an index will be in the
        `CREATING` state. If the index is created successfully, it will transition
        to the `READY` state. If the index creation encounters a problem, the index
        will transition to the `NEEDS_REPAIR` state.
        """
        pass

    STATE_UNSPECIFIED: Index.State.ValueType = ...  # 0
    """The state is unspecified."""

    CREATING: Index.State.ValueType = ...  # 1
    """The index is being created.
    There is an active long-running operation for the index.
    The index is updated when writing a document.
    Some index data may exist.
    """

    READY: Index.State.ValueType = ...  # 2
    """The index is ready to be used.
    The index is updated when writing a document.
    The index is fully populated from all stored documents it applies to.
    """

    NEEDS_REPAIR: Index.State.ValueType = ...  # 3
    """The index was being created, but something went wrong.
    There is no active long-running operation for the index,
    and the most recently finished long-running operation failed.
    The index is not updated when writing a document.
    Some index data may exist.
    Use the google.longrunning.Operations API to determine why the operation
    that last attempted to create this index failed, then re-create the
    index.
    """


    class IndexField(google.protobuf.message.Message):
        """A field in an index.
        The field_path describes which field is indexed, the value_mode describes
        how the field value is indexed.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _Order:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _OrderEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Order.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            ORDER_UNSPECIFIED: Index.IndexField.Order.ValueType = ...  # 0
            """The ordering is unspecified. Not a valid option."""

            ASCENDING: Index.IndexField.Order.ValueType = ...  # 1
            """The field is ordered by ascending field value."""

            DESCENDING: Index.IndexField.Order.ValueType = ...  # 2
            """The field is ordered by descending field value."""

        class Order(_Order, metaclass=_OrderEnumTypeWrapper):
            """The supported orderings."""
            pass

        ORDER_UNSPECIFIED: Index.IndexField.Order.ValueType = ...  # 0
        """The ordering is unspecified. Not a valid option."""

        ASCENDING: Index.IndexField.Order.ValueType = ...  # 1
        """The field is ordered by ascending field value."""

        DESCENDING: Index.IndexField.Order.ValueType = ...  # 2
        """The field is ordered by descending field value."""


        class _ArrayConfig:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _ArrayConfigEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ArrayConfig.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            ARRAY_CONFIG_UNSPECIFIED: Index.IndexField.ArrayConfig.ValueType = ...  # 0
            """The index does not support additional array queries."""

            CONTAINS: Index.IndexField.ArrayConfig.ValueType = ...  # 1
            """The index supports array containment queries."""

        class ArrayConfig(_ArrayConfig, metaclass=_ArrayConfigEnumTypeWrapper):
            """The supported array value configurations."""
            pass

        ARRAY_CONFIG_UNSPECIFIED: Index.IndexField.ArrayConfig.ValueType = ...  # 0
        """The index does not support additional array queries."""

        CONTAINS: Index.IndexField.ArrayConfig.ValueType = ...  # 1
        """The index supports array containment queries."""


        FIELD_PATH_FIELD_NUMBER: builtins.int
        ORDER_FIELD_NUMBER: builtins.int
        ARRAY_CONFIG_FIELD_NUMBER: builtins.int
        field_path: typing.Text = ...
        """Can be __name__.
        For single field indexes, this must match the name of the field or may
        be omitted.
        """

        order: global___Index.IndexField.Order.ValueType = ...
        """Indicates that this field supports ordering by the specified order or
        comparing using =, !=, <, <=, >, >=.
        """

        array_config: global___Index.IndexField.ArrayConfig.ValueType = ...
        """Indicates that this field supports operations on `array_value`s."""

        def __init__(self,
            *,
            field_path : typing.Text = ...,
            order : global___Index.IndexField.Order.ValueType = ...,
            array_config : global___Index.IndexField.ArrayConfig.ValueType = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["array_config",b"array_config","order",b"order","value_mode",b"value_mode"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["array_config",b"array_config","field_path",b"field_path","order",b"order","value_mode",b"value_mode"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["value_mode",b"value_mode"]) -> typing.Optional[typing_extensions.Literal["order","array_config"]]: ...

    NAME_FIELD_NUMBER: builtins.int
    QUERY_SCOPE_FIELD_NUMBER: builtins.int
    FIELDS_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. A server defined name for this index.
    The form of this name for composite indexes will be:
    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}`
    For single field indexes, this field will be empty.
    """

    query_scope: global___Index.QueryScope.ValueType = ...
    """Indexes with a collection query scope specified allow queries
    against a collection that is the child of a specific document, specified at
    query time, and that has the same collection id.

    Indexes with a collection group query scope specified allow queries against
    all collections descended from a specific document, specified at query
    time, and that have the same collection id as this index.
    """

    @property
    def fields(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Index.IndexField]:
        """The fields supported by this index.

        For composite indexes, this is always 2 or more fields.
        The last field entry is always for the field path `__name__`. If, on
        creation, `__name__` was not specified as the last field, it will be added
        automatically with the same direction as that of the last field defined. If
        the final field in a composite index is not directional, the `__name__`
        will be ordered ASCENDING (unless explicitly specified).

        For single field indexes, this will always be exactly one entry with a
        field path equal to the field path of the associated field.
        """
        pass
    state: global___Index.State.ValueType = ...
    """Output only. The serving state of the index."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        query_scope : global___Index.QueryScope.ValueType = ...,
        fields : typing.Optional[typing.Iterable[global___Index.IndexField]] = ...,
        state : global___Index.State.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["fields",b"fields","name",b"name","query_scope",b"query_scope","state",b"state"]) -> None: ...
global___Index = Index
