# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/firestore/v1beta1/firestore.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.api.client_pb2
import google.api.field_behavior_pb2
import google.firestore.v1beta1.common_pb2
import google.firestore.v1beta1.document_pb2
import google.firestore.v1beta1.query_pb2
import google.firestore.v1beta1.write_pb2
import google.protobuf.empty_pb2
import google.protobuf.timestamp_pb2
import google.rpc.status_pb2
import google.firestore.v1beta1.firestore_pb2


class FirestoreBase(abc.ABC):

    @abc.abstractmethod
    async def GetDocument(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.GetDocumentRequest, google.firestore.v1beta1.document_pb2.Document]') -> None:
        pass

    @abc.abstractmethod
    async def ListDocuments(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.ListDocumentsRequest, google.firestore.v1beta1.firestore_pb2.ListDocumentsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateDocument(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.UpdateDocumentRequest, google.firestore.v1beta1.document_pb2.Document]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteDocument(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.DeleteDocumentRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def BatchGetDocuments(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.BatchGetDocumentsRequest, google.firestore.v1beta1.firestore_pb2.BatchGetDocumentsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def BeginTransaction(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.BeginTransactionRequest, google.firestore.v1beta1.firestore_pb2.BeginTransactionResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Commit(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.CommitRequest, google.firestore.v1beta1.firestore_pb2.CommitResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Rollback(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.RollbackRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def RunQuery(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.RunQueryRequest, google.firestore.v1beta1.firestore_pb2.RunQueryResponse]') -> None:
        pass

    @abc.abstractmethod
    async def PartitionQuery(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.PartitionQueryRequest, google.firestore.v1beta1.firestore_pb2.PartitionQueryResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Write(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.WriteRequest, google.firestore.v1beta1.firestore_pb2.WriteResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Listen(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.ListenRequest, google.firestore.v1beta1.firestore_pb2.ListenResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListCollectionIds(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.ListCollectionIdsRequest, google.firestore.v1beta1.firestore_pb2.ListCollectionIdsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def BatchWrite(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.BatchWriteRequest, google.firestore.v1beta1.firestore_pb2.BatchWriteResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CreateDocument(self, stream: 'grpclib.server.Stream[google.firestore.v1beta1.firestore_pb2.CreateDocumentRequest, google.firestore.v1beta1.document_pb2.Document]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.firestore.v1beta1.Firestore/GetDocument': grpclib.const.Handler(
                self.GetDocument,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.firestore.v1beta1.firestore_pb2.GetDocumentRequest,
                google.firestore.v1beta1.document_pb2.Document,
            ),
            '/google.firestore.v1beta1.Firestore/ListDocuments': grpclib.const.Handler(
                self.ListDocuments,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.firestore.v1beta1.firestore_pb2.ListDocumentsRequest,
                google.firestore.v1beta1.firestore_pb2.ListDocumentsResponse,
            ),
            '/google.firestore.v1beta1.Firestore/UpdateDocument': grpclib.const.Handler(
                self.UpdateDocument,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.firestore.v1beta1.firestore_pb2.UpdateDocumentRequest,
                google.firestore.v1beta1.document_pb2.Document,
            ),
            '/google.firestore.v1beta1.Firestore/DeleteDocument': grpclib.const.Handler(
                self.DeleteDocument,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.firestore.v1beta1.firestore_pb2.DeleteDocumentRequest,
                google.protobuf.empty_pb2.Empty,
            ),
            '/google.firestore.v1beta1.Firestore/BatchGetDocuments': grpclib.const.Handler(
                self.BatchGetDocuments,
                grpclib.const.Cardinality.UNARY_STREAM,
                google.firestore.v1beta1.firestore_pb2.BatchGetDocumentsRequest,
                google.firestore.v1beta1.firestore_pb2.BatchGetDocumentsResponse,
            ),
            '/google.firestore.v1beta1.Firestore/BeginTransaction': grpclib.const.Handler(
                self.BeginTransaction,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.firestore.v1beta1.firestore_pb2.BeginTransactionRequest,
                google.firestore.v1beta1.firestore_pb2.BeginTransactionResponse,
            ),
            '/google.firestore.v1beta1.Firestore/Commit': grpclib.const.Handler(
                self.Commit,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.firestore.v1beta1.firestore_pb2.CommitRequest,
                google.firestore.v1beta1.firestore_pb2.CommitResponse,
            ),
            '/google.firestore.v1beta1.Firestore/Rollback': grpclib.const.Handler(
                self.Rollback,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.firestore.v1beta1.firestore_pb2.RollbackRequest,
                google.protobuf.empty_pb2.Empty,
            ),
            '/google.firestore.v1beta1.Firestore/RunQuery': grpclib.const.Handler(
                self.RunQuery,
                grpclib.const.Cardinality.UNARY_STREAM,
                google.firestore.v1beta1.firestore_pb2.RunQueryRequest,
                google.firestore.v1beta1.firestore_pb2.RunQueryResponse,
            ),
            '/google.firestore.v1beta1.Firestore/PartitionQuery': grpclib.const.Handler(
                self.PartitionQuery,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.firestore.v1beta1.firestore_pb2.PartitionQueryRequest,
                google.firestore.v1beta1.firestore_pb2.PartitionQueryResponse,
            ),
            '/google.firestore.v1beta1.Firestore/Write': grpclib.const.Handler(
                self.Write,
                grpclib.const.Cardinality.STREAM_STREAM,
                google.firestore.v1beta1.firestore_pb2.WriteRequest,
                google.firestore.v1beta1.firestore_pb2.WriteResponse,
            ),
            '/google.firestore.v1beta1.Firestore/Listen': grpclib.const.Handler(
                self.Listen,
                grpclib.const.Cardinality.STREAM_STREAM,
                google.firestore.v1beta1.firestore_pb2.ListenRequest,
                google.firestore.v1beta1.firestore_pb2.ListenResponse,
            ),
            '/google.firestore.v1beta1.Firestore/ListCollectionIds': grpclib.const.Handler(
                self.ListCollectionIds,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.firestore.v1beta1.firestore_pb2.ListCollectionIdsRequest,
                google.firestore.v1beta1.firestore_pb2.ListCollectionIdsResponse,
            ),
            '/google.firestore.v1beta1.Firestore/BatchWrite': grpclib.const.Handler(
                self.BatchWrite,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.firestore.v1beta1.firestore_pb2.BatchWriteRequest,
                google.firestore.v1beta1.firestore_pb2.BatchWriteResponse,
            ),
            '/google.firestore.v1beta1.Firestore/CreateDocument': grpclib.const.Handler(
                self.CreateDocument,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.firestore.v1beta1.firestore_pb2.CreateDocumentRequest,
                google.firestore.v1beta1.document_pb2.Document,
            ),
        }


class FirestoreStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetDocument = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/GetDocument',
            google.firestore.v1beta1.firestore_pb2.GetDocumentRequest,
            google.firestore.v1beta1.document_pb2.Document,
        )
        self.ListDocuments = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/ListDocuments',
            google.firestore.v1beta1.firestore_pb2.ListDocumentsRequest,
            google.firestore.v1beta1.firestore_pb2.ListDocumentsResponse,
        )
        self.UpdateDocument = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/UpdateDocument',
            google.firestore.v1beta1.firestore_pb2.UpdateDocumentRequest,
            google.firestore.v1beta1.document_pb2.Document,
        )
        self.DeleteDocument = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/DeleteDocument',
            google.firestore.v1beta1.firestore_pb2.DeleteDocumentRequest,
            google.protobuf.empty_pb2.Empty,
        )
        self.BatchGetDocuments = grpclib.client.UnaryStreamMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/BatchGetDocuments',
            google.firestore.v1beta1.firestore_pb2.BatchGetDocumentsRequest,
            google.firestore.v1beta1.firestore_pb2.BatchGetDocumentsResponse,
        )
        self.BeginTransaction = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/BeginTransaction',
            google.firestore.v1beta1.firestore_pb2.BeginTransactionRequest,
            google.firestore.v1beta1.firestore_pb2.BeginTransactionResponse,
        )
        self.Commit = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/Commit',
            google.firestore.v1beta1.firestore_pb2.CommitRequest,
            google.firestore.v1beta1.firestore_pb2.CommitResponse,
        )
        self.Rollback = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/Rollback',
            google.firestore.v1beta1.firestore_pb2.RollbackRequest,
            google.protobuf.empty_pb2.Empty,
        )
        self.RunQuery = grpclib.client.UnaryStreamMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/RunQuery',
            google.firestore.v1beta1.firestore_pb2.RunQueryRequest,
            google.firestore.v1beta1.firestore_pb2.RunQueryResponse,
        )
        self.PartitionQuery = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/PartitionQuery',
            google.firestore.v1beta1.firestore_pb2.PartitionQueryRequest,
            google.firestore.v1beta1.firestore_pb2.PartitionQueryResponse,
        )
        self.Write = grpclib.client.StreamStreamMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/Write',
            google.firestore.v1beta1.firestore_pb2.WriteRequest,
            google.firestore.v1beta1.firestore_pb2.WriteResponse,
        )
        self.Listen = grpclib.client.StreamStreamMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/Listen',
            google.firestore.v1beta1.firestore_pb2.ListenRequest,
            google.firestore.v1beta1.firestore_pb2.ListenResponse,
        )
        self.ListCollectionIds = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/ListCollectionIds',
            google.firestore.v1beta1.firestore_pb2.ListCollectionIdsRequest,
            google.firestore.v1beta1.firestore_pb2.ListCollectionIdsResponse,
        )
        self.BatchWrite = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/BatchWrite',
            google.firestore.v1beta1.firestore_pb2.BatchWriteRequest,
            google.firestore.v1beta1.firestore_pb2.BatchWriteResponse,
        )
        self.CreateDocument = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.firestore.v1beta1.Firestore/CreateDocument',
            google.firestore.v1beta1.firestore_pb2.CreateDocumentRequest,
            google.firestore.v1beta1.document_pb2.Document,
        )
