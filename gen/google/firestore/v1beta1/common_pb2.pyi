"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class DocumentMask(google.protobuf.message.Message):
    """A set of field paths on a document.
    Used to restrict a get or update operation on a document to a subset of its
    fields.
    This is different from standard field masks, as this is always scoped to a
    [Document][google.firestore.v1beta1.Document], and takes in account the dynamic nature of [Value][google.firestore.v1beta1.Value].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FIELD_PATHS_FIELD_NUMBER: builtins.int
    @property
    def field_paths(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The list of field paths in the mask. See [Document.fields][google.firestore.v1beta1.Document.fields] for a field
        path syntax reference.
        """
        pass
    def __init__(self,
        *,
        field_paths : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["field_paths",b"field_paths"]) -> None: ...
global___DocumentMask = DocumentMask

class Precondition(google.protobuf.message.Message):
    """A precondition on a document, used for conditional operations."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    EXISTS_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    exists: builtins.bool = ...
    """When set to `true`, the target document must exist.
    When set to `false`, the target document must not exist.
    """

    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """When set, the target document must exist and have been last updated at
        that time.
        """
        pass
    def __init__(self,
        *,
        exists : builtins.bool = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["condition_type",b"condition_type","exists",b"exists","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["condition_type",b"condition_type","exists",b"exists","update_time",b"update_time"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["condition_type",b"condition_type"]) -> typing.Optional[typing_extensions.Literal["exists","update_time"]]: ...
global___Precondition = Precondition

class TransactionOptions(google.protobuf.message.Message):
    """Options for creating a new transaction."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ReadWrite(google.protobuf.message.Message):
        """Options for a transaction that can be used to read and write documents."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        RETRY_TRANSACTION_FIELD_NUMBER: builtins.int
        retry_transaction: builtins.bytes = ...
        """An optional transaction to retry."""

        def __init__(self,
            *,
            retry_transaction : builtins.bytes = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["retry_transaction",b"retry_transaction"]) -> None: ...

    class ReadOnly(google.protobuf.message.Message):
        """Options for a transaction that can only be used to read documents."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        READ_TIME_FIELD_NUMBER: builtins.int
        @property
        def read_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
            """Reads documents at the given time.
            This may not be older than 60 seconds.
            """
            pass
        def __init__(self,
            *,
            read_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["consistency_selector",b"consistency_selector","read_time",b"read_time"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["consistency_selector",b"consistency_selector","read_time",b"read_time"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["consistency_selector",b"consistency_selector"]) -> typing.Optional[typing_extensions.Literal["read_time"]]: ...

    READ_ONLY_FIELD_NUMBER: builtins.int
    READ_WRITE_FIELD_NUMBER: builtins.int
    @property
    def read_only(self) -> global___TransactionOptions.ReadOnly:
        """The transaction can only be used for read operations."""
        pass
    @property
    def read_write(self) -> global___TransactionOptions.ReadWrite:
        """The transaction can be used for both read and write operations."""
        pass
    def __init__(self,
        *,
        read_only : typing.Optional[global___TransactionOptions.ReadOnly] = ...,
        read_write : typing.Optional[global___TransactionOptions.ReadWrite] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["mode",b"mode","read_only",b"read_only","read_write",b"read_write"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["mode",b"mode","read_only",b"read_only","read_write",b"read_write"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["mode",b"mode"]) -> typing.Optional[typing_extensions.Literal["read_only","read_write"]]: ...
global___TransactionOptions = TransactionOptions
