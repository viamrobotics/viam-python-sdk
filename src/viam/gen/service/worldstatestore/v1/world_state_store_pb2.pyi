"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
from .... import common
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import sys
import typing
if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _TransformChangeType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _TransformChangeTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TransformChangeType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    TRANSFORM_CHANGE_TYPE_UNSPECIFIED: _TransformChangeType.ValueType
    TRANSFORM_CHANGE_TYPE_ADDED: _TransformChangeType.ValueType
    TRANSFORM_CHANGE_TYPE_REMOVED: _TransformChangeType.ValueType
    TRANSFORM_CHANGE_TYPE_UPDATED: _TransformChangeType.ValueType

class TransformChangeType(_TransformChangeType, metaclass=_TransformChangeTypeEnumTypeWrapper):
    ...
TRANSFORM_CHANGE_TYPE_UNSPECIFIED: TransformChangeType.ValueType
TRANSFORM_CHANGE_TYPE_ADDED: TransformChangeType.ValueType
TRANSFORM_CHANGE_TYPE_REMOVED: TransformChangeType.ValueType
TRANSFORM_CHANGE_TYPE_UPDATED: TransformChangeType.ValueType
global___TransformChangeType = TransformChangeType

@typing.final
class ListUUIDsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    EXTRA_FIELD_NUMBER: builtins.int
    name: builtins.str
    'Name of the world object store service'

    @property
    def extra(self) -> google.protobuf.struct_pb2.Struct:
        """Additional arguments to the method"""

    def __init__(self, *, name: builtins.str=..., extra: google.protobuf.struct_pb2.Struct | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['extra', b'extra']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['extra', b'extra', 'name', b'name']) -> None:
        ...
global___ListUUIDsRequest = ListUUIDsRequest

@typing.final
class ListUUIDsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    UUIDS_FIELD_NUMBER: builtins.int

    @property
    def uuids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bytes]:
        ...

    def __init__(self, *, uuids: collections.abc.Iterable[builtins.bytes] | None=...) -> None:
        ...

    def ClearField(self, field_name: typing.Literal['uuids', b'uuids']) -> None:
        ...
global___ListUUIDsResponse = ListUUIDsResponse

@typing.final
class GetTransformRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    UUID_FIELD_NUMBER: builtins.int
    EXTRA_FIELD_NUMBER: builtins.int
    name: builtins.str
    'Name of the world object store service'
    uuid: builtins.bytes

    @property
    def extra(self) -> google.protobuf.struct_pb2.Struct:
        """Additional arguments to the method"""

    def __init__(self, *, name: builtins.str=..., uuid: builtins.bytes=..., extra: google.protobuf.struct_pb2.Struct | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['extra', b'extra']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['extra', b'extra', 'name', b'name', 'uuid', b'uuid']) -> None:
        ...
global___GetTransformRequest = GetTransformRequest

@typing.final
class GetTransformResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TRANSFORM_FIELD_NUMBER: builtins.int

    @property
    def transform(self) -> common.v1.common_pb2.Transform:
        ...

    def __init__(self, *, transform: common.v1.common_pb2.Transform | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['transform', b'transform']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['transform', b'transform']) -> None:
        ...
global___GetTransformResponse = GetTransformResponse

@typing.final
class StreamTransformChangesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    EXTRA_FIELD_NUMBER: builtins.int
    name: builtins.str
    'Name of the world object store service'

    @property
    def extra(self) -> google.protobuf.struct_pb2.Struct:
        """Additional arguments to the method"""

    def __init__(self, *, name: builtins.str=..., extra: google.protobuf.struct_pb2.Struct | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['extra', b'extra']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['extra', b'extra', 'name', b'name']) -> None:
        ...
global___StreamTransformChangesRequest = StreamTransformChangesRequest

@typing.final
class StreamTransformChangesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CHANGE_TYPE_FIELD_NUMBER: builtins.int
    TRANSFORM_FIELD_NUMBER: builtins.int
    UPDATED_FIELDS_FIELD_NUMBER: builtins.int
    change_type: global___TransformChangeType.ValueType

    @property
    def transform(self) -> common.v1.common_pb2.Transform:
        ...

    @property
    def updated_fields(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """The field mask of the transform that has changed, if any. For added transforms, this will be empty. For updated
        transforms, this will be the fields that have changed. For removed transforms, this will be the transform's UUID
        path.
        """

    def __init__(self, *, change_type: global___TransformChangeType.ValueType=..., transform: common.v1.common_pb2.Transform | None=..., updated_fields: google.protobuf.field_mask_pb2.FieldMask | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['transform', b'transform', 'updated_fields', b'updated_fields']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['change_type', b'change_type', 'transform', b'transform', 'updated_fields', b'updated_fields']) -> None:
        ...
global___StreamTransformChangesResponse = StreamTransformChangesResponse