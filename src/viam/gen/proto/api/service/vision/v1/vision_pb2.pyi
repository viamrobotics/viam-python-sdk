"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.struct_pb2
from ...... import proto
import typing
import typing_extensions
DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class GetDetectorNamesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text

    def __init__(self, *, name: typing.Text=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['name', b'name']) -> None:
        ...
global___GetDetectorNamesRequest = GetDetectorNamesRequest

class GetDetectorNamesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DETECTOR_NAMES_FIELD_NUMBER: builtins.int

    @property
    def detector_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """detectors in the registry"""
        pass

    def __init__(self, *, detector_names: typing.Optional[typing.Iterable[typing.Text]]=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['detector_names', b'detector_names']) -> None:
        ...
global___GetDetectorNamesResponse = GetDetectorNamesResponse

class AddDetectorRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    DETECTOR_NAME_FIELD_NUMBER: builtins.int
    DETECTOR_MODEL_TYPE_FIELD_NUMBER: builtins.int
    DETECTOR_PARAMETERS_FIELD_NUMBER: builtins.int
    name: typing.Text
    detector_name: typing.Text
    detector_model_type: typing.Text

    @property
    def detector_parameters(self) -> google.protobuf.struct_pb2.Struct:
        ...

    def __init__(self, *, name: typing.Text=..., detector_name: typing.Text=..., detector_model_type: typing.Text=..., detector_parameters: typing.Optional[google.protobuf.struct_pb2.Struct]=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['detector_parameters', b'detector_parameters']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['detector_model_type', b'detector_model_type', 'detector_name', b'detector_name', 'detector_parameters', b'detector_parameters', 'name', b'name']) -> None:
        ...
global___AddDetectorRequest = AddDetectorRequest

class AddDetectorResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(self) -> None:
        ...
global___AddDetectorResponse = AddDetectorResponse

class GetDetectionsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    IMAGE_FIELD_NUMBER: builtins.int
    WIDTH_FIELD_NUMBER: builtins.int
    HEIGHT_FIELD_NUMBER: builtins.int
    MIME_TYPE_FIELD_NUMBER: builtins.int
    DETECTOR_NAME_FIELD_NUMBER: builtins.int
    name: typing.Text
    'name of the vision service'
    image: builtins.bytes
    'the image, encoded as bytes'
    width: builtins.int
    'the width of the image'
    height: builtins.int
    'the height of the image'
    mime_type: typing.Text
    'the actual MIME type of image'
    detector_name: typing.Text
    'name of the registered detector to use'

    def __init__(self, *, name: typing.Text=..., image: builtins.bytes=..., width: builtins.int=..., height: builtins.int=..., mime_type: typing.Text=..., detector_name: typing.Text=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['detector_name', b'detector_name', 'height', b'height', 'image', b'image', 'mime_type', b'mime_type', 'name', b'name', 'width', b'width']) -> None:
        ...
global___GetDetectionsRequest = GetDetectionsRequest

class GetDetectionsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DETECTIONS_FIELD_NUMBER: builtins.int

    @property
    def detections(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Detection]:
        """the bounding boxes and labels"""
        pass

    def __init__(self, *, detections: typing.Optional[typing.Iterable[global___Detection]]=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['detections', b'detections']) -> None:
        ...
global___GetDetectionsResponse = GetDetectionsResponse

class GetDetectionsFromCameraRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    CAMERA_NAME_FIELD_NUMBER: builtins.int
    DETECTOR_NAME_FIELD_NUMBER: builtins.int
    name: typing.Text
    camera_name: typing.Text
    'name of camera source to use as input'
    detector_name: typing.Text
    'name of the registered detector to use'

    def __init__(self, *, name: typing.Text=..., camera_name: typing.Text=..., detector_name: typing.Text=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['camera_name', b'camera_name', 'detector_name', b'detector_name', 'name', b'name']) -> None:
        ...
global___GetDetectionsFromCameraRequest = GetDetectionsFromCameraRequest

class GetDetectionsFromCameraResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DETECTIONS_FIELD_NUMBER: builtins.int

    @property
    def detections(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Detection]:
        """the bounding boxes and labels"""
        pass

    def __init__(self, *, detections: typing.Optional[typing.Iterable[global___Detection]]=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['detections', b'detections']) -> None:
        ...
global___GetDetectionsFromCameraResponse = GetDetectionsFromCameraResponse

class Detection(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    X_MIN_FIELD_NUMBER: builtins.int
    Y_MIN_FIELD_NUMBER: builtins.int
    X_MAX_FIELD_NUMBER: builtins.int
    Y_MAX_FIELD_NUMBER: builtins.int
    CONFIDENCE_FIELD_NUMBER: builtins.int
    CLASS_NAME_FIELD_NUMBER: builtins.int
    x_min: builtins.int
    'the four corners of the box'
    y_min: builtins.int
    x_max: builtins.int
    y_max: builtins.int
    confidence: builtins.float
    'the confidence of the detection'
    class_name: typing.Text
    'label associated with the detected object'

    def __init__(self, *, x_min: typing.Optional[builtins.int]=..., y_min: typing.Optional[builtins.int]=..., x_max: typing.Optional[builtins.int]=..., y_max: typing.Optional[builtins.int]=..., confidence: builtins.float=..., class_name: typing.Text=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['_x_max', b'_x_max', '_x_min', b'_x_min', '_y_max', b'_y_max', '_y_min', b'_y_min', 'x_max', b'x_max', 'x_min', b'x_min', 'y_max', b'y_max', 'y_min', b'y_min']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['_x_max', b'_x_max', '_x_min', b'_x_min', '_y_max', b'_y_max', '_y_min', b'_y_min', 'class_name', b'class_name', 'confidence', b'confidence', 'x_max', b'x_max', 'x_min', b'x_min', 'y_max', b'y_max', 'y_min', b'y_min']) -> None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal['_x_max', b'_x_max']) -> typing.Optional[typing_extensions.Literal['x_max']]:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal['_x_min', b'_x_min']) -> typing.Optional[typing_extensions.Literal['x_min']]:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal['_y_max', b'_y_max']) -> typing.Optional[typing_extensions.Literal['y_max']]:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal['_y_min', b'_y_min']) -> typing.Optional[typing_extensions.Literal['y_min']]:
        ...
global___Detection = Detection

class GetSegmenterNamesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text

    def __init__(self, *, name: typing.Text=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['name', b'name']) -> None:
        ...
global___GetSegmenterNamesRequest = GetSegmenterNamesRequest

class GetSegmenterNamesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SEGMENTER_NAMES_FIELD_NUMBER: builtins.int

    @property
    def segmenter_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """segmenters in the registry"""
        pass

    def __init__(self, *, segmenter_names: typing.Optional[typing.Iterable[typing.Text]]=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['segmenter_names', b'segmenter_names']) -> None:
        ...
global___GetSegmenterNamesResponse = GetSegmenterNamesResponse

class GetSegmenterParametersRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    SEGMENTER_NAME_FIELD_NUMBER: builtins.int
    name: typing.Text
    segmenter_name: typing.Text
    'Name of the segmentation algo'

    def __init__(self, *, name: typing.Text=..., segmenter_name: typing.Text=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['name', b'name', 'segmenter_name', b'segmenter_name']) -> None:
        ...
global___GetSegmenterParametersRequest = GetSegmenterParametersRequest

class TypedParameter(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    name: typing.Text
    type: typing.Text

    def __init__(self, *, name: typing.Text=..., type: typing.Text=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['name', b'name', 'type', b'type']) -> None:
        ...
global___TypedParameter = TypedParameter

class GetSegmenterParametersResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SEGMENTER_PARAMETERS_FIELD_NUMBER: builtins.int

    @property
    def segmenter_parameters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TypedParameter]:
        """parameter names of the segmenter in the request"""
        pass

    def __init__(self, *, segmenter_parameters: typing.Optional[typing.Iterable[global___TypedParameter]]=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['segmenter_parameters', b'segmenter_parameters']) -> None:
        ...
global___GetSegmenterParametersResponse = GetSegmenterParametersResponse

class GetObjectPointCloudsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    CAMERA_NAME_FIELD_NUMBER: builtins.int
    SEGMENTER_NAME_FIELD_NUMBER: builtins.int
    MIME_TYPE_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    name: typing.Text
    camera_name: typing.Text
    'Name of a camera'
    segmenter_name: typing.Text
    'Name of the segmentation algorithm'
    mime_type: typing.Text
    'Requested MIME type of response'

    @property
    def parameters(self) -> google.protobuf.struct_pb2.Struct:
        """parameters for the chosen segmenter"""
        pass

    def __init__(self, *, name: typing.Text=..., camera_name: typing.Text=..., segmenter_name: typing.Text=..., mime_type: typing.Text=..., parameters: typing.Optional[google.protobuf.struct_pb2.Struct]=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['parameters', b'parameters']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['camera_name', b'camera_name', 'mime_type', b'mime_type', 'name', b'name', 'parameters', b'parameters', 'segmenter_name', b'segmenter_name']) -> None:
        ...
global___GetObjectPointCloudsRequest = GetObjectPointCloudsRequest

class GetObjectPointCloudsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MIME_TYPE_FIELD_NUMBER: builtins.int
    OBJECTS_FIELD_NUMBER: builtins.int
    mime_type: typing.Text
    'Actual MIME type of response'

    @property
    def objects(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[proto.api.common.v1.common_pb2.PointCloudObject]:
        """List of objects in the scene"""
        pass

    def __init__(self, *, mime_type: typing.Text=..., objects: typing.Optional[typing.Iterable[proto.api.common.v1.common_pb2.PointCloudObject]]=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['mime_type', b'mime_type', 'objects', b'objects']) -> None:
        ...
global___GetObjectPointCloudsResponse = GetObjectPointCloudsResponse