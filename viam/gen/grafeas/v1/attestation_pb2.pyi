"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import grafeas.v1.common_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class AttestationNote(google.protobuf.message.Message):
    """An attestation wrapper with a PGP-compatible signature. This message only
    supports `ATTACHED` signatures, where the payload that is signed is included
    alongside the signature itself in the same file.

    Note kind that represents a logical attestation "role" or "authority". For
    example, an organization might have one `Authority` for "QA" and one for
    "build". This note is intended to act strictly as a grouping mechanism for
    the attached occurrences (Attestations). This grouping mechanism also
    provides a security boundary, since IAM ACLs gate the ability for a principle
    to attach an occurrence to a given note. It also provides a single point of
    lookup to find all attached attestation occurrences, even if they don't all
    live in the same project.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Hint(google.protobuf.message.Message):
        """This submessage provides human-readable hints about the purpose of the
        authority. Because the name of a note acts as its resource reference, it is
        important to disambiguate the canonical name of the Note (which might be a
        UUID for security purposes) from "readable" names more suitable for debug
        output. Note that these hints should not be used to look up authorities in
        security sensitive contexts, such as when looking up attestations to
        verify.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        HUMAN_READABLE_NAME_FIELD_NUMBER: builtins.int
        human_readable_name: typing.Text = ...
        """Required. The human readable name of this attestation authority, for
        example "qa".
        """

        def __init__(self,
            *,
            human_readable_name : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["human_readable_name",b"human_readable_name"]) -> None: ...

    HINT_FIELD_NUMBER: builtins.int
    @property
    def hint(self) -> global___AttestationNote.Hint:
        """Hint hints at the purpose of the attestation authority."""
        pass
    def __init__(self,
        *,
        hint : typing.Optional[global___AttestationNote.Hint] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["hint",b"hint"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["hint",b"hint"]) -> None: ...
global___AttestationNote = AttestationNote

class Jwt(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    COMPACT_JWT_FIELD_NUMBER: builtins.int
    compact_jwt: typing.Text = ...
    """The compact encoding of a JWS, which is always three base64 encoded strings
    joined by periods. For details, see:
    https://tools.ietf.org/html/rfc7515.html#section-3.1
    """

    def __init__(self,
        *,
        compact_jwt : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["compact_jwt",b"compact_jwt"]) -> None: ...
global___Jwt = Jwt

class AttestationOccurrence(google.protobuf.message.Message):
    """Occurrence that represents a single "attestation". The authenticity of an
    attestation can be verified using the attached signature. If the verifier
    trusts the public key of the signer, then verifying the signature is
    sufficient to establish trust. In this circumstance, the authority to which
    this attestation is attached is primarily useful for lookup (how to find
    this attestation if you already know the authority and artifact to be
    verified) and intent (for which authority this attestation was intended to
    sign.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SERIALIZED_PAYLOAD_FIELD_NUMBER: builtins.int
    SIGNATURES_FIELD_NUMBER: builtins.int
    JWTS_FIELD_NUMBER: builtins.int
    serialized_payload: builtins.bytes = ...
    """Required. The serialized payload that is verified by one or more
    `signatures`.
    """

    @property
    def signatures(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[grafeas.v1.common_pb2.Signature]:
        """One or more signatures over `serialized_payload`.  Verifier implementations
        should consider this attestation message verified if at least one
        `signature` verifies `serialized_payload`.  See `Signature` in common.proto
        for more details on signature structure and verification.
        """
        pass
    @property
    def jwts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Jwt]:
        """One or more JWTs encoding a self-contained attestation.
        Each JWT encodes the payload that it verifies within the JWT itself.
        Verifier implementation SHOULD ignore the `serialized_payload` field
        when verifying these JWTs.
        If only JWTs are present on this AttestationOccurrence, then the
        `serialized_payload` SHOULD be left empty.
        Each JWT SHOULD encode a claim specific to the `resource_uri` of this
        Occurrence, but this is not validated by Grafeas metadata API
        implementations.  The JWT itself is opaque to Grafeas.
        """
        pass
    def __init__(self,
        *,
        serialized_payload : builtins.bytes = ...,
        signatures : typing.Optional[typing.Iterable[grafeas.v1.common_pb2.Signature]] = ...,
        jwts : typing.Optional[typing.Iterable[global___Jwt]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["jwts",b"jwts","serialized_payload",b"serialized_payload","signatures",b"signatures"]) -> None: ...
global___AttestationOccurrence = AttestationOccurrence
