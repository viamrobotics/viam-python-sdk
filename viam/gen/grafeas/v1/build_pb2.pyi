"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import grafeas.v1.intoto_provenance_pb2
import grafeas.v1.intoto_statement_pb2
import grafeas.v1.provenance_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class BuildNote(google.protobuf.message.Message):
    """Note holding the version of the provider's builder and the signature of the
    provenance message in the build details occurrence.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BUILDER_VERSION_FIELD_NUMBER: builtins.int
    builder_version: typing.Text = ...
    """Required. Immutable. Version of the builder which produced this build."""

    def __init__(self,
        *,
        builder_version : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["builder_version",b"builder_version"]) -> None: ...
global___BuildNote = BuildNote

class BuildOccurrence(google.protobuf.message.Message):
    """Details of a build occurrence."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROVENANCE_FIELD_NUMBER: builtins.int
    PROVENANCE_BYTES_FIELD_NUMBER: builtins.int
    INTOTO_PROVENANCE_FIELD_NUMBER: builtins.int
    INTOTO_STATEMENT_FIELD_NUMBER: builtins.int
    @property
    def provenance(self) -> grafeas.v1.provenance_pb2.BuildProvenance:
        """The actual provenance for the build."""
        pass
    provenance_bytes: typing.Text = ...
    """Serialized JSON representation of the provenance, used in generating the
    build signature in the corresponding build note. After verifying the
    signature, `provenance_bytes` can be unmarshalled and compared to the
    provenance to confirm that it is unchanged. A base64-encoded string
    representation of the provenance bytes is used for the signature in order
    to interoperate with openssl which expects this format for signature
    verification.

    The serialized form is captured both to avoid ambiguity in how the
    provenance is marshalled to json as well to prevent incompatibilities with
    future changes.
    """

    @property
    def intoto_provenance(self) -> grafeas.v1.intoto_provenance_pb2.InTotoProvenance:
        """Deprecated. See InTotoStatement for the replacement.
        In-toto Provenance representation as defined in spec.
        """
        pass
    @property
    def intoto_statement(self) -> grafeas.v1.intoto_statement_pb2.InTotoStatement:
        """In-toto Statement representation as defined in spec.
        The intoto_statement can contain any type of provenance. The serialized
        payload of the statement can be stored and signed in the Occurrence's
        envelope.
        """
        pass
    def __init__(self,
        *,
        provenance : typing.Optional[grafeas.v1.provenance_pb2.BuildProvenance] = ...,
        provenance_bytes : typing.Text = ...,
        intoto_provenance : typing.Optional[grafeas.v1.intoto_provenance_pb2.InTotoProvenance] = ...,
        intoto_statement : typing.Optional[grafeas.v1.intoto_statement_pb2.InTotoStatement] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["intoto_provenance",b"intoto_provenance","intoto_statement",b"intoto_statement","provenance",b"provenance"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["intoto_provenance",b"intoto_provenance","intoto_statement",b"intoto_statement","provenance",b"provenance","provenance_bytes",b"provenance_bytes"]) -> None: ...
global___BuildOccurrence = BuildOccurrence
