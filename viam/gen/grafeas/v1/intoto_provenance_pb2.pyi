"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Recipe(google.protobuf.message.Message):
    """Spec defined at
    https://github.com/in-toto/attestation/blob/main/spec/predicates/provenance.md

    Steps taken to build the artifact.
    For a TaskRun, typically each container corresponds to one step in the
    recipe.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TYPE_FIELD_NUMBER: builtins.int
    DEFINED_IN_MATERIAL_FIELD_NUMBER: builtins.int
    ENTRY_POINT_FIELD_NUMBER: builtins.int
    ARGUMENTS_FIELD_NUMBER: builtins.int
    ENVIRONMENT_FIELD_NUMBER: builtins.int
    type: typing.Text = ...
    """URI indicating what type of recipe was performed. It determines the meaning
    of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
    """

    defined_in_material: builtins.int = ...
    """Index in materials containing the recipe steps that are not implied by
    recipe.type. For example, if the recipe type were "make", then this would
    point to the source containing the Makefile, not the make program itself.
    Set to -1 if the recipe doesn't come from a material, as zero is default
    unset value for int64.
    """

    entry_point: typing.Text = ...
    """String identifying the entry point into the build.
    This is often a path to a configuration file and/or a target label within
    that file. The syntax and meaning are defined by recipe.type. For example,
    if the recipe type were "make", then this would reference the directory in
    which to run make as well as which target to use.
    """

    @property
    def arguments(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.protobuf.any_pb2.Any]:
        """Collection of all external inputs that influenced the build on top of
        recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe
        type were "make", then this might be the flags passed to make aside from
        the target, which is captured in recipe.entryPoint. Since the arguments
        field can greatly vary in structure, depending on the builder and recipe
        type, this is of form "Any".
        """
        pass
    @property
    def environment(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.protobuf.any_pb2.Any]:
        """Any other builder-controlled inputs necessary for correctly evaluating the
        recipe. Usually only needed for reproducing the build but not evaluated as
        part of policy. Since the environment field can greatly vary in structure,
        depending on the builder and recipe type, this is of form "Any".
        """
        pass
    def __init__(self,
        *,
        type : typing.Text = ...,
        defined_in_material : builtins.int = ...,
        entry_point : typing.Text = ...,
        arguments : typing.Optional[typing.Iterable[google.protobuf.any_pb2.Any]] = ...,
        environment : typing.Optional[typing.Iterable[google.protobuf.any_pb2.Any]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["arguments",b"arguments","defined_in_material",b"defined_in_material","entry_point",b"entry_point","environment",b"environment","type",b"type"]) -> None: ...
global___Recipe = Recipe

class Completeness(google.protobuf.message.Message):
    """Indicates that the builder claims certain fields in this message to be
    complete.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ARGUMENTS_FIELD_NUMBER: builtins.int
    ENVIRONMENT_FIELD_NUMBER: builtins.int
    MATERIALS_FIELD_NUMBER: builtins.int
    arguments: builtins.bool = ...
    """If true, the builder claims that recipe.arguments is complete, meaning that
    all external inputs are properly captured in the recipe.
    """

    environment: builtins.bool = ...
    """If true, the builder claims that recipe.environment is claimed to be
    complete.
    """

    materials: builtins.bool = ...
    """If true, the builder claims that materials are complete, usually through
    some controls to prevent network access. Sometimes called "hermetic".
    """

    def __init__(self,
        *,
        arguments : builtins.bool = ...,
        environment : builtins.bool = ...,
        materials : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["arguments",b"arguments","environment",b"environment","materials",b"materials"]) -> None: ...
global___Completeness = Completeness

class Metadata(google.protobuf.message.Message):
    """Other properties of the build."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BUILD_INVOCATION_ID_FIELD_NUMBER: builtins.int
    BUILD_STARTED_ON_FIELD_NUMBER: builtins.int
    BUILD_FINISHED_ON_FIELD_NUMBER: builtins.int
    COMPLETENESS_FIELD_NUMBER: builtins.int
    REPRODUCIBLE_FIELD_NUMBER: builtins.int
    build_invocation_id: typing.Text = ...
    """Identifies the particular build invocation, which can be useful for finding
    associated logs or other ad-hoc analysis. The value SHOULD be globally
    unique, per in-toto Provenance spec.
    """

    @property
    def build_started_on(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The timestamp of when the build started."""
        pass
    @property
    def build_finished_on(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The timestamp of when the build completed."""
        pass
    @property
    def completeness(self) -> global___Completeness:
        """Indicates that the builder claims certain fields in this message to be
        complete.
        """
        pass
    reproducible: builtins.bool = ...
    """If true, the builder claims that running the recipe on materials will
    produce bit-for-bit identical output.
    """

    def __init__(self,
        *,
        build_invocation_id : typing.Text = ...,
        build_started_on : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        build_finished_on : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        completeness : typing.Optional[global___Completeness] = ...,
        reproducible : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["build_finished_on",b"build_finished_on","build_started_on",b"build_started_on","completeness",b"completeness"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["build_finished_on",b"build_finished_on","build_invocation_id",b"build_invocation_id","build_started_on",b"build_started_on","completeness",b"completeness","reproducible",b"reproducible"]) -> None: ...
global___Metadata = Metadata

class BuilderConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ID_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    def __init__(self,
        *,
        id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id"]) -> None: ...
global___BuilderConfig = BuilderConfig

class InTotoProvenance(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BUILDER_CONFIG_FIELD_NUMBER: builtins.int
    RECIPE_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    MATERIALS_FIELD_NUMBER: builtins.int
    @property
    def builder_config(self) -> global___BuilderConfig:
        """required"""
        pass
    @property
    def recipe(self) -> global___Recipe:
        """Identifies the configuration used for the build.
        When combined with materials, this SHOULD fully describe the build,
        such that re-running this recipe results in bit-for-bit identical output
        (if the build is reproducible).
        required
        """
        pass
    @property
    def metadata(self) -> global___Metadata: ...
    @property
    def materials(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The collection of artifacts that influenced the build including sources,
        dependencies, build tools, base images, and so on. This is considered to be
        incomplete unless metadata.completeness.materials is true. Unset or null is
        equivalent to empty.
        """
        pass
    def __init__(self,
        *,
        builder_config : typing.Optional[global___BuilderConfig] = ...,
        recipe : typing.Optional[global___Recipe] = ...,
        metadata : typing.Optional[global___Metadata] = ...,
        materials : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["builder_config",b"builder_config","metadata",b"metadata","recipe",b"recipe"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["builder_config",b"builder_config","materials",b"materials","metadata",b"metadata","recipe",b"recipe"]) -> None: ...
global___InTotoProvenance = InTotoProvenance
