"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import grafeas.v1.attestation_pb2
import grafeas.v1.build_pb2
import grafeas.v1.common_pb2
import grafeas.v1.compliance_pb2
import grafeas.v1.deployment_pb2
import grafeas.v1.discovery_pb2
import grafeas.v1.dsse_attestation_pb2
import grafeas.v1.image_pb2
import grafeas.v1.package_pb2
import grafeas.v1.upgrade_pb2
import grafeas.v1.vulnerability_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Occurrence(google.protobuf.message.Message):
    """An instance of an analysis type that has been found on a resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    RESOURCE_URI_FIELD_NUMBER: builtins.int
    NOTE_NAME_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    REMEDIATION_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    VULNERABILITY_FIELD_NUMBER: builtins.int
    BUILD_FIELD_NUMBER: builtins.int
    IMAGE_FIELD_NUMBER: builtins.int
    PACKAGE_FIELD_NUMBER: builtins.int
    DEPLOYMENT_FIELD_NUMBER: builtins.int
    DISCOVERY_FIELD_NUMBER: builtins.int
    ATTESTATION_FIELD_NUMBER: builtins.int
    UPGRADE_FIELD_NUMBER: builtins.int
    COMPLIANCE_FIELD_NUMBER: builtins.int
    DSSE_ATTESTATION_FIELD_NUMBER: builtins.int
    ENVELOPE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. The name of the occurrence in the form of
    `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    """

    resource_uri: typing.Text = ...
    """Required. Immutable. A URI that represents the resource for which the
    occurrence applies. For example,
    `https://gcr.io/project/image@sha256:123abc` for a Docker image.
    """

    note_name: typing.Text = ...
    """Required. Immutable. The analysis note associated with this occurrence, in
    the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be
    used as a filter in list requests.
    """

    kind: grafeas.v1.common_pb2.NoteKind.ValueType = ...
    """Output only. This explicitly denotes which of the occurrence details are
    specified. This field can be used as a filter in list requests.
    """

    remediation: typing.Text = ...
    """A description of actions that can be taken to remedy the note."""

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time this occurrence was created."""
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time this occurrence was last updated."""
        pass
    @property
    def vulnerability(self) -> grafeas.v1.vulnerability_pb2.VulnerabilityOccurrence:
        """Describes a security vulnerability."""
        pass
    @property
    def build(self) -> grafeas.v1.build_pb2.BuildOccurrence:
        """Describes a verifiable build."""
        pass
    @property
    def image(self) -> grafeas.v1.image_pb2.ImageOccurrence:
        """Describes how this resource derives from the basis in the associated
        note.
        """
        pass
    @property
    def package(self) -> grafeas.v1.package_pb2.PackageOccurrence:
        """Describes the installation of a package on the linked resource."""
        pass
    @property
    def deployment(self) -> grafeas.v1.deployment_pb2.DeploymentOccurrence:
        """Describes the deployment of an artifact on a runtime."""
        pass
    @property
    def discovery(self) -> grafeas.v1.discovery_pb2.DiscoveryOccurrence:
        """Describes when a resource was discovered."""
        pass
    @property
    def attestation(self) -> grafeas.v1.attestation_pb2.AttestationOccurrence:
        """Describes an attestation of an artifact."""
        pass
    @property
    def upgrade(self) -> grafeas.v1.upgrade_pb2.UpgradeOccurrence:
        """Describes an available package upgrade on the linked resource."""
        pass
    @property
    def compliance(self) -> grafeas.v1.compliance_pb2.ComplianceOccurrence:
        """Describes a compliance violation on a linked resource."""
        pass
    @property
    def dsse_attestation(self) -> grafeas.v1.dsse_attestation_pb2.DSSEAttestationOccurrence:
        """Describes an attestation of an artifact using dsse."""
        pass
    @property
    def envelope(self) -> grafeas.v1.common_pb2.Envelope:
        """https://github.com/secure-systems-lab/dsse"""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        resource_uri : typing.Text = ...,
        note_name : typing.Text = ...,
        kind : grafeas.v1.common_pb2.NoteKind.ValueType = ...,
        remediation : typing.Text = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        vulnerability : typing.Optional[grafeas.v1.vulnerability_pb2.VulnerabilityOccurrence] = ...,
        build : typing.Optional[grafeas.v1.build_pb2.BuildOccurrence] = ...,
        image : typing.Optional[grafeas.v1.image_pb2.ImageOccurrence] = ...,
        package : typing.Optional[grafeas.v1.package_pb2.PackageOccurrence] = ...,
        deployment : typing.Optional[grafeas.v1.deployment_pb2.DeploymentOccurrence] = ...,
        discovery : typing.Optional[grafeas.v1.discovery_pb2.DiscoveryOccurrence] = ...,
        attestation : typing.Optional[grafeas.v1.attestation_pb2.AttestationOccurrence] = ...,
        upgrade : typing.Optional[grafeas.v1.upgrade_pb2.UpgradeOccurrence] = ...,
        compliance : typing.Optional[grafeas.v1.compliance_pb2.ComplianceOccurrence] = ...,
        dsse_attestation : typing.Optional[grafeas.v1.dsse_attestation_pb2.DSSEAttestationOccurrence] = ...,
        envelope : typing.Optional[grafeas.v1.common_pb2.Envelope] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["attestation",b"attestation","build",b"build","compliance",b"compliance","create_time",b"create_time","deployment",b"deployment","details",b"details","discovery",b"discovery","dsse_attestation",b"dsse_attestation","envelope",b"envelope","image",b"image","package",b"package","update_time",b"update_time","upgrade",b"upgrade","vulnerability",b"vulnerability"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["attestation",b"attestation","build",b"build","compliance",b"compliance","create_time",b"create_time","deployment",b"deployment","details",b"details","discovery",b"discovery","dsse_attestation",b"dsse_attestation","envelope",b"envelope","image",b"image","kind",b"kind","name",b"name","note_name",b"note_name","package",b"package","remediation",b"remediation","resource_uri",b"resource_uri","update_time",b"update_time","upgrade",b"upgrade","vulnerability",b"vulnerability"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["details",b"details"]) -> typing.Optional[typing_extensions.Literal["vulnerability","build","image","package","deployment","discovery","attestation","upgrade","compliance","dsse_attestation"]]: ...
global___Occurrence = Occurrence

class Note(google.protobuf.message.Message):
    """A type of analysis that can be done for a resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    SHORT_DESCRIPTION_FIELD_NUMBER: builtins.int
    LONG_DESCRIPTION_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    RELATED_URL_FIELD_NUMBER: builtins.int
    EXPIRATION_TIME_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    RELATED_NOTE_NAMES_FIELD_NUMBER: builtins.int
    VULNERABILITY_FIELD_NUMBER: builtins.int
    BUILD_FIELD_NUMBER: builtins.int
    IMAGE_FIELD_NUMBER: builtins.int
    PACKAGE_FIELD_NUMBER: builtins.int
    DEPLOYMENT_FIELD_NUMBER: builtins.int
    DISCOVERY_FIELD_NUMBER: builtins.int
    ATTESTATION_FIELD_NUMBER: builtins.int
    UPGRADE_FIELD_NUMBER: builtins.int
    COMPLIANCE_FIELD_NUMBER: builtins.int
    DSSE_ATTESTATION_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. The name of the note in the form of
    `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    """

    short_description: typing.Text = ...
    """A one sentence description of this note."""

    long_description: typing.Text = ...
    """A detailed description of this note."""

    kind: grafeas.v1.common_pb2.NoteKind.ValueType = ...
    """Output only. The type of analysis. This field can be used as a filter in
    list requests.
    """

    @property
    def related_url(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[grafeas.v1.common_pb2.RelatedUrl]:
        """URLs associated with this note."""
        pass
    @property
    def expiration_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time of expiration for this note. Empty if note does not expire."""
        pass
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time this note was created. This field can be used as a
        filter in list requests.
        """
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time this note was last updated. This field can be used as
        a filter in list requests.
        """
        pass
    @property
    def related_note_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Other notes related to this note."""
        pass
    @property
    def vulnerability(self) -> grafeas.v1.vulnerability_pb2.VulnerabilityNote:
        """A note describing a package vulnerability."""
        pass
    @property
    def build(self) -> grafeas.v1.build_pb2.BuildNote:
        """A note describing build provenance for a verifiable build."""
        pass
    @property
    def image(self) -> grafeas.v1.image_pb2.ImageNote:
        """A note describing a base image."""
        pass
    @property
    def package(self) -> grafeas.v1.package_pb2.PackageNote:
        """A note describing a package hosted by various package managers."""
        pass
    @property
    def deployment(self) -> grafeas.v1.deployment_pb2.DeploymentNote:
        """A note describing something that can be deployed."""
        pass
    @property
    def discovery(self) -> grafeas.v1.discovery_pb2.DiscoveryNote:
        """A note describing the initial analysis of a resource."""
        pass
    @property
    def attestation(self) -> grafeas.v1.attestation_pb2.AttestationNote:
        """A note describing an attestation role."""
        pass
    @property
    def upgrade(self) -> grafeas.v1.upgrade_pb2.UpgradeNote:
        """A note describing available package upgrades."""
        pass
    @property
    def compliance(self) -> grafeas.v1.compliance_pb2.ComplianceNote:
        """A note describing a compliance check."""
        pass
    @property
    def dsse_attestation(self) -> grafeas.v1.dsse_attestation_pb2.DSSEAttestationNote:
        """A note describing a dsse attestation note."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        short_description : typing.Text = ...,
        long_description : typing.Text = ...,
        kind : grafeas.v1.common_pb2.NoteKind.ValueType = ...,
        related_url : typing.Optional[typing.Iterable[grafeas.v1.common_pb2.RelatedUrl]] = ...,
        expiration_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        related_note_names : typing.Optional[typing.Iterable[typing.Text]] = ...,
        vulnerability : typing.Optional[grafeas.v1.vulnerability_pb2.VulnerabilityNote] = ...,
        build : typing.Optional[grafeas.v1.build_pb2.BuildNote] = ...,
        image : typing.Optional[grafeas.v1.image_pb2.ImageNote] = ...,
        package : typing.Optional[grafeas.v1.package_pb2.PackageNote] = ...,
        deployment : typing.Optional[grafeas.v1.deployment_pb2.DeploymentNote] = ...,
        discovery : typing.Optional[grafeas.v1.discovery_pb2.DiscoveryNote] = ...,
        attestation : typing.Optional[grafeas.v1.attestation_pb2.AttestationNote] = ...,
        upgrade : typing.Optional[grafeas.v1.upgrade_pb2.UpgradeNote] = ...,
        compliance : typing.Optional[grafeas.v1.compliance_pb2.ComplianceNote] = ...,
        dsse_attestation : typing.Optional[grafeas.v1.dsse_attestation_pb2.DSSEAttestationNote] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["attestation",b"attestation","build",b"build","compliance",b"compliance","create_time",b"create_time","deployment",b"deployment","discovery",b"discovery","dsse_attestation",b"dsse_attestation","expiration_time",b"expiration_time","image",b"image","package",b"package","type",b"type","update_time",b"update_time","upgrade",b"upgrade","vulnerability",b"vulnerability"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["attestation",b"attestation","build",b"build","compliance",b"compliance","create_time",b"create_time","deployment",b"deployment","discovery",b"discovery","dsse_attestation",b"dsse_attestation","expiration_time",b"expiration_time","image",b"image","kind",b"kind","long_description",b"long_description","name",b"name","package",b"package","related_note_names",b"related_note_names","related_url",b"related_url","short_description",b"short_description","type",b"type","update_time",b"update_time","upgrade",b"upgrade","vulnerability",b"vulnerability"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["type",b"type"]) -> typing.Optional[typing_extensions.Literal["vulnerability","build","image","package","deployment","discovery","attestation","upgrade","compliance","dsse_attestation"]]: ...
global___Note = Note

class GetOccurrenceRequest(google.protobuf.message.Message):
    """Request to get an occurrence."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the occurrence in the form of
    `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetOccurrenceRequest = GetOccurrenceRequest

class ListOccurrencesRequest(google.protobuf.message.Message):
    """Request to list occurrences."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """The name of the project to list occurrences for in the form of
    `projects/[PROJECT_ID]`.
    """

    filter: typing.Text = ...
    """The filter expression."""

    page_size: builtins.int = ...
    """Number of occurrences to return in the list. Must be positive. Max allowed
    page size is 1000. If not specified, page size defaults to 20.
    """

    page_token: typing.Text = ...
    """Token to provide to skip to a particular spot in the list."""

    def __init__(self,
        *,
        parent : typing.Text = ...,
        filter : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListOccurrencesRequest = ListOccurrencesRequest

class ListOccurrencesResponse(google.protobuf.message.Message):
    """Response for listing occurrences."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    OCCURRENCES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def occurrences(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Occurrence]:
        """The occurrences requested."""
        pass
    next_page_token: typing.Text = ...
    """The next pagination token in the list response. It should be used as
    `page_token` for the following request. An empty value means no more
    results.
    """

    def __init__(self,
        *,
        occurrences : typing.Optional[typing.Iterable[global___Occurrence]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","occurrences",b"occurrences"]) -> None: ...
global___ListOccurrencesResponse = ListOccurrencesResponse

class DeleteOccurrenceRequest(google.protobuf.message.Message):
    """Request to delete an occurrence."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the occurrence in the form of
    `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteOccurrenceRequest = DeleteOccurrenceRequest

class CreateOccurrenceRequest(google.protobuf.message.Message):
    """Request to create a new occurrence."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    OCCURRENCE_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """The name of the project in the form of `projects/[PROJECT_ID]`, under which
    the occurrence is to be created.
    """

    @property
    def occurrence(self) -> global___Occurrence:
        """The occurrence to create."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        occurrence : typing.Optional[global___Occurrence] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["occurrence",b"occurrence"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["occurrence",b"occurrence","parent",b"parent"]) -> None: ...
global___CreateOccurrenceRequest = CreateOccurrenceRequest

class UpdateOccurrenceRequest(google.protobuf.message.Message):
    """Request to update an occurrence."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    OCCURRENCE_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the occurrence in the form of
    `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    """

    @property
    def occurrence(self) -> global___Occurrence:
        """The updated occurrence."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """The fields to update."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        occurrence : typing.Optional[global___Occurrence] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["occurrence",b"occurrence","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","occurrence",b"occurrence","update_mask",b"update_mask"]) -> None: ...
global___UpdateOccurrenceRequest = UpdateOccurrenceRequest

class GetNoteRequest(google.protobuf.message.Message):
    """Request to get a note."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the note in the form of
    `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetNoteRequest = GetNoteRequest

class GetOccurrenceNoteRequest(google.protobuf.message.Message):
    """Request to get the note to which the specified occurrence is attached."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the occurrence in the form of
    `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetOccurrenceNoteRequest = GetOccurrenceNoteRequest

class ListNotesRequest(google.protobuf.message.Message):
    """Request to list notes."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """The name of the project to list notes for in the form of
    `projects/[PROJECT_ID]`.
    """

    filter: typing.Text = ...
    """The filter expression."""

    page_size: builtins.int = ...
    """Number of notes to return in the list. Must be positive. Max allowed page
    size is 1000. If not specified, page size defaults to 20.
    """

    page_token: typing.Text = ...
    """Token to provide to skip to a particular spot in the list."""

    def __init__(self,
        *,
        parent : typing.Text = ...,
        filter : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListNotesRequest = ListNotesRequest

class ListNotesResponse(google.protobuf.message.Message):
    """Response for listing notes."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NOTES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def notes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Note]:
        """The notes requested."""
        pass
    next_page_token: typing.Text = ...
    """The next pagination token in the list response. It should be used as
    `page_token` for the following request. An empty value means no more
    results.
    """

    def __init__(self,
        *,
        notes : typing.Optional[typing.Iterable[global___Note]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","notes",b"notes"]) -> None: ...
global___ListNotesResponse = ListNotesResponse

class DeleteNoteRequest(google.protobuf.message.Message):
    """Request to delete a note."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the note in the form of
    `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteNoteRequest = DeleteNoteRequest

class CreateNoteRequest(google.protobuf.message.Message):
    """Request to create a new note."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    NOTE_ID_FIELD_NUMBER: builtins.int
    NOTE_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """The name of the project in the form of `projects/[PROJECT_ID]`, under which
    the note is to be created.
    """

    note_id: typing.Text = ...
    """The ID to use for this note."""

    @property
    def note(self) -> global___Note:
        """The note to create."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        note_id : typing.Text = ...,
        note : typing.Optional[global___Note] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["note",b"note"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["note",b"note","note_id",b"note_id","parent",b"parent"]) -> None: ...
global___CreateNoteRequest = CreateNoteRequest

class UpdateNoteRequest(google.protobuf.message.Message):
    """Request to update a note."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    NOTE_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the note in the form of
    `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    """

    @property
    def note(self) -> global___Note:
        """The updated note."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """The fields to update."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        note : typing.Optional[global___Note] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["note",b"note","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","note",b"note","update_mask",b"update_mask"]) -> None: ...
global___UpdateNoteRequest = UpdateNoteRequest

class ListNoteOccurrencesRequest(google.protobuf.message.Message):
    """Request to list occurrences for a note."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the note to list occurrences for in the form of
    `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    """

    filter: typing.Text = ...
    """The filter expression."""

    page_size: builtins.int = ...
    """Number of occurrences to return in the list."""

    page_token: typing.Text = ...
    """Token to provide to skip to a particular spot in the list."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        filter : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","name",b"name","page_size",b"page_size","page_token",b"page_token"]) -> None: ...
global___ListNoteOccurrencesRequest = ListNoteOccurrencesRequest

class ListNoteOccurrencesResponse(google.protobuf.message.Message):
    """Response for listing occurrences for a note."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    OCCURRENCES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def occurrences(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Occurrence]:
        """The occurrences attached to the specified note."""
        pass
    next_page_token: typing.Text = ...
    """Token to provide to skip to a particular spot in the list."""

    def __init__(self,
        *,
        occurrences : typing.Optional[typing.Iterable[global___Occurrence]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","occurrences",b"occurrences"]) -> None: ...
global___ListNoteOccurrencesResponse = ListNoteOccurrencesResponse

class BatchCreateNotesRequest(google.protobuf.message.Message):
    """Request to create notes in batch."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class NotesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___Note: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___Note] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    PARENT_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """The name of the project in the form of `projects/[PROJECT_ID]`, under which
    the notes are to be created.
    """

    @property
    def notes(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Note]:
        """The notes to create. Max allowed length is 1000."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        notes : typing.Optional[typing.Mapping[typing.Text, global___Note]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["notes",b"notes","parent",b"parent"]) -> None: ...
global___BatchCreateNotesRequest = BatchCreateNotesRequest

class BatchCreateNotesResponse(google.protobuf.message.Message):
    """Response for creating notes in batch."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NOTES_FIELD_NUMBER: builtins.int
    @property
    def notes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Note]:
        """The notes that were created."""
        pass
    def __init__(self,
        *,
        notes : typing.Optional[typing.Iterable[global___Note]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["notes",b"notes"]) -> None: ...
global___BatchCreateNotesResponse = BatchCreateNotesResponse

class BatchCreateOccurrencesRequest(google.protobuf.message.Message):
    """Request to create occurrences in batch."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    OCCURRENCES_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """The name of the project in the form of `projects/[PROJECT_ID]`, under which
    the occurrences are to be created.
    """

    @property
    def occurrences(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Occurrence]:
        """The occurrences to create. Max allowed length is 1000."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        occurrences : typing.Optional[typing.Iterable[global___Occurrence]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["occurrences",b"occurrences","parent",b"parent"]) -> None: ...
global___BatchCreateOccurrencesRequest = BatchCreateOccurrencesRequest

class BatchCreateOccurrencesResponse(google.protobuf.message.Message):
    """Response for creating occurrences in batch."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    OCCURRENCES_FIELD_NUMBER: builtins.int
    @property
    def occurrences(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Occurrence]:
        """The occurrences that were created."""
        pass
    def __init__(self,
        *,
        occurrences : typing.Optional[typing.Iterable[global___Occurrence]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["occurrences",b"occurrences"]) -> None: ...
global___BatchCreateOccurrencesResponse = BatchCreateOccurrencesResponse
