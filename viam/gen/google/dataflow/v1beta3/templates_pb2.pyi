"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.dataflow.v1beta3.environment_pb2
import google.dataflow.v1beta3.jobs_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.rpc.status_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _ParameterType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _ParameterTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ParameterType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    DEFAULT: ParameterType.ValueType = ...  # 0
    """Default input type."""

    TEXT: ParameterType.ValueType = ...  # 1
    """The parameter specifies generic text input."""

    GCS_READ_BUCKET: ParameterType.ValueType = ...  # 2
    """The parameter specifies a Cloud Storage Bucket to read from."""

    GCS_WRITE_BUCKET: ParameterType.ValueType = ...  # 3
    """The parameter specifies a Cloud Storage Bucket to write to."""

    GCS_READ_FILE: ParameterType.ValueType = ...  # 4
    """The parameter specifies a Cloud Storage file path to read from."""

    GCS_WRITE_FILE: ParameterType.ValueType = ...  # 5
    """The parameter specifies a Cloud Storage file path to write to."""

    GCS_READ_FOLDER: ParameterType.ValueType = ...  # 6
    """The parameter specifies a Cloud Storage folder path to read from."""

    GCS_WRITE_FOLDER: ParameterType.ValueType = ...  # 7
    """The parameter specifies a Cloud Storage folder to write to."""

    PUBSUB_TOPIC: ParameterType.ValueType = ...  # 8
    """The parameter specifies a Pub/Sub Topic."""

    PUBSUB_SUBSCRIPTION: ParameterType.ValueType = ...  # 9
    """The parameter specifies a Pub/Sub Subscription."""

class ParameterType(_ParameterType, metaclass=_ParameterTypeEnumTypeWrapper):
    """ParameterType specifies what kind of input we need for this parameter."""
    pass

DEFAULT: ParameterType.ValueType = ...  # 0
"""Default input type."""

TEXT: ParameterType.ValueType = ...  # 1
"""The parameter specifies generic text input."""

GCS_READ_BUCKET: ParameterType.ValueType = ...  # 2
"""The parameter specifies a Cloud Storage Bucket to read from."""

GCS_WRITE_BUCKET: ParameterType.ValueType = ...  # 3
"""The parameter specifies a Cloud Storage Bucket to write to."""

GCS_READ_FILE: ParameterType.ValueType = ...  # 4
"""The parameter specifies a Cloud Storage file path to read from."""

GCS_WRITE_FILE: ParameterType.ValueType = ...  # 5
"""The parameter specifies a Cloud Storage file path to write to."""

GCS_READ_FOLDER: ParameterType.ValueType = ...  # 6
"""The parameter specifies a Cloud Storage folder path to read from."""

GCS_WRITE_FOLDER: ParameterType.ValueType = ...  # 7
"""The parameter specifies a Cloud Storage folder to write to."""

PUBSUB_TOPIC: ParameterType.ValueType = ...  # 8
"""The parameter specifies a Pub/Sub Topic."""

PUBSUB_SUBSCRIPTION: ParameterType.ValueType = ...  # 9
"""The parameter specifies a Pub/Sub Subscription."""

global___ParameterType = ParameterType


class LaunchFlexTemplateResponse(google.protobuf.message.Message):
    """Response to the request to launch a job from Flex Template."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    JOB_FIELD_NUMBER: builtins.int
    @property
    def job(self) -> google.dataflow.v1beta3.jobs_pb2.Job:
        """The job that was launched, if the request was not a dry run and
        the job was successfully launched.
        """
        pass
    def __init__(self,
        *,
        job : typing.Optional[google.dataflow.v1beta3.jobs_pb2.Job] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["job",b"job"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["job",b"job"]) -> None: ...
global___LaunchFlexTemplateResponse = LaunchFlexTemplateResponse

class ContainerSpec(google.protobuf.message.Message):
    """Container Spec."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    IMAGE_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    SDK_INFO_FIELD_NUMBER: builtins.int
    DEFAULT_ENVIRONMENT_FIELD_NUMBER: builtins.int
    image: typing.Text = ...
    """Name of the docker container image. E.g., gcr.io/project/some-image"""

    @property
    def metadata(self) -> global___TemplateMetadata:
        """Metadata describing a template including description and validation rules."""
        pass
    @property
    def sdk_info(self) -> global___SDKInfo:
        """Required. SDK info of the Flex Template."""
        pass
    @property
    def default_environment(self) -> global___FlexTemplateRuntimeEnvironment:
        """Default runtime environment for the job."""
        pass
    def __init__(self,
        *,
        image : typing.Text = ...,
        metadata : typing.Optional[global___TemplateMetadata] = ...,
        sdk_info : typing.Optional[global___SDKInfo] = ...,
        default_environment : typing.Optional[global___FlexTemplateRuntimeEnvironment] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["default_environment",b"default_environment","metadata",b"metadata","sdk_info",b"sdk_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["default_environment",b"default_environment","image",b"image","metadata",b"metadata","sdk_info",b"sdk_info"]) -> None: ...
global___ContainerSpec = ContainerSpec

class LaunchFlexTemplateParameter(google.protobuf.message.Message):
    """Launch FlexTemplate Parameter."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ParametersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class LaunchOptionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class TransformNameMappingsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    JOB_NAME_FIELD_NUMBER: builtins.int
    CONTAINER_SPEC_FIELD_NUMBER: builtins.int
    CONTAINER_SPEC_GCS_PATH_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    LAUNCH_OPTIONS_FIELD_NUMBER: builtins.int
    ENVIRONMENT_FIELD_NUMBER: builtins.int
    UPDATE_FIELD_NUMBER: builtins.int
    TRANSFORM_NAME_MAPPINGS_FIELD_NUMBER: builtins.int
    job_name: typing.Text = ...
    """Required. The job name to use for the created job. For update job request,
    job name should be same as the existing running job.
    """

    @property
    def container_spec(self) -> global___ContainerSpec:
        """Spec about the container image to launch."""
        pass
    container_spec_gcs_path: typing.Text = ...
    """Cloud Storage path to a file with json serialized ContainerSpec as
    content.
    """

    @property
    def parameters(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """The parameters for FlexTemplate.
        Ex. {"num_workers":"5"}
        """
        pass
    @property
    def launch_options(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Launch options for this flex template job. This is a common set of options
        across languages and templates. This should not be used to pass job
        parameters.
        """
        pass
    @property
    def environment(self) -> global___FlexTemplateRuntimeEnvironment:
        """The runtime environment for the FlexTemplate job"""
        pass
    update: builtins.bool = ...
    """Set this to true if you are sending a request to update a running
    streaming job. When set, the job name should be the same as the
    running job.
    """

    @property
    def transform_name_mappings(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Use this to pass transform_name_mappings for streaming update jobs.
        Ex:{"oldTransformName":"newTransformName",...}'
        """
        pass
    def __init__(self,
        *,
        job_name : typing.Text = ...,
        container_spec : typing.Optional[global___ContainerSpec] = ...,
        container_spec_gcs_path : typing.Text = ...,
        parameters : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        launch_options : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        environment : typing.Optional[global___FlexTemplateRuntimeEnvironment] = ...,
        update : builtins.bool = ...,
        transform_name_mappings : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["container_spec",b"container_spec","container_spec_gcs_path",b"container_spec_gcs_path","environment",b"environment","template",b"template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["container_spec",b"container_spec","container_spec_gcs_path",b"container_spec_gcs_path","environment",b"environment","job_name",b"job_name","launch_options",b"launch_options","parameters",b"parameters","template",b"template","transform_name_mappings",b"transform_name_mappings","update",b"update"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["template",b"template"]) -> typing.Optional[typing_extensions.Literal["container_spec","container_spec_gcs_path"]]: ...
global___LaunchFlexTemplateParameter = LaunchFlexTemplateParameter

class FlexTemplateRuntimeEnvironment(google.protobuf.message.Message):
    """The environment values to be set at runtime for flex template."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class AdditionalUserLabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NUM_WORKERS_FIELD_NUMBER: builtins.int
    MAX_WORKERS_FIELD_NUMBER: builtins.int
    ZONE_FIELD_NUMBER: builtins.int
    SERVICE_ACCOUNT_EMAIL_FIELD_NUMBER: builtins.int
    TEMP_LOCATION_FIELD_NUMBER: builtins.int
    MACHINE_TYPE_FIELD_NUMBER: builtins.int
    ADDITIONAL_EXPERIMENTS_FIELD_NUMBER: builtins.int
    NETWORK_FIELD_NUMBER: builtins.int
    SUBNETWORK_FIELD_NUMBER: builtins.int
    ADDITIONAL_USER_LABELS_FIELD_NUMBER: builtins.int
    KMS_KEY_NAME_FIELD_NUMBER: builtins.int
    IP_CONFIGURATION_FIELD_NUMBER: builtins.int
    WORKER_REGION_FIELD_NUMBER: builtins.int
    WORKER_ZONE_FIELD_NUMBER: builtins.int
    ENABLE_STREAMING_ENGINE_FIELD_NUMBER: builtins.int
    FLEXRS_GOAL_FIELD_NUMBER: builtins.int
    STAGING_LOCATION_FIELD_NUMBER: builtins.int
    SDK_CONTAINER_IMAGE_FIELD_NUMBER: builtins.int
    num_workers: builtins.int = ...
    """The initial number of Google Compute Engine instances for the job."""

    max_workers: builtins.int = ...
    """The maximum number of Google Compute Engine instances to be made
    available to your pipeline during execution, from 1 to 1000.
    """

    zone: typing.Text = ...
    """The Compute Engine [availability
    zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones)
    for launching worker instances to run your pipeline.
    In the future, worker_zone will take precedence.
    """

    service_account_email: typing.Text = ...
    """The email address of the service account to run the job as."""

    temp_location: typing.Text = ...
    """The Cloud Storage path to use for temporary files.
    Must be a valid Cloud Storage URL, beginning with `gs://`.
    """

    machine_type: typing.Text = ...
    """The machine type to use for the job. Defaults to the value from the
    template if not specified.
    """

    @property
    def additional_experiments(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Additional experiment flags for the job."""
        pass
    network: typing.Text = ...
    """Network to which VMs will be assigned.  If empty or unspecified,
    the service will use the network "default".
    """

    subnetwork: typing.Text = ...
    """Subnetwork to which VMs will be assigned, if desired. You can specify a
    subnetwork using either a complete URL or an abbreviated path. Expected to
    be of the form
    "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK"
    or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in
    a Shared VPC network, you must use the complete URL.
    """

    @property
    def additional_user_labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Additional user labels to be specified for the job.
        Keys and values must follow the restrictions specified in the [labeling
        restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
        page.
        An object containing a list of "key": value pairs.
        Example: { "name": "wrench", "mass": "1kg", "count": "3" }.
        """
        pass
    kms_key_name: typing.Text = ...
    """Name for the Cloud KMS key for the job.
    Key format is:
    projects/<project>/locations/<location>/keyRings/<keyring>/cryptoKeys/<key>
    """

    ip_configuration: google.dataflow.v1beta3.environment_pb2.WorkerIPAddressConfiguration.ValueType = ...
    """Configuration for VM IPs."""

    worker_region: typing.Text = ...
    """The Compute Engine region
    (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in
    which worker processing should occur, e.g. "us-west1". Mutually exclusive
    with worker_zone. If neither worker_region nor worker_zone is specified,
    default to the control plane's region.
    """

    worker_zone: typing.Text = ...
    """The Compute Engine zone
    (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in
    which worker processing should occur, e.g. "us-west1-a". Mutually exclusive
    with worker_region. If neither worker_region nor worker_zone is specified,
    a zone in the control plane's region is chosen based on available capacity.
    If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.
    """

    enable_streaming_engine: builtins.bool = ...
    """Whether to enable Streaming Engine for the job."""

    flexrs_goal: google.dataflow.v1beta3.environment_pb2.FlexResourceSchedulingGoal.ValueType = ...
    """Set FlexRS goal for the job.
    https://cloud.google.com/dataflow/docs/guides/flexrs
    """

    staging_location: typing.Text = ...
    """The Cloud Storage path for staging local files.
    Must be a valid Cloud Storage URL, beginning with `gs://`.
    """

    sdk_container_image: typing.Text = ...
    """Docker registry location of container image to use for the 'worker harness.
    Default is the container for the version of the SDK. Note this field is
    only valid for portable pipelines.
    """

    def __init__(self,
        *,
        num_workers : builtins.int = ...,
        max_workers : builtins.int = ...,
        zone : typing.Text = ...,
        service_account_email : typing.Text = ...,
        temp_location : typing.Text = ...,
        machine_type : typing.Text = ...,
        additional_experiments : typing.Optional[typing.Iterable[typing.Text]] = ...,
        network : typing.Text = ...,
        subnetwork : typing.Text = ...,
        additional_user_labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        kms_key_name : typing.Text = ...,
        ip_configuration : google.dataflow.v1beta3.environment_pb2.WorkerIPAddressConfiguration.ValueType = ...,
        worker_region : typing.Text = ...,
        worker_zone : typing.Text = ...,
        enable_streaming_engine : builtins.bool = ...,
        flexrs_goal : google.dataflow.v1beta3.environment_pb2.FlexResourceSchedulingGoal.ValueType = ...,
        staging_location : typing.Text = ...,
        sdk_container_image : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["additional_experiments",b"additional_experiments","additional_user_labels",b"additional_user_labels","enable_streaming_engine",b"enable_streaming_engine","flexrs_goal",b"flexrs_goal","ip_configuration",b"ip_configuration","kms_key_name",b"kms_key_name","machine_type",b"machine_type","max_workers",b"max_workers","network",b"network","num_workers",b"num_workers","sdk_container_image",b"sdk_container_image","service_account_email",b"service_account_email","staging_location",b"staging_location","subnetwork",b"subnetwork","temp_location",b"temp_location","worker_region",b"worker_region","worker_zone",b"worker_zone","zone",b"zone"]) -> None: ...
global___FlexTemplateRuntimeEnvironment = FlexTemplateRuntimeEnvironment

class LaunchFlexTemplateRequest(google.protobuf.message.Message):
    """A request to launch a Cloud Dataflow job from a FlexTemplate."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    LAUNCH_PARAMETER_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    VALIDATE_ONLY_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Required. The ID of the Cloud Platform project that the job belongs to."""

    @property
    def launch_parameter(self) -> global___LaunchFlexTemplateParameter:
        """Required. Parameter to launch a job form Flex Template."""
        pass
    location: typing.Text = ...
    """Required. The [regional endpoint]
    (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to
    which to direct the request. E.g., us-central1, us-west1.
    """

    validate_only: builtins.bool = ...
    """If true, the request is validated but not actually executed.
    Defaults to false.
    """

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        launch_parameter : typing.Optional[global___LaunchFlexTemplateParameter] = ...,
        location : typing.Text = ...,
        validate_only : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["launch_parameter",b"launch_parameter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["launch_parameter",b"launch_parameter","location",b"location","project_id",b"project_id","validate_only",b"validate_only"]) -> None: ...
global___LaunchFlexTemplateRequest = LaunchFlexTemplateRequest

class RuntimeEnvironment(google.protobuf.message.Message):
    """The environment values to set at runtime."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class AdditionalUserLabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NUM_WORKERS_FIELD_NUMBER: builtins.int
    MAX_WORKERS_FIELD_NUMBER: builtins.int
    ZONE_FIELD_NUMBER: builtins.int
    SERVICE_ACCOUNT_EMAIL_FIELD_NUMBER: builtins.int
    TEMP_LOCATION_FIELD_NUMBER: builtins.int
    BYPASS_TEMP_DIR_VALIDATION_FIELD_NUMBER: builtins.int
    MACHINE_TYPE_FIELD_NUMBER: builtins.int
    ADDITIONAL_EXPERIMENTS_FIELD_NUMBER: builtins.int
    NETWORK_FIELD_NUMBER: builtins.int
    SUBNETWORK_FIELD_NUMBER: builtins.int
    ADDITIONAL_USER_LABELS_FIELD_NUMBER: builtins.int
    KMS_KEY_NAME_FIELD_NUMBER: builtins.int
    IP_CONFIGURATION_FIELD_NUMBER: builtins.int
    WORKER_REGION_FIELD_NUMBER: builtins.int
    WORKER_ZONE_FIELD_NUMBER: builtins.int
    ENABLE_STREAMING_ENGINE_FIELD_NUMBER: builtins.int
    num_workers: builtins.int = ...
    """The initial number of Google Compute Engine instnaces for the job."""

    max_workers: builtins.int = ...
    """The maximum number of Google Compute Engine instances to be made
    available to your pipeline during execution, from 1 to 1000.
    """

    zone: typing.Text = ...
    """The Compute Engine [availability
    zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones)
    for launching worker instances to run your pipeline.
    In the future, worker_zone will take precedence.
    """

    service_account_email: typing.Text = ...
    """The email address of the service account to run the job as."""

    temp_location: typing.Text = ...
    """The Cloud Storage path to use for temporary files.
    Must be a valid Cloud Storage URL, beginning with `gs://`.
    """

    bypass_temp_dir_validation: builtins.bool = ...
    """Whether to bypass the safety checks for the job's temporary directory.
    Use with caution.
    """

    machine_type: typing.Text = ...
    """The machine type to use for the job. Defaults to the value from the
    template if not specified.
    """

    @property
    def additional_experiments(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Additional experiment flags for the job."""
        pass
    network: typing.Text = ...
    """Network to which VMs will be assigned.  If empty or unspecified,
    the service will use the network "default".
    """

    subnetwork: typing.Text = ...
    """Subnetwork to which VMs will be assigned, if desired. You can specify a
    subnetwork using either a complete URL or an abbreviated path. Expected to
    be of the form
    "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK"
    or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in
    a Shared VPC network, you must use the complete URL.
    """

    @property
    def additional_user_labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Additional user labels to be specified for the job.
        Keys and values should follow the restrictions specified in the [labeling
        restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
        page.
        An object containing a list of "key": value pairs.
        Example: { "name": "wrench", "mass": "1kg", "count": "3" }.
        """
        pass
    kms_key_name: typing.Text = ...
    """Name for the Cloud KMS key for the job.
    Key format is:
    projects/<project>/locations/<location>/keyRings/<keyring>/cryptoKeys/<key>
    """

    ip_configuration: google.dataflow.v1beta3.environment_pb2.WorkerIPAddressConfiguration.ValueType = ...
    """Configuration for VM IPs."""

    worker_region: typing.Text = ...
    """The Compute Engine region
    (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in
    which worker processing should occur, e.g. "us-west1". Mutually exclusive
    with worker_zone. If neither worker_region nor worker_zone is specified,
    default to the control plane's region.
    """

    worker_zone: typing.Text = ...
    """The Compute Engine zone
    (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in
    which worker processing should occur, e.g. "us-west1-a". Mutually exclusive
    with worker_region. If neither worker_region nor worker_zone is specified,
    a zone in the control plane's region is chosen based on available capacity.
    If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.
    """

    enable_streaming_engine: builtins.bool = ...
    """Whether to enable Streaming Engine for the job."""

    def __init__(self,
        *,
        num_workers : builtins.int = ...,
        max_workers : builtins.int = ...,
        zone : typing.Text = ...,
        service_account_email : typing.Text = ...,
        temp_location : typing.Text = ...,
        bypass_temp_dir_validation : builtins.bool = ...,
        machine_type : typing.Text = ...,
        additional_experiments : typing.Optional[typing.Iterable[typing.Text]] = ...,
        network : typing.Text = ...,
        subnetwork : typing.Text = ...,
        additional_user_labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        kms_key_name : typing.Text = ...,
        ip_configuration : google.dataflow.v1beta3.environment_pb2.WorkerIPAddressConfiguration.ValueType = ...,
        worker_region : typing.Text = ...,
        worker_zone : typing.Text = ...,
        enable_streaming_engine : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["additional_experiments",b"additional_experiments","additional_user_labels",b"additional_user_labels","bypass_temp_dir_validation",b"bypass_temp_dir_validation","enable_streaming_engine",b"enable_streaming_engine","ip_configuration",b"ip_configuration","kms_key_name",b"kms_key_name","machine_type",b"machine_type","max_workers",b"max_workers","network",b"network","num_workers",b"num_workers","service_account_email",b"service_account_email","subnetwork",b"subnetwork","temp_location",b"temp_location","worker_region",b"worker_region","worker_zone",b"worker_zone","zone",b"zone"]) -> None: ...
global___RuntimeEnvironment = RuntimeEnvironment

class ParameterMetadata(google.protobuf.message.Message):
    """Metadata for a specific parameter."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class CustomMetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    LABEL_FIELD_NUMBER: builtins.int
    HELP_TEXT_FIELD_NUMBER: builtins.int
    IS_OPTIONAL_FIELD_NUMBER: builtins.int
    REGEXES_FIELD_NUMBER: builtins.int
    PARAM_TYPE_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the parameter."""

    label: typing.Text = ...
    """Required. The label to display for the parameter."""

    help_text: typing.Text = ...
    """Required. The help text to display for the parameter."""

    is_optional: builtins.bool = ...
    """Optional. Whether the parameter is optional. Defaults to false."""

    @property
    def regexes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Optional. Regexes that the parameter must match."""
        pass
    param_type: global___ParameterType.ValueType = ...
    """Optional. The type of the parameter.
    Used for selecting input picker.
    """

    @property
    def custom_metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Optional. Additional metadata for describing this parameter."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        label : typing.Text = ...,
        help_text : typing.Text = ...,
        is_optional : builtins.bool = ...,
        regexes : typing.Optional[typing.Iterable[typing.Text]] = ...,
        param_type : global___ParameterType.ValueType = ...,
        custom_metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["custom_metadata",b"custom_metadata","help_text",b"help_text","is_optional",b"is_optional","label",b"label","name",b"name","param_type",b"param_type","regexes",b"regexes"]) -> None: ...
global___ParameterMetadata = ParameterMetadata

class TemplateMetadata(google.protobuf.message.Message):
    """Metadata describing a template."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the template."""

    description: typing.Text = ...
    """Optional. A description of the template."""

    @property
    def parameters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ParameterMetadata]:
        """The parameters for the template."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        description : typing.Text = ...,
        parameters : typing.Optional[typing.Iterable[global___ParameterMetadata]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","name",b"name","parameters",b"parameters"]) -> None: ...
global___TemplateMetadata = TemplateMetadata

class SDKInfo(google.protobuf.message.Message):
    """SDK Information."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Language:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _LanguageEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Language.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        UNKNOWN: SDKInfo.Language.ValueType = ...  # 0
        """UNKNOWN Language."""

        JAVA: SDKInfo.Language.ValueType = ...  # 1
        """Java."""

        PYTHON: SDKInfo.Language.ValueType = ...  # 2
        """Python."""

    class Language(_Language, metaclass=_LanguageEnumTypeWrapper):
        """SDK Language."""
        pass

    UNKNOWN: SDKInfo.Language.ValueType = ...  # 0
    """UNKNOWN Language."""

    JAVA: SDKInfo.Language.ValueType = ...  # 1
    """Java."""

    PYTHON: SDKInfo.Language.ValueType = ...  # 2
    """Python."""


    LANGUAGE_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    language: global___SDKInfo.Language.ValueType = ...
    """Required. The SDK Language."""

    version: typing.Text = ...
    """Optional. The SDK version."""

    def __init__(self,
        *,
        language : global___SDKInfo.Language.ValueType = ...,
        version : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["language",b"language","version",b"version"]) -> None: ...
global___SDKInfo = SDKInfo

class RuntimeMetadata(google.protobuf.message.Message):
    """RuntimeMetadata describing a runtime environment."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SDK_INFO_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    @property
    def sdk_info(self) -> global___SDKInfo:
        """SDK Info for the template."""
        pass
    @property
    def parameters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ParameterMetadata]:
        """The parameters for the template."""
        pass
    def __init__(self,
        *,
        sdk_info : typing.Optional[global___SDKInfo] = ...,
        parameters : typing.Optional[typing.Iterable[global___ParameterMetadata]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["sdk_info",b"sdk_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["parameters",b"parameters","sdk_info",b"sdk_info"]) -> None: ...
global___RuntimeMetadata = RuntimeMetadata

class CreateJobFromTemplateRequest(google.protobuf.message.Message):
    """A request to create a Cloud Dataflow job from a template."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ParametersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    PROJECT_ID_FIELD_NUMBER: builtins.int
    JOB_NAME_FIELD_NUMBER: builtins.int
    GCS_PATH_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    ENVIRONMENT_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Required. The ID of the Cloud Platform project that the job belongs to."""

    job_name: typing.Text = ...
    """Required. The job name to use for the created job."""

    gcs_path: typing.Text = ...
    """Required. A Cloud Storage path to the template from which to
    create the job.
    Must be a valid Cloud Storage URL, beginning with `gs://`.
    """

    @property
    def parameters(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """The runtime parameters to pass to the job."""
        pass
    @property
    def environment(self) -> global___RuntimeEnvironment:
        """The runtime environment for the job."""
        pass
    location: typing.Text = ...
    """The [regional endpoint]
    (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to
    which to direct the request.
    """

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        job_name : typing.Text = ...,
        gcs_path : typing.Text = ...,
        parameters : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        environment : typing.Optional[global___RuntimeEnvironment] = ...,
        location : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["environment",b"environment","gcs_path",b"gcs_path","template",b"template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["environment",b"environment","gcs_path",b"gcs_path","job_name",b"job_name","location",b"location","parameters",b"parameters","project_id",b"project_id","template",b"template"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["template",b"template"]) -> typing.Optional[typing_extensions.Literal["gcs_path"]]: ...
global___CreateJobFromTemplateRequest = CreateJobFromTemplateRequest

class GetTemplateRequest(google.protobuf.message.Message):
    """A request to retrieve a Cloud Dataflow job template."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _TemplateView:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TemplateViewEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TemplateView.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        METADATA_ONLY: GetTemplateRequest.TemplateView.ValueType = ...  # 0
        """Template view that retrieves only the metadata associated with the
        template.
        """

    class TemplateView(_TemplateView, metaclass=_TemplateViewEnumTypeWrapper):
        """The various views of a template that may be retrieved."""
        pass

    METADATA_ONLY: GetTemplateRequest.TemplateView.ValueType = ...  # 0
    """Template view that retrieves only the metadata associated with the
    template.
    """


    PROJECT_ID_FIELD_NUMBER: builtins.int
    GCS_PATH_FIELD_NUMBER: builtins.int
    VIEW_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Required. The ID of the Cloud Platform project that the job belongs to."""

    gcs_path: typing.Text = ...
    """Required. A Cloud Storage path to the template from which to
    create the job.
    Must be valid Cloud Storage URL, beginning with 'gs://'.
    """

    view: global___GetTemplateRequest.TemplateView.ValueType = ...
    """The view to retrieve. Defaults to METADATA_ONLY."""

    location: typing.Text = ...
    """The [regional endpoint]
    (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to
    which to direct the request.
    """

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        gcs_path : typing.Text = ...,
        view : global___GetTemplateRequest.TemplateView.ValueType = ...,
        location : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["gcs_path",b"gcs_path","template",b"template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["gcs_path",b"gcs_path","location",b"location","project_id",b"project_id","template",b"template","view",b"view"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["template",b"template"]) -> typing.Optional[typing_extensions.Literal["gcs_path"]]: ...
global___GetTemplateRequest = GetTemplateRequest

class GetTemplateResponse(google.protobuf.message.Message):
    """The response to a GetTemplate request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _TemplateType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TemplateTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TemplateType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        UNKNOWN: GetTemplateResponse.TemplateType.ValueType = ...  # 0
        """Unknown Template Type."""

        LEGACY: GetTemplateResponse.TemplateType.ValueType = ...  # 1
        """Legacy Template."""

        FLEX: GetTemplateResponse.TemplateType.ValueType = ...  # 2
        """Flex Template."""

    class TemplateType(_TemplateType, metaclass=_TemplateTypeEnumTypeWrapper):
        """Template Type."""
        pass

    UNKNOWN: GetTemplateResponse.TemplateType.ValueType = ...  # 0
    """Unknown Template Type."""

    LEGACY: GetTemplateResponse.TemplateType.ValueType = ...  # 1
    """Legacy Template."""

    FLEX: GetTemplateResponse.TemplateType.ValueType = ...  # 2
    """Flex Template."""


    STATUS_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    TEMPLATE_TYPE_FIELD_NUMBER: builtins.int
    RUNTIME_METADATA_FIELD_NUMBER: builtins.int
    @property
    def status(self) -> google.rpc.status_pb2.Status:
        """The status of the get template request. Any problems with the
        request will be indicated in the error_details.
        """
        pass
    @property
    def metadata(self) -> global___TemplateMetadata:
        """The template metadata describing the template name, available
        parameters, etc.
        """
        pass
    template_type: global___GetTemplateResponse.TemplateType.ValueType = ...
    """Template Type."""

    @property
    def runtime_metadata(self) -> global___RuntimeMetadata:
        """Describes the runtime metadata with SDKInfo and available parameters."""
        pass
    def __init__(self,
        *,
        status : typing.Optional[google.rpc.status_pb2.Status] = ...,
        metadata : typing.Optional[global___TemplateMetadata] = ...,
        template_type : global___GetTemplateResponse.TemplateType.ValueType = ...,
        runtime_metadata : typing.Optional[global___RuntimeMetadata] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["metadata",b"metadata","runtime_metadata",b"runtime_metadata","status",b"status"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["metadata",b"metadata","runtime_metadata",b"runtime_metadata","status",b"status","template_type",b"template_type"]) -> None: ...
global___GetTemplateResponse = GetTemplateResponse

class LaunchTemplateParameters(google.protobuf.message.Message):
    """Parameters to provide to the template being launched."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ParametersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class TransformNameMappingEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    JOB_NAME_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    ENVIRONMENT_FIELD_NUMBER: builtins.int
    UPDATE_FIELD_NUMBER: builtins.int
    TRANSFORM_NAME_MAPPING_FIELD_NUMBER: builtins.int
    job_name: typing.Text = ...
    """Required. The job name to use for the created job."""

    @property
    def parameters(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """The runtime parameters to pass to the job."""
        pass
    @property
    def environment(self) -> global___RuntimeEnvironment:
        """The runtime environment for the job."""
        pass
    update: builtins.bool = ...
    """If set, replace the existing pipeline with the name specified by jobName
    with this pipeline, preserving state.
    """

    @property
    def transform_name_mapping(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Only applicable when updating a pipeline. Map of transform name prefixes of
        the job to be replaced to the corresponding name prefixes of the new job.
        """
        pass
    def __init__(self,
        *,
        job_name : typing.Text = ...,
        parameters : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        environment : typing.Optional[global___RuntimeEnvironment] = ...,
        update : builtins.bool = ...,
        transform_name_mapping : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["environment",b"environment"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["environment",b"environment","job_name",b"job_name","parameters",b"parameters","transform_name_mapping",b"transform_name_mapping","update",b"update"]) -> None: ...
global___LaunchTemplateParameters = LaunchTemplateParameters

class LaunchTemplateRequest(google.protobuf.message.Message):
    """A request to launch a template."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    VALIDATE_ONLY_FIELD_NUMBER: builtins.int
    GCS_PATH_FIELD_NUMBER: builtins.int
    DYNAMIC_TEMPLATE_FIELD_NUMBER: builtins.int
    LAUNCH_PARAMETERS_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Required. The ID of the Cloud Platform project that the job belongs to."""

    validate_only: builtins.bool = ...
    """If true, the request is validated but not actually executed.
    Defaults to false.
    """

    gcs_path: typing.Text = ...
    """A Cloud Storage path to the template from which to create
    the job.
    Must be valid Cloud Storage URL, beginning with 'gs://'.
    """

    @property
    def dynamic_template(self) -> global___DynamicTemplateLaunchParams:
        """Params for launching a dynamic template."""
        pass
    @property
    def launch_parameters(self) -> global___LaunchTemplateParameters:
        """The parameters of the template to launch. This should be part of the
        body of the POST request.
        """
        pass
    location: typing.Text = ...
    """The [regional endpoint]
    (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to
    which to direct the request.
    """

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        validate_only : builtins.bool = ...,
        gcs_path : typing.Text = ...,
        dynamic_template : typing.Optional[global___DynamicTemplateLaunchParams] = ...,
        launch_parameters : typing.Optional[global___LaunchTemplateParameters] = ...,
        location : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dynamic_template",b"dynamic_template","gcs_path",b"gcs_path","launch_parameters",b"launch_parameters","template",b"template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dynamic_template",b"dynamic_template","gcs_path",b"gcs_path","launch_parameters",b"launch_parameters","location",b"location","project_id",b"project_id","template",b"template","validate_only",b"validate_only"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["template",b"template"]) -> typing.Optional[typing_extensions.Literal["gcs_path","dynamic_template"]]: ...
global___LaunchTemplateRequest = LaunchTemplateRequest

class LaunchTemplateResponse(google.protobuf.message.Message):
    """Response to the request to launch a template."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    JOB_FIELD_NUMBER: builtins.int
    @property
    def job(self) -> google.dataflow.v1beta3.jobs_pb2.Job:
        """The job that was launched, if the request was not a dry run and
        the job was successfully launched.
        """
        pass
    def __init__(self,
        *,
        job : typing.Optional[google.dataflow.v1beta3.jobs_pb2.Job] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["job",b"job"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["job",b"job"]) -> None: ...
global___LaunchTemplateResponse = LaunchTemplateResponse

class InvalidTemplateParameters(google.protobuf.message.Message):
    """Used in the error_details field of a google.rpc.Status message, this
    indicates problems with the template parameter.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ParameterViolation(google.protobuf.message.Message):
        """A specific template-parameter violation."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        PARAMETER_FIELD_NUMBER: builtins.int
        DESCRIPTION_FIELD_NUMBER: builtins.int
        parameter: typing.Text = ...
        """The parameter that failed to validate."""

        description: typing.Text = ...
        """A description of why the parameter failed to validate."""

        def __init__(self,
            *,
            parameter : typing.Text = ...,
            description : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["description",b"description","parameter",b"parameter"]) -> None: ...

    PARAMETER_VIOLATIONS_FIELD_NUMBER: builtins.int
    @property
    def parameter_violations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InvalidTemplateParameters.ParameterViolation]:
        """Describes all parameter violations in a template request."""
        pass
    def __init__(self,
        *,
        parameter_violations : typing.Optional[typing.Iterable[global___InvalidTemplateParameters.ParameterViolation]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["parameter_violations",b"parameter_violations"]) -> None: ...
global___InvalidTemplateParameters = InvalidTemplateParameters

class DynamicTemplateLaunchParams(google.protobuf.message.Message):
    """Params which should be passed when launching a dynamic template."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GCS_PATH_FIELD_NUMBER: builtins.int
    STAGING_LOCATION_FIELD_NUMBER: builtins.int
    gcs_path: typing.Text = ...
    """Path to dynamic template spec file on Cloud Storage.
    The file must be a Json serialized DynamicTemplateFieSpec object.
    """

    staging_location: typing.Text = ...
    """Cloud Storage path for staging dependencies.
    Must be a valid Cloud Storage URL, beginning with `gs://`.
    """

    def __init__(self,
        *,
        gcs_path : typing.Text = ...,
        staging_location : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["gcs_path",b"gcs_path","staging_location",b"staging_location"]) -> None: ...
global___DynamicTemplateLaunchParams = DynamicTemplateLaunchParams
