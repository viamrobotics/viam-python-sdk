"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.bigtable.admin.v2.common_pb2
import google.bigtable.admin.v2.table_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class RestoreTableRequest(google.protobuf.message.Message):
    """The request for
    [RestoreTable][google.bigtable.admin.v2.BigtableTableAdmin.RestoreTable].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    TABLE_ID_FIELD_NUMBER: builtins.int
    BACKUP_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The name of the instance in which to create the restored
    table. This instance must be in the same project as the source backup.
    Values are of the form `projects/<project>/instances/<instance>`.
    """

    table_id: typing.Text = ...
    """Required. The id of the table to create and restore to. This
    table must not already exist. The `table_id` appended to
    `parent` forms the full table name of the form
    `projects/<project>/instances/<instance>/tables/<table_id>`.
    """

    backup: typing.Text = ...
    """Name of the backup from which to restore.  Values are of the form
    `projects/<project>/instances/<instance>/clusters/<cluster>/backups/<backup>`.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        table_id : typing.Text = ...,
        backup : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["backup",b"backup","source",b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["backup",b"backup","parent",b"parent","source",b"source","table_id",b"table_id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source",b"source"]) -> typing.Optional[typing_extensions.Literal["backup"]]: ...
global___RestoreTableRequest = RestoreTableRequest

class RestoreTableMetadata(google.protobuf.message.Message):
    """Metadata type for the long-running operation returned by
    [RestoreTable][google.bigtable.admin.v2.BigtableTableAdmin.RestoreTable].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    SOURCE_TYPE_FIELD_NUMBER: builtins.int
    BACKUP_INFO_FIELD_NUMBER: builtins.int
    OPTIMIZE_TABLE_OPERATION_NAME_FIELD_NUMBER: builtins.int
    PROGRESS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Name of the table being created and restored to."""

    source_type: google.bigtable.admin.v2.table_pb2.RestoreSourceType.ValueType = ...
    """The type of the restore source."""

    @property
    def backup_info(self) -> google.bigtable.admin.v2.table_pb2.BackupInfo: ...
    optimize_table_operation_name: typing.Text = ...
    """If exists, the name of the long-running operation that will be used to
    track the post-restore optimization process to optimize the performance of
    the restored table. The metadata type of the long-running operation is
    [OptimizeRestoreTableMetadata][]. The response type is
    [Empty][google.protobuf.Empty]. This long-running operation may be
    automatically created by the system if applicable after the
    RestoreTable long-running operation completes successfully. This operation
    may not be created if the table is already optimized or the restore was
    not successful.
    """

    @property
    def progress(self) -> google.bigtable.admin.v2.common_pb2.OperationProgress:
        """The progress of the [RestoreTable][google.bigtable.admin.v2.BigtableTableAdmin.RestoreTable]
        operation.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        source_type : google.bigtable.admin.v2.table_pb2.RestoreSourceType.ValueType = ...,
        backup_info : typing.Optional[google.bigtable.admin.v2.table_pb2.BackupInfo] = ...,
        optimize_table_operation_name : typing.Text = ...,
        progress : typing.Optional[google.bigtable.admin.v2.common_pb2.OperationProgress] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["backup_info",b"backup_info","progress",b"progress","source_info",b"source_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["backup_info",b"backup_info","name",b"name","optimize_table_operation_name",b"optimize_table_operation_name","progress",b"progress","source_info",b"source_info","source_type",b"source_type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source_info",b"source_info"]) -> typing.Optional[typing_extensions.Literal["backup_info"]]: ...
global___RestoreTableMetadata = RestoreTableMetadata

class OptimizeRestoredTableMetadata(google.protobuf.message.Message):
    """Metadata type for the long-running operation used to track the progress
    of optimizations performed on a newly restored table. This long-running
    operation is automatically created by the system after the successful
    completion of a table restore, and cannot be cancelled.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    PROGRESS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Name of the restored table being optimized."""

    @property
    def progress(self) -> google.bigtable.admin.v2.common_pb2.OperationProgress:
        """The progress of the post-restore optimizations."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        progress : typing.Optional[google.bigtable.admin.v2.common_pb2.OperationProgress] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["progress",b"progress"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","progress",b"progress"]) -> None: ...
global___OptimizeRestoredTableMetadata = OptimizeRestoredTableMetadata

class CreateTableRequest(google.protobuf.message.Message):
    """Request message for
    [google.bigtable.admin.v2.BigtableTableAdmin.CreateTable][google.bigtable.admin.v2.BigtableTableAdmin.CreateTable]
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Split(google.protobuf.message.Message):
        """An initial split point for a newly created table."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        key: builtins.bytes = ...
        """Row key to use as an initial tablet boundary."""

        def __init__(self,
            *,
            key : builtins.bytes = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key"]) -> None: ...

    PARENT_FIELD_NUMBER: builtins.int
    TABLE_ID_FIELD_NUMBER: builtins.int
    TABLE_FIELD_NUMBER: builtins.int
    INITIAL_SPLITS_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The unique name of the instance in which to create the table.
    Values are of the form `projects/{project}/instances/{instance}`.
    """

    table_id: typing.Text = ...
    """Required. The name by which the new table should be referred to within the parent
    instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
    Maximum 50 characters.
    """

    @property
    def table(self) -> google.bigtable.admin.v2.table_pb2.Table:
        """Required. The Table to create."""
        pass
    @property
    def initial_splits(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CreateTableRequest.Split]:
        """The optional list of row keys that will be used to initially split the
        table into several tablets (tablets are similar to HBase regions).
        Given two split keys, `s1` and `s2`, three tablets will be created,
        spanning the key ranges: `[, s1), [s1, s2), [s2, )`.

        Example:

        * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
                       `"other", "zz"]`
        * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
        * Key assignment:
            - Tablet 1 `[, apple)                => {"a"}.`
            - Tablet 2 `[apple, customer_1)      => {"apple", "custom"}.`
            - Tablet 3 `[customer_1, customer_2) => {"customer_1"}.`
            - Tablet 4 `[customer_2, other)      => {"customer_2"}.`
            - Tablet 5 `[other, )                => {"other", "zz"}.`
        """
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        table_id : typing.Text = ...,
        table : typing.Optional[google.bigtable.admin.v2.table_pb2.Table] = ...,
        initial_splits : typing.Optional[typing.Iterable[global___CreateTableRequest.Split]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["table",b"table"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["initial_splits",b"initial_splits","parent",b"parent","table",b"table","table_id",b"table_id"]) -> None: ...
global___CreateTableRequest = CreateTableRequest

class CreateTableFromSnapshotRequest(google.protobuf.message.Message):
    """Request message for
    [google.bigtable.admin.v2.BigtableTableAdmin.CreateTableFromSnapshot][google.bigtable.admin.v2.BigtableTableAdmin.CreateTableFromSnapshot]

    Note: This is a private alpha release of Cloud Bigtable snapshots. This
    feature is not currently available to most Cloud Bigtable customers. This
    feature might be changed in backward-incompatible ways and is not recommended
    for production use. It is not subject to any SLA or deprecation policy.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    TABLE_ID_FIELD_NUMBER: builtins.int
    SOURCE_SNAPSHOT_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The unique name of the instance in which to create the table.
    Values are of the form `projects/{project}/instances/{instance}`.
    """

    table_id: typing.Text = ...
    """Required. The name by which the new table should be referred to within the parent
    instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
    """

    source_snapshot: typing.Text = ...
    """Required. The unique name of the snapshot from which to restore the table. The
    snapshot and the table must be in the same instance.
    Values are of the form
    `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}`.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        table_id : typing.Text = ...,
        source_snapshot : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent",b"parent","source_snapshot",b"source_snapshot","table_id",b"table_id"]) -> None: ...
global___CreateTableFromSnapshotRequest = CreateTableFromSnapshotRequest

class DropRowRangeRequest(google.protobuf.message.Message):
    """Request message for
    [google.bigtable.admin.v2.BigtableTableAdmin.DropRowRange][google.bigtable.admin.v2.BigtableTableAdmin.DropRowRange]
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    ROW_KEY_PREFIX_FIELD_NUMBER: builtins.int
    DELETE_ALL_DATA_FROM_TABLE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The unique name of the table on which to drop a range of rows.
    Values are of the form
    `projects/{project}/instances/{instance}/tables/{table}`.
    """

    row_key_prefix: builtins.bytes = ...
    """Delete all rows that start with this row key prefix. Prefix cannot be
    zero length.
    """

    delete_all_data_from_table: builtins.bool = ...
    """Delete all rows in the table. Setting this to false is a no-op."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        row_key_prefix : builtins.bytes = ...,
        delete_all_data_from_table : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["delete_all_data_from_table",b"delete_all_data_from_table","row_key_prefix",b"row_key_prefix","target",b"target"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["delete_all_data_from_table",b"delete_all_data_from_table","name",b"name","row_key_prefix",b"row_key_prefix","target",b"target"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["target",b"target"]) -> typing.Optional[typing_extensions.Literal["row_key_prefix","delete_all_data_from_table"]]: ...
global___DropRowRangeRequest = DropRowRangeRequest

class ListTablesRequest(google.protobuf.message.Message):
    """Request message for
    [google.bigtable.admin.v2.BigtableTableAdmin.ListTables][google.bigtable.admin.v2.BigtableTableAdmin.ListTables]
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    VIEW_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The unique name of the instance for which tables should be listed.
    Values are of the form `projects/{project}/instances/{instance}`.
    """

    view: google.bigtable.admin.v2.table_pb2.Table.View.ValueType = ...
    """The view to be applied to the returned tables' fields.
    Only NAME_ONLY view (default) and REPLICATION_VIEW are supported.
    """

    page_size: builtins.int = ...
    """Maximum number of results per page.

    A page_size of zero lets the server choose the number of items to return.
    A page_size which is strictly positive will return at most that many items.
    A negative page_size will cause an error.

    Following the first request, subsequent paginated calls are not required
    to pass a page_size. If a page_size is set in subsequent calls, it must
    match the page_size given in the first request.
    """

    page_token: typing.Text = ...
    """The value of `next_page_token` returned by a previous call."""

    def __init__(self,
        *,
        parent : typing.Text = ...,
        view : google.bigtable.admin.v2.table_pb2.Table.View.ValueType = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent","view",b"view"]) -> None: ...
global___ListTablesRequest = ListTablesRequest

class ListTablesResponse(google.protobuf.message.Message):
    """Response message for
    [google.bigtable.admin.v2.BigtableTableAdmin.ListTables][google.bigtable.admin.v2.BigtableTableAdmin.ListTables]
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TABLES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def tables(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.bigtable.admin.v2.table_pb2.Table]:
        """The tables present in the requested instance."""
        pass
    next_page_token: typing.Text = ...
    """Set if not all tables could be returned in a single response.
    Pass this value to `page_token` in another request to get the next
    page of results.
    """

    def __init__(self,
        *,
        tables : typing.Optional[typing.Iterable[google.bigtable.admin.v2.table_pb2.Table]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","tables",b"tables"]) -> None: ...
global___ListTablesResponse = ListTablesResponse

class GetTableRequest(google.protobuf.message.Message):
    """Request message for
    [google.bigtable.admin.v2.BigtableTableAdmin.GetTable][google.bigtable.admin.v2.BigtableTableAdmin.GetTable]
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    VIEW_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The unique name of the requested table.
    Values are of the form
    `projects/{project}/instances/{instance}/tables/{table}`.
    """

    view: google.bigtable.admin.v2.table_pb2.Table.View.ValueType = ...
    """The view to be applied to the returned table's fields.
    Defaults to `SCHEMA_VIEW` if unspecified.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        view : google.bigtable.admin.v2.table_pb2.Table.View.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","view",b"view"]) -> None: ...
global___GetTableRequest = GetTableRequest

class DeleteTableRequest(google.protobuf.message.Message):
    """Request message for
    [google.bigtable.admin.v2.BigtableTableAdmin.DeleteTable][google.bigtable.admin.v2.BigtableTableAdmin.DeleteTable]
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The unique name of the table to be deleted.
    Values are of the form
    `projects/{project}/instances/{instance}/tables/{table}`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteTableRequest = DeleteTableRequest

class ModifyColumnFamiliesRequest(google.protobuf.message.Message):
    """Request message for
    [google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamilies][google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamilies]
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Modification(google.protobuf.message.Message):
        """A create, update, or delete of a particular column family."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        ID_FIELD_NUMBER: builtins.int
        CREATE_FIELD_NUMBER: builtins.int
        UPDATE_FIELD_NUMBER: builtins.int
        DROP_FIELD_NUMBER: builtins.int
        id: typing.Text = ...
        """The ID of the column family to be modified."""

        @property
        def create(self) -> google.bigtable.admin.v2.table_pb2.ColumnFamily:
            """Create a new column family with the specified schema, or fail if
            one already exists with the given ID.
            """
            pass
        @property
        def update(self) -> google.bigtable.admin.v2.table_pb2.ColumnFamily:
            """Update an existing column family to the specified schema, or fail
            if no column family exists with the given ID.
            """
            pass
        drop: builtins.bool = ...
        """Drop (delete) the column family with the given ID, or fail if no such
        family exists.
        """

        def __init__(self,
            *,
            id : typing.Text = ...,
            create : typing.Optional[google.bigtable.admin.v2.table_pb2.ColumnFamily] = ...,
            update : typing.Optional[google.bigtable.admin.v2.table_pb2.ColumnFamily] = ...,
            drop : builtins.bool = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["create",b"create","drop",b"drop","mod",b"mod","update",b"update"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["create",b"create","drop",b"drop","id",b"id","mod",b"mod","update",b"update"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["mod",b"mod"]) -> typing.Optional[typing_extensions.Literal["create","update","drop"]]: ...

    NAME_FIELD_NUMBER: builtins.int
    MODIFICATIONS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The unique name of the table whose families should be modified.
    Values are of the form
    `projects/{project}/instances/{instance}/tables/{table}`.
    """

    @property
    def modifications(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ModifyColumnFamiliesRequest.Modification]:
        """Required. Modifications to be atomically applied to the specified table's families.
        Entries are applied in order, meaning that earlier modifications can be
        masked by later ones (in the case of repeated updates to the same family,
        for example).
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        modifications : typing.Optional[typing.Iterable[global___ModifyColumnFamiliesRequest.Modification]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["modifications",b"modifications","name",b"name"]) -> None: ...
global___ModifyColumnFamiliesRequest = ModifyColumnFamiliesRequest

class GenerateConsistencyTokenRequest(google.protobuf.message.Message):
    """Request message for
    [google.bigtable.admin.v2.BigtableTableAdmin.GenerateConsistencyToken][google.bigtable.admin.v2.BigtableTableAdmin.GenerateConsistencyToken]
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The unique name of the Table for which to create a consistency token.
    Values are of the form
    `projects/{project}/instances/{instance}/tables/{table}`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GenerateConsistencyTokenRequest = GenerateConsistencyTokenRequest

class GenerateConsistencyTokenResponse(google.protobuf.message.Message):
    """Response message for
    [google.bigtable.admin.v2.BigtableTableAdmin.GenerateConsistencyToken][google.bigtable.admin.v2.BigtableTableAdmin.GenerateConsistencyToken]
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONSISTENCY_TOKEN_FIELD_NUMBER: builtins.int
    consistency_token: typing.Text = ...
    """The generated consistency token."""

    def __init__(self,
        *,
        consistency_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["consistency_token",b"consistency_token"]) -> None: ...
global___GenerateConsistencyTokenResponse = GenerateConsistencyTokenResponse

class CheckConsistencyRequest(google.protobuf.message.Message):
    """Request message for
    [google.bigtable.admin.v2.BigtableTableAdmin.CheckConsistency][google.bigtable.admin.v2.BigtableTableAdmin.CheckConsistency]
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    CONSISTENCY_TOKEN_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The unique name of the Table for which to check replication consistency.
    Values are of the form
    `projects/{project}/instances/{instance}/tables/{table}`.
    """

    consistency_token: typing.Text = ...
    """Required. The token created using GenerateConsistencyToken for the Table."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        consistency_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["consistency_token",b"consistency_token","name",b"name"]) -> None: ...
global___CheckConsistencyRequest = CheckConsistencyRequest

class CheckConsistencyResponse(google.protobuf.message.Message):
    """Response message for
    [google.bigtable.admin.v2.BigtableTableAdmin.CheckConsistency][google.bigtable.admin.v2.BigtableTableAdmin.CheckConsistency]
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONSISTENT_FIELD_NUMBER: builtins.int
    consistent: builtins.bool = ...
    """True only if the token is consistent. A token is consistent if replication
    has caught up with the restrictions specified in the request.
    """

    def __init__(self,
        *,
        consistent : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["consistent",b"consistent"]) -> None: ...
global___CheckConsistencyResponse = CheckConsistencyResponse

class SnapshotTableRequest(google.protobuf.message.Message):
    """Request message for
    [google.bigtable.admin.v2.BigtableTableAdmin.SnapshotTable][google.bigtable.admin.v2.BigtableTableAdmin.SnapshotTable]

    Note: This is a private alpha release of Cloud Bigtable snapshots. This
    feature is not currently available to most Cloud Bigtable customers. This
    feature might be changed in backward-incompatible ways and is not recommended
    for production use. It is not subject to any SLA or deprecation policy.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    CLUSTER_FIELD_NUMBER: builtins.int
    SNAPSHOT_ID_FIELD_NUMBER: builtins.int
    TTL_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The unique name of the table to have the snapshot taken.
    Values are of the form
    `projects/{project}/instances/{instance}/tables/{table}`.
    """

    cluster: typing.Text = ...
    """Required. The name of the cluster where the snapshot will be created in.
    Values are of the form
    `projects/{project}/instances/{instance}/clusters/{cluster}`.
    """

    snapshot_id: typing.Text = ...
    """Required. The ID by which the new snapshot should be referred to within the parent
    cluster, e.g., `mysnapshot` of the form: `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`
    rather than
    `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/mysnapshot`.
    """

    @property
    def ttl(self) -> google.protobuf.duration_pb2.Duration:
        """The amount of time that the new snapshot can stay active after it is
        created. Once 'ttl' expires, the snapshot will get deleted. The maximum
        amount of time a snapshot can stay active is 7 days. If 'ttl' is not
        specified, the default value of 24 hours will be used.
        """
        pass
    description: typing.Text = ...
    """Description of the snapshot."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        cluster : typing.Text = ...,
        snapshot_id : typing.Text = ...,
        ttl : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        description : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["ttl",b"ttl"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster",b"cluster","description",b"description","name",b"name","snapshot_id",b"snapshot_id","ttl",b"ttl"]) -> None: ...
global___SnapshotTableRequest = SnapshotTableRequest

class GetSnapshotRequest(google.protobuf.message.Message):
    """Request message for
    [google.bigtable.admin.v2.BigtableTableAdmin.GetSnapshot][google.bigtable.admin.v2.BigtableTableAdmin.GetSnapshot]

    Note: This is a private alpha release of Cloud Bigtable snapshots. This
    feature is not currently available to most Cloud Bigtable customers. This
    feature might be changed in backward-incompatible ways and is not recommended
    for production use. It is not subject to any SLA or deprecation policy.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The unique name of the requested snapshot.
    Values are of the form
    `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetSnapshotRequest = GetSnapshotRequest

class ListSnapshotsRequest(google.protobuf.message.Message):
    """Request message for
    [google.bigtable.admin.v2.BigtableTableAdmin.ListSnapshots][google.bigtable.admin.v2.BigtableTableAdmin.ListSnapshots]

    Note: This is a private alpha release of Cloud Bigtable snapshots. This
    feature is not currently available to most Cloud Bigtable customers. This
    feature might be changed in backward-incompatible ways and is not recommended
    for production use. It is not subject to any SLA or deprecation policy.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The unique name of the cluster for which snapshots should be listed.
    Values are of the form
    `projects/{project}/instances/{instance}/clusters/{cluster}`.
    Use `{cluster} = '-'` to list snapshots for all clusters in an instance,
    e.g., `projects/{project}/instances/{instance}/clusters/-`.
    """

    page_size: builtins.int = ...
    """The maximum number of snapshots to return per page.
    CURRENTLY UNIMPLEMENTED AND IGNORED.
    """

    page_token: typing.Text = ...
    """The value of `next_page_token` returned by a previous call."""

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListSnapshotsRequest = ListSnapshotsRequest

class ListSnapshotsResponse(google.protobuf.message.Message):
    """Response message for
    [google.bigtable.admin.v2.BigtableTableAdmin.ListSnapshots][google.bigtable.admin.v2.BigtableTableAdmin.ListSnapshots]

    Note: This is a private alpha release of Cloud Bigtable snapshots. This
    feature is not currently available to most Cloud Bigtable customers. This
    feature might be changed in backward-incompatible ways and is not recommended
    for production use. It is not subject to any SLA or deprecation policy.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SNAPSHOTS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def snapshots(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.bigtable.admin.v2.table_pb2.Snapshot]:
        """The snapshots present in the requested cluster."""
        pass
    next_page_token: typing.Text = ...
    """Set if not all snapshots could be returned in a single response.
    Pass this value to `page_token` in another request to get the next
    page of results.
    """

    def __init__(self,
        *,
        snapshots : typing.Optional[typing.Iterable[google.bigtable.admin.v2.table_pb2.Snapshot]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","snapshots",b"snapshots"]) -> None: ...
global___ListSnapshotsResponse = ListSnapshotsResponse

class DeleteSnapshotRequest(google.protobuf.message.Message):
    """Request message for
    [google.bigtable.admin.v2.BigtableTableAdmin.DeleteSnapshot][google.bigtable.admin.v2.BigtableTableAdmin.DeleteSnapshot]

    Note: This is a private alpha release of Cloud Bigtable snapshots. This
    feature is not currently available to most Cloud Bigtable customers. This
    feature might be changed in backward-incompatible ways and is not recommended
    for production use. It is not subject to any SLA or deprecation policy.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The unique name of the snapshot to be deleted.
    Values are of the form
    `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteSnapshotRequest = DeleteSnapshotRequest

class SnapshotTableMetadata(google.protobuf.message.Message):
    """The metadata for the Operation returned by SnapshotTable.

    Note: This is a private alpha release of Cloud Bigtable snapshots. This
    feature is not currently available to most Cloud Bigtable customers. This
    feature might be changed in backward-incompatible ways and is not recommended
    for production use. It is not subject to any SLA or deprecation policy.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ORIGINAL_REQUEST_FIELD_NUMBER: builtins.int
    REQUEST_TIME_FIELD_NUMBER: builtins.int
    FINISH_TIME_FIELD_NUMBER: builtins.int
    @property
    def original_request(self) -> global___SnapshotTableRequest:
        """The request that prompted the initiation of this SnapshotTable operation."""
        pass
    @property
    def request_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which the original request was received."""
        pass
    @property
    def finish_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which the operation failed or was completed successfully."""
        pass
    def __init__(self,
        *,
        original_request : typing.Optional[global___SnapshotTableRequest] = ...,
        request_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        finish_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["finish_time",b"finish_time","original_request",b"original_request","request_time",b"request_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["finish_time",b"finish_time","original_request",b"original_request","request_time",b"request_time"]) -> None: ...
global___SnapshotTableMetadata = SnapshotTableMetadata

class CreateTableFromSnapshotMetadata(google.protobuf.message.Message):
    """The metadata for the Operation returned by CreateTableFromSnapshot.

    Note: This is a private alpha release of Cloud Bigtable snapshots. This
    feature is not currently available to most Cloud Bigtable customers. This
    feature might be changed in backward-incompatible ways and is not recommended
    for production use. It is not subject to any SLA or deprecation policy.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ORIGINAL_REQUEST_FIELD_NUMBER: builtins.int
    REQUEST_TIME_FIELD_NUMBER: builtins.int
    FINISH_TIME_FIELD_NUMBER: builtins.int
    @property
    def original_request(self) -> global___CreateTableFromSnapshotRequest:
        """The request that prompted the initiation of this CreateTableFromSnapshot
        operation.
        """
        pass
    @property
    def request_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which the original request was received."""
        pass
    @property
    def finish_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which the operation failed or was completed successfully."""
        pass
    def __init__(self,
        *,
        original_request : typing.Optional[global___CreateTableFromSnapshotRequest] = ...,
        request_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        finish_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["finish_time",b"finish_time","original_request",b"original_request","request_time",b"request_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["finish_time",b"finish_time","original_request",b"original_request","request_time",b"request_time"]) -> None: ...
global___CreateTableFromSnapshotMetadata = CreateTableFromSnapshotMetadata

class CreateBackupRequest(google.protobuf.message.Message):
    """The request for [CreateBackup][google.bigtable.admin.v2.BigtableTableAdmin.CreateBackup]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    BACKUP_ID_FIELD_NUMBER: builtins.int
    BACKUP_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. This must be one of the clusters in the instance in which this
    table is located. The backup will be stored in this cluster. Values are
    of the form `projects/{project}/instances/{instance}/clusters/{cluster}`.
    """

    backup_id: typing.Text = ...
    """Required. The id of the backup to be created. The `backup_id` along with
    the parent `parent` are combined as {parent}/backups/{backup_id} to create
    the full backup name, of the form:
    `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup_id}`.
    This string must be between 1 and 50 characters in length and match the
    regex [_a-zA-Z0-9][-_.a-zA-Z0-9]*.
    """

    @property
    def backup(self) -> google.bigtable.admin.v2.table_pb2.Backup:
        """Required. The backup to create."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        backup_id : typing.Text = ...,
        backup : typing.Optional[google.bigtable.admin.v2.table_pb2.Backup] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["backup",b"backup"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["backup",b"backup","backup_id",b"backup_id","parent",b"parent"]) -> None: ...
global___CreateBackupRequest = CreateBackupRequest

class CreateBackupMetadata(google.protobuf.message.Message):
    """Metadata type for the operation returned by
    [CreateBackup][google.bigtable.admin.v2.BigtableTableAdmin.CreateBackup].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    SOURCE_TABLE_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the backup being created."""

    source_table: typing.Text = ...
    """The name of the table the backup is created from."""

    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which this operation started."""
        pass
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """If set, the time at which this operation finished or was cancelled."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        source_table : typing.Text = ...,
        start_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        end_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_time",b"end_time","start_time",b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_time",b"end_time","name",b"name","source_table",b"source_table","start_time",b"start_time"]) -> None: ...
global___CreateBackupMetadata = CreateBackupMetadata

class UpdateBackupRequest(google.protobuf.message.Message):
    """The request for [UpdateBackup][google.bigtable.admin.v2.BigtableTableAdmin.UpdateBackup]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BACKUP_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def backup(self) -> google.bigtable.admin.v2.table_pb2.Backup:
        """Required. The backup to update. `backup.name`, and the fields to be updated
        as specified by `update_mask` are required. Other fields are ignored.
        Update is only supported for the following fields:
         * `backup.expire_time`.
        """
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Required. A mask specifying which fields (e.g. `expire_time`) in the
        Backup resource should be updated. This mask is relative to the Backup
        resource, not to the request message. The field mask must always be
        specified; this prevents any future fields from being erased accidentally
        by clients that do not know about them.
        """
        pass
    def __init__(self,
        *,
        backup : typing.Optional[google.bigtable.admin.v2.table_pb2.Backup] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["backup",b"backup","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["backup",b"backup","update_mask",b"update_mask"]) -> None: ...
global___UpdateBackupRequest = UpdateBackupRequest

class GetBackupRequest(google.protobuf.message.Message):
    """The request for [GetBackup][google.bigtable.admin.v2.BigtableTableAdmin.GetBackup]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Name of the backup.
    Values are of the form
    `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetBackupRequest = GetBackupRequest

class DeleteBackupRequest(google.protobuf.message.Message):
    """The request for [DeleteBackup][google.bigtable.admin.v2.BigtableTableAdmin.DeleteBackup]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Name of the backup to delete.
    Values are of the form
    `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteBackupRequest = DeleteBackupRequest

class ListBackupsRequest(google.protobuf.message.Message):
    """The request for [ListBackups][google.bigtable.admin.v2.BigtableTableAdmin.ListBackups]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The cluster to list backups from.  Values are of the
    form `projects/{project}/instances/{instance}/clusters/{cluster}`.
    Use `{cluster} = '-'` to list backups for all clusters in an instance,
    e.g., `projects/{project}/instances/{instance}/clusters/-`.
    """

    filter: typing.Text = ...
    """A filter expression that filters backups listed in the response.
    The expression must specify the field name, a comparison operator,
    and the value that you want to use for filtering. The value must be a
    string, a number, or a boolean. The comparison operator must be
    <, >, <=, >=, !=, =, or :. Colon ':' represents a HAS operator which is
    roughly synonymous with equality. Filter rules are case insensitive.

    The fields eligible for filtering are:
      * `name`
      * `source_table`
      * `state`
      * `start_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
      * `end_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
      * `expire_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
      * `size_bytes`

    To filter on multiple expressions, provide each separate expression within
    parentheses. By default, each expression is an AND expression. However,
    you can include AND, OR, and NOT expressions explicitly.

    Some examples of using filters are:

      * `name:"exact"` --> The backup's name is the string "exact".
      * `name:howl` --> The backup's name contains the string "howl".
      * `source_table:prod`
             --> The source_table's name contains the string "prod".
      * `state:CREATING` --> The backup is pending creation.
      * `state:READY` --> The backup is fully created and ready for use.
      * `(name:howl) AND (start_time < \\"2018-03-28T14:50:00Z\\")`
             --> The backup name contains the string "howl" and start_time
                 of the backup is before 2018-03-28T14:50:00Z.
      * `size_bytes > 10000000000` --> The backup's size is greater than 10GB
    """

    order_by: typing.Text = ...
    """An expression for specifying the sort order of the results of the request.
    The string value should specify one or more fields in [Backup][google.bigtable.admin.v2.Backup]. The full
    syntax is described at https://aip.dev/132#ordering.

    Fields supported are:
       * name
       * source_table
       * expire_time
       * start_time
       * end_time
       * size_bytes
       * state

    For example, "start_time". The default sorting order is ascending.
    To specify descending order for the field, a suffix " desc" should
    be appended to the field name. For example, "start_time desc".
    Redundant space characters in the syntax are insigificant.

    If order_by is empty, results will be sorted by `start_time` in descending
    order starting from the most recently created backup.
    """

    page_size: builtins.int = ...
    """Number of backups to be returned in the response. If 0 or
    less, defaults to the server's maximum allowed page size.
    """

    page_token: typing.Text = ...
    """If non-empty, `page_token` should contain a
    [next_page_token][google.bigtable.admin.v2.ListBackupsResponse.next_page_token] from a
    previous [ListBackupsResponse][google.bigtable.admin.v2.ListBackupsResponse] to the same `parent` and with the same
    `filter`.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        filter : typing.Text = ...,
        order_by : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","order_by",b"order_by","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListBackupsRequest = ListBackupsRequest

class ListBackupsResponse(google.protobuf.message.Message):
    """The response for [ListBackups][google.bigtable.admin.v2.BigtableTableAdmin.ListBackups]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BACKUPS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def backups(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.bigtable.admin.v2.table_pb2.Backup]:
        """The list of matching backups."""
        pass
    next_page_token: typing.Text = ...
    """`next_page_token` can be sent in a subsequent
    [ListBackups][google.bigtable.admin.v2.BigtableTableAdmin.ListBackups] call to fetch more
    of the matching backups.
    """

    def __init__(self,
        *,
        backups : typing.Optional[typing.Iterable[google.bigtable.admin.v2.table_pb2.Backup]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["backups",b"backups","next_page_token",b"next_page_token"]) -> None: ...
global___ListBackupsResponse = ListBackupsResponse
