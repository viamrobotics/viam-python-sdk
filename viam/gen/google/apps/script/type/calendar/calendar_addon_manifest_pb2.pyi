"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.apps.script.type.extension_point_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class CalendarAddOnManifest(google.protobuf.message.Message):
    """Manifest section specific to Calendar Add-ons.

    Calendar add-on manifest.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _EventAccess:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _EventAccessEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_EventAccess.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        UNSPECIFIED: CalendarAddOnManifest.EventAccess.ValueType = ...  # 0
        """Default value when nothing is set for EventAccess."""

        METADATA: CalendarAddOnManifest.EventAccess.ValueType = ...  # 1
        """METADATA gives event triggers the permission to access the metadata of
        events such as event id and calendar id.
        """

        READ: CalendarAddOnManifest.EventAccess.ValueType = ...  # 3
        """READ gives event triggers access to all provided event fields including
        the metadata, attendees, and conference data.
        """

        WRITE: CalendarAddOnManifest.EventAccess.ValueType = ...  # 4
        """WRITE gives event triggers access to the metadata of events and the
        ability to perform all actions, including adding attendees and setting
        conference data.
        """

        READ_WRITE: CalendarAddOnManifest.EventAccess.ValueType = ...  # 5
        """READ_WRITE gives event triggers access to all provided event fields
        including the metadata, attendees, and conference data and the ability to
        perform all actions.
        """

    class EventAccess(_EventAccess, metaclass=_EventAccessEnumTypeWrapper):
        """An enum defining the level of data access event triggers require."""
        pass

    UNSPECIFIED: CalendarAddOnManifest.EventAccess.ValueType = ...  # 0
    """Default value when nothing is set for EventAccess."""

    METADATA: CalendarAddOnManifest.EventAccess.ValueType = ...  # 1
    """METADATA gives event triggers the permission to access the metadata of
    events such as event id and calendar id.
    """

    READ: CalendarAddOnManifest.EventAccess.ValueType = ...  # 3
    """READ gives event triggers access to all provided event fields including
    the metadata, attendees, and conference data.
    """

    WRITE: CalendarAddOnManifest.EventAccess.ValueType = ...  # 4
    """WRITE gives event triggers access to the metadata of events and the
    ability to perform all actions, including adding attendees and setting
    conference data.
    """

    READ_WRITE: CalendarAddOnManifest.EventAccess.ValueType = ...  # 5
    """READ_WRITE gives event triggers access to all provided event fields
    including the metadata, attendees, and conference data and the ability to
    perform all actions.
    """


    HOMEPAGE_TRIGGER_FIELD_NUMBER: builtins.int
    CONFERENCE_SOLUTION_FIELD_NUMBER: builtins.int
    CREATE_SETTINGS_URL_FUNCTION_FIELD_NUMBER: builtins.int
    EVENT_OPEN_TRIGGER_FIELD_NUMBER: builtins.int
    EVENT_UPDATE_TRIGGER_FIELD_NUMBER: builtins.int
    CURRENT_EVENT_ACCESS_FIELD_NUMBER: builtins.int
    @property
    def homepage_trigger(self) -> google.apps.script.type.extension_point_pb2.HomepageExtensionPoint:
        """Defines an endpoint that will be executed contexts that don't
        match a declared contextual trigger. Any cards generated by this function
        will always be available to the user, but may be eclipsed by contextual
        content when this add-on declares more targeted triggers.

        If present, this overrides the configuration from
        `addOns.common.homepageTrigger`.
        """
        pass
    @property
    def conference_solution(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ConferenceSolution]:
        """Defines conference solutions provided by this add-on."""
        pass
    create_settings_url_function: typing.Text = ...
    """An endpoint to execute that creates a URL to the add-on's settings page."""

    @property
    def event_open_trigger(self) -> global___CalendarExtensionPoint:
        """An endpoint to trigger when an event is opened (viewed/edited)."""
        pass
    @property
    def event_update_trigger(self) -> global___CalendarExtensionPoint:
        """An endpoint to trigger when the open event is updated."""
        pass
    current_event_access: global___CalendarAddOnManifest.EventAccess.ValueType = ...
    """Define the level of data access when an event addon is triggered."""

    def __init__(self,
        *,
        homepage_trigger : typing.Optional[google.apps.script.type.extension_point_pb2.HomepageExtensionPoint] = ...,
        conference_solution : typing.Optional[typing.Iterable[global___ConferenceSolution]] = ...,
        create_settings_url_function : typing.Text = ...,
        event_open_trigger : typing.Optional[global___CalendarExtensionPoint] = ...,
        event_update_trigger : typing.Optional[global___CalendarExtensionPoint] = ...,
        current_event_access : global___CalendarAddOnManifest.EventAccess.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["event_open_trigger",b"event_open_trigger","event_update_trigger",b"event_update_trigger","homepage_trigger",b"homepage_trigger"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["conference_solution",b"conference_solution","create_settings_url_function",b"create_settings_url_function","current_event_access",b"current_event_access","event_open_trigger",b"event_open_trigger","event_update_trigger",b"event_update_trigger","homepage_trigger",b"homepage_trigger"]) -> None: ...
global___CalendarAddOnManifest = CalendarAddOnManifest

class ConferenceSolution(google.protobuf.message.Message):
    """Defines conference related values."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ON_CREATE_FUNCTION_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    LOGO_URL_FIELD_NUMBER: builtins.int
    on_create_function: typing.Text = ...
    """Required. The endpoint to call when ConferenceData should be created."""

    id: typing.Text = ...
    """Required. IDs should be unique across ConferenceSolutions within one
    add-on, but this is not strictly enforced. It is up to the add-on developer
    to assign them uniquely, otherwise the wrong ConferenceSolution may be
    used when the add-on is triggered. While the developer may change the
    display name of an add-on, the ID should not be changed.
    """

    name: typing.Text = ...
    """Required. The display name of the ConferenceSolution."""

    logo_url: typing.Text = ...
    """Required. The URL for the logo image of the ConferenceSolution."""

    def __init__(self,
        *,
        on_create_function : typing.Text = ...,
        id : typing.Text = ...,
        name : typing.Text = ...,
        logo_url : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id","logo_url",b"logo_url","name",b"name","on_create_function",b"on_create_function"]) -> None: ...
global___ConferenceSolution = ConferenceSolution

class CalendarExtensionPoint(google.protobuf.message.Message):
    """Common format for declaring a calendar add-on's triggers."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RUN_FUNCTION_FIELD_NUMBER: builtins.int
    run_function: typing.Text = ...
    """Required. The endpoint to execute when this extension point is
    activated.
    """

    def __init__(self,
        *,
        run_function : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["run_function",b"run_function"]) -> None: ...
global___CalendarExtensionPoint = CalendarExtensionPoint
