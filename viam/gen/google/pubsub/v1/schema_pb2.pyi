"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _SchemaView:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _SchemaViewEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SchemaView.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    SCHEMA_VIEW_UNSPECIFIED: SchemaView.ValueType = ...  # 0
    """The default / unset value.
    The API will default to the BASIC view.
    """

    BASIC: SchemaView.ValueType = ...  # 1
    """Include the name and type of the schema, but not the definition."""

    FULL: SchemaView.ValueType = ...  # 2
    """Include all Schema object fields."""

class SchemaView(_SchemaView, metaclass=_SchemaViewEnumTypeWrapper):
    """View of Schema object fields to be returned by GetSchema and ListSchemas."""
    pass

SCHEMA_VIEW_UNSPECIFIED: SchemaView.ValueType = ...  # 0
"""The default / unset value.
The API will default to the BASIC view.
"""

BASIC: SchemaView.ValueType = ...  # 1
"""Include the name and type of the schema, but not the definition."""

FULL: SchemaView.ValueType = ...  # 2
"""Include all Schema object fields."""

global___SchemaView = SchemaView


class _Encoding:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _EncodingEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Encoding.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    ENCODING_UNSPECIFIED: Encoding.ValueType = ...  # 0
    """Unspecified"""

    JSON: Encoding.ValueType = ...  # 1
    """JSON encoding"""

    BINARY: Encoding.ValueType = ...  # 2
    """Binary encoding, as defined by the schema type. For some schema types,
    binary encoding may not be available.
    """

class Encoding(_Encoding, metaclass=_EncodingEnumTypeWrapper):
    """Possible encoding types for messages."""
    pass

ENCODING_UNSPECIFIED: Encoding.ValueType = ...  # 0
"""Unspecified"""

JSON: Encoding.ValueType = ...  # 1
"""JSON encoding"""

BINARY: Encoding.ValueType = ...  # 2
"""Binary encoding, as defined by the schema type. For some schema types,
binary encoding may not be available.
"""

global___Encoding = Encoding


class Schema(google.protobuf.message.Message):
    """A schema resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Type:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        TYPE_UNSPECIFIED: Schema.Type.ValueType = ...  # 0
        """Default value. This value is unused."""

        PROTOCOL_BUFFER: Schema.Type.ValueType = ...  # 1
        """A Protocol Buffer schema definition."""

        AVRO: Schema.Type.ValueType = ...  # 2
        """An Avro schema definition."""

    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        """Possible schema definition types."""
        pass

    TYPE_UNSPECIFIED: Schema.Type.ValueType = ...  # 0
    """Default value. This value is unused."""

    PROTOCOL_BUFFER: Schema.Type.ValueType = ...  # 1
    """A Protocol Buffer schema definition."""

    AVRO: Schema.Type.ValueType = ...  # 2
    """An Avro schema definition."""


    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    DEFINITION_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Name of the schema.
    Format is `projects/{project}/schemas/{schema}`.
    """

    type: global___Schema.Type.ValueType = ...
    """The type of the schema definition."""

    definition: typing.Text = ...
    """The definition of the schema. This should contain a string representing
    the full definition of the schema that is a valid schema definition of
    the type specified in `type`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        type : global___Schema.Type.ValueType = ...,
        definition : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["definition",b"definition","name",b"name","type",b"type"]) -> None: ...
global___Schema = Schema

class CreateSchemaRequest(google.protobuf.message.Message):
    """Request for the CreateSchema method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    SCHEMA_FIELD_NUMBER: builtins.int
    SCHEMA_ID_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The name of the project in which to create the schema.
    Format is `projects/{project-id}`.
    """

    @property
    def schema(self) -> global___Schema:
        """Required. The schema object to create.

        This schema's `name` parameter is ignored. The schema object returned
        by CreateSchema will have a `name` made using the given `parent` and
        `schema_id`.
        """
        pass
    schema_id: typing.Text = ...
    """The ID to use for the schema, which will become the final component of
    the schema's resource name.

    See https://cloud.google.com/pubsub/docs/admin#resource_names for resource
    name constraints.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        schema : typing.Optional[global___Schema] = ...,
        schema_id : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["schema",b"schema"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent",b"parent","schema",b"schema","schema_id",b"schema_id"]) -> None: ...
global___CreateSchemaRequest = CreateSchemaRequest

class GetSchemaRequest(google.protobuf.message.Message):
    """Request for the GetSchema method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    VIEW_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the schema to get.
    Format is `projects/{project}/schemas/{schema}`.
    """

    view: global___SchemaView.ValueType = ...
    """The set of fields to return in the response. If not set, returns a Schema
    with `name` and `type`, but not `definition`. Set to `FULL` to retrieve all
    fields.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        view : global___SchemaView.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","view",b"view"]) -> None: ...
global___GetSchemaRequest = GetSchemaRequest

class ListSchemasRequest(google.protobuf.message.Message):
    """Request for the `ListSchemas` method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    VIEW_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The name of the project in which to list schemas.
    Format is `projects/{project-id}`.
    """

    view: global___SchemaView.ValueType = ...
    """The set of Schema fields to return in the response. If not set, returns
    Schemas with `name` and `type`, but not `definition`. Set to `FULL` to
    retrieve all fields.
    """

    page_size: builtins.int = ...
    """Maximum number of schemas to return."""

    page_token: typing.Text = ...
    """The value returned by the last `ListSchemasResponse`; indicates that
    this is a continuation of a prior `ListSchemas` call, and that the
    system should return the next page of data.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        view : global___SchemaView.ValueType = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent","view",b"view"]) -> None: ...
global___ListSchemasRequest = ListSchemasRequest

class ListSchemasResponse(google.protobuf.message.Message):
    """Response for the `ListSchemas` method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SCHEMAS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def schemas(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Schema]:
        """The resulting schemas."""
        pass
    next_page_token: typing.Text = ...
    """If not empty, indicates that there may be more schemas that match the
    request; this value should be passed in a new `ListSchemasRequest`.
    """

    def __init__(self,
        *,
        schemas : typing.Optional[typing.Iterable[global___Schema]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","schemas",b"schemas"]) -> None: ...
global___ListSchemasResponse = ListSchemasResponse

class DeleteSchemaRequest(google.protobuf.message.Message):
    """Request for the `DeleteSchema` method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Name of the schema to delete.
    Format is `projects/{project}/schemas/{schema}`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteSchemaRequest = DeleteSchemaRequest

class ValidateSchemaRequest(google.protobuf.message.Message):
    """Request for the `ValidateSchema` method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    SCHEMA_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The name of the project in which to validate schemas.
    Format is `projects/{project-id}`.
    """

    @property
    def schema(self) -> global___Schema:
        """Required. The schema object to validate."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        schema : typing.Optional[global___Schema] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["schema",b"schema"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent",b"parent","schema",b"schema"]) -> None: ...
global___ValidateSchemaRequest = ValidateSchemaRequest

class ValidateSchemaResponse(google.protobuf.message.Message):
    """Response for the `ValidateSchema` method.
    Empty for now.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___ValidateSchemaResponse = ValidateSchemaResponse

class ValidateMessageRequest(google.protobuf.message.Message):
    """Request for the `ValidateMessage` method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    SCHEMA_FIELD_NUMBER: builtins.int
    MESSAGE_FIELD_NUMBER: builtins.int
    ENCODING_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The name of the project in which to validate schemas.
    Format is `projects/{project-id}`.
    """

    name: typing.Text = ...
    """Name of the schema against which to validate.

    Format is `projects/{project}/schemas/{schema}`.
    """

    @property
    def schema(self) -> global___Schema:
        """Ad-hoc schema against which to validate"""
        pass
    message: builtins.bytes = ...
    """Message to validate against the provided `schema_spec`."""

    encoding: global___Encoding.ValueType = ...
    """The encoding expected for messages"""

    def __init__(self,
        *,
        parent : typing.Text = ...,
        name : typing.Text = ...,
        schema : typing.Optional[global___Schema] = ...,
        message : builtins.bytes = ...,
        encoding : global___Encoding.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["name",b"name","schema",b"schema","schema_spec",b"schema_spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["encoding",b"encoding","message",b"message","name",b"name","parent",b"parent","schema",b"schema","schema_spec",b"schema_spec"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["schema_spec",b"schema_spec"]) -> typing.Optional[typing_extensions.Literal["name","schema"]]: ...
global___ValidateMessageRequest = ValidateMessageRequest

class ValidateMessageResponse(google.protobuf.message.Message):
    """Response for the `ValidateMessage` method.
    Empty for now.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___ValidateMessageResponse = ValidateMessageResponse
