"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.rpc.status_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class AptArtifact(google.protobuf.message.Message):
    """A detailed representation of an Apt artifact. Information in the record
    is derived from the archive's control file.
    See https://www.debian.org/doc/debian-policy/ch-controlfields.html
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _PackageType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _PackageTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_PackageType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        PACKAGE_TYPE_UNSPECIFIED: AptArtifact.PackageType.ValueType = ...  # 0
        """Package type is not specified."""

        BINARY: AptArtifact.PackageType.ValueType = ...  # 1
        """Binary package."""

        SOURCE: AptArtifact.PackageType.ValueType = ...  # 2
        """Source package."""

    class PackageType(_PackageType, metaclass=_PackageTypeEnumTypeWrapper):
        """Package type is either binary or source."""
        pass

    PACKAGE_TYPE_UNSPECIFIED: AptArtifact.PackageType.ValueType = ...  # 0
    """Package type is not specified."""

    BINARY: AptArtifact.PackageType.ValueType = ...  # 1
    """Binary package."""

    SOURCE: AptArtifact.PackageType.ValueType = ...  # 2
    """Source package."""


    NAME_FIELD_NUMBER: builtins.int
    PACKAGE_NAME_FIELD_NUMBER: builtins.int
    PACKAGE_TYPE_FIELD_NUMBER: builtins.int
    ARCHITECTURE_FIELD_NUMBER: builtins.int
    COMPONENT_FIELD_NUMBER: builtins.int
    CONTROL_FILE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. The Artifact Registry resource name of the artifact."""

    package_name: typing.Text = ...
    """Output only. The Apt package name of the artifact."""

    package_type: global___AptArtifact.PackageType.ValueType = ...
    """Output only. An artifact is a binary or source package."""

    architecture: typing.Text = ...
    """Output only. Operating system architecture of the artifact."""

    component: typing.Text = ...
    """Output only. Repository component of the artifact."""

    control_file: builtins.bytes = ...
    """Output only. Contents of the artifact's control metadata file."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        package_name : typing.Text = ...,
        package_type : global___AptArtifact.PackageType.ValueType = ...,
        architecture : typing.Text = ...,
        component : typing.Text = ...,
        control_file : builtins.bytes = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["architecture",b"architecture","component",b"component","control_file",b"control_file","name",b"name","package_name",b"package_name","package_type",b"package_type"]) -> None: ...
global___AptArtifact = AptArtifact

class ImportAptArtifactsGcsSource(google.protobuf.message.Message):
    """Google Cloud Storage location where the artifacts currently reside."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    URIS_FIELD_NUMBER: builtins.int
    USE_WILDCARDS_FIELD_NUMBER: builtins.int
    @property
    def uris(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Cloud Storage paths URI (e.g., gs://my_bucket//my_object)."""
        pass
    use_wildcards: builtins.bool = ...
    """Supports URI wildcards for matching multiple objects from a single URI."""

    def __init__(self,
        *,
        uris : typing.Optional[typing.Iterable[typing.Text]] = ...,
        use_wildcards : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["uris",b"uris","use_wildcards",b"use_wildcards"]) -> None: ...
global___ImportAptArtifactsGcsSource = ImportAptArtifactsGcsSource

class ImportAptArtifactsRequest(google.protobuf.message.Message):
    """The request to import new apt artifacts."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GCS_SOURCE_FIELD_NUMBER: builtins.int
    PARENT_FIELD_NUMBER: builtins.int
    @property
    def gcs_source(self) -> global___ImportAptArtifactsGcsSource:
        """Google Cloud Storage location where input content is located."""
        pass
    parent: typing.Text = ...
    """The name of the parent resource where the artifacts will be imported."""

    def __init__(self,
        *,
        gcs_source : typing.Optional[global___ImportAptArtifactsGcsSource] = ...,
        parent : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["gcs_source",b"gcs_source","source",b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["gcs_source",b"gcs_source","parent",b"parent","source",b"source"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source",b"source"]) -> typing.Optional[typing_extensions.Literal["gcs_source"]]: ...
global___ImportAptArtifactsRequest = ImportAptArtifactsRequest

class ImportAptArtifactsErrorInfo(google.protobuf.message.Message):
    """Error information explaining why a package was not imported."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GCS_SOURCE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    @property
    def gcs_source(self) -> global___ImportAptArtifactsGcsSource:
        """Google Cloud Storage location requested."""
        pass
    @property
    def error(self) -> google.rpc.status_pb2.Status:
        """The detailed error status."""
        pass
    def __init__(self,
        *,
        gcs_source : typing.Optional[global___ImportAptArtifactsGcsSource] = ...,
        error : typing.Optional[google.rpc.status_pb2.Status] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["error",b"error","gcs_source",b"gcs_source","source",b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["error",b"error","gcs_source",b"gcs_source","source",b"source"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source",b"source"]) -> typing.Optional[typing_extensions.Literal["gcs_source"]]: ...
global___ImportAptArtifactsErrorInfo = ImportAptArtifactsErrorInfo

class ImportAptArtifactsResponse(google.protobuf.message.Message):
    """The response message from importing APT artifacts."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    APT_ARTIFACTS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    @property
    def apt_artifacts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AptArtifact]:
        """The Apt artifacts imported."""
        pass
    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ImportAptArtifactsErrorInfo]:
        """Detailed error info for artifacts that were not imported."""
        pass
    def __init__(self,
        *,
        apt_artifacts : typing.Optional[typing.Iterable[global___AptArtifact]] = ...,
        errors : typing.Optional[typing.Iterable[global___ImportAptArtifactsErrorInfo]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["apt_artifacts",b"apt_artifacts","errors",b"errors"]) -> None: ...
global___ImportAptArtifactsResponse = ImportAptArtifactsResponse

class ImportAptArtifactsMetadata(google.protobuf.message.Message):
    """The operation metadata for importing artifacts."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___ImportAptArtifactsMetadata = ImportAptArtifactsMetadata
