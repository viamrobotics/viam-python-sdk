"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class SourceContext(google.protobuf.message.Message):
    """A SourceContext is a reference to a tree of files. A SourceContext together
    with a path point to a unique revision of a single file or directory.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CLOUD_REPO_FIELD_NUMBER: builtins.int
    CLOUD_WORKSPACE_FIELD_NUMBER: builtins.int
    GERRIT_FIELD_NUMBER: builtins.int
    GIT_FIELD_NUMBER: builtins.int
    @property
    def cloud_repo(self) -> global___CloudRepoSourceContext:
        """A SourceContext referring to a revision in a cloud repo."""
        pass
    @property
    def cloud_workspace(self) -> global___CloudWorkspaceSourceContext:
        """A SourceContext referring to a snapshot in a cloud workspace."""
        pass
    @property
    def gerrit(self) -> global___GerritSourceContext:
        """A SourceContext referring to a Gerrit project."""
        pass
    @property
    def git(self) -> global___GitSourceContext:
        """A SourceContext referring to any third party Git repo (e.g. GitHub)."""
        pass
    def __init__(self,
        *,
        cloud_repo : typing.Optional[global___CloudRepoSourceContext] = ...,
        cloud_workspace : typing.Optional[global___CloudWorkspaceSourceContext] = ...,
        gerrit : typing.Optional[global___GerritSourceContext] = ...,
        git : typing.Optional[global___GitSourceContext] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cloud_repo",b"cloud_repo","cloud_workspace",b"cloud_workspace","context",b"context","gerrit",b"gerrit","git",b"git"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cloud_repo",b"cloud_repo","cloud_workspace",b"cloud_workspace","context",b"context","gerrit",b"gerrit","git",b"git"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["context",b"context"]) -> typing.Optional[typing_extensions.Literal["cloud_repo","cloud_workspace","gerrit","git"]]: ...
global___SourceContext = SourceContext

class ExtendedSourceContext(google.protobuf.message.Message):
    """An ExtendedSourceContext is a SourceContext combined with additional
    details describing the context.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    CONTEXT_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    @property
    def context(self) -> global___SourceContext:
        """Any source context."""
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Labels with user defined metadata."""
        pass
    def __init__(self,
        *,
        context : typing.Optional[global___SourceContext] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["context",b"context"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["context",b"context","labels",b"labels"]) -> None: ...
global___ExtendedSourceContext = ExtendedSourceContext

class AliasContext(google.protobuf.message.Message):
    """An alias to a repo revision."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Kind:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _KindEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Kind.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        ANY: AliasContext.Kind.ValueType = ...  # 0
        """Do not use."""

        FIXED: AliasContext.Kind.ValueType = ...  # 1
        """Git tag"""

        MOVABLE: AliasContext.Kind.ValueType = ...  # 2
        """Git branch"""

        OTHER: AliasContext.Kind.ValueType = ...  # 4
        """OTHER is used to specify non-standard aliases, those not of the kinds
        above. For example, if a Git repo has a ref named "refs/foo/bar", it
        is considered to be of kind OTHER.
        """

    class Kind(_Kind, metaclass=_KindEnumTypeWrapper):
        """The type of an Alias."""
        pass

    ANY: AliasContext.Kind.ValueType = ...  # 0
    """Do not use."""

    FIXED: AliasContext.Kind.ValueType = ...  # 1
    """Git tag"""

    MOVABLE: AliasContext.Kind.ValueType = ...  # 2
    """Git branch"""

    OTHER: AliasContext.Kind.ValueType = ...  # 4
    """OTHER is used to specify non-standard aliases, those not of the kinds
    above. For example, if a Git repo has a ref named "refs/foo/bar", it
    is considered to be of kind OTHER.
    """


    KIND_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    kind: global___AliasContext.Kind.ValueType = ...
    """The alias kind."""

    name: typing.Text = ...
    """The alias name."""

    def __init__(self,
        *,
        kind : global___AliasContext.Kind.ValueType = ...,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["kind",b"kind","name",b"name"]) -> None: ...
global___AliasContext = AliasContext

class CloudRepoSourceContext(google.protobuf.message.Message):
    """A CloudRepoSourceContext denotes a particular revision in a cloud
    repo (a repo hosted by the Google Cloud Platform).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    REPO_ID_FIELD_NUMBER: builtins.int
    REVISION_ID_FIELD_NUMBER: builtins.int
    ALIAS_NAME_FIELD_NUMBER: builtins.int
    ALIAS_CONTEXT_FIELD_NUMBER: builtins.int
    @property
    def repo_id(self) -> global___RepoId:
        """The ID of the repo."""
        pass
    revision_id: typing.Text = ...
    """A revision ID."""

    alias_name: typing.Text = ...
    """The name of an alias (branch, tag, etc.)."""

    @property
    def alias_context(self) -> global___AliasContext:
        """An alias, which may be a branch or tag."""
        pass
    def __init__(self,
        *,
        repo_id : typing.Optional[global___RepoId] = ...,
        revision_id : typing.Text = ...,
        alias_name : typing.Text = ...,
        alias_context : typing.Optional[global___AliasContext] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["alias_context",b"alias_context","alias_name",b"alias_name","repo_id",b"repo_id","revision",b"revision","revision_id",b"revision_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["alias_context",b"alias_context","alias_name",b"alias_name","repo_id",b"repo_id","revision",b"revision","revision_id",b"revision_id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["revision",b"revision"]) -> typing.Optional[typing_extensions.Literal["revision_id","alias_name","alias_context"]]: ...
global___CloudRepoSourceContext = CloudRepoSourceContext

class CloudWorkspaceSourceContext(google.protobuf.message.Message):
    """A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    WORKSPACE_ID_FIELD_NUMBER: builtins.int
    SNAPSHOT_ID_FIELD_NUMBER: builtins.int
    @property
    def workspace_id(self) -> global___CloudWorkspaceId:
        """The ID of the workspace."""
        pass
    snapshot_id: typing.Text = ...
    """The ID of the snapshot.
    An empty snapshot_id refers to the most recent snapshot.
    """

    def __init__(self,
        *,
        workspace_id : typing.Optional[global___CloudWorkspaceId] = ...,
        snapshot_id : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["workspace_id",b"workspace_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["snapshot_id",b"snapshot_id","workspace_id",b"workspace_id"]) -> None: ...
global___CloudWorkspaceSourceContext = CloudWorkspaceSourceContext

class GerritSourceContext(google.protobuf.message.Message):
    """A SourceContext referring to a Gerrit project."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    HOST_URI_FIELD_NUMBER: builtins.int
    GERRIT_PROJECT_FIELD_NUMBER: builtins.int
    REVISION_ID_FIELD_NUMBER: builtins.int
    ALIAS_NAME_FIELD_NUMBER: builtins.int
    ALIAS_CONTEXT_FIELD_NUMBER: builtins.int
    host_uri: typing.Text = ...
    """The URI of a running Gerrit instance."""

    gerrit_project: typing.Text = ...
    """The full project name within the host. Projects may be nested, so
    "project/subproject" is a valid project name.
    The "repo name" is hostURI/project.
    """

    revision_id: typing.Text = ...
    """A revision (commit) ID."""

    alias_name: typing.Text = ...
    """The name of an alias (branch, tag, etc.)."""

    @property
    def alias_context(self) -> global___AliasContext:
        """An alias, which may be a branch or tag."""
        pass
    def __init__(self,
        *,
        host_uri : typing.Text = ...,
        gerrit_project : typing.Text = ...,
        revision_id : typing.Text = ...,
        alias_name : typing.Text = ...,
        alias_context : typing.Optional[global___AliasContext] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["alias_context",b"alias_context","alias_name",b"alias_name","revision",b"revision","revision_id",b"revision_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["alias_context",b"alias_context","alias_name",b"alias_name","gerrit_project",b"gerrit_project","host_uri",b"host_uri","revision",b"revision","revision_id",b"revision_id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["revision",b"revision"]) -> typing.Optional[typing_extensions.Literal["revision_id","alias_name","alias_context"]]: ...
global___GerritSourceContext = GerritSourceContext

class GitSourceContext(google.protobuf.message.Message):
    """A GitSourceContext denotes a particular revision in a third party Git
    repository (e.g. GitHub).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    URL_FIELD_NUMBER: builtins.int
    REVISION_ID_FIELD_NUMBER: builtins.int
    url: typing.Text = ...
    """Git repository URL."""

    revision_id: typing.Text = ...
    """Git commit hash.
    required.
    """

    def __init__(self,
        *,
        url : typing.Text = ...,
        revision_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["revision_id",b"revision_id","url",b"url"]) -> None: ...
global___GitSourceContext = GitSourceContext

class RepoId(google.protobuf.message.Message):
    """A unique identifier for a cloud repo."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_REPO_ID_FIELD_NUMBER: builtins.int
    UID_FIELD_NUMBER: builtins.int
    @property
    def project_repo_id(self) -> global___ProjectRepoId:
        """A combination of a project ID and a repo name."""
        pass
    uid: typing.Text = ...
    """A server-assigned, globally unique identifier."""

    def __init__(self,
        *,
        project_repo_id : typing.Optional[global___ProjectRepoId] = ...,
        uid : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["id",b"id","project_repo_id",b"project_repo_id","uid",b"uid"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id","project_repo_id",b"project_repo_id","uid",b"uid"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["id",b"id"]) -> typing.Optional[typing_extensions.Literal["project_repo_id","uid"]]: ...
global___RepoId = RepoId

class ProjectRepoId(google.protobuf.message.Message):
    """Selects a repo using a Google Cloud Platform project ID
    (e.g. winged-cargo-31) and a repo name within that project.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    REPO_NAME_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """The ID of the project."""

    repo_name: typing.Text = ...
    """The name of the repo. Leave empty for the default repo."""

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        repo_name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["project_id",b"project_id","repo_name",b"repo_name"]) -> None: ...
global___ProjectRepoId = ProjectRepoId

class CloudWorkspaceId(google.protobuf.message.Message):
    """A CloudWorkspaceId is a unique identifier for a cloud workspace.
    A cloud workspace is a place associated with a repo where modified files
    can be stored before they are committed.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    REPO_ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    @property
    def repo_id(self) -> global___RepoId:
        """The ID of the repo containing the workspace."""
        pass
    name: typing.Text = ...
    """The unique name of the workspace within the repo.  This is the name
    chosen by the client in the Source API's CreateWorkspace method.
    """

    def __init__(self,
        *,
        repo_id : typing.Optional[global___RepoId] = ...,
        name : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["repo_id",b"repo_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","repo_id",b"repo_id"]) -> None: ...
global___CloudWorkspaceId = CloudWorkspaceId
