# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/appengine/v1/appengine.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.appengine.v1.application_pb2
import google.appengine.v1.certificate_pb2
import google.appengine.v1.domain_pb2
import google.appengine.v1.domain_mapping_pb2
import google.appengine.v1.firewall_pb2
import google.appengine.v1.instance_pb2
import google.appengine.v1.version_pb2
import google.appengine.v1.service_pb2
import google.api.annotations_pb2
import google.longrunning.operations_pb2
import google.protobuf.empty_pb2
import google.protobuf.field_mask_pb2
import google.api.client_pb2
import google.appengine.v1.appengine_pb2


class ApplicationsBase(abc.ABC):

    @abc.abstractmethod
    async def GetApplication(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.GetApplicationRequest, google.appengine.v1.application_pb2.Application]') -> None:
        pass

    @abc.abstractmethod
    async def CreateApplication(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.CreateApplicationRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateApplication(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.UpdateApplicationRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def RepairApplication(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.RepairApplicationRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.appengine.v1.Applications/GetApplication': grpclib.const.Handler(
                self.GetApplication,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.GetApplicationRequest,
                google.appengine.v1.application_pb2.Application,
            ),
            '/google.appengine.v1.Applications/CreateApplication': grpclib.const.Handler(
                self.CreateApplication,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.CreateApplicationRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.appengine.v1.Applications/UpdateApplication': grpclib.const.Handler(
                self.UpdateApplication,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.UpdateApplicationRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.appengine.v1.Applications/RepairApplication': grpclib.const.Handler(
                self.RepairApplication,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.RepairApplicationRequest,
                google.longrunning.operations_pb2.Operation,
            ),
        }


class ApplicationsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetApplication = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Applications/GetApplication',
            google.appengine.v1.appengine_pb2.GetApplicationRequest,
            google.appengine.v1.application_pb2.Application,
        )
        self.CreateApplication = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Applications/CreateApplication',
            google.appengine.v1.appengine_pb2.CreateApplicationRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.UpdateApplication = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Applications/UpdateApplication',
            google.appengine.v1.appengine_pb2.UpdateApplicationRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.RepairApplication = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Applications/RepairApplication',
            google.appengine.v1.appengine_pb2.RepairApplicationRequest,
            google.longrunning.operations_pb2.Operation,
        )


class ServicesBase(abc.ABC):

    @abc.abstractmethod
    async def ListServices(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.ListServicesRequest, google.appengine.v1.appengine_pb2.ListServicesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetService(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.GetServiceRequest, google.appengine.v1.service_pb2.Service]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateService(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.UpdateServiceRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteService(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.DeleteServiceRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.appengine.v1.Services/ListServices': grpclib.const.Handler(
                self.ListServices,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.ListServicesRequest,
                google.appengine.v1.appengine_pb2.ListServicesResponse,
            ),
            '/google.appengine.v1.Services/GetService': grpclib.const.Handler(
                self.GetService,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.GetServiceRequest,
                google.appengine.v1.service_pb2.Service,
            ),
            '/google.appengine.v1.Services/UpdateService': grpclib.const.Handler(
                self.UpdateService,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.UpdateServiceRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.appengine.v1.Services/DeleteService': grpclib.const.Handler(
                self.DeleteService,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.DeleteServiceRequest,
                google.longrunning.operations_pb2.Operation,
            ),
        }


class ServicesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ListServices = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Services/ListServices',
            google.appengine.v1.appengine_pb2.ListServicesRequest,
            google.appengine.v1.appengine_pb2.ListServicesResponse,
        )
        self.GetService = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Services/GetService',
            google.appengine.v1.appengine_pb2.GetServiceRequest,
            google.appengine.v1.service_pb2.Service,
        )
        self.UpdateService = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Services/UpdateService',
            google.appengine.v1.appengine_pb2.UpdateServiceRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.DeleteService = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Services/DeleteService',
            google.appengine.v1.appengine_pb2.DeleteServiceRequest,
            google.longrunning.operations_pb2.Operation,
        )


class VersionsBase(abc.ABC):

    @abc.abstractmethod
    async def ListVersions(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.ListVersionsRequest, google.appengine.v1.appengine_pb2.ListVersionsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetVersion(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.GetVersionRequest, google.appengine.v1.version_pb2.Version]') -> None:
        pass

    @abc.abstractmethod
    async def CreateVersion(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.CreateVersionRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateVersion(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.UpdateVersionRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteVersion(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.DeleteVersionRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.appengine.v1.Versions/ListVersions': grpclib.const.Handler(
                self.ListVersions,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.ListVersionsRequest,
                google.appengine.v1.appengine_pb2.ListVersionsResponse,
            ),
            '/google.appengine.v1.Versions/GetVersion': grpclib.const.Handler(
                self.GetVersion,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.GetVersionRequest,
                google.appengine.v1.version_pb2.Version,
            ),
            '/google.appengine.v1.Versions/CreateVersion': grpclib.const.Handler(
                self.CreateVersion,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.CreateVersionRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.appengine.v1.Versions/UpdateVersion': grpclib.const.Handler(
                self.UpdateVersion,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.UpdateVersionRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.appengine.v1.Versions/DeleteVersion': grpclib.const.Handler(
                self.DeleteVersion,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.DeleteVersionRequest,
                google.longrunning.operations_pb2.Operation,
            ),
        }


class VersionsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ListVersions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Versions/ListVersions',
            google.appengine.v1.appengine_pb2.ListVersionsRequest,
            google.appengine.v1.appengine_pb2.ListVersionsResponse,
        )
        self.GetVersion = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Versions/GetVersion',
            google.appengine.v1.appengine_pb2.GetVersionRequest,
            google.appengine.v1.version_pb2.Version,
        )
        self.CreateVersion = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Versions/CreateVersion',
            google.appengine.v1.appengine_pb2.CreateVersionRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.UpdateVersion = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Versions/UpdateVersion',
            google.appengine.v1.appengine_pb2.UpdateVersionRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.DeleteVersion = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Versions/DeleteVersion',
            google.appengine.v1.appengine_pb2.DeleteVersionRequest,
            google.longrunning.operations_pb2.Operation,
        )


class InstancesBase(abc.ABC):

    @abc.abstractmethod
    async def ListInstances(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.ListInstancesRequest, google.appengine.v1.appengine_pb2.ListInstancesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetInstance(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.GetInstanceRequest, google.appengine.v1.instance_pb2.Instance]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteInstance(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.DeleteInstanceRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DebugInstance(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.DebugInstanceRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.appengine.v1.Instances/ListInstances': grpclib.const.Handler(
                self.ListInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.ListInstancesRequest,
                google.appengine.v1.appengine_pb2.ListInstancesResponse,
            ),
            '/google.appengine.v1.Instances/GetInstance': grpclib.const.Handler(
                self.GetInstance,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.GetInstanceRequest,
                google.appengine.v1.instance_pb2.Instance,
            ),
            '/google.appengine.v1.Instances/DeleteInstance': grpclib.const.Handler(
                self.DeleteInstance,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.DeleteInstanceRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.appengine.v1.Instances/DebugInstance': grpclib.const.Handler(
                self.DebugInstance,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.DebugInstanceRequest,
                google.longrunning.operations_pb2.Operation,
            ),
        }


class InstancesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ListInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Instances/ListInstances',
            google.appengine.v1.appengine_pb2.ListInstancesRequest,
            google.appengine.v1.appengine_pb2.ListInstancesResponse,
        )
        self.GetInstance = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Instances/GetInstance',
            google.appengine.v1.appengine_pb2.GetInstanceRequest,
            google.appengine.v1.instance_pb2.Instance,
        )
        self.DeleteInstance = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Instances/DeleteInstance',
            google.appengine.v1.appengine_pb2.DeleteInstanceRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.DebugInstance = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Instances/DebugInstance',
            google.appengine.v1.appengine_pb2.DebugInstanceRequest,
            google.longrunning.operations_pb2.Operation,
        )


class FirewallBase(abc.ABC):

    @abc.abstractmethod
    async def ListIngressRules(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.ListIngressRulesRequest, google.appengine.v1.appengine_pb2.ListIngressRulesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def BatchUpdateIngressRules(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.BatchUpdateIngressRulesRequest, google.appengine.v1.appengine_pb2.BatchUpdateIngressRulesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CreateIngressRule(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.CreateIngressRuleRequest, google.appengine.v1.firewall_pb2.FirewallRule]') -> None:
        pass

    @abc.abstractmethod
    async def GetIngressRule(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.GetIngressRuleRequest, google.appengine.v1.firewall_pb2.FirewallRule]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateIngressRule(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.UpdateIngressRuleRequest, google.appengine.v1.firewall_pb2.FirewallRule]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteIngressRule(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.DeleteIngressRuleRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.appengine.v1.Firewall/ListIngressRules': grpclib.const.Handler(
                self.ListIngressRules,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.ListIngressRulesRequest,
                google.appengine.v1.appengine_pb2.ListIngressRulesResponse,
            ),
            '/google.appengine.v1.Firewall/BatchUpdateIngressRules': grpclib.const.Handler(
                self.BatchUpdateIngressRules,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.BatchUpdateIngressRulesRequest,
                google.appengine.v1.appengine_pb2.BatchUpdateIngressRulesResponse,
            ),
            '/google.appengine.v1.Firewall/CreateIngressRule': grpclib.const.Handler(
                self.CreateIngressRule,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.CreateIngressRuleRequest,
                google.appengine.v1.firewall_pb2.FirewallRule,
            ),
            '/google.appengine.v1.Firewall/GetIngressRule': grpclib.const.Handler(
                self.GetIngressRule,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.GetIngressRuleRequest,
                google.appengine.v1.firewall_pb2.FirewallRule,
            ),
            '/google.appengine.v1.Firewall/UpdateIngressRule': grpclib.const.Handler(
                self.UpdateIngressRule,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.UpdateIngressRuleRequest,
                google.appengine.v1.firewall_pb2.FirewallRule,
            ),
            '/google.appengine.v1.Firewall/DeleteIngressRule': grpclib.const.Handler(
                self.DeleteIngressRule,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.DeleteIngressRuleRequest,
                google.protobuf.empty_pb2.Empty,
            ),
        }


class FirewallStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ListIngressRules = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Firewall/ListIngressRules',
            google.appengine.v1.appengine_pb2.ListIngressRulesRequest,
            google.appengine.v1.appengine_pb2.ListIngressRulesResponse,
        )
        self.BatchUpdateIngressRules = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Firewall/BatchUpdateIngressRules',
            google.appengine.v1.appengine_pb2.BatchUpdateIngressRulesRequest,
            google.appengine.v1.appengine_pb2.BatchUpdateIngressRulesResponse,
        )
        self.CreateIngressRule = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Firewall/CreateIngressRule',
            google.appengine.v1.appengine_pb2.CreateIngressRuleRequest,
            google.appengine.v1.firewall_pb2.FirewallRule,
        )
        self.GetIngressRule = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Firewall/GetIngressRule',
            google.appengine.v1.appengine_pb2.GetIngressRuleRequest,
            google.appengine.v1.firewall_pb2.FirewallRule,
        )
        self.UpdateIngressRule = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Firewall/UpdateIngressRule',
            google.appengine.v1.appengine_pb2.UpdateIngressRuleRequest,
            google.appengine.v1.firewall_pb2.FirewallRule,
        )
        self.DeleteIngressRule = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.Firewall/DeleteIngressRule',
            google.appengine.v1.appengine_pb2.DeleteIngressRuleRequest,
            google.protobuf.empty_pb2.Empty,
        )


class AuthorizedDomainsBase(abc.ABC):

    @abc.abstractmethod
    async def ListAuthorizedDomains(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.ListAuthorizedDomainsRequest, google.appengine.v1.appengine_pb2.ListAuthorizedDomainsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.appengine.v1.AuthorizedDomains/ListAuthorizedDomains': grpclib.const.Handler(
                self.ListAuthorizedDomains,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.ListAuthorizedDomainsRequest,
                google.appengine.v1.appengine_pb2.ListAuthorizedDomainsResponse,
            ),
        }


class AuthorizedDomainsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ListAuthorizedDomains = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.AuthorizedDomains/ListAuthorizedDomains',
            google.appengine.v1.appengine_pb2.ListAuthorizedDomainsRequest,
            google.appengine.v1.appengine_pb2.ListAuthorizedDomainsResponse,
        )


class AuthorizedCertificatesBase(abc.ABC):

    @abc.abstractmethod
    async def ListAuthorizedCertificates(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.ListAuthorizedCertificatesRequest, google.appengine.v1.appengine_pb2.ListAuthorizedCertificatesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetAuthorizedCertificate(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.GetAuthorizedCertificateRequest, google.appengine.v1.certificate_pb2.AuthorizedCertificate]') -> None:
        pass

    @abc.abstractmethod
    async def CreateAuthorizedCertificate(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.CreateAuthorizedCertificateRequest, google.appengine.v1.certificate_pb2.AuthorizedCertificate]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateAuthorizedCertificate(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.UpdateAuthorizedCertificateRequest, google.appengine.v1.certificate_pb2.AuthorizedCertificate]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteAuthorizedCertificate(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.DeleteAuthorizedCertificateRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.appengine.v1.AuthorizedCertificates/ListAuthorizedCertificates': grpclib.const.Handler(
                self.ListAuthorizedCertificates,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.ListAuthorizedCertificatesRequest,
                google.appengine.v1.appengine_pb2.ListAuthorizedCertificatesResponse,
            ),
            '/google.appengine.v1.AuthorizedCertificates/GetAuthorizedCertificate': grpclib.const.Handler(
                self.GetAuthorizedCertificate,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.GetAuthorizedCertificateRequest,
                google.appengine.v1.certificate_pb2.AuthorizedCertificate,
            ),
            '/google.appengine.v1.AuthorizedCertificates/CreateAuthorizedCertificate': grpclib.const.Handler(
                self.CreateAuthorizedCertificate,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.CreateAuthorizedCertificateRequest,
                google.appengine.v1.certificate_pb2.AuthorizedCertificate,
            ),
            '/google.appengine.v1.AuthorizedCertificates/UpdateAuthorizedCertificate': grpclib.const.Handler(
                self.UpdateAuthorizedCertificate,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.UpdateAuthorizedCertificateRequest,
                google.appengine.v1.certificate_pb2.AuthorizedCertificate,
            ),
            '/google.appengine.v1.AuthorizedCertificates/DeleteAuthorizedCertificate': grpclib.const.Handler(
                self.DeleteAuthorizedCertificate,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.DeleteAuthorizedCertificateRequest,
                google.protobuf.empty_pb2.Empty,
            ),
        }


class AuthorizedCertificatesStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ListAuthorizedCertificates = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.AuthorizedCertificates/ListAuthorizedCertificates',
            google.appengine.v1.appengine_pb2.ListAuthorizedCertificatesRequest,
            google.appengine.v1.appengine_pb2.ListAuthorizedCertificatesResponse,
        )
        self.GetAuthorizedCertificate = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.AuthorizedCertificates/GetAuthorizedCertificate',
            google.appengine.v1.appengine_pb2.GetAuthorizedCertificateRequest,
            google.appengine.v1.certificate_pb2.AuthorizedCertificate,
        )
        self.CreateAuthorizedCertificate = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.AuthorizedCertificates/CreateAuthorizedCertificate',
            google.appengine.v1.appengine_pb2.CreateAuthorizedCertificateRequest,
            google.appengine.v1.certificate_pb2.AuthorizedCertificate,
        )
        self.UpdateAuthorizedCertificate = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.AuthorizedCertificates/UpdateAuthorizedCertificate',
            google.appengine.v1.appengine_pb2.UpdateAuthorizedCertificateRequest,
            google.appengine.v1.certificate_pb2.AuthorizedCertificate,
        )
        self.DeleteAuthorizedCertificate = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.AuthorizedCertificates/DeleteAuthorizedCertificate',
            google.appengine.v1.appengine_pb2.DeleteAuthorizedCertificateRequest,
            google.protobuf.empty_pb2.Empty,
        )


class DomainMappingsBase(abc.ABC):

    @abc.abstractmethod
    async def ListDomainMappings(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.ListDomainMappingsRequest, google.appengine.v1.appengine_pb2.ListDomainMappingsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetDomainMapping(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.GetDomainMappingRequest, google.appengine.v1.domain_mapping_pb2.DomainMapping]') -> None:
        pass

    @abc.abstractmethod
    async def CreateDomainMapping(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.CreateDomainMappingRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateDomainMapping(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.UpdateDomainMappingRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteDomainMapping(self, stream: 'grpclib.server.Stream[google.appengine.v1.appengine_pb2.DeleteDomainMappingRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.appengine.v1.DomainMappings/ListDomainMappings': grpclib.const.Handler(
                self.ListDomainMappings,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.ListDomainMappingsRequest,
                google.appengine.v1.appengine_pb2.ListDomainMappingsResponse,
            ),
            '/google.appengine.v1.DomainMappings/GetDomainMapping': grpclib.const.Handler(
                self.GetDomainMapping,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.GetDomainMappingRequest,
                google.appengine.v1.domain_mapping_pb2.DomainMapping,
            ),
            '/google.appengine.v1.DomainMappings/CreateDomainMapping': grpclib.const.Handler(
                self.CreateDomainMapping,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.CreateDomainMappingRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.appengine.v1.DomainMappings/UpdateDomainMapping': grpclib.const.Handler(
                self.UpdateDomainMapping,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.UpdateDomainMappingRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.appengine.v1.DomainMappings/DeleteDomainMapping': grpclib.const.Handler(
                self.DeleteDomainMapping,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.appengine.v1.appengine_pb2.DeleteDomainMappingRequest,
                google.longrunning.operations_pb2.Operation,
            ),
        }


class DomainMappingsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ListDomainMappings = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.DomainMappings/ListDomainMappings',
            google.appengine.v1.appengine_pb2.ListDomainMappingsRequest,
            google.appengine.v1.appengine_pb2.ListDomainMappingsResponse,
        )
        self.GetDomainMapping = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.DomainMappings/GetDomainMapping',
            google.appengine.v1.appengine_pb2.GetDomainMappingRequest,
            google.appengine.v1.domain_mapping_pb2.DomainMapping,
        )
        self.CreateDomainMapping = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.DomainMappings/CreateDomainMapping',
            google.appengine.v1.appengine_pb2.CreateDomainMappingRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.UpdateDomainMapping = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.DomainMappings/UpdateDomainMapping',
            google.appengine.v1.appengine_pb2.UpdateDomainMappingRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.DeleteDomainMapping = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.appengine.v1.DomainMappings/DeleteDomainMapping',
            google.appengine.v1.appengine_pb2.DeleteDomainMappingRequest,
            google.longrunning.operations_pb2.Operation,
        )
