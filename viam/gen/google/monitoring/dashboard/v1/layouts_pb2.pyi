"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.monitoring.dashboard.v1.widget_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class GridLayout(google.protobuf.message.Message):
    """A basic layout divides the available space into vertical columns of equal
    width and arranges a list of widgets using a row-first strategy.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    COLUMNS_FIELD_NUMBER: builtins.int
    WIDGETS_FIELD_NUMBER: builtins.int
    columns: builtins.int = ...
    """The number of columns into which the view's width is divided. If omitted
    or set to zero, a system default will be used while rendering.
    """

    @property
    def widgets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.monitoring.dashboard.v1.widget_pb2.Widget]:
        """The informational elements that are arranged into the columns row-first."""
        pass
    def __init__(self,
        *,
        columns : builtins.int = ...,
        widgets : typing.Optional[typing.Iterable[google.monitoring.dashboard.v1.widget_pb2.Widget]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["columns",b"columns","widgets",b"widgets"]) -> None: ...
global___GridLayout = GridLayout

class MosaicLayout(google.protobuf.message.Message):
    """A mosaic layout divides the available space into a grid of blocks, and
    overlays the grid with tiles. Unlike `GridLayout`, tiles may span multiple
    grid blocks and can be placed at arbitrary locations in the grid.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Tile(google.protobuf.message.Message):
        """A single tile in the mosaic. The placement and size of the tile are
        configurable.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        X_POS_FIELD_NUMBER: builtins.int
        Y_POS_FIELD_NUMBER: builtins.int
        WIDTH_FIELD_NUMBER: builtins.int
        HEIGHT_FIELD_NUMBER: builtins.int
        WIDGET_FIELD_NUMBER: builtins.int
        x_pos: builtins.int = ...
        """The zero-indexed position of the tile in grid blocks relative to the
        left edge of the grid. Tiles must be contained within the specified
        number of columns. `x_pos` cannot be negative.
        """

        y_pos: builtins.int = ...
        """The zero-indexed position of the tile in grid blocks relative to the
        top edge of the grid. `y_pos` cannot be negative.
        """

        width: builtins.int = ...
        """The width of the tile, measured in grid blocks. Tiles must have a
        minimum width of 1.
        """

        height: builtins.int = ...
        """The height of the tile, measured in grid blocks. Tiles must have a
        minimum height of 1.
        """

        @property
        def widget(self) -> google.monitoring.dashboard.v1.widget_pb2.Widget:
            """The informational widget contained in the tile. For example an `XyChart`."""
            pass
        def __init__(self,
            *,
            x_pos : builtins.int = ...,
            y_pos : builtins.int = ...,
            width : builtins.int = ...,
            height : builtins.int = ...,
            widget : typing.Optional[google.monitoring.dashboard.v1.widget_pb2.Widget] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["widget",b"widget"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["height",b"height","widget",b"widget","width",b"width","x_pos",b"x_pos","y_pos",b"y_pos"]) -> None: ...

    COLUMNS_FIELD_NUMBER: builtins.int
    TILES_FIELD_NUMBER: builtins.int
    columns: builtins.int = ...
    """The number of columns in the mosaic grid. The number of columns must be
    between 1 and 12, inclusive.
    """

    @property
    def tiles(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MosaicLayout.Tile]:
        """The tiles to display."""
        pass
    def __init__(self,
        *,
        columns : builtins.int = ...,
        tiles : typing.Optional[typing.Iterable[global___MosaicLayout.Tile]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["columns",b"columns","tiles",b"tiles"]) -> None: ...
global___MosaicLayout = MosaicLayout

class RowLayout(google.protobuf.message.Message):
    """A simplified layout that divides the available space into rows
    and arranges a set of widgets horizontally in each row.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Row(google.protobuf.message.Message):
        """Defines the layout properties and content for a row."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        WEIGHT_FIELD_NUMBER: builtins.int
        WIDGETS_FIELD_NUMBER: builtins.int
        weight: builtins.int = ...
        """The relative weight of this row. The row weight is used to adjust the
        height of rows on the screen (relative to peers). Greater the weight,
        greater the height of the row on the screen. If omitted, a value
        of 1 is used while rendering.
        """

        @property
        def widgets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.monitoring.dashboard.v1.widget_pb2.Widget]:
            """The display widgets arranged horizontally in this row."""
            pass
        def __init__(self,
            *,
            weight : builtins.int = ...,
            widgets : typing.Optional[typing.Iterable[google.monitoring.dashboard.v1.widget_pb2.Widget]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["weight",b"weight","widgets",b"widgets"]) -> None: ...

    ROWS_FIELD_NUMBER: builtins.int
    @property
    def rows(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RowLayout.Row]:
        """The rows of content to display."""
        pass
    def __init__(self,
        *,
        rows : typing.Optional[typing.Iterable[global___RowLayout.Row]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["rows",b"rows"]) -> None: ...
global___RowLayout = RowLayout

class ColumnLayout(google.protobuf.message.Message):
    """A simplified layout that divides the available space into vertical columns
    and arranges a set of widgets vertically in each column.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Column(google.protobuf.message.Message):
        """Defines the layout properties and content for a column."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        WEIGHT_FIELD_NUMBER: builtins.int
        WIDGETS_FIELD_NUMBER: builtins.int
        weight: builtins.int = ...
        """The relative weight of this column. The column weight is used to adjust
        the width of columns on the screen (relative to peers).
        Greater the weight, greater the width of the column on the screen.
        If omitted, a value of 1 is used while rendering.
        """

        @property
        def widgets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.monitoring.dashboard.v1.widget_pb2.Widget]:
            """The display widgets arranged vertically in this column."""
            pass
        def __init__(self,
            *,
            weight : builtins.int = ...,
            widgets : typing.Optional[typing.Iterable[google.monitoring.dashboard.v1.widget_pb2.Widget]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["weight",b"weight","widgets",b"widgets"]) -> None: ...

    COLUMNS_FIELD_NUMBER: builtins.int
    @property
    def columns(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ColumnLayout.Column]:
        """The columns of content to display."""
        pass
    def __init__(self,
        *,
        columns : typing.Optional[typing.Iterable[global___ColumnLayout.Column]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["columns",b"columns"]) -> None: ...
global___ColumnLayout = ColumnLayout
