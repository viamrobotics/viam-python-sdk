"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.monitoring.dashboard.v1.metrics_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Scorecard(google.protobuf.message.Message):
    """A widget showing the latest value of a metric, and how this value relates to
    one or more thresholds.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class GaugeView(google.protobuf.message.Message):
        """A gauge chart shows where the current value sits within a pre-defined
        range. The upper and lower bounds should define the possible range of
        values for the scorecard's query (inclusive).
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        LOWER_BOUND_FIELD_NUMBER: builtins.int
        UPPER_BOUND_FIELD_NUMBER: builtins.int
        lower_bound: builtins.float = ...
        """The lower bound for this gauge chart. The value of the chart should
        always be greater than or equal to this.
        """

        upper_bound: builtins.float = ...
        """The upper bound for this gauge chart. The value of the chart should
        always be less than or equal to this.
        """

        def __init__(self,
            *,
            lower_bound : builtins.float = ...,
            upper_bound : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["lower_bound",b"lower_bound","upper_bound",b"upper_bound"]) -> None: ...

    class SparkChartView(google.protobuf.message.Message):
        """A sparkChart is a small chart suitable for inclusion in a table-cell or
        inline in text. This message contains the configuration for a sparkChart
        to show up on a Scorecard, showing recent trends of the scorecard's
        timeseries.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        SPARK_CHART_TYPE_FIELD_NUMBER: builtins.int
        MIN_ALIGNMENT_PERIOD_FIELD_NUMBER: builtins.int
        spark_chart_type: google.monitoring.dashboard.v1.metrics_pb2.SparkChartType.ValueType = ...
        """Required. The type of sparkchart to show in this chartView."""

        @property
        def min_alignment_period(self) -> google.protobuf.duration_pb2.Duration:
            """The lower bound on data point frequency in the chart implemented by
            specifying the minimum alignment period to use in a time series query.
            For example, if the data is published once every 10 minutes it would not
            make sense to fetch and align data at one minute intervals. This field is
            optional and exists only as a hint.
            """
            pass
        def __init__(self,
            *,
            spark_chart_type : google.monitoring.dashboard.v1.metrics_pb2.SparkChartType.ValueType = ...,
            min_alignment_period : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["min_alignment_period",b"min_alignment_period"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["min_alignment_period",b"min_alignment_period","spark_chart_type",b"spark_chart_type"]) -> None: ...

    TIME_SERIES_QUERY_FIELD_NUMBER: builtins.int
    GAUGE_VIEW_FIELD_NUMBER: builtins.int
    SPARK_CHART_VIEW_FIELD_NUMBER: builtins.int
    THRESHOLDS_FIELD_NUMBER: builtins.int
    @property
    def time_series_query(self) -> google.monitoring.dashboard.v1.metrics_pb2.TimeSeriesQuery:
        """Required. Fields for querying time series data from the
        Stackdriver metrics API.
        """
        pass
    @property
    def gauge_view(self) -> global___Scorecard.GaugeView:
        """Will cause the scorecard to show a gauge chart."""
        pass
    @property
    def spark_chart_view(self) -> global___Scorecard.SparkChartView:
        """Will cause the scorecard to show a spark chart."""
        pass
    @property
    def thresholds(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.monitoring.dashboard.v1.metrics_pb2.Threshold]:
        """The thresholds used to determine the state of the scorecard given the
        time series' current value. For an actual value x, the scorecard is in a
        danger state if x is less than or equal to a danger threshold that triggers
        below, or greater than or equal to a danger threshold that triggers above.
        Similarly, if x is above/below a warning threshold that triggers
        above/below, then the scorecard is in a warning state - unless x also puts
        it in a danger state. (Danger trumps warning.)

        As an example, consider a scorecard with the following four thresholds:
        {
          value: 90,
          category: 'DANGER',
          trigger: 'ABOVE',
        },
        {
          value: 70,
          category: 'WARNING',
          trigger: 'ABOVE',
        },
        {
          value: 10,
          category: 'DANGER',
          trigger: 'BELOW',
        },
        {
          value: 20,
          category: 'WARNING',
          trigger: 'BELOW',
        }

        Then: values less than or equal to 10 would put the scorecard in a DANGER
        state, values greater than 10 but less than or equal to 20 a WARNING state,
        values strictly between 20 and 70 an OK state, values greater than or equal
        to 70 but less than 90 a WARNING state, and values greater than or equal to
        90 a DANGER state.
        """
        pass
    def __init__(self,
        *,
        time_series_query : typing.Optional[google.monitoring.dashboard.v1.metrics_pb2.TimeSeriesQuery] = ...,
        gauge_view : typing.Optional[global___Scorecard.GaugeView] = ...,
        spark_chart_view : typing.Optional[global___Scorecard.SparkChartView] = ...,
        thresholds : typing.Optional[typing.Iterable[google.monitoring.dashboard.v1.metrics_pb2.Threshold]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["data_view",b"data_view","gauge_view",b"gauge_view","spark_chart_view",b"spark_chart_view","time_series_query",b"time_series_query"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["data_view",b"data_view","gauge_view",b"gauge_view","spark_chart_view",b"spark_chart_view","thresholds",b"thresholds","time_series_query",b"time_series_query"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["data_view",b"data_view"]) -> typing.Optional[typing_extensions.Literal["gauge_view","spark_chart_view"]]: ...
global___Scorecard = Scorecard
