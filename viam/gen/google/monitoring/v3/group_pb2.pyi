"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Group(google.protobuf.message.Message):
    """The description of a dynamic collection of monitored resources. Each group
    has a filter that is matched against monitored resources and their associated
    metadata. If a group's filter matches an available monitored resource, then
    that resource is a member of that group.  Groups can contain any number of
    monitored resources, and each monitored resource can be a member of any
    number of groups.

    Groups can be nested in parent-child hierarchies. The `parentName` field
    identifies an optional parent for each group.  If a group has a parent, then
    the only monitored resources available to be matched by the group's filter
    are the resources contained in the parent group.  In other words, a group
    contains the monitored resources that match its filter and the filters of all
    the group's ancestors.  A group without a parent can contain any monitored
    resource.

    For example, consider an infrastructure running a set of instances with two
    user-defined tags: `"environment"` and `"role"`. A parent group has a filter,
    `environment="production"`.  A child of that parent group has a filter,
    `role="transcoder"`.  The parent group contains all instances in the
    production environment, regardless of their roles.  The child group contains
    instances that have the transcoder role *and* are in the production
    environment.

    The monitored resources contained in a group can change at any moment,
    depending on what resources exist and what filters are associated with the
    group and its ancestors.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    PARENT_NAME_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    IS_CLUSTER_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. The name of this group. The format is:

        projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID]

    When creating a group, this field is ignored and a new name is created
    consisting of the project specified in the call to `CreateGroup`
    and a unique `[GROUP_ID]` that is generated automatically.
    """

    display_name: typing.Text = ...
    """A user-assigned name for this group, used only for display purposes."""

    parent_name: typing.Text = ...
    """The name of the group's parent, if it has one. The format is:

        projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID]

    For groups with no parent, `parent_name` is the empty string, `""`.
    """

    filter: typing.Text = ...
    """The filter used to determine which monitored resources belong to this
    group.
    """

    is_cluster: builtins.bool = ...
    """If true, the members of this group are considered to be a cluster.
    The system can perform additional analysis on groups that are clusters.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        parent_name : typing.Text = ...,
        filter : typing.Text = ...,
        is_cluster : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name","filter",b"filter","is_cluster",b"is_cluster","name",b"name","parent_name",b"parent_name"]) -> None: ...
global___Group = Group
