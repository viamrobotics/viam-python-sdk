"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class DroppedLabels(google.protobuf.message.Message):
    """A set of (label, value) pairs that were removed from a Distribution
    time series during aggregation and then added as an attachment to a
    Distribution.Exemplar.

    The full label set for the exemplars is constructed by using the dropped
    pairs in combination with the label values that remain on the aggregated
    Distribution time series. The constructed full label set can be used to
    identify the specific entity, such as the instance or job, which might be
    contributing to a long-tail. However, with dropped labels, the storage
    requirements are reduced because only the aggregated distribution values for
    a large group of time series are stored.

    Note that there are no guarantees on ordering of the labels from
    exemplar-to-exemplar and from distribution-to-distribution in the same
    stream, and there may be duplicates.  It is up to clients to resolve any
    ambiguities.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    LABEL_FIELD_NUMBER: builtins.int
    @property
    def label(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Map from label to its value, for all labels dropped in any aggregation."""
        pass
    def __init__(self,
        *,
        label : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["label",b"label"]) -> None: ...
global___DroppedLabels = DroppedLabels
