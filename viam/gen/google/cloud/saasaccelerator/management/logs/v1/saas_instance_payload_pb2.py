# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/saasaccelerator/management/logs/v1/saas_instance_payload.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\nKgoogle/cloud/saasaccelerator/management/logs/v1/saas_instance_payload.proto\x12/google.cloud.saasaccelerator.management.logs.v1\"\x7f\n\rInstanceEvent\x12\x12\n\x04verb\x18\x01 \x01(\tR\x04verb\x12\x14\n\x05stage\x18\x02 \x01(\tR\x05stage\x12\x10\n\x03msg\x18\x03 \x01(\tR\x03msg\x12\x19\n\x08trace_id\x18\x04 \x01(\tR\x07traceId\x12\x17\n\x07node_id\x18\x05 \x01(\tR\x06nodeIdB\xa6\x01\n3com.google.cloud.saasaccelerator.management.logs.v1B\x18SaasInstancePayloadProtoP\x01ZSgoogle.golang.org/genproto/googleapis/cloud/saasaccelerator/management/logs/v1;logsb\x06proto3')



_INSTANCEEVENT = DESCRIPTOR.message_types_by_name['InstanceEvent']
InstanceEvent = _reflection.GeneratedProtocolMessageType('InstanceEvent', (_message.Message,), {
  'DESCRIPTOR' : _INSTANCEEVENT,
  '__module__' : 'google.cloud.saasaccelerator.management.logs.v1.saas_instance_payload_pb2'
  # @@protoc_insertion_point(class_scope:google.cloud.saasaccelerator.management.logs.v1.InstanceEvent)
  })
_sym_db.RegisterMessage(InstanceEvent)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n3com.google.cloud.saasaccelerator.management.logs.v1B\030SaasInstancePayloadProtoP\001ZSgoogle.golang.org/genproto/googleapis/cloud/saasaccelerator/management/logs/v1;logs'
  _INSTANCEEVENT._serialized_start=128
  _INSTANCEEVENT._serialized_end=255
# @@protoc_insertion_point(module_scope)
