"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class CustomerEvent(google.protobuf.message.Message):
    """Represents Pub/Sub message content describing customer update."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Type:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        TYPE_UNSPECIFIED: CustomerEvent.Type.ValueType = ...  # 0
        """Not used."""

        PRIMARY_DOMAIN_CHANGED: CustomerEvent.Type.ValueType = ...  # 1
        """Primary domain for customer was changed."""

        PRIMARY_DOMAIN_VERIFIED: CustomerEvent.Type.ValueType = ...  # 2
        """Primary domain of the customer has been verified."""

    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        """Type of customer event."""
        pass

    TYPE_UNSPECIFIED: CustomerEvent.Type.ValueType = ...  # 0
    """Not used."""

    PRIMARY_DOMAIN_CHANGED: CustomerEvent.Type.ValueType = ...  # 1
    """Primary domain for customer was changed."""

    PRIMARY_DOMAIN_VERIFIED: CustomerEvent.Type.ValueType = ...  # 2
    """Primary domain of the customer has been verified."""


    CUSTOMER_FIELD_NUMBER: builtins.int
    EVENT_TYPE_FIELD_NUMBER: builtins.int
    customer: typing.Text = ...
    """Resource name of the customer.
    Format: accounts/{account_id}/customers/{customer_id}
    """

    event_type: global___CustomerEvent.Type.ValueType = ...
    """Type of event which happened on the customer."""

    def __init__(self,
        *,
        customer : typing.Text = ...,
        event_type : global___CustomerEvent.Type.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["customer",b"customer","event_type",b"event_type"]) -> None: ...
global___CustomerEvent = CustomerEvent

class EntitlementEvent(google.protobuf.message.Message):
    """Represents Pub/Sub message content describing entitlement update."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Type:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        TYPE_UNSPECIFIED: EntitlementEvent.Type.ValueType = ...  # 0
        """Not used."""

        CREATED: EntitlementEvent.Type.ValueType = ...  # 1
        """A new entitlement was created."""

        PRICE_PLAN_SWITCHED: EntitlementEvent.Type.ValueType = ...  # 3
        """The offer type associated with an entitlement was changed.
        This is not triggered if an entitlement converts from a commit offer to a
        flexible offer as part of a renewal.
        """

        COMMITMENT_CHANGED: EntitlementEvent.Type.ValueType = ...  # 4
        """Annual commitment for a commit plan was changed."""

        RENEWED: EntitlementEvent.Type.ValueType = ...  # 5
        """An annual entitlement was renewed."""

        SUSPENDED: EntitlementEvent.Type.ValueType = ...  # 6
        """Entitlement was suspended."""

        ACTIVATED: EntitlementEvent.Type.ValueType = ...  # 7
        """Entitlement was unsuspended."""

        CANCELLED: EntitlementEvent.Type.ValueType = ...  # 8
        """Entitlement was cancelled."""

        SKU_CHANGED: EntitlementEvent.Type.ValueType = ...  # 9
        """Entitlement was upgraded or downgraded (e.g. from Google Workspace
        Business Standard to Google Workspace Business Plus).
        """

        RENEWAL_SETTING_CHANGED: EntitlementEvent.Type.ValueType = ...  # 10
        """The renewal settings of an entitlement has changed."""

        PAID_SERVICE_STARTED: EntitlementEvent.Type.ValueType = ...  # 11
        """Paid service has started on trial entitlement."""

        LICENSE_ASSIGNMENT_CHANGED: EntitlementEvent.Type.ValueType = ...  # 12
        """License was assigned to or revoked from a user."""

        LICENSE_CAP_CHANGED: EntitlementEvent.Type.ValueType = ...  # 13
        """License cap was changed for the entitlement."""

    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        """Type of entitlement event."""
        pass

    TYPE_UNSPECIFIED: EntitlementEvent.Type.ValueType = ...  # 0
    """Not used."""

    CREATED: EntitlementEvent.Type.ValueType = ...  # 1
    """A new entitlement was created."""

    PRICE_PLAN_SWITCHED: EntitlementEvent.Type.ValueType = ...  # 3
    """The offer type associated with an entitlement was changed.
    This is not triggered if an entitlement converts from a commit offer to a
    flexible offer as part of a renewal.
    """

    COMMITMENT_CHANGED: EntitlementEvent.Type.ValueType = ...  # 4
    """Annual commitment for a commit plan was changed."""

    RENEWED: EntitlementEvent.Type.ValueType = ...  # 5
    """An annual entitlement was renewed."""

    SUSPENDED: EntitlementEvent.Type.ValueType = ...  # 6
    """Entitlement was suspended."""

    ACTIVATED: EntitlementEvent.Type.ValueType = ...  # 7
    """Entitlement was unsuspended."""

    CANCELLED: EntitlementEvent.Type.ValueType = ...  # 8
    """Entitlement was cancelled."""

    SKU_CHANGED: EntitlementEvent.Type.ValueType = ...  # 9
    """Entitlement was upgraded or downgraded (e.g. from Google Workspace
    Business Standard to Google Workspace Business Plus).
    """

    RENEWAL_SETTING_CHANGED: EntitlementEvent.Type.ValueType = ...  # 10
    """The renewal settings of an entitlement has changed."""

    PAID_SERVICE_STARTED: EntitlementEvent.Type.ValueType = ...  # 11
    """Paid service has started on trial entitlement."""

    LICENSE_ASSIGNMENT_CHANGED: EntitlementEvent.Type.ValueType = ...  # 12
    """License was assigned to or revoked from a user."""

    LICENSE_CAP_CHANGED: EntitlementEvent.Type.ValueType = ...  # 13
    """License cap was changed for the entitlement."""


    ENTITLEMENT_FIELD_NUMBER: builtins.int
    EVENT_TYPE_FIELD_NUMBER: builtins.int
    entitlement: typing.Text = ...
    """Resource name of an entitlement of the form:
    accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}
    """

    event_type: global___EntitlementEvent.Type.ValueType = ...
    """Type of event which happened on the entitlement."""

    def __init__(self,
        *,
        entitlement : typing.Text = ...,
        event_type : global___EntitlementEvent.Type.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["entitlement",b"entitlement","event_type",b"event_type"]) -> None: ...
global___EntitlementEvent = EntitlementEvent

class SubscriberEvent(google.protobuf.message.Message):
    """Represents information which resellers will get as part of notification from
    Cloud Pub/Sub.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CUSTOMER_EVENT_FIELD_NUMBER: builtins.int
    ENTITLEMENT_EVENT_FIELD_NUMBER: builtins.int
    @property
    def customer_event(self) -> global___CustomerEvent:
        """Customer event send as part of Pub/Sub event to partners."""
        pass
    @property
    def entitlement_event(self) -> global___EntitlementEvent:
        """Entitlement event send as part of Pub/Sub event to partners."""
        pass
    def __init__(self,
        *,
        customer_event : typing.Optional[global___CustomerEvent] = ...,
        entitlement_event : typing.Optional[global___EntitlementEvent] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["customer_event",b"customer_event","entitlement_event",b"entitlement_event","event",b"event"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["customer_event",b"customer_event","entitlement_event",b"entitlement_event","event",b"event"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["event",b"event"]) -> typing.Optional[typing_extensions.Literal["customer_event","entitlement_event"]]: ...
global___SubscriberEvent = SubscriberEvent
