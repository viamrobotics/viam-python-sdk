"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.retail.v2alpha.user_event_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.struct_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class PredictRequest(google.protobuf.message.Message):
    """Request message for Predict method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ParamsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> google.protobuf.struct_pb2.Value: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[google.protobuf.struct_pb2.Value] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    PLACEMENT_FIELD_NUMBER: builtins.int
    USER_EVENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    VALIDATE_ONLY_FIELD_NUMBER: builtins.int
    PARAMS_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    placement: typing.Text = ...
    """Required. Full resource name of the format:
    {name=projects/*/locations/global/catalogs/default_catalog/placements/*}
    The ID of the Recommendations AI placement. Before you can request
    predictions from your model, you must create at least one placement for it.
    For more information, see [Managing
    placements](https://cloud.google.com/retail/recommendations-ai/docs/manage-placements).

    The full list of available placements can be seen at
    https://console.cloud.google.com/recommendation/catalogs/default_catalog/placements
    """

    @property
    def user_event(self) -> google.cloud.retail.v2alpha.user_event_pb2.UserEvent:
        """Required. Context about the user, what they are looking at and what action
        they took to trigger the predict request. Note that this user event detail
        won't be ingested to userEvent logs. Thus, a separate userEvent write
        request is required for event logging.
        """
        pass
    page_size: builtins.int = ...
    """Maximum number of results to return per page. Set this property
    to the number of prediction results needed. If zero, the service will
    choose a reasonable default. The maximum allowed value is 100. Values
    above 100 will be coerced to 100.
    """

    page_token: typing.Text = ...
    """The previous PredictResponse.next_page_token."""

    filter: typing.Text = ...
    """Filter for restricting prediction results with a length limit of 5,000
    characters. Accepts values for tags and the `filterOutOfStockItems` flag.

     * Tag expressions. Restricts predictions to products that match all of the
       specified tags. Boolean operators `OR` and `NOT` are supported if the
       expression is enclosed in parentheses, and must be separated from the
       tag values by a space. `-"tagA"` is also supported and is equivalent to
       `NOT "tagA"`. Tag values must be double quoted UTF-8 encoded strings
       with a size limit of 1,000 characters.

       Note: "Recently viewed" models don't support tag filtering at the
       moment.

     * filterOutOfStockItems. Restricts predictions to products that do not
     have a
       stockState value of OUT_OF_STOCK.

    Examples:

     * tag=("Red" OR "Blue") tag="New-Arrival" tag=(NOT "promotional")
     * filterOutOfStockItems  tag=(-"promotional")
     * filterOutOfStockItems

    If your filter blocks all prediction results, nothing will be returned. If
    you want generic (unfiltered) popular products to be returned instead, set
    `strictFiltering` to false in `PredictRequest.params`.
    """

    validate_only: builtins.bool = ...
    """Use validate only mode for this prediction query. If set to true, a
    dummy model will be used that returns arbitrary products.
    Note that the validate only mode should only be used for testing the API,
    or if the model is not ready.
    """

    @property
    def params(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, google.protobuf.struct_pb2.Value]:
        """Additional domain specific parameters for the predictions.

        Allowed values:

        * `returnProduct`: Boolean. If set to true, the associated product
           object will be returned in the `results.metadata` field in the
           prediction response.
        * `returnScore`: Boolean. If set to true, the prediction 'score'
           corresponding to each returned product will be set in the
           `results.metadata` field in the prediction response. The given
           'score' indicates the probability of an product being clicked/purchased
           given the user's context and history.
        * `strictFiltering`: Boolean. True by default. If set to false, the service
           will return generic (unfiltered) popular products instead of empty if
           your filter blocks all prediction results.
        * `priceRerankLevel`: String. Default empty. If set to be non-empty, then
           it needs to be one of {'no-price-reranking', 'low-price-reranking',
           'medium-price-reranking', 'high-price-reranking'}. This gives
           request-level control and adjusts prediction results based on product
           price.
        * `diversityLevel`: String. Default empty. If set to be non-empty, then
           it needs to be one of {'no-diversity', 'low-diversity',
           'medium-diversity', 'high-diversity', 'auto-diversity'}. This gives
           request-level control and adjusts prediction results based on product
           category.
        """
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """The labels applied to a resource must meet the following requirements:

        * Each resource can have multiple labels, up to a maximum of 64.
        * Each label must be a key-value pair.
        * Keys have a minimum length of 1 character and a maximum length of 63
          characters, and cannot be empty. Values can be empty, and have a maximum
          length of 63 characters.
        * Keys and values can contain only lowercase letters, numeric characters,
          underscores, and dashes. All characters must use UTF-8 encoding, and
          international characters are allowed.
        * The key portion of a label must be unique. However, you can use the same
          key with multiple resources.
        * Keys must start with a lowercase letter or international character.

        See [Google Cloud
        Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
        for more details.
        """
        pass
    def __init__(self,
        *,
        placement : typing.Text = ...,
        user_event : typing.Optional[google.cloud.retail.v2alpha.user_event_pb2.UserEvent] = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        filter : typing.Text = ...,
        validate_only : builtins.bool = ...,
        params : typing.Optional[typing.Mapping[typing.Text, google.protobuf.struct_pb2.Value]] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["user_event",b"user_event"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","labels",b"labels","page_size",b"page_size","page_token",b"page_token","params",b"params","placement",b"placement","user_event",b"user_event","validate_only",b"validate_only"]) -> None: ...
global___PredictRequest = PredictRequest

class PredictResponse(google.protobuf.message.Message):
    """Response message for predict method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class PredictionResult(google.protobuf.message.Message):
        """PredictionResult represents the recommendation prediction results."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class MetadataEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            @property
            def value(self) -> google.protobuf.struct_pb2.Value: ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Optional[google.protobuf.struct_pb2.Value] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        ID_FIELD_NUMBER: builtins.int
        METADATA_FIELD_NUMBER: builtins.int
        id: typing.Text = ...
        """ID of the recommended product"""

        @property
        def metadata(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, google.protobuf.struct_pb2.Value]:
            """Additional product metadata / annotations.

            Possible values:

            * `product`: JSON representation of the product. Will be set if
              `returnProduct` is set to true in `PredictRequest.params`.
            * `score`: Prediction score in double value. Will be set if
              `returnScore` is set to true in `PredictRequest.params`.
            """
            pass
        def __init__(self,
            *,
            id : typing.Text = ...,
            metadata : typing.Optional[typing.Mapping[typing.Text, google.protobuf.struct_pb2.Value]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["id",b"id","metadata",b"metadata"]) -> None: ...

    RESULTS_FIELD_NUMBER: builtins.int
    ATTRIBUTION_TOKEN_FIELD_NUMBER: builtins.int
    MISSING_IDS_FIELD_NUMBER: builtins.int
    VALIDATE_ONLY_FIELD_NUMBER: builtins.int
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PredictResponse.PredictionResult]:
        """A list of recommended products. The order represents the ranking (from the
        most relevant product to the least).
        """
        pass
    attribution_token: typing.Text = ...
    """A unique attribution token. This should be included in the
    [UserEvent][google.cloud.retail.v2alpha.UserEvent] logs resulting from this
    recommendation, which enables accurate attribution of recommendation model
    performance.
    """

    @property
    def missing_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """IDs of products in the request that were missing from the inventory."""
        pass
    validate_only: builtins.bool = ...
    """True if the validateOnly property was set in the request."""

    def __init__(self,
        *,
        results : typing.Optional[typing.Iterable[global___PredictResponse.PredictionResult]] = ...,
        attribution_token : typing.Text = ...,
        missing_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        validate_only : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["attribution_token",b"attribution_token","missing_ids",b"missing_ids","results",b"results","validate_only",b"validate_only"]) -> None: ...
global___PredictResponse = PredictResponse
