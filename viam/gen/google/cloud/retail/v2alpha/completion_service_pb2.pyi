"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.retail.v2alpha.common_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class CompleteQueryRequest(google.protobuf.message.Message):
    """Auto-complete parameters."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CATALOG_FIELD_NUMBER: builtins.int
    QUERY_FIELD_NUMBER: builtins.int
    VISITOR_ID_FIELD_NUMBER: builtins.int
    LANGUAGE_CODES_FIELD_NUMBER: builtins.int
    DEVICE_TYPE_FIELD_NUMBER: builtins.int
    DATASET_FIELD_NUMBER: builtins.int
    MAX_SUGGESTIONS_FIELD_NUMBER: builtins.int
    catalog: typing.Text = ...
    """Required. Catalog for which the completion is performed.

    Full resource name of catalog, such as
    `projects/*/locations/global/catalogs/default_catalog`.
    """

    query: typing.Text = ...
    """Required. The query used to generate suggestions.

    The maximum number of allowed characters is 255.
    """

    visitor_id: typing.Text = ...
    """A unique identifier for tracking visitors. For example, this could be
    implemented with an HTTP cookie, which should be able to uniquely identify
    a visitor on a single device. This unique identifier should not change if
    the visitor logs in or out of the website.

    The field must be a UTF-8 encoded string with a length limit of 128
    characters. Otherwise, an INVALID_ARGUMENT error is returned.
    """

    @property
    def language_codes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The list of languages of the query. This is
        the BCP-47 language code, such as "en-US" or "sr-Latn".
        For more information, see
        [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).

        The maximum number of allowed characters is 255.
        Only "en-US" is currently supported.
        """
        pass
    device_type: typing.Text = ...
    """The device type context for completion suggestions.
    It is useful to apply different suggestions on different device types, e.g.
    `DESKTOP`, `MOBILE`. If it is empty, the suggestions are across all device
    types.

    Supported formats:

    * `UNKNOWN_DEVICE_TYPE`

    * `DESKTOP`

    * `MOBILE`

    * A customized string starts with `OTHER_`, e.g. `OTHER_IPHONE`.
    """

    dataset: typing.Text = ...
    """Determines which dataset to use for fetching completion. "user-data" will
    use the imported dataset through
    [CompletionService.ImportCompletionData][google.cloud.retail.v2alpha.CompletionService.ImportCompletionData].
    "cloud-retail" will use the dataset generated by cloud retail based on user
    events. If leave empty, it will use the "user-data".

    Current supported values:

    * user-data

    * cloud-retail
      This option requires additional allowlisting. Before using cloud-retail,
      contact Cloud Retail support team first.
    """

    max_suggestions: builtins.int = ...
    """Completion max suggestions. If left unset or set to 0, then will fallback
    to the configured value
    [CompletionConfig.max_suggestions][google.cloud.retail.v2alpha.CompletionConfig.max_suggestions].

    The maximum allowed max suggestions is 20. If it is set higher, it will be
    capped by 20.
    """

    def __init__(self,
        *,
        catalog : typing.Text = ...,
        query : typing.Text = ...,
        visitor_id : typing.Text = ...,
        language_codes : typing.Optional[typing.Iterable[typing.Text]] = ...,
        device_type : typing.Text = ...,
        dataset : typing.Text = ...,
        max_suggestions : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["catalog",b"catalog","dataset",b"dataset","device_type",b"device_type","language_codes",b"language_codes","max_suggestions",b"max_suggestions","query",b"query","visitor_id",b"visitor_id"]) -> None: ...
global___CompleteQueryRequest = CompleteQueryRequest

class CompleteQueryResponse(google.protobuf.message.Message):
    """Response of the auto-complete query."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class CompletionResult(google.protobuf.message.Message):
        """Resource that represents completion results."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class AttributesEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            @property
            def value(self) -> google.cloud.retail.v2alpha.common_pb2.CustomAttribute: ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Optional[google.cloud.retail.v2alpha.common_pb2.CustomAttribute] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        SUGGESTION_FIELD_NUMBER: builtins.int
        ATTRIBUTES_FIELD_NUMBER: builtins.int
        suggestion: typing.Text = ...
        """The suggestion for the query."""

        @property
        def attributes(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, google.cloud.retail.v2alpha.common_pb2.CustomAttribute]:
            """Additional custom attributes ingested through BigQuery."""
            pass
        def __init__(self,
            *,
            suggestion : typing.Text = ...,
            attributes : typing.Optional[typing.Mapping[typing.Text, google.cloud.retail.v2alpha.common_pb2.CustomAttribute]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["attributes",b"attributes","suggestion",b"suggestion"]) -> None: ...

    class RecentSearchResult(google.protobuf.message.Message):
        """Recent search of this user."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        RECENT_SEARCH_FIELD_NUMBER: builtins.int
        recent_search: typing.Text = ...
        """The recent search query."""

        def __init__(self,
            *,
            recent_search : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["recent_search",b"recent_search"]) -> None: ...

    COMPLETION_RESULTS_FIELD_NUMBER: builtins.int
    ATTRIBUTION_TOKEN_FIELD_NUMBER: builtins.int
    RECENT_SEARCH_RESULTS_FIELD_NUMBER: builtins.int
    @property
    def completion_results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CompleteQueryResponse.CompletionResult]:
        """Results of the matching suggestions. The result list is ordered and the
        first result is top suggestion.
        """
        pass
    attribution_token: typing.Text = ...
    """A unique complete token. This should be included in the
    [SearchRequest][google.cloud.retail.v2alpha.SearchRequest] resulting from
    this completion, which enables accurate attribution of complete model
    performance.
    """

    @property
    def recent_search_results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CompleteQueryResponse.RecentSearchResult]:
        """Matched recent searches of this user. The maximum number of recent searches
        is 10. This field is a restricted feature. Contact Retail Search support
        team if you are interested in enabling it.

        This feature is only available when
        [CompleteQueryRequest.visitor_id][google.cloud.retail.v2alpha.CompleteQueryRequest.visitor_id]
        field is set and [UserEvent][google.cloud.retail.v2alpha.UserEvent] is
        imported. The recent searches satisfy the follow rules:
         * They are ordered from latest to oldest.
         * They are matched with
         [CompleteQueryRequest.query][google.cloud.retail.v2alpha.CompleteQueryRequest.query]
         case insensitively.
         * They are transformed to lower cases.
         * They are UTF-8 safe.

        Recent searches are deduplicated. More recent searches will be reserved
        when duplication happens.
        """
        pass
    def __init__(self,
        *,
        completion_results : typing.Optional[typing.Iterable[global___CompleteQueryResponse.CompletionResult]] = ...,
        attribution_token : typing.Text = ...,
        recent_search_results : typing.Optional[typing.Iterable[global___CompleteQueryResponse.RecentSearchResult]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["attribution_token",b"attribution_token","completion_results",b"completion_results","recent_search_results",b"recent_search_results"]) -> None: ...
global___CompleteQueryResponse = CompleteQueryResponse
