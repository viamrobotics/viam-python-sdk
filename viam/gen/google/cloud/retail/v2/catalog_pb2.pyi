"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class ProductLevelConfig(google.protobuf.message.Message):
    """Configures what level the product should be uploaded with regards to
    how users will be send events and how predictions will be made.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INGESTION_PRODUCT_TYPE_FIELD_NUMBER: builtins.int
    MERCHANT_CENTER_PRODUCT_ID_FIELD_FIELD_NUMBER: builtins.int
    ingestion_product_type: typing.Text = ...
    """The type of [Product][google.cloud.retail.v2.Product]s allowed to be
    ingested into the catalog. Acceptable values are:

    * `primary` (default): You can ingest
    [Product][google.cloud.retail.v2.Product]s of all types. When
      ingesting a [Product][google.cloud.retail.v2.Product], its type will
      default to
      [Product.Type.PRIMARY][google.cloud.retail.v2.Product.Type.PRIMARY] if
      unset.
    * `variant`: You can only ingest
    [Product.Type.VARIANT][google.cloud.retail.v2.Product.Type.VARIANT]
    [Product][google.cloud.retail.v2.Product]s.
      This means
      [Product.primary_product_id][google.cloud.retail.v2.Product.primary_product_id]
      cannot be empty.

    If this field is set to an invalid value other than these, an
    INVALID_ARGUMENT error is returned.

    If this field is `variant` and
    [merchant_center_product_id_field][google.cloud.retail.v2.ProductLevelConfig.merchant_center_product_id_field]
    is `itemGroupId`, an INVALID_ARGUMENT error is returned.

    See [Using product
    levels](https://cloud.google.com/retail/recommendations-ai/docs/catalog#product-levels)
    for more details.
    """

    merchant_center_product_id_field: typing.Text = ...
    """Which field of [Merchant Center
    Product](/bigquery-transfer/docs/merchant-center-products-schema) should be
    imported as [Product.id][google.cloud.retail.v2.Product.id]. Acceptable
    values are:

    * `offerId` (default): Import `offerId` as the product ID.
    * `itemGroupId`: Import `itemGroupId` as the product ID. Notice that Retail
      API will choose one item from the ones with the same `itemGroupId`, and
      use it to represent the item group.

    If this field is set to an invalid value other than these, an
    INVALID_ARGUMENT error is returned.

    If this field is `itemGroupId` and
    [ingestion_product_type][google.cloud.retail.v2.ProductLevelConfig.ingestion_product_type]
    is `variant`, an INVALID_ARGUMENT error is returned.

    See [Using product
    levels](https://cloud.google.com/retail/recommendations-ai/docs/catalog#product-levels)
    for more details.
    """

    def __init__(self,
        *,
        ingestion_product_type : typing.Text = ...,
        merchant_center_product_id_field : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ingestion_product_type",b"ingestion_product_type","merchant_center_product_id_field",b"merchant_center_product_id_field"]) -> None: ...
global___ProductLevelConfig = ProductLevelConfig

class Catalog(google.protobuf.message.Message):
    """The catalog configuration."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    PRODUCT_LEVEL_CONFIG_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Immutable. The fully qualified resource name of the catalog."""

    display_name: typing.Text = ...
    """Required. Immutable. The catalog display name.

    This field must be a UTF-8 encoded string with a length limit of 128
    characters. Otherwise, an INVALID_ARGUMENT error is returned.
    """

    @property
    def product_level_config(self) -> global___ProductLevelConfig:
        """Required. The product level configuration."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        product_level_config : typing.Optional[global___ProductLevelConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["product_level_config",b"product_level_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name","name",b"name","product_level_config",b"product_level_config"]) -> None: ...
global___Catalog = Catalog
