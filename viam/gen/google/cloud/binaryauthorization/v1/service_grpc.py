# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/cloud/binaryauthorization/v1/service.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.api.client_pb2
import google.api.field_behavior_pb2
import google.api.resource_pb2
import google.cloud.binaryauthorization.v1.resources_pb2
import google.protobuf.empty_pb2
import grafeas.v1.attestation_pb2
import google.cloud.binaryauthorization.v1.service_pb2


class BinauthzManagementServiceV1Base(abc.ABC):

    @abc.abstractmethod
    async def GetPolicy(self, stream: 'grpclib.server.Stream[google.cloud.binaryauthorization.v1.service_pb2.GetPolicyRequest, google.cloud.binaryauthorization.v1.resources_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def UpdatePolicy(self, stream: 'grpclib.server.Stream[google.cloud.binaryauthorization.v1.service_pb2.UpdatePolicyRequest, google.cloud.binaryauthorization.v1.resources_pb2.Policy]') -> None:
        pass

    @abc.abstractmethod
    async def CreateAttestor(self, stream: 'grpclib.server.Stream[google.cloud.binaryauthorization.v1.service_pb2.CreateAttestorRequest, google.cloud.binaryauthorization.v1.resources_pb2.Attestor]') -> None:
        pass

    @abc.abstractmethod
    async def GetAttestor(self, stream: 'grpclib.server.Stream[google.cloud.binaryauthorization.v1.service_pb2.GetAttestorRequest, google.cloud.binaryauthorization.v1.resources_pb2.Attestor]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateAttestor(self, stream: 'grpclib.server.Stream[google.cloud.binaryauthorization.v1.service_pb2.UpdateAttestorRequest, google.cloud.binaryauthorization.v1.resources_pb2.Attestor]') -> None:
        pass

    @abc.abstractmethod
    async def ListAttestors(self, stream: 'grpclib.server.Stream[google.cloud.binaryauthorization.v1.service_pb2.ListAttestorsRequest, google.cloud.binaryauthorization.v1.service_pb2.ListAttestorsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteAttestor(self, stream: 'grpclib.server.Stream[google.cloud.binaryauthorization.v1.service_pb2.DeleteAttestorRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1/GetPolicy': grpclib.const.Handler(
                self.GetPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.binaryauthorization.v1.service_pb2.GetPolicyRequest,
                google.cloud.binaryauthorization.v1.resources_pb2.Policy,
            ),
            '/google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1/UpdatePolicy': grpclib.const.Handler(
                self.UpdatePolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.binaryauthorization.v1.service_pb2.UpdatePolicyRequest,
                google.cloud.binaryauthorization.v1.resources_pb2.Policy,
            ),
            '/google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1/CreateAttestor': grpclib.const.Handler(
                self.CreateAttestor,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.binaryauthorization.v1.service_pb2.CreateAttestorRequest,
                google.cloud.binaryauthorization.v1.resources_pb2.Attestor,
            ),
            '/google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1/GetAttestor': grpclib.const.Handler(
                self.GetAttestor,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.binaryauthorization.v1.service_pb2.GetAttestorRequest,
                google.cloud.binaryauthorization.v1.resources_pb2.Attestor,
            ),
            '/google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1/UpdateAttestor': grpclib.const.Handler(
                self.UpdateAttestor,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.binaryauthorization.v1.service_pb2.UpdateAttestorRequest,
                google.cloud.binaryauthorization.v1.resources_pb2.Attestor,
            ),
            '/google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1/ListAttestors': grpclib.const.Handler(
                self.ListAttestors,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.binaryauthorization.v1.service_pb2.ListAttestorsRequest,
                google.cloud.binaryauthorization.v1.service_pb2.ListAttestorsResponse,
            ),
            '/google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1/DeleteAttestor': grpclib.const.Handler(
                self.DeleteAttestor,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.binaryauthorization.v1.service_pb2.DeleteAttestorRequest,
                google.protobuf.empty_pb2.Empty,
            ),
        }


class BinauthzManagementServiceV1Stub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1/GetPolicy',
            google.cloud.binaryauthorization.v1.service_pb2.GetPolicyRequest,
            google.cloud.binaryauthorization.v1.resources_pb2.Policy,
        )
        self.UpdatePolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1/UpdatePolicy',
            google.cloud.binaryauthorization.v1.service_pb2.UpdatePolicyRequest,
            google.cloud.binaryauthorization.v1.resources_pb2.Policy,
        )
        self.CreateAttestor = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1/CreateAttestor',
            google.cloud.binaryauthorization.v1.service_pb2.CreateAttestorRequest,
            google.cloud.binaryauthorization.v1.resources_pb2.Attestor,
        )
        self.GetAttestor = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1/GetAttestor',
            google.cloud.binaryauthorization.v1.service_pb2.GetAttestorRequest,
            google.cloud.binaryauthorization.v1.resources_pb2.Attestor,
        )
        self.UpdateAttestor = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1/UpdateAttestor',
            google.cloud.binaryauthorization.v1.service_pb2.UpdateAttestorRequest,
            google.cloud.binaryauthorization.v1.resources_pb2.Attestor,
        )
        self.ListAttestors = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1/ListAttestors',
            google.cloud.binaryauthorization.v1.service_pb2.ListAttestorsRequest,
            google.cloud.binaryauthorization.v1.service_pb2.ListAttestorsResponse,
        )
        self.DeleteAttestor = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1/DeleteAttestor',
            google.cloud.binaryauthorization.v1.service_pb2.DeleteAttestorRequest,
            google.protobuf.empty_pb2.Empty,
        )


class SystemPolicyV1Base(abc.ABC):

    @abc.abstractmethod
    async def GetSystemPolicy(self, stream: 'grpclib.server.Stream[google.cloud.binaryauthorization.v1.service_pb2.GetSystemPolicyRequest, google.cloud.binaryauthorization.v1.resources_pb2.Policy]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.binaryauthorization.v1.SystemPolicyV1/GetSystemPolicy': grpclib.const.Handler(
                self.GetSystemPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.binaryauthorization.v1.service_pb2.GetSystemPolicyRequest,
                google.cloud.binaryauthorization.v1.resources_pb2.Policy,
            ),
        }


class SystemPolicyV1Stub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetSystemPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.binaryauthorization.v1.SystemPolicyV1/GetSystemPolicy',
            google.cloud.binaryauthorization.v1.service_pb2.GetSystemPolicyRequest,
            google.cloud.binaryauthorization.v1.resources_pb2.Policy,
        )


class ValidationHelperV1Base(abc.ABC):

    @abc.abstractmethod
    async def ValidateAttestationOccurrence(self, stream: 'grpclib.server.Stream[google.cloud.binaryauthorization.v1.service_pb2.ValidateAttestationOccurrenceRequest, google.cloud.binaryauthorization.v1.service_pb2.ValidateAttestationOccurrenceResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.binaryauthorization.v1.ValidationHelperV1/ValidateAttestationOccurrence': grpclib.const.Handler(
                self.ValidateAttestationOccurrence,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.binaryauthorization.v1.service_pb2.ValidateAttestationOccurrenceRequest,
                google.cloud.binaryauthorization.v1.service_pb2.ValidateAttestationOccurrenceResponse,
            ),
        }


class ValidationHelperV1Stub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ValidateAttestationOccurrence = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.binaryauthorization.v1.ValidationHelperV1/ValidateAttestationOccurrence',
            google.cloud.binaryauthorization.v1.service_pb2.ValidateAttestationOccurrenceRequest,
            google.cloud.binaryauthorization.v1.service_pb2.ValidateAttestationOccurrenceResponse,
        )
