"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.speech.v1.resource_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
import google.rpc.status_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class RecognizeRequest(google.protobuf.message.Message):
    """The top-level message sent by the client for the `Recognize` method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONFIG_FIELD_NUMBER: builtins.int
    AUDIO_FIELD_NUMBER: builtins.int
    @property
    def config(self) -> global___RecognitionConfig:
        """Required. Provides information to the recognizer that specifies how to
        process the request.
        """
        pass
    @property
    def audio(self) -> global___RecognitionAudio:
        """Required. The audio data to be recognized."""
        pass
    def __init__(self,
        *,
        config : typing.Optional[global___RecognitionConfig] = ...,
        audio : typing.Optional[global___RecognitionAudio] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["audio",b"audio","config",b"config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["audio",b"audio","config",b"config"]) -> None: ...
global___RecognizeRequest = RecognizeRequest

class LongRunningRecognizeRequest(google.protobuf.message.Message):
    """The top-level message sent by the client for the `LongRunningRecognize`
    method.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONFIG_FIELD_NUMBER: builtins.int
    AUDIO_FIELD_NUMBER: builtins.int
    OUTPUT_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def config(self) -> global___RecognitionConfig:
        """Required. Provides information to the recognizer that specifies how to
        process the request.
        """
        pass
    @property
    def audio(self) -> global___RecognitionAudio:
        """Required. The audio data to be recognized."""
        pass
    @property
    def output_config(self) -> global___TranscriptOutputConfig:
        """Optional. Specifies an optional destination for the recognition results."""
        pass
    def __init__(self,
        *,
        config : typing.Optional[global___RecognitionConfig] = ...,
        audio : typing.Optional[global___RecognitionAudio] = ...,
        output_config : typing.Optional[global___TranscriptOutputConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["audio",b"audio","config",b"config","output_config",b"output_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["audio",b"audio","config",b"config","output_config",b"output_config"]) -> None: ...
global___LongRunningRecognizeRequest = LongRunningRecognizeRequest

class TranscriptOutputConfig(google.protobuf.message.Message):
    """Specifies an optional destination for the recognition results."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GCS_URI_FIELD_NUMBER: builtins.int
    gcs_uri: typing.Text = ...
    """Specifies a Cloud Storage URI for the recognition results. Must be
    specified in the format: `gs://bucket_name/object_name`, and the bucket
    must already exist.
    """

    def __init__(self,
        *,
        gcs_uri : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["gcs_uri",b"gcs_uri","output_type",b"output_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["gcs_uri",b"gcs_uri","output_type",b"output_type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["output_type",b"output_type"]) -> typing.Optional[typing_extensions.Literal["gcs_uri"]]: ...
global___TranscriptOutputConfig = TranscriptOutputConfig

class StreamingRecognizeRequest(google.protobuf.message.Message):
    """The top-level message sent by the client for the `StreamingRecognize` method.
    Multiple `StreamingRecognizeRequest` messages are sent. The first message
    must contain a `streaming_config` message and must not contain
    `audio_content`. All subsequent messages must contain `audio_content` and
    must not contain a `streaming_config` message.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    STREAMING_CONFIG_FIELD_NUMBER: builtins.int
    AUDIO_CONTENT_FIELD_NUMBER: builtins.int
    @property
    def streaming_config(self) -> global___StreamingRecognitionConfig:
        """Provides information to the recognizer that specifies how to process the
        request. The first `StreamingRecognizeRequest` message must contain a
        `streaming_config`  message.
        """
        pass
    audio_content: builtins.bytes = ...
    """The audio data to be recognized. Sequential chunks of audio data are sent
    in sequential `StreamingRecognizeRequest` messages. The first
    `StreamingRecognizeRequest` message must not contain `audio_content` data
    and all subsequent `StreamingRecognizeRequest` messages must contain
    `audio_content` data. The audio bytes must be encoded as specified in
    `RecognitionConfig`. Note: as with all bytes fields, proto buffers use a
    pure binary representation (not base64). See
    [content limits](https://cloud.google.com/speech-to-text/quotas#content).
    """

    def __init__(self,
        *,
        streaming_config : typing.Optional[global___StreamingRecognitionConfig] = ...,
        audio_content : builtins.bytes = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["audio_content",b"audio_content","streaming_config",b"streaming_config","streaming_request",b"streaming_request"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["audio_content",b"audio_content","streaming_config",b"streaming_config","streaming_request",b"streaming_request"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["streaming_request",b"streaming_request"]) -> typing.Optional[typing_extensions.Literal["streaming_config","audio_content"]]: ...
global___StreamingRecognizeRequest = StreamingRecognizeRequest

class StreamingRecognitionConfig(google.protobuf.message.Message):
    """Provides information to the recognizer that specifies how to process the
    request.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONFIG_FIELD_NUMBER: builtins.int
    SINGLE_UTTERANCE_FIELD_NUMBER: builtins.int
    INTERIM_RESULTS_FIELD_NUMBER: builtins.int
    @property
    def config(self) -> global___RecognitionConfig:
        """Required. Provides information to the recognizer that specifies how to
        process the request.
        """
        pass
    single_utterance: builtins.bool = ...
    """If `false` or omitted, the recognizer will perform continuous
    recognition (continuing to wait for and process audio even if the user
    pauses speaking) until the client closes the input stream (gRPC API) or
    until the maximum time limit has been reached. May return multiple
    `StreamingRecognitionResult`s with the `is_final` flag set to `true`.

    If `true`, the recognizer will detect a single spoken utterance. When it
    detects that the user has paused or stopped speaking, it will return an
    `END_OF_SINGLE_UTTERANCE` event and cease recognition. It will return no
    more than one `StreamingRecognitionResult` with the `is_final` flag set to
    `true`.

    The `single_utterance` field can only be used with specified models,
    otherwise an error is thrown. The `model` field in [`RecognitionConfig`][]
    must be set to:

    * `command_and_search`
    * `phone_call` AND additional field `useEnhanced`=`true`
    * The `model` field is left undefined. In this case the API auto-selects
      a model based on any other parameters that you set in
      `RecognitionConfig`.
    """

    interim_results: builtins.bool = ...
    """If `true`, interim results (tentative hypotheses) may be
    returned as they become available (these interim results are indicated with
    the `is_final=false` flag).
    If `false` or omitted, only `is_final=true` result(s) are returned.
    """

    def __init__(self,
        *,
        config : typing.Optional[global___RecognitionConfig] = ...,
        single_utterance : builtins.bool = ...,
        interim_results : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["config",b"config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["config",b"config","interim_results",b"interim_results","single_utterance",b"single_utterance"]) -> None: ...
global___StreamingRecognitionConfig = StreamingRecognitionConfig

class RecognitionConfig(google.protobuf.message.Message):
    """Provides information to the recognizer that specifies how to process the
    request.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _AudioEncoding:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _AudioEncodingEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_AudioEncoding.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        ENCODING_UNSPECIFIED: RecognitionConfig.AudioEncoding.ValueType = ...  # 0
        """Not specified."""

        LINEAR16: RecognitionConfig.AudioEncoding.ValueType = ...  # 1
        """Uncompressed 16-bit signed little-endian samples (Linear PCM)."""

        FLAC: RecognitionConfig.AudioEncoding.ValueType = ...  # 2
        """`FLAC` (Free Lossless Audio
        Codec) is the recommended encoding because it is
        lossless--therefore recognition is not compromised--and
        requires only about half the bandwidth of `LINEAR16`. `FLAC` stream
        encoding supports 16-bit and 24-bit samples, however, not all fields in
        `STREAMINFO` are supported.
        """

        MULAW: RecognitionConfig.AudioEncoding.ValueType = ...  # 3
        """8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law."""

        AMR: RecognitionConfig.AudioEncoding.ValueType = ...  # 4
        """Adaptive Multi-Rate Narrowband codec. `sample_rate_hertz` must be 8000."""

        AMR_WB: RecognitionConfig.AudioEncoding.ValueType = ...  # 5
        """Adaptive Multi-Rate Wideband codec. `sample_rate_hertz` must be 16000."""

        OGG_OPUS: RecognitionConfig.AudioEncoding.ValueType = ...  # 6
        """Opus encoded audio frames in Ogg container
        ([OggOpus](https://wiki.xiph.org/OggOpus)).
        `sample_rate_hertz` must be one of 8000, 12000, 16000, 24000, or 48000.
        """

        SPEEX_WITH_HEADER_BYTE: RecognitionConfig.AudioEncoding.ValueType = ...  # 7
        """Although the use of lossy encodings is not recommended, if a very low
        bitrate encoding is required, `OGG_OPUS` is highly preferred over
        Speex encoding. The [Speex](https://speex.org/)  encoding supported by
        Cloud Speech API has a header byte in each block, as in MIME type
        `audio/x-speex-with-header-byte`.
        It is a variant of the RTP Speex encoding defined in
        [RFC 5574](https://tools.ietf.org/html/rfc5574).
        The stream is a sequence of blocks, one block per RTP packet. Each block
        starts with a byte containing the length of the block, in bytes, followed
        by one or more frames of Speex data, padded to an integral number of
        bytes (octets) as specified in RFC 5574. In other words, each RTP header
        is replaced with a single byte containing the block length. Only Speex
        wideband is supported. `sample_rate_hertz` must be 16000.
        """

        WEBM_OPUS: RecognitionConfig.AudioEncoding.ValueType = ...  # 9
        """Opus encoded audio frames in WebM container
        ([OggOpus](https://wiki.xiph.org/OggOpus)). `sample_rate_hertz` must be
        one of 8000, 12000, 16000, 24000, or 48000.
        """

    class AudioEncoding(_AudioEncoding, metaclass=_AudioEncodingEnumTypeWrapper):
        """The encoding of the audio data sent in the request.

        All encodings support only 1 channel (mono) audio, unless the
        `audio_channel_count` and `enable_separate_recognition_per_channel` fields
        are set.

        For best results, the audio source should be captured and transmitted using
        a lossless encoding (`FLAC` or `LINEAR16`). The accuracy of the speech
        recognition can be reduced if lossy codecs are used to capture or transmit
        audio, particularly if background noise is present. Lossy codecs include
        `MULAW`, `AMR`, `AMR_WB`, `OGG_OPUS`, `SPEEX_WITH_HEADER_BYTE`, `MP3`,
        and `WEBM_OPUS`.

        The `FLAC` and `WAV` audio file formats include a header that describes the
        included audio content. You can request recognition for `WAV` files that
        contain either `LINEAR16` or `MULAW` encoded audio.
        If you send `FLAC` or `WAV` audio file format in
        your request, you do not need to specify an `AudioEncoding`; the audio
        encoding format is determined from the file header. If you specify
        an `AudioEncoding` when you send  send `FLAC` or `WAV` audio, the
        encoding configuration must match the encoding described in the audio
        header; otherwise the request returns an
        [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] error code.
        """
        pass

    ENCODING_UNSPECIFIED: RecognitionConfig.AudioEncoding.ValueType = ...  # 0
    """Not specified."""

    LINEAR16: RecognitionConfig.AudioEncoding.ValueType = ...  # 1
    """Uncompressed 16-bit signed little-endian samples (Linear PCM)."""

    FLAC: RecognitionConfig.AudioEncoding.ValueType = ...  # 2
    """`FLAC` (Free Lossless Audio
    Codec) is the recommended encoding because it is
    lossless--therefore recognition is not compromised--and
    requires only about half the bandwidth of `LINEAR16`. `FLAC` stream
    encoding supports 16-bit and 24-bit samples, however, not all fields in
    `STREAMINFO` are supported.
    """

    MULAW: RecognitionConfig.AudioEncoding.ValueType = ...  # 3
    """8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law."""

    AMR: RecognitionConfig.AudioEncoding.ValueType = ...  # 4
    """Adaptive Multi-Rate Narrowband codec. `sample_rate_hertz` must be 8000."""

    AMR_WB: RecognitionConfig.AudioEncoding.ValueType = ...  # 5
    """Adaptive Multi-Rate Wideband codec. `sample_rate_hertz` must be 16000."""

    OGG_OPUS: RecognitionConfig.AudioEncoding.ValueType = ...  # 6
    """Opus encoded audio frames in Ogg container
    ([OggOpus](https://wiki.xiph.org/OggOpus)).
    `sample_rate_hertz` must be one of 8000, 12000, 16000, 24000, or 48000.
    """

    SPEEX_WITH_HEADER_BYTE: RecognitionConfig.AudioEncoding.ValueType = ...  # 7
    """Although the use of lossy encodings is not recommended, if a very low
    bitrate encoding is required, `OGG_OPUS` is highly preferred over
    Speex encoding. The [Speex](https://speex.org/)  encoding supported by
    Cloud Speech API has a header byte in each block, as in MIME type
    `audio/x-speex-with-header-byte`.
    It is a variant of the RTP Speex encoding defined in
    [RFC 5574](https://tools.ietf.org/html/rfc5574).
    The stream is a sequence of blocks, one block per RTP packet. Each block
    starts with a byte containing the length of the block, in bytes, followed
    by one or more frames of Speex data, padded to an integral number of
    bytes (octets) as specified in RFC 5574. In other words, each RTP header
    is replaced with a single byte containing the block length. Only Speex
    wideband is supported. `sample_rate_hertz` must be 16000.
    """

    WEBM_OPUS: RecognitionConfig.AudioEncoding.ValueType = ...  # 9
    """Opus encoded audio frames in WebM container
    ([OggOpus](https://wiki.xiph.org/OggOpus)). `sample_rate_hertz` must be
    one of 8000, 12000, 16000, 24000, or 48000.
    """


    ENCODING_FIELD_NUMBER: builtins.int
    SAMPLE_RATE_HERTZ_FIELD_NUMBER: builtins.int
    AUDIO_CHANNEL_COUNT_FIELD_NUMBER: builtins.int
    ENABLE_SEPARATE_RECOGNITION_PER_CHANNEL_FIELD_NUMBER: builtins.int
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    ALTERNATIVE_LANGUAGE_CODES_FIELD_NUMBER: builtins.int
    MAX_ALTERNATIVES_FIELD_NUMBER: builtins.int
    PROFANITY_FILTER_FIELD_NUMBER: builtins.int
    ADAPTATION_FIELD_NUMBER: builtins.int
    SPEECH_CONTEXTS_FIELD_NUMBER: builtins.int
    ENABLE_WORD_TIME_OFFSETS_FIELD_NUMBER: builtins.int
    ENABLE_WORD_CONFIDENCE_FIELD_NUMBER: builtins.int
    ENABLE_AUTOMATIC_PUNCTUATION_FIELD_NUMBER: builtins.int
    ENABLE_SPOKEN_PUNCTUATION_FIELD_NUMBER: builtins.int
    ENABLE_SPOKEN_EMOJIS_FIELD_NUMBER: builtins.int
    DIARIZATION_CONFIG_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    MODEL_FIELD_NUMBER: builtins.int
    USE_ENHANCED_FIELD_NUMBER: builtins.int
    encoding: global___RecognitionConfig.AudioEncoding.ValueType = ...
    """Encoding of audio data sent in all `RecognitionAudio` messages.
    This field is optional for `FLAC` and `WAV` audio files and required
    for all other audio formats. For details, see [AudioEncoding][google.cloud.speech.v1.RecognitionConfig.AudioEncoding].
    """

    sample_rate_hertz: builtins.int = ...
    """Sample rate in Hertz of the audio data sent in all
    `RecognitionAudio` messages. Valid values are: 8000-48000.
    16000 is optimal. For best results, set the sampling rate of the audio
    source to 16000 Hz. If that's not possible, use the native sample rate of
    the audio source (instead of re-sampling).
    This field is optional for FLAC and WAV audio files, but is
    required for all other audio formats. For details, see [AudioEncoding][google.cloud.speech.v1.RecognitionConfig.AudioEncoding].
    """

    audio_channel_count: builtins.int = ...
    """The number of channels in the input audio data.
    ONLY set this for MULTI-CHANNEL recognition.
    Valid values for LINEAR16 and FLAC are `1`-`8`.
    Valid values for OGG_OPUS are '1'-'254'.
    Valid value for MULAW, AMR, AMR_WB and SPEEX_WITH_HEADER_BYTE is only `1`.
    If `0` or omitted, defaults to one channel (mono).
    Note: We only recognize the first channel by default.
    To perform independent recognition on each channel set
    `enable_separate_recognition_per_channel` to 'true'.
    """

    enable_separate_recognition_per_channel: builtins.bool = ...
    """This needs to be set to `true` explicitly and `audio_channel_count` > 1
    to get each channel recognized separately. The recognition result will
    contain a `channel_tag` field to state which channel that result belongs
    to. If this is not true, we will only recognize the first channel. The
    request is billed cumulatively for all channels recognized:
    `audio_channel_count` multiplied by the length of the audio.
    """

    language_code: typing.Text = ...
    """Required. The language of the supplied audio as a
    [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
    Example: "en-US".
    See [Language
    Support](https://cloud.google.com/speech-to-text/docs/languages) for a list
    of the currently supported language codes.
    """

    @property
    def alternative_language_codes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A list of up to 3 additional
        [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tags,
        listing possible alternative languages of the supplied audio.
        See [Language
        Support](https://cloud.google.com/speech-to-text/docs/languages) for a list
        of the currently supported language codes. If alternative languages are
        listed, recognition result will contain recognition in the most likely
        language detected including the main language_code. The recognition result
        will include the language tag of the language detected in the audio. Note:
        This feature is only supported for Voice Command and Voice Search use cases
        and performance may vary for other use cases (e.g., phone call
        transcription).
        """
        pass
    max_alternatives: builtins.int = ...
    """Maximum number of recognition hypotheses to be returned.
    Specifically, the maximum number of `SpeechRecognitionAlternative` messages
    within each `SpeechRecognitionResult`.
    The server may return fewer than `max_alternatives`.
    Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
    one. If omitted, will return a maximum of one.
    """

    profanity_filter: builtins.bool = ...
    """If set to `true`, the server will attempt to filter out
    profanities, replacing all but the initial character in each filtered word
    with asterisks, e.g. "f***". If set to `false` or omitted, profanities
    won't be filtered out.
    """

    @property
    def adaptation(self) -> google.cloud.speech.v1.resource_pb2.SpeechAdaptation:
        """Speech adaptation configuration improves the accuracy of speech
        recognition. For more information, see the [speech
        adaptation](https://cloud.google.com/speech-to-text/docs/adaptation)
        documentation.
        When speech adaptation is set it supersedes the `speech_contexts` field.
        """
        pass
    @property
    def speech_contexts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpeechContext]:
        """Array of [SpeechContext][google.cloud.speech.v1.SpeechContext].
        A means to provide context to assist the speech recognition. For more
        information, see
        [speech
        adaptation](https://cloud.google.com/speech-to-text/docs/adaptation).
        """
        pass
    enable_word_time_offsets: builtins.bool = ...
    """If `true`, the top result includes a list of words and
    the start and end time offsets (timestamps) for those words. If
    `false`, no word-level time offset information is returned. The default is
    `false`.
    """

    enable_word_confidence: builtins.bool = ...
    """If `true`, the top result includes a list of words and the
    confidence for those words. If `false`, no word-level confidence
    information is returned. The default is `false`.
    """

    enable_automatic_punctuation: builtins.bool = ...
    """If 'true', adds punctuation to recognition result hypotheses.
    This feature is only available in select languages. Setting this for
    requests in other languages has no effect at all.
    The default 'false' value does not add punctuation to result hypotheses.
    """

    @property
    def enable_spoken_punctuation(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """The spoken punctuation behavior for the call
        If not set, uses default behavior based on model of choice
        e.g. command_and_search will enable spoken punctuation by default
        If 'true', replaces spoken punctuation with the corresponding symbols in
        the request. For example, "how are you question mark" becomes "how are
        you?". See https://cloud.google.com/speech-to-text/docs/spoken-punctuation
        for support. If 'false', spoken punctuation is not replaced.
        """
        pass
    @property
    def enable_spoken_emojis(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """The spoken emoji behavior for the call
        If not set, uses default behavior based on model of choice
        If 'true', adds spoken emoji formatting for the request. This will replace
        spoken emojis with the corresponding Unicode symbols in the final
        transcript. If 'false', spoken emojis are not replaced.
        """
        pass
    @property
    def diarization_config(self) -> global___SpeakerDiarizationConfig:
        """Config to enable speaker diarization and set additional
        parameters to make diarization better suited for your application.
        Note: When this is enabled, we send all the words from the beginning of the
        audio for the top alternative in every consecutive STREAMING responses.
        This is done in order to improve our speaker tags as our models learn to
        identify the speakers in the conversation over time.
        For non-streaming requests, the diarization results will be provided only
        in the top alternative of the FINAL SpeechRecognitionResult.
        """
        pass
    @property
    def metadata(self) -> global___RecognitionMetadata:
        """Metadata regarding this request."""
        pass
    model: typing.Text = ...
    """Which model to select for the given request. Select the model
    best suited to your domain to get best results. If a model is not
    explicitly specified, then we auto-select a model based on the parameters
    in the RecognitionConfig.
    <table>
      <tr>
        <td><b>Model</b></td>
        <td><b>Description</b></td>
      </tr>
      <tr>
        <td><code>command_and_search</code></td>
        <td>Best for short queries such as voice commands or voice search.</td>
      </tr>
      <tr>
        <td><code>phone_call</code></td>
        <td>Best for audio that originated from a phone call (typically
        recorded at an 8khz sampling rate).</td>
      </tr>
      <tr>
        <td><code>video</code></td>
        <td>Best for audio that originated from video or includes multiple
            speakers. Ideally the audio is recorded at a 16khz or greater
            sampling rate. This is a premium model that costs more than the
            standard rate.</td>
      </tr>
      <tr>
        <td><code>default</code></td>
        <td>Best for audio that is not one of the specific audio models.
            For example, long-form audio. Ideally the audio is high-fidelity,
            recorded at a 16khz or greater sampling rate.</td>
      </tr>
    </table>
    """

    use_enhanced: builtins.bool = ...
    """Set to true to use an enhanced model for speech recognition.
    If `use_enhanced` is set to true and the `model` field is not set, then
    an appropriate enhanced model is chosen if an enhanced model exists for
    the audio.

    If `use_enhanced` is true and an enhanced version of the specified model
    does not exist, then the speech is recognized using the standard version
    of the specified model.
    """

    def __init__(self,
        *,
        encoding : global___RecognitionConfig.AudioEncoding.ValueType = ...,
        sample_rate_hertz : builtins.int = ...,
        audio_channel_count : builtins.int = ...,
        enable_separate_recognition_per_channel : builtins.bool = ...,
        language_code : typing.Text = ...,
        alternative_language_codes : typing.Optional[typing.Iterable[typing.Text]] = ...,
        max_alternatives : builtins.int = ...,
        profanity_filter : builtins.bool = ...,
        adaptation : typing.Optional[google.cloud.speech.v1.resource_pb2.SpeechAdaptation] = ...,
        speech_contexts : typing.Optional[typing.Iterable[global___SpeechContext]] = ...,
        enable_word_time_offsets : builtins.bool = ...,
        enable_word_confidence : builtins.bool = ...,
        enable_automatic_punctuation : builtins.bool = ...,
        enable_spoken_punctuation : typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        enable_spoken_emojis : typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        diarization_config : typing.Optional[global___SpeakerDiarizationConfig] = ...,
        metadata : typing.Optional[global___RecognitionMetadata] = ...,
        model : typing.Text = ...,
        use_enhanced : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["adaptation",b"adaptation","diarization_config",b"diarization_config","enable_spoken_emojis",b"enable_spoken_emojis","enable_spoken_punctuation",b"enable_spoken_punctuation","metadata",b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["adaptation",b"adaptation","alternative_language_codes",b"alternative_language_codes","audio_channel_count",b"audio_channel_count","diarization_config",b"diarization_config","enable_automatic_punctuation",b"enable_automatic_punctuation","enable_separate_recognition_per_channel",b"enable_separate_recognition_per_channel","enable_spoken_emojis",b"enable_spoken_emojis","enable_spoken_punctuation",b"enable_spoken_punctuation","enable_word_confidence",b"enable_word_confidence","enable_word_time_offsets",b"enable_word_time_offsets","encoding",b"encoding","language_code",b"language_code","max_alternatives",b"max_alternatives","metadata",b"metadata","model",b"model","profanity_filter",b"profanity_filter","sample_rate_hertz",b"sample_rate_hertz","speech_contexts",b"speech_contexts","use_enhanced",b"use_enhanced"]) -> None: ...
global___RecognitionConfig = RecognitionConfig

class SpeakerDiarizationConfig(google.protobuf.message.Message):
    """Config to enable speaker diarization."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ENABLE_SPEAKER_DIARIZATION_FIELD_NUMBER: builtins.int
    MIN_SPEAKER_COUNT_FIELD_NUMBER: builtins.int
    MAX_SPEAKER_COUNT_FIELD_NUMBER: builtins.int
    SPEAKER_TAG_FIELD_NUMBER: builtins.int
    enable_speaker_diarization: builtins.bool = ...
    """If 'true', enables speaker detection for each recognized word in
    the top alternative of the recognition result using a speaker_tag provided
    in the WordInfo.
    """

    min_speaker_count: builtins.int = ...
    """Minimum number of speakers in the conversation. This range gives you more
    flexibility by allowing the system to automatically determine the correct
    number of speakers. If not set, the default value is 2.
    """

    max_speaker_count: builtins.int = ...
    """Maximum number of speakers in the conversation. This range gives you more
    flexibility by allowing the system to automatically determine the correct
    number of speakers. If not set, the default value is 6.
    """

    speaker_tag: builtins.int = ...
    """Output only. Unused."""

    def __init__(self,
        *,
        enable_speaker_diarization : builtins.bool = ...,
        min_speaker_count : builtins.int = ...,
        max_speaker_count : builtins.int = ...,
        speaker_tag : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["enable_speaker_diarization",b"enable_speaker_diarization","max_speaker_count",b"max_speaker_count","min_speaker_count",b"min_speaker_count","speaker_tag",b"speaker_tag"]) -> None: ...
global___SpeakerDiarizationConfig = SpeakerDiarizationConfig

class RecognitionMetadata(google.protobuf.message.Message):
    """Description of audio data to be recognized."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _InteractionType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _InteractionTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_InteractionType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        INTERACTION_TYPE_UNSPECIFIED: RecognitionMetadata.InteractionType.ValueType = ...  # 0
        """Use case is either unknown or is something other than one of the other
        values below.
        """

        DISCUSSION: RecognitionMetadata.InteractionType.ValueType = ...  # 1
        """Multiple people in a conversation or discussion. For example in a
        meeting with two or more people actively participating. Typically
        all the primary people speaking would be in the same room (if not,
        see PHONE_CALL)
        """

        PRESENTATION: RecognitionMetadata.InteractionType.ValueType = ...  # 2
        """One or more persons lecturing or presenting to others, mostly
        uninterrupted.
        """

        PHONE_CALL: RecognitionMetadata.InteractionType.ValueType = ...  # 3
        """A phone-call or video-conference in which two or more people, who are
        not in the same room, are actively participating.
        """

        VOICEMAIL: RecognitionMetadata.InteractionType.ValueType = ...  # 4
        """A recorded message intended for another person to listen to."""

        PROFESSIONALLY_PRODUCED: RecognitionMetadata.InteractionType.ValueType = ...  # 5
        """Professionally produced audio (eg. TV Show, Podcast)."""

        VOICE_SEARCH: RecognitionMetadata.InteractionType.ValueType = ...  # 6
        """Transcribe spoken questions and queries into text."""

        VOICE_COMMAND: RecognitionMetadata.InteractionType.ValueType = ...  # 7
        """Transcribe voice commands, such as for controlling a device."""

        DICTATION: RecognitionMetadata.InteractionType.ValueType = ...  # 8
        """Transcribe speech to text to create a written document, such as a
        text-message, email or report.
        """

    class InteractionType(_InteractionType, metaclass=_InteractionTypeEnumTypeWrapper):
        """Use case categories that the audio recognition request can be described
        by.
        """
        pass

    INTERACTION_TYPE_UNSPECIFIED: RecognitionMetadata.InteractionType.ValueType = ...  # 0
    """Use case is either unknown or is something other than one of the other
    values below.
    """

    DISCUSSION: RecognitionMetadata.InteractionType.ValueType = ...  # 1
    """Multiple people in a conversation or discussion. For example in a
    meeting with two or more people actively participating. Typically
    all the primary people speaking would be in the same room (if not,
    see PHONE_CALL)
    """

    PRESENTATION: RecognitionMetadata.InteractionType.ValueType = ...  # 2
    """One or more persons lecturing or presenting to others, mostly
    uninterrupted.
    """

    PHONE_CALL: RecognitionMetadata.InteractionType.ValueType = ...  # 3
    """A phone-call or video-conference in which two or more people, who are
    not in the same room, are actively participating.
    """

    VOICEMAIL: RecognitionMetadata.InteractionType.ValueType = ...  # 4
    """A recorded message intended for another person to listen to."""

    PROFESSIONALLY_PRODUCED: RecognitionMetadata.InteractionType.ValueType = ...  # 5
    """Professionally produced audio (eg. TV Show, Podcast)."""

    VOICE_SEARCH: RecognitionMetadata.InteractionType.ValueType = ...  # 6
    """Transcribe spoken questions and queries into text."""

    VOICE_COMMAND: RecognitionMetadata.InteractionType.ValueType = ...  # 7
    """Transcribe voice commands, such as for controlling a device."""

    DICTATION: RecognitionMetadata.InteractionType.ValueType = ...  # 8
    """Transcribe speech to text to create a written document, such as a
    text-message, email or report.
    """


    class _MicrophoneDistance:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _MicrophoneDistanceEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MicrophoneDistance.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        MICROPHONE_DISTANCE_UNSPECIFIED: RecognitionMetadata.MicrophoneDistance.ValueType = ...  # 0
        """Audio type is not known."""

        NEARFIELD: RecognitionMetadata.MicrophoneDistance.ValueType = ...  # 1
        """The audio was captured from a closely placed microphone. Eg. phone,
        dictaphone, or handheld microphone. Generally if there speaker is within
        1 meter of the microphone.
        """

        MIDFIELD: RecognitionMetadata.MicrophoneDistance.ValueType = ...  # 2
        """The speaker if within 3 meters of the microphone."""

        FARFIELD: RecognitionMetadata.MicrophoneDistance.ValueType = ...  # 3
        """The speaker is more than 3 meters away from the microphone."""

    class MicrophoneDistance(_MicrophoneDistance, metaclass=_MicrophoneDistanceEnumTypeWrapper):
        """Enumerates the types of capture settings describing an audio file."""
        pass

    MICROPHONE_DISTANCE_UNSPECIFIED: RecognitionMetadata.MicrophoneDistance.ValueType = ...  # 0
    """Audio type is not known."""

    NEARFIELD: RecognitionMetadata.MicrophoneDistance.ValueType = ...  # 1
    """The audio was captured from a closely placed microphone. Eg. phone,
    dictaphone, or handheld microphone. Generally if there speaker is within
    1 meter of the microphone.
    """

    MIDFIELD: RecognitionMetadata.MicrophoneDistance.ValueType = ...  # 2
    """The speaker if within 3 meters of the microphone."""

    FARFIELD: RecognitionMetadata.MicrophoneDistance.ValueType = ...  # 3
    """The speaker is more than 3 meters away from the microphone."""


    class _OriginalMediaType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _OriginalMediaTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_OriginalMediaType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        ORIGINAL_MEDIA_TYPE_UNSPECIFIED: RecognitionMetadata.OriginalMediaType.ValueType = ...  # 0
        """Unknown original media type."""

        AUDIO: RecognitionMetadata.OriginalMediaType.ValueType = ...  # 1
        """The speech data is an audio recording."""

        VIDEO: RecognitionMetadata.OriginalMediaType.ValueType = ...  # 2
        """The speech data originally recorded on a video."""

    class OriginalMediaType(_OriginalMediaType, metaclass=_OriginalMediaTypeEnumTypeWrapper):
        """The original media the speech was recorded on."""
        pass

    ORIGINAL_MEDIA_TYPE_UNSPECIFIED: RecognitionMetadata.OriginalMediaType.ValueType = ...  # 0
    """Unknown original media type."""

    AUDIO: RecognitionMetadata.OriginalMediaType.ValueType = ...  # 1
    """The speech data is an audio recording."""

    VIDEO: RecognitionMetadata.OriginalMediaType.ValueType = ...  # 2
    """The speech data originally recorded on a video."""


    class _RecordingDeviceType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _RecordingDeviceTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RecordingDeviceType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        RECORDING_DEVICE_TYPE_UNSPECIFIED: RecognitionMetadata.RecordingDeviceType.ValueType = ...  # 0
        """The recording device is unknown."""

        SMARTPHONE: RecognitionMetadata.RecordingDeviceType.ValueType = ...  # 1
        """Speech was recorded on a smartphone."""

        PC: RecognitionMetadata.RecordingDeviceType.ValueType = ...  # 2
        """Speech was recorded using a personal computer or tablet."""

        PHONE_LINE: RecognitionMetadata.RecordingDeviceType.ValueType = ...  # 3
        """Speech was recorded over a phone line."""

        VEHICLE: RecognitionMetadata.RecordingDeviceType.ValueType = ...  # 4
        """Speech was recorded in a vehicle."""

        OTHER_OUTDOOR_DEVICE: RecognitionMetadata.RecordingDeviceType.ValueType = ...  # 5
        """Speech was recorded outdoors."""

        OTHER_INDOOR_DEVICE: RecognitionMetadata.RecordingDeviceType.ValueType = ...  # 6
        """Speech was recorded indoors."""

    class RecordingDeviceType(_RecordingDeviceType, metaclass=_RecordingDeviceTypeEnumTypeWrapper):
        """The type of device the speech was recorded with."""
        pass

    RECORDING_DEVICE_TYPE_UNSPECIFIED: RecognitionMetadata.RecordingDeviceType.ValueType = ...  # 0
    """The recording device is unknown."""

    SMARTPHONE: RecognitionMetadata.RecordingDeviceType.ValueType = ...  # 1
    """Speech was recorded on a smartphone."""

    PC: RecognitionMetadata.RecordingDeviceType.ValueType = ...  # 2
    """Speech was recorded using a personal computer or tablet."""

    PHONE_LINE: RecognitionMetadata.RecordingDeviceType.ValueType = ...  # 3
    """Speech was recorded over a phone line."""

    VEHICLE: RecognitionMetadata.RecordingDeviceType.ValueType = ...  # 4
    """Speech was recorded in a vehicle."""

    OTHER_OUTDOOR_DEVICE: RecognitionMetadata.RecordingDeviceType.ValueType = ...  # 5
    """Speech was recorded outdoors."""

    OTHER_INDOOR_DEVICE: RecognitionMetadata.RecordingDeviceType.ValueType = ...  # 6
    """Speech was recorded indoors."""


    INTERACTION_TYPE_FIELD_NUMBER: builtins.int
    INDUSTRY_NAICS_CODE_OF_AUDIO_FIELD_NUMBER: builtins.int
    MICROPHONE_DISTANCE_FIELD_NUMBER: builtins.int
    ORIGINAL_MEDIA_TYPE_FIELD_NUMBER: builtins.int
    RECORDING_DEVICE_TYPE_FIELD_NUMBER: builtins.int
    RECORDING_DEVICE_NAME_FIELD_NUMBER: builtins.int
    ORIGINAL_MIME_TYPE_FIELD_NUMBER: builtins.int
    AUDIO_TOPIC_FIELD_NUMBER: builtins.int
    interaction_type: global___RecognitionMetadata.InteractionType.ValueType = ...
    """The use case most closely describing the audio content to be recognized."""

    industry_naics_code_of_audio: builtins.int = ...
    """The industry vertical to which this speech recognition request most
    closely applies. This is most indicative of the topics contained
    in the audio.  Use the 6-digit NAICS code to identify the industry
    vertical - see https://www.naics.com/search/.
    """

    microphone_distance: global___RecognitionMetadata.MicrophoneDistance.ValueType = ...
    """The audio type that most closely describes the audio being recognized."""

    original_media_type: global___RecognitionMetadata.OriginalMediaType.ValueType = ...
    """The original media the speech was recorded on."""

    recording_device_type: global___RecognitionMetadata.RecordingDeviceType.ValueType = ...
    """The type of device the speech was recorded with."""

    recording_device_name: typing.Text = ...
    """The device used to make the recording.  Examples 'Nexus 5X' or
    'Polycom SoundStation IP 6000' or 'POTS' or 'VoIP' or
    'Cardioid Microphone'.
    """

    original_mime_type: typing.Text = ...
    """Mime type of the original audio file.  For example `audio/m4a`,
    `audio/x-alaw-basic`, `audio/mp3`, `audio/3gpp`.
    A list of possible audio mime types is maintained at
    http://www.iana.org/assignments/media-types/media-types.xhtml#audio
    """

    audio_topic: typing.Text = ...
    """Description of the content. Eg. "Recordings of federal supreme court
    hearings from 2012".
    """

    def __init__(self,
        *,
        interaction_type : global___RecognitionMetadata.InteractionType.ValueType = ...,
        industry_naics_code_of_audio : builtins.int = ...,
        microphone_distance : global___RecognitionMetadata.MicrophoneDistance.ValueType = ...,
        original_media_type : global___RecognitionMetadata.OriginalMediaType.ValueType = ...,
        recording_device_type : global___RecognitionMetadata.RecordingDeviceType.ValueType = ...,
        recording_device_name : typing.Text = ...,
        original_mime_type : typing.Text = ...,
        audio_topic : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["audio_topic",b"audio_topic","industry_naics_code_of_audio",b"industry_naics_code_of_audio","interaction_type",b"interaction_type","microphone_distance",b"microphone_distance","original_media_type",b"original_media_type","original_mime_type",b"original_mime_type","recording_device_name",b"recording_device_name","recording_device_type",b"recording_device_type"]) -> None: ...
global___RecognitionMetadata = RecognitionMetadata

class SpeechContext(google.protobuf.message.Message):
    """Provides "hints" to the speech recognizer to favor specific words and phrases
    in the results.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PHRASES_FIELD_NUMBER: builtins.int
    BOOST_FIELD_NUMBER: builtins.int
    @property
    def phrases(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A list of strings containing words and phrases "hints" so that
        the speech recognition is more likely to recognize them. This can be used
        to improve the accuracy for specific words and phrases, for example, if
        specific commands are typically spoken by the user. This can also be used
        to add additional words to the vocabulary of the recognizer. See
        [usage limits](https://cloud.google.com/speech-to-text/quotas#content).

        List items can also be set to classes for groups of words that represent
        common concepts that occur in natural language. For example, rather than
        providing phrase hints for every month of the year, using the $MONTH class
        improves the likelihood of correctly transcribing audio that includes
        months.
        """
        pass
    boost: builtins.float = ...
    """Hint Boost. Positive value will increase the probability that a specific
    phrase will be recognized over other similar sounding phrases. The higher
    the boost, the higher the chance of false positive recognition as well.
    Negative boost values would correspond to anti-biasing. Anti-biasing is not
    enabled, so negative boost will simply be ignored. Though `boost` can
    accept a wide range of positive values, most use cases are best served with
    values between 0 and 20. We recommend using a binary search approach to
    finding the optimal value for your use case.
    """

    def __init__(self,
        *,
        phrases : typing.Optional[typing.Iterable[typing.Text]] = ...,
        boost : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["boost",b"boost","phrases",b"phrases"]) -> None: ...
global___SpeechContext = SpeechContext

class RecognitionAudio(google.protobuf.message.Message):
    """Contains audio data in the encoding specified in the `RecognitionConfig`.
    Either `content` or `uri` must be supplied. Supplying both or neither
    returns [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]. See
    [content limits](https://cloud.google.com/speech-to-text/quotas#content).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONTENT_FIELD_NUMBER: builtins.int
    URI_FIELD_NUMBER: builtins.int
    content: builtins.bytes = ...
    """The audio data bytes encoded as specified in
    `RecognitionConfig`. Note: as with all bytes fields, proto buffers use a
    pure binary representation, whereas JSON representations use base64.
    """

    uri: typing.Text = ...
    """URI that points to a file that contains audio data bytes as specified in
    `RecognitionConfig`. The file must not be compressed (for example, gzip).
    Currently, only Google Cloud Storage URIs are
    supported, which must be specified in the following format:
    `gs://bucket_name/object_name` (other URI formats return
    [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]). For more information, see
    [Request URIs](https://cloud.google.com/storage/docs/reference-uris).
    """

    def __init__(self,
        *,
        content : builtins.bytes = ...,
        uri : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["audio_source",b"audio_source","content",b"content","uri",b"uri"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["audio_source",b"audio_source","content",b"content","uri",b"uri"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["audio_source",b"audio_source"]) -> typing.Optional[typing_extensions.Literal["content","uri"]]: ...
global___RecognitionAudio = RecognitionAudio

class RecognizeResponse(google.protobuf.message.Message):
    """The only message returned to the client by the `Recognize` method. It
    contains the result as zero or more sequential `SpeechRecognitionResult`
    messages.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESULTS_FIELD_NUMBER: builtins.int
    TOTAL_BILLED_TIME_FIELD_NUMBER: builtins.int
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpeechRecognitionResult]:
        """Sequential list of transcription results corresponding to
        sequential portions of audio.
        """
        pass
    @property
    def total_billed_time(self) -> google.protobuf.duration_pb2.Duration:
        """When available, billed audio seconds for the corresponding request."""
        pass
    def __init__(self,
        *,
        results : typing.Optional[typing.Iterable[global___SpeechRecognitionResult]] = ...,
        total_billed_time : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["total_billed_time",b"total_billed_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["results",b"results","total_billed_time",b"total_billed_time"]) -> None: ...
global___RecognizeResponse = RecognizeResponse

class LongRunningRecognizeResponse(google.protobuf.message.Message):
    """The only message returned to the client by the `LongRunningRecognize` method.
    It contains the result as zero or more sequential `SpeechRecognitionResult`
    messages. It is included in the `result.response` field of the `Operation`
    returned by the `GetOperation` call of the `google::longrunning::Operations`
    service.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESULTS_FIELD_NUMBER: builtins.int
    TOTAL_BILLED_TIME_FIELD_NUMBER: builtins.int
    OUTPUT_CONFIG_FIELD_NUMBER: builtins.int
    OUTPUT_ERROR_FIELD_NUMBER: builtins.int
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpeechRecognitionResult]:
        """Sequential list of transcription results corresponding to
        sequential portions of audio.
        """
        pass
    @property
    def total_billed_time(self) -> google.protobuf.duration_pb2.Duration:
        """When available, billed audio seconds for the corresponding request."""
        pass
    @property
    def output_config(self) -> global___TranscriptOutputConfig:
        """Original output config if present in the request."""
        pass
    @property
    def output_error(self) -> google.rpc.status_pb2.Status:
        """If the transcript output fails this field contains the relevant error."""
        pass
    def __init__(self,
        *,
        results : typing.Optional[typing.Iterable[global___SpeechRecognitionResult]] = ...,
        total_billed_time : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        output_config : typing.Optional[global___TranscriptOutputConfig] = ...,
        output_error : typing.Optional[google.rpc.status_pb2.Status] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["output_config",b"output_config","output_error",b"output_error","total_billed_time",b"total_billed_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["output_config",b"output_config","output_error",b"output_error","results",b"results","total_billed_time",b"total_billed_time"]) -> None: ...
global___LongRunningRecognizeResponse = LongRunningRecognizeResponse

class LongRunningRecognizeMetadata(google.protobuf.message.Message):
    """Describes the progress of a long-running `LongRunningRecognize` call. It is
    included in the `metadata` field of the `Operation` returned by the
    `GetOperation` call of the `google::longrunning::Operations` service.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROGRESS_PERCENT_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    LAST_UPDATE_TIME_FIELD_NUMBER: builtins.int
    URI_FIELD_NUMBER: builtins.int
    progress_percent: builtins.int = ...
    """Approximate percentage of audio processed thus far. Guaranteed to be 100
    when the audio is fully processed and the results are available.
    """

    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time when the request was received."""
        pass
    @property
    def last_update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time of the most recent processing update."""
        pass
    uri: typing.Text = ...
    """Output only. The URI of the audio file being transcribed. Empty if the audio was sent
    as byte content.
    """

    def __init__(self,
        *,
        progress_percent : builtins.int = ...,
        start_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        last_update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        uri : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["last_update_time",b"last_update_time","start_time",b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["last_update_time",b"last_update_time","progress_percent",b"progress_percent","start_time",b"start_time","uri",b"uri"]) -> None: ...
global___LongRunningRecognizeMetadata = LongRunningRecognizeMetadata

class StreamingRecognizeResponse(google.protobuf.message.Message):
    """`StreamingRecognizeResponse` is the only message returned to the client by
    `StreamingRecognize`. A series of zero or more `StreamingRecognizeResponse`
    messages are streamed back to the client. If there is no recognizable
    audio, and `single_utterance` is set to false, then no messages are streamed
    back to the client.

    Here's an example of a series of `StreamingRecognizeResponse`s that might be
    returned while processing audio:

    1. results { alternatives { transcript: "tube" } stability: 0.01 }

    2. results { alternatives { transcript: "to be a" } stability: 0.01 }

    3. results { alternatives { transcript: "to be" } stability: 0.9 }
       results { alternatives { transcript: " or not to be" } stability: 0.01 }

    4. results { alternatives { transcript: "to be or not to be"
                                confidence: 0.92 }
                 alternatives { transcript: "to bee or not to bee" }
                 is_final: true }

    5. results { alternatives { transcript: " that's" } stability: 0.01 }

    6. results { alternatives { transcript: " that is" } stability: 0.9 }
       results { alternatives { transcript: " the question" } stability: 0.01 }

    7. results { alternatives { transcript: " that is the question"
                                confidence: 0.98 }
                 alternatives { transcript: " that was the question" }
                 is_final: true }

    Notes:

    - Only two of the above responses #4 and #7 contain final results; they are
      indicated by `is_final: true`. Concatenating these together generates the
      full transcript: "to be or not to be that is the question".

    - The others contain interim `results`. #3 and #6 contain two interim
      `results`: the first portion has a high stability and is less likely to
      change; the second portion has a low stability and is very likely to
      change. A UI designer might choose to show only high stability `results`.

    - The specific `stability` and `confidence` values shown above are only for
      illustrative purposes. Actual values may vary.

    - In each response, only one of these fields will be set:
        `error`,
        `speech_event_type`, or
        one or more (repeated) `results`.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _SpeechEventType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _SpeechEventTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SpeechEventType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        SPEECH_EVENT_UNSPECIFIED: StreamingRecognizeResponse.SpeechEventType.ValueType = ...  # 0
        """No speech event specified."""

        END_OF_SINGLE_UTTERANCE: StreamingRecognizeResponse.SpeechEventType.ValueType = ...  # 1
        """This event indicates that the server has detected the end of the user's
        speech utterance and expects no additional speech. Therefore, the server
        will not process additional audio (although it may subsequently return
        additional results). The client should stop sending additional audio
        data, half-close the gRPC connection, and wait for any additional results
        until the server closes the gRPC connection. This event is only sent if
        `single_utterance` was set to `true`, and is not used otherwise.
        """

    class SpeechEventType(_SpeechEventType, metaclass=_SpeechEventTypeEnumTypeWrapper):
        """Indicates the type of speech event."""
        pass

    SPEECH_EVENT_UNSPECIFIED: StreamingRecognizeResponse.SpeechEventType.ValueType = ...  # 0
    """No speech event specified."""

    END_OF_SINGLE_UTTERANCE: StreamingRecognizeResponse.SpeechEventType.ValueType = ...  # 1
    """This event indicates that the server has detected the end of the user's
    speech utterance and expects no additional speech. Therefore, the server
    will not process additional audio (although it may subsequently return
    additional results). The client should stop sending additional audio
    data, half-close the gRPC connection, and wait for any additional results
    until the server closes the gRPC connection. This event is only sent if
    `single_utterance` was set to `true`, and is not used otherwise.
    """


    ERROR_FIELD_NUMBER: builtins.int
    RESULTS_FIELD_NUMBER: builtins.int
    SPEECH_EVENT_TYPE_FIELD_NUMBER: builtins.int
    TOTAL_BILLED_TIME_FIELD_NUMBER: builtins.int
    @property
    def error(self) -> google.rpc.status_pb2.Status:
        """If set, returns a [google.rpc.Status][google.rpc.Status] message that
        specifies the error for the operation.
        """
        pass
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StreamingRecognitionResult]:
        """This repeated list contains zero or more results that
        correspond to consecutive portions of the audio currently being processed.
        It contains zero or one `is_final=true` result (the newly settled portion),
        followed by zero or more `is_final=false` results (the interim results).
        """
        pass
    speech_event_type: global___StreamingRecognizeResponse.SpeechEventType.ValueType = ...
    """Indicates the type of speech event."""

    @property
    def total_billed_time(self) -> google.protobuf.duration_pb2.Duration:
        """When available, billed audio seconds for the stream.
        Set only if this is the last response in the stream.
        """
        pass
    def __init__(self,
        *,
        error : typing.Optional[google.rpc.status_pb2.Status] = ...,
        results : typing.Optional[typing.Iterable[global___StreamingRecognitionResult]] = ...,
        speech_event_type : global___StreamingRecognizeResponse.SpeechEventType.ValueType = ...,
        total_billed_time : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["error",b"error","total_billed_time",b"total_billed_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["error",b"error","results",b"results","speech_event_type",b"speech_event_type","total_billed_time",b"total_billed_time"]) -> None: ...
global___StreamingRecognizeResponse = StreamingRecognizeResponse

class StreamingRecognitionResult(google.protobuf.message.Message):
    """A streaming speech recognition result corresponding to a portion of the audio
    that is currently being processed.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ALTERNATIVES_FIELD_NUMBER: builtins.int
    IS_FINAL_FIELD_NUMBER: builtins.int
    STABILITY_FIELD_NUMBER: builtins.int
    RESULT_END_TIME_FIELD_NUMBER: builtins.int
    CHANNEL_TAG_FIELD_NUMBER: builtins.int
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    @property
    def alternatives(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpeechRecognitionAlternative]:
        """May contain one or more recognition hypotheses (up to the
        maximum specified in `max_alternatives`).
        These alternatives are ordered in terms of accuracy, with the top (first)
        alternative being the most probable, as ranked by the recognizer.
        """
        pass
    is_final: builtins.bool = ...
    """If `false`, this `StreamingRecognitionResult` represents an
    interim result that may change. If `true`, this is the final time the
    speech service will return this particular `StreamingRecognitionResult`,
    the recognizer will not return any further hypotheses for this portion of
    the transcript and corresponding audio.
    """

    stability: builtins.float = ...
    """An estimate of the likelihood that the recognizer will not
    change its guess about this interim result. Values range from 0.0
    (completely unstable) to 1.0 (completely stable).
    This field is only provided for interim results (`is_final=false`).
    The default of 0.0 is a sentinel value indicating `stability` was not set.
    """

    @property
    def result_end_time(self) -> google.protobuf.duration_pb2.Duration:
        """Time offset of the end of this result relative to the
        beginning of the audio.
        """
        pass
    channel_tag: builtins.int = ...
    """For multi-channel audio, this is the channel number corresponding to the
    recognized result for the audio from that channel.
    For audio_channel_count = N, its output values can range from '1' to 'N'.
    """

    language_code: typing.Text = ...
    """Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag
    of the language in this result. This language code was detected to have
    the most likelihood of being spoken in the audio.
    """

    def __init__(self,
        *,
        alternatives : typing.Optional[typing.Iterable[global___SpeechRecognitionAlternative]] = ...,
        is_final : builtins.bool = ...,
        stability : builtins.float = ...,
        result_end_time : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        channel_tag : builtins.int = ...,
        language_code : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["result_end_time",b"result_end_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["alternatives",b"alternatives","channel_tag",b"channel_tag","is_final",b"is_final","language_code",b"language_code","result_end_time",b"result_end_time","stability",b"stability"]) -> None: ...
global___StreamingRecognitionResult = StreamingRecognitionResult

class SpeechRecognitionResult(google.protobuf.message.Message):
    """A speech recognition result corresponding to a portion of the audio."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ALTERNATIVES_FIELD_NUMBER: builtins.int
    CHANNEL_TAG_FIELD_NUMBER: builtins.int
    RESULT_END_TIME_FIELD_NUMBER: builtins.int
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    @property
    def alternatives(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpeechRecognitionAlternative]:
        """May contain one or more recognition hypotheses (up to the
        maximum specified in `max_alternatives`).
        These alternatives are ordered in terms of accuracy, with the top (first)
        alternative being the most probable, as ranked by the recognizer.
        """
        pass
    channel_tag: builtins.int = ...
    """For multi-channel audio, this is the channel number corresponding to the
    recognized result for the audio from that channel.
    For audio_channel_count = N, its output values can range from '1' to 'N'.
    """

    @property
    def result_end_time(self) -> google.protobuf.duration_pb2.Duration:
        """Time offset of the end of this result relative to the
        beginning of the audio.
        """
        pass
    language_code: typing.Text = ...
    """Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag
    of the language in this result. This language code was detected to have
    the most likelihood of being spoken in the audio.
    """

    def __init__(self,
        *,
        alternatives : typing.Optional[typing.Iterable[global___SpeechRecognitionAlternative]] = ...,
        channel_tag : builtins.int = ...,
        result_end_time : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        language_code : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["result_end_time",b"result_end_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["alternatives",b"alternatives","channel_tag",b"channel_tag","language_code",b"language_code","result_end_time",b"result_end_time"]) -> None: ...
global___SpeechRecognitionResult = SpeechRecognitionResult

class SpeechRecognitionAlternative(google.protobuf.message.Message):
    """Alternative hypotheses (a.k.a. n-best list)."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TRANSCRIPT_FIELD_NUMBER: builtins.int
    CONFIDENCE_FIELD_NUMBER: builtins.int
    WORDS_FIELD_NUMBER: builtins.int
    transcript: typing.Text = ...
    """Transcript text representing the words that the user spoke."""

    confidence: builtins.float = ...
    """The confidence estimate between 0.0 and 1.0. A higher number
    indicates an estimated greater likelihood that the recognized words are
    correct. This field is set only for the top alternative of a non-streaming
    result or, of a streaming result where `is_final=true`.
    This field is not guaranteed to be accurate and users should not rely on it
    to be always provided.
    The default of 0.0 is a sentinel value indicating `confidence` was not set.
    """

    @property
    def words(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___WordInfo]:
        """A list of word-specific information for each recognized word.
        Note: When `enable_speaker_diarization` is true, you will see all the words
        from the beginning of the audio.
        """
        pass
    def __init__(self,
        *,
        transcript : typing.Text = ...,
        confidence : builtins.float = ...,
        words : typing.Optional[typing.Iterable[global___WordInfo]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["confidence",b"confidence","transcript",b"transcript","words",b"words"]) -> None: ...
global___SpeechRecognitionAlternative = SpeechRecognitionAlternative

class WordInfo(google.protobuf.message.Message):
    """Word-specific information for recognized words."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    WORD_FIELD_NUMBER: builtins.int
    CONFIDENCE_FIELD_NUMBER: builtins.int
    SPEAKER_TAG_FIELD_NUMBER: builtins.int
    @property
    def start_time(self) -> google.protobuf.duration_pb2.Duration:
        """Time offset relative to the beginning of the audio,
        and corresponding to the start of the spoken word.
        This field is only set if `enable_word_time_offsets=true` and only
        in the top hypothesis.
        This is an experimental feature and the accuracy of the time offset can
        vary.
        """
        pass
    @property
    def end_time(self) -> google.protobuf.duration_pb2.Duration:
        """Time offset relative to the beginning of the audio,
        and corresponding to the end of the spoken word.
        This field is only set if `enable_word_time_offsets=true` and only
        in the top hypothesis.
        This is an experimental feature and the accuracy of the time offset can
        vary.
        """
        pass
    word: typing.Text = ...
    """The word corresponding to this set of information."""

    confidence: builtins.float = ...
    """The confidence estimate between 0.0 and 1.0. A higher number
    indicates an estimated greater likelihood that the recognized words are
    correct. This field is set only for the top alternative of a non-streaming
    result or, of a streaming result where `is_final=true`.
    This field is not guaranteed to be accurate and users should not rely on it
    to be always provided.
    The default of 0.0 is a sentinel value indicating `confidence` was not set.
    """

    speaker_tag: builtins.int = ...
    """Output only. A distinct integer value is assigned for every speaker within
    the audio. This field specifies which one of those speakers was detected to
    have spoken this word. Value ranges from '1' to diarization_speaker_count.
    speaker_tag is set if enable_speaker_diarization = 'true' and only in the
    top alternative.
    """

    def __init__(self,
        *,
        start_time : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        end_time : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        word : typing.Text = ...,
        confidence : builtins.float = ...,
        speaker_tag : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_time",b"end_time","start_time",b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["confidence",b"confidence","end_time",b"end_time","speaker_tag",b"speaker_tag","start_time",b"start_time","word",b"word"]) -> None: ...
global___WordInfo = WordInfo
