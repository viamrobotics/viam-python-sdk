"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class CustomClass(google.protobuf.message.Message):
    """A set of words or phrases that represents a common concept likely to appear
    in your audio, for example a list of passenger ship names. CustomClass items
    can be substituted into placeholders that you set in PhraseSet phrases.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ClassItem(google.protobuf.message.Message):
        """An item of the class."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        VALUE_FIELD_NUMBER: builtins.int
        value: typing.Text = ...
        """The class item's value."""

        def __init__(self,
            *,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    CUSTOM_CLASS_ID_FIELD_NUMBER: builtins.int
    ITEMS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The resource name of the custom class."""

    custom_class_id: typing.Text = ...
    """If this custom class is a resource, the custom_class_id is the resource id
    of the CustomClass. Case sensitive.
    """

    @property
    def items(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CustomClass.ClassItem]:
        """A collection of class items."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        custom_class_id : typing.Text = ...,
        items : typing.Optional[typing.Iterable[global___CustomClass.ClassItem]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["custom_class_id",b"custom_class_id","items",b"items","name",b"name"]) -> None: ...
global___CustomClass = CustomClass

class PhraseSet(google.protobuf.message.Message):
    """Provides "hints" to the speech recognizer to favor specific words and phrases
    in the results.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Phrase(google.protobuf.message.Message):
        """A phrases containing words and phrase "hints" so that
        the speech recognition is more likely to recognize them. This can be used
        to improve the accuracy for specific words and phrases, for example, if
        specific commands are typically spoken by the user. This can also be used
        to add additional words to the vocabulary of the recognizer. See
        [usage limits](https://cloud.google.com/speech-to-text/quotas#content).

        List items can also include pre-built or custom classes containing groups
        of words that represent common concepts that occur in natural language. For
        example, rather than providing a phrase hint for every month of the
        year (e.g. "i was born in january", "i was born in febuary", ...), use the
        pre-built `$MONTH` class improves the likelihood of correctly transcribing
        audio that includes months (e.g. "i was born in $month").
        To refer to pre-built classes, use the class' symbol prepended with `$`
        e.g. `$MONTH`. To refer to custom classes that were defined inline in the
        request, set the class's `custom_class_id` to a string unique to all class
        resources and inline classes. Then use the class' id wrapped in $`{...}`
        e.g. "${my-months}". To refer to custom classes resources, use the class'
        id wrapped in `${}` (e.g. `${my-months}`).

        Speech-to-Text supports three locations: `global`, `us` (US North America),
        and `eu` (Europe). If you are calling the `speech.googleapis.com`
        endpoint, use the `global` location. To specify a region, use a
        [regional endpoint](/speech-to-text/docs/endpoints) with matching `us` or
        `eu` location value.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        VALUE_FIELD_NUMBER: builtins.int
        BOOST_FIELD_NUMBER: builtins.int
        value: typing.Text = ...
        """The phrase itself."""

        boost: builtins.float = ...
        """Hint Boost. Overrides the boost set at the phrase set level.
        Positive value will increase the probability that a specific phrase will
        be recognized over other similar sounding phrases. The higher the boost,
        the higher the chance of false positive recognition as well. Negative
        boost will simply be ignored. Though `boost` can accept a wide range of
        positive values, most use cases are best served
        with values between 0 and 20. We recommend using a binary search approach
        to finding the optimal value for your use case. Speech recognition
        will skip PhraseSets with a boost value of 0.
        """

        def __init__(self,
            *,
            value : typing.Text = ...,
            boost : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["boost",b"boost","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    PHRASES_FIELD_NUMBER: builtins.int
    BOOST_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The resource name of the phrase set."""

    @property
    def phrases(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PhraseSet.Phrase]:
        """A list of word and phrases."""
        pass
    boost: builtins.float = ...
    """Hint Boost. Positive value will increase the probability that a specific
    phrase will be recognized over other similar sounding phrases. The higher
    the boost, the higher the chance of false positive recognition as well.
    Negative boost values would correspond to anti-biasing. Anti-biasing is not
    enabled, so negative boost will simply be ignored. Though `boost` can
    accept a wide range of positive values, most use cases are best served with
    values between 0 (exclusive) and 20. We recommend using a binary search
    approach to finding the optimal value for your use case. Speech recognition
    will skip PhraseSets with a boost value of 0.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        phrases : typing.Optional[typing.Iterable[global___PhraseSet.Phrase]] = ...,
        boost : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["boost",b"boost","name",b"name","phrases",b"phrases"]) -> None: ...
global___PhraseSet = PhraseSet

class SpeechAdaptation(google.protobuf.message.Message):
    """Speech adaptation configuration."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PHRASE_SETS_FIELD_NUMBER: builtins.int
    PHRASE_SET_REFERENCES_FIELD_NUMBER: builtins.int
    CUSTOM_CLASSES_FIELD_NUMBER: builtins.int
    @property
    def phrase_sets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PhraseSet]:
        """A collection of phrase sets. To specify the hints inline, leave the
        phrase set's `name` blank and fill in the rest of its fields. Any
        phrase set can use any custom class.
        """
        pass
    @property
    def phrase_set_references(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A collection of phrase set resource names to use."""
        pass
    @property
    def custom_classes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CustomClass]:
        """A collection of custom classes. To specify the classes inline, leave the
        class' `name` blank and fill in the rest of its fields, giving it a unique
        `custom_class_id`. Refer to the inline defined class in phrase hints by its
        `custom_class_id`.
        """
        pass
    def __init__(self,
        *,
        phrase_sets : typing.Optional[typing.Iterable[global___PhraseSet]] = ...,
        phrase_set_references : typing.Optional[typing.Iterable[typing.Text]] = ...,
        custom_classes : typing.Optional[typing.Iterable[global___CustomClass]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["custom_classes",b"custom_classes","phrase_set_references",b"phrase_set_references","phrase_sets",b"phrase_sets"]) -> None: ...
global___SpeechAdaptation = SpeechAdaptation
