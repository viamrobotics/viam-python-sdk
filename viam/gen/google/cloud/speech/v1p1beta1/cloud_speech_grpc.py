# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/cloud/speech/v1p1beta1/cloud_speech.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.api.client_pb2
import google.api.field_behavior_pb2
import google.cloud.speech.v1p1beta1.resource_pb2
import google.longrunning.operations_pb2
import google.protobuf.any_pb2
import google.protobuf.duration_pb2
import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
import google.rpc.status_pb2
import google.cloud.speech.v1p1beta1.cloud_speech_pb2


class SpeechBase(abc.ABC):

    @abc.abstractmethod
    async def Recognize(self, stream: 'grpclib.server.Stream[google.cloud.speech.v1p1beta1.cloud_speech_pb2.RecognizeRequest, google.cloud.speech.v1p1beta1.cloud_speech_pb2.RecognizeResponse]') -> None:
        pass

    @abc.abstractmethod
    async def LongRunningRecognize(self, stream: 'grpclib.server.Stream[google.cloud.speech.v1p1beta1.cloud_speech_pb2.LongRunningRecognizeRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def StreamingRecognize(self, stream: 'grpclib.server.Stream[google.cloud.speech.v1p1beta1.cloud_speech_pb2.StreamingRecognizeRequest, google.cloud.speech.v1p1beta1.cloud_speech_pb2.StreamingRecognizeResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.speech.v1p1beta1.Speech/Recognize': grpclib.const.Handler(
                self.Recognize,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.speech.v1p1beta1.cloud_speech_pb2.RecognizeRequest,
                google.cloud.speech.v1p1beta1.cloud_speech_pb2.RecognizeResponse,
            ),
            '/google.cloud.speech.v1p1beta1.Speech/LongRunningRecognize': grpclib.const.Handler(
                self.LongRunningRecognize,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.speech.v1p1beta1.cloud_speech_pb2.LongRunningRecognizeRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.cloud.speech.v1p1beta1.Speech/StreamingRecognize': grpclib.const.Handler(
                self.StreamingRecognize,
                grpclib.const.Cardinality.STREAM_STREAM,
                google.cloud.speech.v1p1beta1.cloud_speech_pb2.StreamingRecognizeRequest,
                google.cloud.speech.v1p1beta1.cloud_speech_pb2.StreamingRecognizeResponse,
            ),
        }


class SpeechStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Recognize = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.speech.v1p1beta1.Speech/Recognize',
            google.cloud.speech.v1p1beta1.cloud_speech_pb2.RecognizeRequest,
            google.cloud.speech.v1p1beta1.cloud_speech_pb2.RecognizeResponse,
        )
        self.LongRunningRecognize = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.speech.v1p1beta1.Speech/LongRunningRecognize',
            google.cloud.speech.v1p1beta1.cloud_speech_pb2.LongRunningRecognizeRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.StreamingRecognize = grpclib.client.StreamStreamMethod(
            channel,
            '/google.cloud.speech.v1p1beta1.Speech/StreamingRecognize',
            google.cloud.speech.v1p1beta1.cloud_speech_pb2.StreamingRecognizeRequest,
            google.cloud.speech.v1p1beta1.cloud_speech_pb2.StreamingRecognizeResponse,
        )
