"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class CreateEnvironmentRequest(google.protobuf.message.Message):
    """Create a new environment."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    ENVIRONMENT_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """The parent must be of the form
    "projects/{projectId}/locations/{locationId}".
    """

    @property
    def environment(self) -> global___Environment:
        """The environment to create."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        environment : typing.Optional[global___Environment] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["environment",b"environment"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["environment",b"environment","parent",b"parent"]) -> None: ...
global___CreateEnvironmentRequest = CreateEnvironmentRequest

class GetEnvironmentRequest(google.protobuf.message.Message):
    """Get an environment."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The resource name of the environment to get, in the form:
    "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetEnvironmentRequest = GetEnvironmentRequest

class ListEnvironmentsRequest(google.protobuf.message.Message):
    """List environments in a project and location."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """List environments in the given project and location, in the form:
    "projects/{projectId}/locations/{locationId}"
    """

    page_size: builtins.int = ...
    """The maximum number of environments to return."""

    page_token: typing.Text = ...
    """The next_page_token value returned from a previous List request, if any."""

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListEnvironmentsRequest = ListEnvironmentsRequest

class ListEnvironmentsResponse(google.protobuf.message.Message):
    """The environments in a project and location."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ENVIRONMENTS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def environments(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Environment]:
        """The list of environments returned by a ListEnvironmentsRequest."""
        pass
    next_page_token: typing.Text = ...
    """The page token used to query for the next page if one exists."""

    def __init__(self,
        *,
        environments : typing.Optional[typing.Iterable[global___Environment]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["environments",b"environments","next_page_token",b"next_page_token"]) -> None: ...
global___ListEnvironmentsResponse = ListEnvironmentsResponse

class DeleteEnvironmentRequest(google.protobuf.message.Message):
    """Delete an environment."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The environment to delete, in the form:
    "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteEnvironmentRequest = DeleteEnvironmentRequest

class UpdateEnvironmentRequest(google.protobuf.message.Message):
    """Update an environment."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    ENVIRONMENT_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The relative resource name of the environment to update, in the form:
    "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
    """

    @property
    def environment(self) -> global___Environment:
        """A patch environment. Fields specified by the `updateMask` will be copied
        from the patch environment into the environment under update.
        """
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Required. A comma-separated list of paths, relative to `Environment`, of
        fields to update.
        For example, to set the version of scikit-learn to install in the
        environment to 0.19.0 and to remove an existing installation of
        numpy, the `updateMask` parameter would include the following two
        `paths` values: "config.softwareConfig.pypiPackages.scikit-learn" and
        "config.softwareConfig.pypiPackages.numpy". The included patch
        environment would specify the scikit-learn version as follows:

            {
              "config":{
                "softwareConfig":{
                  "pypiPackages":{
                    "scikit-learn":"==0.19.0"
                  }
                }
              }
            }

        Note that in the above example, any existing PyPI packages
        other than scikit-learn and numpy will be unaffected.

        Only one update type may be included in a single request's `updateMask`.
        For example, one cannot update both the PyPI packages and
        labels in the same request. However, it is possible to update multiple
        members of a map field simultaneously in the same request. For example,
        to set the labels "label1" and "label2" while clearing "label3" (assuming
        it already exists), one can
        provide the paths "labels.label1", "labels.label2", and "labels.label3"
        and populate the patch environment as follows:

            {
              "labels":{
                "label1":"new-label1-value"
                "label2":"new-label2-value"
              }
            }

        Note that in the above example, any existing labels that are not
        included in the `updateMask` will be unaffected.

        It is also possible to replace an entire map field by providing the
        map field's path in the `updateMask`. The new value of the field will
        be that which is provided in the patch environment. For example, to
        delete all pre-existing user-specified PyPI packages and
        install botocore at version 1.7.14, the `updateMask` would contain
        the path "config.softwareConfig.pypiPackages", and
        the patch environment would be the following:

            {
              "config":{
                "softwareConfig":{
                  "pypiPackages":{
                    "botocore":"==1.7.14"
                  }
                }
              }
            }

        **Note:** Only the following fields can be updated:

        * `config.softwareConfig.pypiPackages`
            * Replace all custom custom PyPI packages. If a replacement
              package map is not included in `environment`, all custom
              PyPI packages are cleared. It is an error to provide both
              this mask and a mask specifying an individual package.
        * `config.softwareConfig.pypiPackages.`packagename
            * Update the custom PyPI package *packagename*,
              preserving other packages. To delete the package, include it in
              `updateMask`, and omit the mapping for it in
              `environment.config.softwareConfig.pypiPackages`. It is an error
              to provide both a mask of this form and the
              `config.softwareConfig.pypiPackages` mask.
        * `labels`
            * Replace all environment labels. If a replacement labels map is not
              included in `environment`, all labels are cleared. It is an error to
              provide both this mask and a mask specifying one or more individual
              labels.
        * `labels.`labelName
            * Set the label named *labelName*, while preserving other
              labels. To delete the label, include it in `updateMask` and omit its
              mapping in `environment.labels`. It is an error to provide both a
              mask of this form and the `labels` mask.
        * `config.nodeCount`
            * Horizontally scale the number of nodes in the environment. An integer
              greater than or equal to 3 must be provided in the `config.nodeCount`
              field.
        * `config.webServerNetworkAccessControl`
            * Replace the environment's current `WebServerNetworkAccessControl`.
        * `config.databaseConfig`
            * Replace the environment's current `DatabaseConfig`.
        * `config.webServerConfig`
            * Replace the environment's current `WebServerConfig`.
        * `config.softwareConfig.airflowConfigOverrides`
            * Replace all Apache Airflow config overrides. If a replacement config
              overrides map is not included in `environment`, all config overrides
              are cleared.
              It is an error to provide both this mask and a mask specifying one or
              more individual config overrides.
        * `config.softwareConfig.airflowConfigOverrides.`section-name
            * Override the Apache Airflow config property *name* in the
              section named *section*, preserving other properties. To
              delete the property override, include it in `updateMask` and omit its
              mapping in
              `environment.config.softwareConfig.airflowConfigOverrides`.
              It is an error to provide both a mask of this form and the
              `config.softwareConfig.airflowConfigOverrides` mask.
        * `config.softwareConfig.envVariables`
            * Replace all environment variables. If a replacement environment
              variable map is not included in `environment`, all custom environment
              variables  are cleared.
              It is an error to provide both this mask and a mask specifying one or
              more individual environment variables.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        environment : typing.Optional[global___Environment] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["environment",b"environment","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["environment",b"environment","name",b"name","update_mask",b"update_mask"]) -> None: ...
global___UpdateEnvironmentRequest = UpdateEnvironmentRequest

class EnvironmentConfig(google.protobuf.message.Message):
    """Configuration information for an environment."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GKE_CLUSTER_FIELD_NUMBER: builtins.int
    DAG_GCS_PREFIX_FIELD_NUMBER: builtins.int
    NODE_COUNT_FIELD_NUMBER: builtins.int
    SOFTWARE_CONFIG_FIELD_NUMBER: builtins.int
    NODE_CONFIG_FIELD_NUMBER: builtins.int
    PRIVATE_ENVIRONMENT_CONFIG_FIELD_NUMBER: builtins.int
    WEB_SERVER_NETWORK_ACCESS_CONTROL_FIELD_NUMBER: builtins.int
    DATABASE_CONFIG_FIELD_NUMBER: builtins.int
    WEB_SERVER_CONFIG_FIELD_NUMBER: builtins.int
    ENCRYPTION_CONFIG_FIELD_NUMBER: builtins.int
    AIRFLOW_URI_FIELD_NUMBER: builtins.int
    gke_cluster: typing.Text = ...
    """Output only. The Kubernetes Engine cluster used to run this environment."""

    dag_gcs_prefix: typing.Text = ...
    """Output only. The Cloud Storage prefix of the DAGs for this environment. Although Cloud
    Storage objects reside in a flat namespace, a hierarchical file tree
    can be simulated using "/"-delimited object name prefixes. DAG objects for
    this environment reside in a simulated directory with the given prefix.
    """

    node_count: builtins.int = ...
    """The number of nodes in the Kubernetes Engine cluster that will be
    used to run this environment.
    """

    @property
    def software_config(self) -> global___SoftwareConfig:
        """The configuration settings for software inside the environment."""
        pass
    @property
    def node_config(self) -> global___NodeConfig:
        """The configuration used for the Kubernetes Engine cluster."""
        pass
    @property
    def private_environment_config(self) -> global___PrivateEnvironmentConfig:
        """The configuration used for the Private IP Cloud Composer environment."""
        pass
    @property
    def web_server_network_access_control(self) -> global___WebServerNetworkAccessControl:
        """Optional. The network-level access control policy for the Airflow web server. If
        unspecified, no network-level access restrictions will be applied.
        """
        pass
    @property
    def database_config(self) -> global___DatabaseConfig:
        """Optional. The configuration settings for Cloud SQL instance used internally by Apache
        Airflow software.
        """
        pass
    @property
    def web_server_config(self) -> global___WebServerConfig:
        """Optional. The configuration settings for the Airflow web server App Engine instance."""
        pass
    @property
    def encryption_config(self) -> global___EncryptionConfig:
        """Optional. The encryption options for the Cloud Composer environment
        and its dependencies. Cannot be updated.
        """
        pass
    airflow_uri: typing.Text = ...
    """Output only. The URI of the Apache Airflow Web UI hosted within this environment (see
    [Airflow web
    interface](/composer/docs/how-to/accessing/airflow-web-interface)).
    """

    def __init__(self,
        *,
        gke_cluster : typing.Text = ...,
        dag_gcs_prefix : typing.Text = ...,
        node_count : builtins.int = ...,
        software_config : typing.Optional[global___SoftwareConfig] = ...,
        node_config : typing.Optional[global___NodeConfig] = ...,
        private_environment_config : typing.Optional[global___PrivateEnvironmentConfig] = ...,
        web_server_network_access_control : typing.Optional[global___WebServerNetworkAccessControl] = ...,
        database_config : typing.Optional[global___DatabaseConfig] = ...,
        web_server_config : typing.Optional[global___WebServerConfig] = ...,
        encryption_config : typing.Optional[global___EncryptionConfig] = ...,
        airflow_uri : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["database_config",b"database_config","encryption_config",b"encryption_config","node_config",b"node_config","private_environment_config",b"private_environment_config","software_config",b"software_config","web_server_config",b"web_server_config","web_server_network_access_control",b"web_server_network_access_control"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["airflow_uri",b"airflow_uri","dag_gcs_prefix",b"dag_gcs_prefix","database_config",b"database_config","encryption_config",b"encryption_config","gke_cluster",b"gke_cluster","node_config",b"node_config","node_count",b"node_count","private_environment_config",b"private_environment_config","software_config",b"software_config","web_server_config",b"web_server_config","web_server_network_access_control",b"web_server_network_access_control"]) -> None: ...
global___EnvironmentConfig = EnvironmentConfig

class WebServerNetworkAccessControl(google.protobuf.message.Message):
    """Network-level access control policy for the Airflow web server."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class AllowedIpRange(google.protobuf.message.Message):
        """Allowed IP range with user-provided description."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        VALUE_FIELD_NUMBER: builtins.int
        DESCRIPTION_FIELD_NUMBER: builtins.int
        value: typing.Text = ...
        """IP address or range, defined using CIDR notation, of requests that this
        rule applies to.
        Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32`
                  or `2001:0db8:0000:0042:0000:8a2e:0370:7334`.

        IP range prefixes should be properly truncated. For example,
        `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6,
        `2001:db8::1/32` should be truncated to `2001:db8::/32`.
        """

        description: typing.Text = ...
        """Optional. User-provided description. It must contain at most 300 characters."""

        def __init__(self,
            *,
            value : typing.Text = ...,
            description : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["description",b"description","value",b"value"]) -> None: ...

    ALLOWED_IP_RANGES_FIELD_NUMBER: builtins.int
    @property
    def allowed_ip_ranges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___WebServerNetworkAccessControl.AllowedIpRange]:
        """A collection of allowed IP ranges with descriptions."""
        pass
    def __init__(self,
        *,
        allowed_ip_ranges : typing.Optional[typing.Iterable[global___WebServerNetworkAccessControl.AllowedIpRange]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["allowed_ip_ranges",b"allowed_ip_ranges"]) -> None: ...
global___WebServerNetworkAccessControl = WebServerNetworkAccessControl

class DatabaseConfig(google.protobuf.message.Message):
    """The configuration of Cloud SQL instance that is used by the Apache Airflow
    software.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    MACHINE_TYPE_FIELD_NUMBER: builtins.int
    machine_type: typing.Text = ...
    """Optional. Cloud SQL machine type used by Airflow database.
    It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8
    or db-n1-standard-16. If not specified, db-n1-standard-2 will be used.
    """

    def __init__(self,
        *,
        machine_type : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["machine_type",b"machine_type"]) -> None: ...
global___DatabaseConfig = DatabaseConfig

class WebServerConfig(google.protobuf.message.Message):
    """The configuration settings for the Airflow web server App Engine instance."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    MACHINE_TYPE_FIELD_NUMBER: builtins.int
    machine_type: typing.Text = ...
    """Optional. Machine type on which Airflow web server is running.
    It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or
    composer-n1-webserver-8.
    If not specified, composer-n1-webserver-2 will be used.
    Value custom is returned only in response, if Airflow web server parameters
    were manually changed to a non-standard values.
    """

    def __init__(self,
        *,
        machine_type : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["machine_type",b"machine_type"]) -> None: ...
global___WebServerConfig = WebServerConfig

class EncryptionConfig(google.protobuf.message.Message):
    """The encryption options for the Cloud Composer environment
    and its dependencies.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    KMS_KEY_NAME_FIELD_NUMBER: builtins.int
    kms_key_name: typing.Text = ...
    """Optional. Customer-managed Encryption Key available through Google's Key Management
    Service. Cannot be updated.
    If not specified, Google-managed key will be used.
    """

    def __init__(self,
        *,
        kms_key_name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["kms_key_name",b"kms_key_name"]) -> None: ...
global___EncryptionConfig = EncryptionConfig

class SoftwareConfig(google.protobuf.message.Message):
    """Specifies the selection and configuration of software inside the environment."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class AirflowConfigOverridesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class PypiPackagesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class EnvVariablesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    IMAGE_VERSION_FIELD_NUMBER: builtins.int
    AIRFLOW_CONFIG_OVERRIDES_FIELD_NUMBER: builtins.int
    PYPI_PACKAGES_FIELD_NUMBER: builtins.int
    ENV_VARIABLES_FIELD_NUMBER: builtins.int
    PYTHON_VERSION_FIELD_NUMBER: builtins.int
    image_version: typing.Text = ...
    """The version of the software running in the environment.
    This encapsulates both the version of Cloud Composer functionality and the
    version of Apache Airflow. It must match the regular expression
    `composer-([0-9]+\\.[0-9]+\\.[0-9]+|latest)-airflow-[0-9]+\\.[0-9]+(\\.[0-9]+.*)?`.
    When used as input, the server also checks if the provided version is
    supported and denies the request for an unsupported version.

    The Cloud Composer portion of the version is a
    [semantic version](https://semver.org) or `latest`. When the patch version
    is omitted, the current Cloud Composer patch version is selected.
    When `latest` is provided instead of an explicit version number,
    the server replaces `latest` with the current Cloud Composer version
    and stores that version number in the same field.

    The portion of the image version that follows *airflow-* is an
    official Apache Airflow repository
    [release name](https://github.com/apache/incubator-airflow/releases).

    See also [Version
    List](/composer/docs/concepts/versioning/composer-versions).
    """

    @property
    def airflow_config_overrides(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Optional. Apache Airflow configuration properties to override.

        Property keys contain the section and property names, separated by a
        hyphen, for example "core-dags_are_paused_at_creation". Section names must
        not contain hyphens ("-"), opening square brackets ("["),  or closing
        square brackets ("]"). The property name must not be empty and must not
        contain an equals sign ("=") or semicolon (";"). Section and property names
        must not contain a period ("."). Apache Airflow configuration property
        names must be written in
        [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can
        contain any character, and can be written in any lower/upper case format.

        Certain Apache Airflow configuration property values are
        [blocked](/composer/docs/concepts/airflow-configurations),
        and cannot be overridden.
        """
        pass
    @property
    def pypi_packages(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Optional. Custom Python Package Index (PyPI) packages to be installed in
        the environment.

        Keys refer to the lowercase package name such as "numpy"
        and values are the lowercase extras and version specifier such as
        "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a
        package without pinning it to a version specifier, use the empty string as
        the value.
        """
        pass
    @property
    def env_variables(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Optional. Additional environment variables to provide to the Apache Airflow
        scheduler, worker, and webserver processes.

        Environment variable names must match the regular expression
        `[a-zA-Z_][a-zA-Z0-9_]*`. They cannot specify Apache Airflow
        software configuration overrides (they cannot match the regular expression
        `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the
        following reserved names:

        * `AIRFLOW_HOME`
        * `C_FORCE_ROOT`
        * `CONTAINER_NAME`
        * `DAGS_FOLDER`
        * `GCP_PROJECT`
        * `GCS_BUCKET`
        * `GKE_CLUSTER_NAME`
        * `SQL_DATABASE`
        * `SQL_INSTANCE`
        * `SQL_PASSWORD`
        * `SQL_PROJECT`
        * `SQL_REGION`
        * `SQL_USER`
        """
        pass
    python_version: typing.Text = ...
    """Optional. The major version of Python used to run the Apache Airflow
    scheduler, worker, and webserver processes.

    Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be
    updated.
    """

    def __init__(self,
        *,
        image_version : typing.Text = ...,
        airflow_config_overrides : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        pypi_packages : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        env_variables : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        python_version : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["airflow_config_overrides",b"airflow_config_overrides","env_variables",b"env_variables","image_version",b"image_version","pypi_packages",b"pypi_packages","python_version",b"python_version"]) -> None: ...
global___SoftwareConfig = SoftwareConfig

class IPAllocationPolicy(google.protobuf.message.Message):
    """Configuration for controlling how IPs are allocated in the
    GKE cluster running the Apache Airflow software.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    USE_IP_ALIASES_FIELD_NUMBER: builtins.int
    CLUSTER_SECONDARY_RANGE_NAME_FIELD_NUMBER: builtins.int
    CLUSTER_IPV4_CIDR_BLOCK_FIELD_NUMBER: builtins.int
    SERVICES_SECONDARY_RANGE_NAME_FIELD_NUMBER: builtins.int
    SERVICES_IPV4_CIDR_BLOCK_FIELD_NUMBER: builtins.int
    use_ip_aliases: builtins.bool = ...
    """Optional. Whether or not to enable Alias IPs in the GKE cluster.
    If `true`, a VPC-native cluster is created.
    """

    cluster_secondary_range_name: typing.Text = ...
    """Optional. The name of the GKE cluster's secondary range used to allocate
    IP addresses to pods.

    This field is applicable only when `use_ip_aliases` is true.
    """

    cluster_ipv4_cidr_block: typing.Text = ...
    """Optional. The IP address range used to allocate IP addresses to pods in
    the GKE cluster.

    This field is applicable only when `use_ip_aliases` is true.

    Set to blank to have GKE choose a range with the default size.

    Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific
    netmask.

    Set to a
    [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
    notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
    `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
    to use.
    """

    services_secondary_range_name: typing.Text = ...
    """Optional. The name of the services' secondary range used to allocate
    IP addresses to the GKE cluster.

    This field is applicable only when `use_ip_aliases` is true.
    """

    services_ipv4_cidr_block: typing.Text = ...
    """Optional. The IP address range of the services IP addresses in this
    GKE cluster.

    This field is applicable only when `use_ip_aliases` is true.

    Set to blank to have GKE choose a range with the default size.

    Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific
    netmask.

    Set to a
    [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
    notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
    `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
    to use.
    """

    def __init__(self,
        *,
        use_ip_aliases : builtins.bool = ...,
        cluster_secondary_range_name : typing.Text = ...,
        cluster_ipv4_cidr_block : typing.Text = ...,
        services_secondary_range_name : typing.Text = ...,
        services_ipv4_cidr_block : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cluster_ip_allocation",b"cluster_ip_allocation","cluster_ipv4_cidr_block",b"cluster_ipv4_cidr_block","cluster_secondary_range_name",b"cluster_secondary_range_name","services_ip_allocation",b"services_ip_allocation","services_ipv4_cidr_block",b"services_ipv4_cidr_block","services_secondary_range_name",b"services_secondary_range_name"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_ip_allocation",b"cluster_ip_allocation","cluster_ipv4_cidr_block",b"cluster_ipv4_cidr_block","cluster_secondary_range_name",b"cluster_secondary_range_name","services_ip_allocation",b"services_ip_allocation","services_ipv4_cidr_block",b"services_ipv4_cidr_block","services_secondary_range_name",b"services_secondary_range_name","use_ip_aliases",b"use_ip_aliases"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["cluster_ip_allocation",b"cluster_ip_allocation"]) -> typing.Optional[typing_extensions.Literal["cluster_secondary_range_name","cluster_ipv4_cidr_block"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["services_ip_allocation",b"services_ip_allocation"]) -> typing.Optional[typing_extensions.Literal["services_secondary_range_name","services_ipv4_cidr_block"]]: ...
global___IPAllocationPolicy = IPAllocationPolicy

class NodeConfig(google.protobuf.message.Message):
    """The configuration information for the Kubernetes Engine nodes running
    the Apache Airflow software.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    LOCATION_FIELD_NUMBER: builtins.int
    MACHINE_TYPE_FIELD_NUMBER: builtins.int
    NETWORK_FIELD_NUMBER: builtins.int
    SUBNETWORK_FIELD_NUMBER: builtins.int
    DISK_SIZE_GB_FIELD_NUMBER: builtins.int
    OAUTH_SCOPES_FIELD_NUMBER: builtins.int
    SERVICE_ACCOUNT_FIELD_NUMBER: builtins.int
    TAGS_FIELD_NUMBER: builtins.int
    IP_ALLOCATION_POLICY_FIELD_NUMBER: builtins.int
    location: typing.Text = ...
    """Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which
    to deploy the VMs used to run the Apache Airflow software, specified as a
    [relative resource
    name](/apis/design/resource_names#relative_resource_name). For example:
    "projects/{projectId}/zones/{zoneId}".

    This `location` must belong to the enclosing environment's project and
    location. If both this field and `nodeConfig.machineType` are specified,
    `nodeConfig.machineType` must belong to this `location`; if both are
    unspecified, the service will pick a zone in the Compute Engine region
    corresponding to the Cloud Composer location, and propagate that choice to
    both fields. If only one field (`location` or `nodeConfig.machineType`) is
    specified, the location information from the specified field will be
    propagated to the unspecified field.
    """

    machine_type: typing.Text = ...
    """Optional. The Compute Engine
    [machine type](/compute/docs/machine-types) used for cluster instances,
    specified as a
    [relative resource
    name](/apis/design/resource_names#relative_resource_name). For example:
    "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}".

    The `machineType` must belong to the enclosing environment's project and
    location. If both this field and `nodeConfig.location` are specified,
    this `machineType` must belong to the `nodeConfig.location`; if both are
    unspecified, the service will pick a zone in the Compute Engine region
    corresponding to the Cloud Composer location, and propagate that choice to
    both fields. If exactly one of this field and `nodeConfig.location` is
    specified, the location information from the specified field will be
    propagated to the unspecified field.

    The `machineTypeId` must not be a [shared-core machine
    type](/compute/docs/machine-types#sharedcore).

    If this field is unspecified, the `machineTypeId` defaults
    to "n1-standard-1".
    """

    network: typing.Text = ...
    """Optional. The Compute Engine network to be used for machine
    communications, specified as a
    [relative resource
    name](/apis/design/resource_names#relative_resource_name). For example:
    "projects/{projectId}/global/networks/{networkId}".

    If unspecified, the "default" network ID in the environment's project is
    used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets)
    is provided, `nodeConfig.subnetwork` must also be provided. For
    [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see
    `nodeConfig.subnetwork`.
    """

    subnetwork: typing.Text = ...
    """Optional. The Compute Engine subnetwork to be used for machine
    communications, specified as a
    [relative resource
    name](/apis/design/resource_names#relative_resource_name). For example:
    "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}"

    If a subnetwork is provided, `nodeConfig.network` must also be provided,
    and the subnetwork must belong to the enclosing environment's project and
    location.
    """

    disk_size_gb: builtins.int = ...
    """Optional. The disk size in GB used for node VMs. Minimum size is 20GB.
    If unspecified, defaults to 100GB. Cannot be updated.
    """

    @property
    def oauth_scopes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Optional. The set of Google API scopes to be made available on all
        node VMs. If `oauth_scopes` is empty, defaults to
        ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated.
        """
        pass
    service_account: typing.Text = ...
    """Optional. The Google Cloud Platform Service Account to be used by the node
    VMs. If a service account is not specified, the "default" Compute Engine
    service account is used. Cannot be updated.
    """

    @property
    def tags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Optional. The list of instance tags applied to all node VMs. Tags are used
        to identify valid sources or targets for network firewalls. Each tag within
        the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
        Cannot be updated.
        """
        pass
    @property
    def ip_allocation_policy(self) -> global___IPAllocationPolicy:
        """Optional. The configuration for controlling how IPs are allocated in the GKE cluster."""
        pass
    def __init__(self,
        *,
        location : typing.Text = ...,
        machine_type : typing.Text = ...,
        network : typing.Text = ...,
        subnetwork : typing.Text = ...,
        disk_size_gb : builtins.int = ...,
        oauth_scopes : typing.Optional[typing.Iterable[typing.Text]] = ...,
        service_account : typing.Text = ...,
        tags : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ip_allocation_policy : typing.Optional[global___IPAllocationPolicy] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["ip_allocation_policy",b"ip_allocation_policy"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["disk_size_gb",b"disk_size_gb","ip_allocation_policy",b"ip_allocation_policy","location",b"location","machine_type",b"machine_type","network",b"network","oauth_scopes",b"oauth_scopes","service_account",b"service_account","subnetwork",b"subnetwork","tags",b"tags"]) -> None: ...
global___NodeConfig = NodeConfig

class PrivateClusterConfig(google.protobuf.message.Message):
    """Configuration options for the private GKE cluster in a Cloud Composer
    environment.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ENABLE_PRIVATE_ENDPOINT_FIELD_NUMBER: builtins.int
    MASTER_IPV4_CIDR_BLOCK_FIELD_NUMBER: builtins.int
    MASTER_IPV4_RESERVED_RANGE_FIELD_NUMBER: builtins.int
    enable_private_endpoint: builtins.bool = ...
    """Optional. If `true`, access to the public endpoint of the GKE cluster is
    denied.
    """

    master_ipv4_cidr_block: typing.Text = ...
    """Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If
    left blank, the default value of '172.16.0.0/23' is used.
    """

    master_ipv4_reserved_range: typing.Text = ...
    """Output only. The IP range in CIDR notation to use for the hosted master network. This
    range is used for assigning internal IP addresses to the GKE cluster
    master or set of masters and to the internal load balancer virtual IP.
    This range must not overlap with any other ranges in use
    within the cluster's network.
    """

    def __init__(self,
        *,
        enable_private_endpoint : builtins.bool = ...,
        master_ipv4_cidr_block : typing.Text = ...,
        master_ipv4_reserved_range : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["enable_private_endpoint",b"enable_private_endpoint","master_ipv4_cidr_block",b"master_ipv4_cidr_block","master_ipv4_reserved_range",b"master_ipv4_reserved_range"]) -> None: ...
global___PrivateClusterConfig = PrivateClusterConfig

class PrivateEnvironmentConfig(google.protobuf.message.Message):
    """The configuration information for configuring a Private IP Cloud Composer
    environment.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ENABLE_PRIVATE_ENVIRONMENT_FIELD_NUMBER: builtins.int
    PRIVATE_CLUSTER_CONFIG_FIELD_NUMBER: builtins.int
    WEB_SERVER_IPV4_CIDR_BLOCK_FIELD_NUMBER: builtins.int
    CLOUD_SQL_IPV4_CIDR_BLOCK_FIELD_NUMBER: builtins.int
    WEB_SERVER_IPV4_RESERVED_RANGE_FIELD_NUMBER: builtins.int
    enable_private_environment: builtins.bool = ...
    """Optional. If `true`, a Private IP Cloud Composer environment is created.
    If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be
    set to true.
    """

    @property
    def private_cluster_config(self) -> global___PrivateClusterConfig:
        """Optional. Configuration for the private GKE cluster for a Private IP
        Cloud Composer environment.
        """
        pass
    web_server_ipv4_cidr_block: typing.Text = ...
    """Optional. The CIDR block from which IP range for web server will be reserved. Needs
    to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and
    `cloud_sql_ipv4_cidr_block`.
    """

    cloud_sql_ipv4_cidr_block: typing.Text = ...
    """Optional. The CIDR block from which IP range in tenant project will be reserved for
    Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`.
    """

    web_server_ipv4_reserved_range: typing.Text = ...
    """Output only. The IP range reserved for the tenant project's App Engine VMs."""

    def __init__(self,
        *,
        enable_private_environment : builtins.bool = ...,
        private_cluster_config : typing.Optional[global___PrivateClusterConfig] = ...,
        web_server_ipv4_cidr_block : typing.Text = ...,
        cloud_sql_ipv4_cidr_block : typing.Text = ...,
        web_server_ipv4_reserved_range : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["private_cluster_config",b"private_cluster_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cloud_sql_ipv4_cidr_block",b"cloud_sql_ipv4_cidr_block","enable_private_environment",b"enable_private_environment","private_cluster_config",b"private_cluster_config","web_server_ipv4_cidr_block",b"web_server_ipv4_cidr_block","web_server_ipv4_reserved_range",b"web_server_ipv4_reserved_range"]) -> None: ...
global___PrivateEnvironmentConfig = PrivateEnvironmentConfig

class Environment(google.protobuf.message.Message):
    """An environment for running orchestration tasks."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _State:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_State.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        STATE_UNSPECIFIED: Environment.State.ValueType = ...  # 0
        """The state of the environment is unknown."""

        CREATING: Environment.State.ValueType = ...  # 1
        """The environment is in the process of being created."""

        RUNNING: Environment.State.ValueType = ...  # 2
        """The environment is currently running and healthy. It is ready for use."""

        UPDATING: Environment.State.ValueType = ...  # 3
        """The environment is being updated. It remains usable but cannot receive
        additional update requests or be deleted at this time.
        """

        DELETING: Environment.State.ValueType = ...  # 4
        """The environment is undergoing deletion. It cannot be used."""

        ERROR: Environment.State.ValueType = ...  # 5
        """The environment has encountered an error and cannot be used."""

    class State(_State, metaclass=_StateEnumTypeWrapper):
        """State of the environment."""
        pass

    STATE_UNSPECIFIED: Environment.State.ValueType = ...  # 0
    """The state of the environment is unknown."""

    CREATING: Environment.State.ValueType = ...  # 1
    """The environment is in the process of being created."""

    RUNNING: Environment.State.ValueType = ...  # 2
    """The environment is currently running and healthy. It is ready for use."""

    UPDATING: Environment.State.ValueType = ...  # 3
    """The environment is being updated. It remains usable but cannot receive
    additional update requests or be deleted at this time.
    """

    DELETING: Environment.State.ValueType = ...  # 4
    """The environment is undergoing deletion. It cannot be used."""

    ERROR: Environment.State.ValueType = ...  # 5
    """The environment has encountered an error and cannot be used."""


    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    CONFIG_FIELD_NUMBER: builtins.int
    UUID_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The resource name of the environment, in the form:
    "projects/{projectId}/locations/{locationId}/environments/{environmentId}"

    EnvironmentId must start with a lowercase letter followed by up to 63
    lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
    """

    @property
    def config(self) -> global___EnvironmentConfig:
        """Configuration parameters for this environment."""
        pass
    uuid: typing.Text = ...
    """Output only. The UUID (Universally Unique IDentifier) associated with this environment.
    This value is generated when the environment is created.
    """

    state: global___Environment.State.ValueType = ...
    """The current state of the environment."""

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time at which this environment was created."""
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time at which this environment was last modified."""
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Optional. User-defined labels for this environment.
        The labels map can contain no more than 64 entries. Entries of the labels
        map are UTF8 strings that comply with the following restrictions:

        * Keys must conform to regexp: [\\p{Ll}\\p{Lo}][\\p{Ll}\\p{Lo}\\p{N}_-]{0,62}
        * Values must conform to regexp:  [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}
        * Both keys and values are additionally constrained to be <= 128 bytes in
        size.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        config : typing.Optional[global___EnvironmentConfig] = ...,
        uuid : typing.Text = ...,
        state : global___Environment.State.ValueType = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["config",b"config","create_time",b"create_time","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["config",b"config","create_time",b"create_time","labels",b"labels","name",b"name","state",b"state","update_time",b"update_time","uuid",b"uuid"]) -> None: ...
global___Environment = Environment

class CheckUpgradeResponse(google.protobuf.message.Message):
    """Message containing information about the result of an upgrade check
    operation.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _ConflictResult:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ConflictResultEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ConflictResult.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        CONFLICT_RESULT_UNSPECIFIED: CheckUpgradeResponse.ConflictResult.ValueType = ...  # 0
        """It is unknown whether build had conflicts or not."""

        CONFLICT: CheckUpgradeResponse.ConflictResult.ValueType = ...  # 1
        """There were python packages conflicts."""

        NO_CONFLICT: CheckUpgradeResponse.ConflictResult.ValueType = ...  # 2
        """There were no python packages conflicts."""

    class ConflictResult(_ConflictResult, metaclass=_ConflictResultEnumTypeWrapper):
        """Whether there were python modules conflict during image build."""
        pass

    CONFLICT_RESULT_UNSPECIFIED: CheckUpgradeResponse.ConflictResult.ValueType = ...  # 0
    """It is unknown whether build had conflicts or not."""

    CONFLICT: CheckUpgradeResponse.ConflictResult.ValueType = ...  # 1
    """There were python packages conflicts."""

    NO_CONFLICT: CheckUpgradeResponse.ConflictResult.ValueType = ...  # 2
    """There were no python packages conflicts."""


    class PypiDependenciesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    BUILD_LOG_URI_FIELD_NUMBER: builtins.int
    CONTAINS_PYPI_MODULES_CONFLICT_FIELD_NUMBER: builtins.int
    PYPI_CONFLICT_BUILD_LOG_EXTRACT_FIELD_NUMBER: builtins.int
    IMAGE_VERSION_FIELD_NUMBER: builtins.int
    PYPI_DEPENDENCIES_FIELD_NUMBER: builtins.int
    build_log_uri: typing.Text = ...
    """Output only. Url for a docker build log of an upgraded image."""

    contains_pypi_modules_conflict: global___CheckUpgradeResponse.ConflictResult.ValueType = ...
    """Output only. Whether build has succeeded or failed on modules conflicts."""

    pypi_conflict_build_log_extract: typing.Text = ...
    """Output only. Extract from a docker image build log containing information about pypi
    modules conflicts.
    """

    image_version: typing.Text = ...
    """Composer image for which the build was happening."""

    @property
    def pypi_dependencies(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Pypi dependencies specified in the environment configuration, at the time
        when the build was triggered.
        """
        pass
    def __init__(self,
        *,
        build_log_uri : typing.Text = ...,
        contains_pypi_modules_conflict : global___CheckUpgradeResponse.ConflictResult.ValueType = ...,
        pypi_conflict_build_log_extract : typing.Text = ...,
        image_version : typing.Text = ...,
        pypi_dependencies : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["build_log_uri",b"build_log_uri","contains_pypi_modules_conflict",b"contains_pypi_modules_conflict","image_version",b"image_version","pypi_conflict_build_log_extract",b"pypi_conflict_build_log_extract","pypi_dependencies",b"pypi_dependencies"]) -> None: ...
global___CheckUpgradeResponse = CheckUpgradeResponse
