"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Artifact(google.protobuf.message.Message):
    """Instance of a general artifact."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _State:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_State.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        STATE_UNSPECIFIED: Artifact.State.ValueType = ...  # 0
        """Unspecified state for the Artifact."""

        PENDING: Artifact.State.ValueType = ...  # 1
        """A state used by systems like Vertex AI Pipelines to indicate that the
        underlying data item represented by this Artifact is being created.
        """

        LIVE: Artifact.State.ValueType = ...  # 2
        """A state indicating that the Artifact should exist, unless something
        external to the system deletes it.
        """

    class State(_State, metaclass=_StateEnumTypeWrapper):
        """Describes the state of the Artifact."""
        pass

    STATE_UNSPECIFIED: Artifact.State.ValueType = ...  # 0
    """Unspecified state for the Artifact."""

    PENDING: Artifact.State.ValueType = ...  # 1
    """A state used by systems like Vertex AI Pipelines to indicate that the
    underlying data item represented by this Artifact is being created.
    """

    LIVE: Artifact.State.ValueType = ...  # 2
    """A state indicating that the Artifact should exist, unless something
    external to the system deletes it.
    """


    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    URI_FIELD_NUMBER: builtins.int
    ETAG_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    SCHEMA_TITLE_FIELD_NUMBER: builtins.int
    SCHEMA_VERSION_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. The resource name of the Artifact."""

    display_name: typing.Text = ...
    """User provided display name of the Artifact.
    May be up to 128 Unicode characters.
    """

    uri: typing.Text = ...
    """The uniform resource identifier of the artifact file.
    May be empty if there is no actual artifact file.
    """

    etag: typing.Text = ...
    """An eTag used to perform consistent read-modify-write updates. If not set, a
    blind "overwrite" update happens.
    """

    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """The labels with user-defined metadata to organize your Artifacts.

        Label keys and values can be no longer than 64 characters
        (Unicode codepoints), can only contain lowercase letters, numeric
        characters, underscores and dashes. International characters are allowed.
        No more than 64 user labels can be associated with one Artifact (System
        labels are excluded).
        """
        pass
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Timestamp when this Artifact was created."""
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Timestamp when this Artifact was last updated."""
        pass
    state: global___Artifact.State.ValueType = ...
    """The state of this Artifact. This is a property of the Artifact, and does
    not imply or capture any ongoing process. This property is managed by
    clients (such as Vertex AI Pipelines), and the system does not prescribe
    or check the validity of state transitions.
    """

    schema_title: typing.Text = ...
    """The title of the schema describing the metadata.

    Schema title and version is expected to be registered in earlier Create
    Schema calls. And both are used together as unique identifiers to identify
    schemas within the local metadata store.
    """

    schema_version: typing.Text = ...
    """The version of the schema in schema_name to use.

    Schema title and version is expected to be registered in earlier Create
    Schema calls. And both are used together as unique identifiers to identify
    schemas within the local metadata store.
    """

    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct:
        """Properties of the Artifact.
        The size of this field should not exceed 200KB.
        """
        pass
    description: typing.Text = ...
    """Description of the Artifact"""

    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        uri : typing.Text = ...,
        etag : typing.Text = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        state : global___Artifact.State.ValueType = ...,
        schema_title : typing.Text = ...,
        schema_version : typing.Text = ...,
        metadata : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        description : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time","metadata",b"metadata","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["create_time",b"create_time","description",b"description","display_name",b"display_name","etag",b"etag","labels",b"labels","metadata",b"metadata","name",b"name","schema_title",b"schema_title","schema_version",b"schema_version","state",b"state","update_time",b"update_time","uri",b"uri"]) -> None: ...
global___Artifact = Artifact
