"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.aiplatform.v1.encryption_spec_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Featurestore(google.protobuf.message.Message):
    """Vertex AI Feature Store provides a centralized repository for organizing,
    storing, and serving ML features. The Featurestore is a top-level container
    for your features and their values.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _State:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_State.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        STATE_UNSPECIFIED: Featurestore.State.ValueType = ...  # 0
        """Default value. This value is unused."""

        STABLE: Featurestore.State.ValueType = ...  # 1
        """State when the Featurestore configuration is not being updated and the
        fields reflect the current configuration of the Featurestore. The
        Featurestore is usable in this state.
        """

        UPDATING: Featurestore.State.ValueType = ...  # 2
        """State when the Featurestore configuration is being updated and the fields
        reflect the updated configuration of the Featurestore, not the current
        one. For example, `online_serving_config.fixed_node_count` can take
        minutes to update. While the update is in progress, the Featurestore
        will be in the UPDATING state and the value of `fixed_node_count` will be
        the updated value. Until the update completes, the actual number of nodes
        can still be the original value of `fixed_node_count`. The Featurestore
        is still usable in this state.
        """

    class State(_State, metaclass=_StateEnumTypeWrapper):
        """Possible states a Featurestore can have."""
        pass

    STATE_UNSPECIFIED: Featurestore.State.ValueType = ...  # 0
    """Default value. This value is unused."""

    STABLE: Featurestore.State.ValueType = ...  # 1
    """State when the Featurestore configuration is not being updated and the
    fields reflect the current configuration of the Featurestore. The
    Featurestore is usable in this state.
    """

    UPDATING: Featurestore.State.ValueType = ...  # 2
    """State when the Featurestore configuration is being updated and the fields
    reflect the updated configuration of the Featurestore, not the current
    one. For example, `online_serving_config.fixed_node_count` can take
    minutes to update. While the update is in progress, the Featurestore
    will be in the UPDATING state and the value of `fixed_node_count` will be
    the updated value. Until the update completes, the actual number of nodes
    can still be the original value of `fixed_node_count`. The Featurestore
    is still usable in this state.
    """


    class OnlineServingConfig(google.protobuf.message.Message):
        """OnlineServingConfig specifies the details for provisioning online serving
        resources.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        FIXED_NODE_COUNT_FIELD_NUMBER: builtins.int
        fixed_node_count: builtins.int = ...
        """The number of nodes for each cluster. The number of nodes will not
        scale automatically but can be scaled manually by providing different
        values when updating.
        """

        def __init__(self,
            *,
            fixed_node_count : builtins.int = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["fixed_node_count",b"fixed_node_count"]) -> None: ...

    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    ETAG_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    ONLINE_SERVING_CONFIG_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    ENCRYPTION_SPEC_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. Name of the Featurestore. Format:
    `projects/{project}/locations/{location}/featurestores/{featurestore}`
    """

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Timestamp when this Featurestore was created."""
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Timestamp when this Featurestore was last updated."""
        pass
    etag: typing.Text = ...
    """Optional. Used to perform consistent read-modify-write updates. If not set, a blind
    "overwrite" update happens.
    """

    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Optional. The labels with user-defined metadata to organize your Featurestore.

        Label keys and values can be no longer than 64 characters
        (Unicode codepoints), can only contain lowercase letters, numeric
        characters, underscores and dashes. International characters are allowed.

        See https://goo.gl/xmQnxf for more information on and examples of labels.
        No more than 64 user labels can be associated with one Featurestore(System
        labels are excluded)."
        System reserved label keys are prefixed with "aiplatform.googleapis.com/"
        and are immutable.
        """
        pass
    @property
    def online_serving_config(self) -> global___Featurestore.OnlineServingConfig:
        """Required. Config for online serving resources."""
        pass
    state: global___Featurestore.State.ValueType = ...
    """Output only. State of the featurestore."""

    @property
    def encryption_spec(self) -> google.cloud.aiplatform.v1.encryption_spec_pb2.EncryptionSpec:
        """Optional. Customer-managed encryption key spec for data storage. If set, both of the
        online and offline data storage will be secured by this key.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        etag : typing.Text = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        online_serving_config : typing.Optional[global___Featurestore.OnlineServingConfig] = ...,
        state : global___Featurestore.State.ValueType = ...,
        encryption_spec : typing.Optional[google.cloud.aiplatform.v1.encryption_spec_pb2.EncryptionSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time","encryption_spec",b"encryption_spec","online_serving_config",b"online_serving_config","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["create_time",b"create_time","encryption_spec",b"encryption_spec","etag",b"etag","labels",b"labels","name",b"name","online_serving_config",b"online_serving_config","state",b"state","update_time",b"update_time"]) -> None: ...
global___Featurestore = Featurestore
