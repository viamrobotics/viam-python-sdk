"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.aiplatform.v1beta1.artifact_pb2
import google.cloud.aiplatform.v1beta1.context_pb2
import google.cloud.aiplatform.v1beta1.event_pb2
import google.cloud.aiplatform.v1beta1.execution_pb2
import google.cloud.aiplatform.v1beta1.metadata_schema_pb2
import google.cloud.aiplatform.v1beta1.metadata_store_pb2
import google.cloud.aiplatform.v1beta1.operation_pb2
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class CreateMetadataStoreRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.CreateMetadataStore][google.cloud.aiplatform.v1beta1.MetadataService.CreateMetadataStore]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    METADATA_STORE_FIELD_NUMBER: builtins.int
    METADATA_STORE_ID_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The resource name of the Location where the MetadataStore should
    be created.
    Format: `projects/{project}/locations/{location}/`
    """

    @property
    def metadata_store(self) -> google.cloud.aiplatform.v1beta1.metadata_store_pb2.MetadataStore:
        """Required. The MetadataStore to create."""
        pass
    metadata_store_id: typing.Text = ...
    """The {metadatastore} portion of the resource name with the format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
    If not provided, the MetadataStore's ID will be a UUID generated by the
    service.
    Must be 4-128 characters in length. Valid characters are `/[a-z][0-9]-/`.
    Must be unique across all MetadataStores in the parent Location.
    (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED
    if the caller can't view the preexisting MetadataStore.)
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        metadata_store : typing.Optional[google.cloud.aiplatform.v1beta1.metadata_store_pb2.MetadataStore] = ...,
        metadata_store_id : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["metadata_store",b"metadata_store"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["metadata_store",b"metadata_store","metadata_store_id",b"metadata_store_id","parent",b"parent"]) -> None: ...
global___CreateMetadataStoreRequest = CreateMetadataStoreRequest

class CreateMetadataStoreOperationMetadata(google.protobuf.message.Message):
    """Details of operations that perform [MetadataService.CreateMetadataStore][google.cloud.aiplatform.v1beta1.MetadataService.CreateMetadataStore]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GENERIC_METADATA_FIELD_NUMBER: builtins.int
    @property
    def generic_metadata(self) -> google.cloud.aiplatform.v1beta1.operation_pb2.GenericOperationMetadata:
        """Operation metadata for creating a MetadataStore."""
        pass
    def __init__(self,
        *,
        generic_metadata : typing.Optional[google.cloud.aiplatform.v1beta1.operation_pb2.GenericOperationMetadata] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["generic_metadata",b"generic_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["generic_metadata",b"generic_metadata"]) -> None: ...
global___CreateMetadataStoreOperationMetadata = CreateMetadataStoreOperationMetadata

class GetMetadataStoreRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.GetMetadataStore][google.cloud.aiplatform.v1beta1.MetadataService.GetMetadataStore]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the MetadataStore to retrieve.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetMetadataStoreRequest = GetMetadataStoreRequest

class ListMetadataStoresRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.ListMetadataStores][google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataStores]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The Location whose MetadataStores should be listed.
    Format:
    `projects/{project}/locations/{location}`
    """

    page_size: builtins.int = ...
    """The maximum number of Metadata Stores to return. The service may return
    fewer.
    Must be in range 1-1000, inclusive. Defaults to 100.
    """

    page_token: typing.Text = ...
    """A page token, received from a previous
    [MetadataService.ListMetadataStores][google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataStores] call. Provide this to retrieve the
    subsequent page.

    When paginating, all other provided parameters must match the call that
    provided the page token. (Otherwise the request will fail with
    INVALID_ARGUMENT error.)
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListMetadataStoresRequest = ListMetadataStoresRequest

class ListMetadataStoresResponse(google.protobuf.message.Message):
    """Response message for [MetadataService.ListMetadataStores][google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataStores]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    METADATA_STORES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def metadata_stores(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.aiplatform.v1beta1.metadata_store_pb2.MetadataStore]:
        """The MetadataStores found for the Location."""
        pass
    next_page_token: typing.Text = ...
    """A token, which can be sent as
    [ListMetadataStoresRequest.page_token][google.cloud.aiplatform.v1beta1.ListMetadataStoresRequest.page_token] to retrieve the next
    page. If this field is not populated, there are no subsequent pages.
    """

    def __init__(self,
        *,
        metadata_stores : typing.Optional[typing.Iterable[google.cloud.aiplatform.v1beta1.metadata_store_pb2.MetadataStore]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["metadata_stores",b"metadata_stores","next_page_token",b"next_page_token"]) -> None: ...
global___ListMetadataStoresResponse = ListMetadataStoresResponse

class DeleteMetadataStoreRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.DeleteMetadataStore][google.cloud.aiplatform.v1beta1.MetadataService.DeleteMetadataStore]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    FORCE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the MetadataStore to delete.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
    """

    force: builtins.bool = ...
    """Deprecated: Field is no longer supported."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        force : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["force",b"force","name",b"name"]) -> None: ...
global___DeleteMetadataStoreRequest = DeleteMetadataStoreRequest

class DeleteMetadataStoreOperationMetadata(google.protobuf.message.Message):
    """Details of operations that perform [MetadataService.DeleteMetadataStore][google.cloud.aiplatform.v1beta1.MetadataService.DeleteMetadataStore]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GENERIC_METADATA_FIELD_NUMBER: builtins.int
    @property
    def generic_metadata(self) -> google.cloud.aiplatform.v1beta1.operation_pb2.GenericOperationMetadata:
        """Operation metadata for deleting a MetadataStore."""
        pass
    def __init__(self,
        *,
        generic_metadata : typing.Optional[google.cloud.aiplatform.v1beta1.operation_pb2.GenericOperationMetadata] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["generic_metadata",b"generic_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["generic_metadata",b"generic_metadata"]) -> None: ...
global___DeleteMetadataStoreOperationMetadata = DeleteMetadataStoreOperationMetadata

class CreateArtifactRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.CreateArtifact][google.cloud.aiplatform.v1beta1.MetadataService.CreateArtifact]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    ARTIFACT_FIELD_NUMBER: builtins.int
    ARTIFACT_ID_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The resource name of the MetadataStore where the Artifact should
    be created.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
    """

    @property
    def artifact(self) -> google.cloud.aiplatform.v1beta1.artifact_pb2.Artifact:
        """Required. The Artifact to create."""
        pass
    artifact_id: typing.Text = ...
    """The {artifact} portion of the resource name with the format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
    If not provided, the Artifact's ID will be a UUID generated by the service.
    Must be 4-128 characters in length. Valid characters are `/[a-z][0-9]-/`.
    Must be unique across all Artifacts in the parent MetadataStore. (Otherwise
    the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the
    caller can't view the preexisting Artifact.)
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        artifact : typing.Optional[google.cloud.aiplatform.v1beta1.artifact_pb2.Artifact] = ...,
        artifact_id : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["artifact",b"artifact"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["artifact",b"artifact","artifact_id",b"artifact_id","parent",b"parent"]) -> None: ...
global___CreateArtifactRequest = CreateArtifactRequest

class GetArtifactRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.GetArtifact][google.cloud.aiplatform.v1beta1.MetadataService.GetArtifact]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the Artifact to retrieve.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetArtifactRequest = GetArtifactRequest

class ListArtifactsRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.ListArtifacts][google.cloud.aiplatform.v1beta1.MetadataService.ListArtifacts]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The MetadataStore whose Artifacts should be listed.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
    """

    page_size: builtins.int = ...
    """The maximum number of Artifacts to return. The service may return fewer.
    Must be in range 1-1000, inclusive. Defaults to 100.
    """

    page_token: typing.Text = ...
    """A page token, received from a previous [MetadataService.ListArtifacts][google.cloud.aiplatform.v1beta1.MetadataService.ListArtifacts]
    call. Provide this to retrieve the subsequent page.

    When paginating, all other provided parameters must match the call that
    provided the page token. (Otherwise the request will fail with
    INVALID_ARGUMENT error.)
    """

    filter: typing.Text = ...
    """Filter specifying the boolean condition for the Artifacts to satisfy in
    order to be part of the result set.
    The syntax to define filter query is based on https://google.aip.dev/160.
    The supported set of filters include the following:

    *   **Attribute filtering**:
        For example: `display_name = "test"`.
        Supported fields include: `name`, `display_name`, `uri`, `state`,
        `schema_title`, `create_time`, and `update_time`.
        Time fields, such as `create_time` and `update_time`, require values
        specified in RFC-3339 format.
        For example: `create_time = "2020-11-19T11:30:00-04:00"`
    *   **Metadata field**:
        To filter on metadata fields use traversal operation as follows:
        `metadata.<field_name>.<type_value>`.
        For example: `metadata.field_1.number_value = 10.0`
    *   **Context based filtering**:
        To filter Artifacts based on the contexts to which they belong, use the
        function operator with the full resource name
        `in_context(<context-name>)`.
        For example:
        `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`

    Each of the above supported filter types can be combined together using
    logical operators (`AND` & `OR`).

    For example: `display_name = "test" AND metadata.field1.bool_value = true`.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        filter : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListArtifactsRequest = ListArtifactsRequest

class ListArtifactsResponse(google.protobuf.message.Message):
    """Response message for [MetadataService.ListArtifacts][google.cloud.aiplatform.v1beta1.MetadataService.ListArtifacts]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ARTIFACTS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def artifacts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.aiplatform.v1beta1.artifact_pb2.Artifact]:
        """The Artifacts retrieved from the MetadataStore."""
        pass
    next_page_token: typing.Text = ...
    """A token, which can be sent as [ListArtifactsRequest.page_token][google.cloud.aiplatform.v1beta1.ListArtifactsRequest.page_token]
    to retrieve the next page.
    If this field is not populated, there are no subsequent pages.
    """

    def __init__(self,
        *,
        artifacts : typing.Optional[typing.Iterable[google.cloud.aiplatform.v1beta1.artifact_pb2.Artifact]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["artifacts",b"artifacts","next_page_token",b"next_page_token"]) -> None: ...
global___ListArtifactsResponse = ListArtifactsResponse

class UpdateArtifactRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.UpdateArtifact][google.cloud.aiplatform.v1beta1.MetadataService.UpdateArtifact]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ARTIFACT_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    ALLOW_MISSING_FIELD_NUMBER: builtins.int
    @property
    def artifact(self) -> google.cloud.aiplatform.v1beta1.artifact_pb2.Artifact:
        """Required. The Artifact containing updates.
        The Artifact's [Artifact.name][google.cloud.aiplatform.v1beta1.Artifact.name] field is used to identify the Artifact to
        be updated.
        Format:
        `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
        """
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Required. A FieldMask indicating which fields should be updated.
        Functionality of this field is not yet supported.
        """
        pass
    allow_missing: builtins.bool = ...
    """If set to true, and the [Artifact][google.cloud.aiplatform.v1beta1.Artifact] is not found, a new [Artifact][google.cloud.aiplatform.v1beta1.Artifact] is
    created.
    """

    def __init__(self,
        *,
        artifact : typing.Optional[google.cloud.aiplatform.v1beta1.artifact_pb2.Artifact] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        allow_missing : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["artifact",b"artifact","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["allow_missing",b"allow_missing","artifact",b"artifact","update_mask",b"update_mask"]) -> None: ...
global___UpdateArtifactRequest = UpdateArtifactRequest

class DeleteArtifactRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.DeleteArtifact][google.cloud.aiplatform.v1beta1.MetadataService.DeleteArtifact]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    ETAG_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the Artifact to delete.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
    """

    etag: typing.Text = ...
    """Optional. The etag of the Artifact to delete.
    If this is provided, it must match the server's etag. Otherwise, the
    request will fail with a FAILED_PRECONDITION.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        etag : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["etag",b"etag","name",b"name"]) -> None: ...
global___DeleteArtifactRequest = DeleteArtifactRequest

class PurgeArtifactsRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.PurgeArtifacts][google.cloud.aiplatform.v1beta1.MetadataService.PurgeArtifacts]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    FORCE_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The metadata store to purge Artifacts from.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
    """

    filter: typing.Text = ...
    """Required. A required filter matching the Artifacts to be purged.
    E.g., `update_time <= 2020-11-19T11:30:00-04:00`.
    """

    force: builtins.bool = ...
    """Optional. Flag to indicate to actually perform the purge.
    If `force` is set to false, the method will return a sample of
    Artifact names that would be deleted.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        filter : typing.Text = ...,
        force : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","force",b"force","parent",b"parent"]) -> None: ...
global___PurgeArtifactsRequest = PurgeArtifactsRequest

class PurgeArtifactsResponse(google.protobuf.message.Message):
    """Response message for [MetadataService.PurgeArtifacts][google.cloud.aiplatform.v1beta1.MetadataService.PurgeArtifacts]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PURGE_COUNT_FIELD_NUMBER: builtins.int
    PURGE_SAMPLE_FIELD_NUMBER: builtins.int
    purge_count: builtins.int = ...
    """The number of Artifacts that this request deleted (or, if `force` is false,
    the number of Artifacts that will be deleted). This can be an estimate.
    """

    @property
    def purge_sample(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A sample of the Artifact names that will be deleted.
        Only populated if `force` is set to false. The maximum number of samples is
        100 (it is possible to return fewer).
        """
        pass
    def __init__(self,
        *,
        purge_count : builtins.int = ...,
        purge_sample : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["purge_count",b"purge_count","purge_sample",b"purge_sample"]) -> None: ...
global___PurgeArtifactsResponse = PurgeArtifactsResponse

class PurgeArtifactsMetadata(google.protobuf.message.Message):
    """Details of operations that perform [MetadataService.PurgeArtifacts][google.cloud.aiplatform.v1beta1.MetadataService.PurgeArtifacts]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GENERIC_METADATA_FIELD_NUMBER: builtins.int
    @property
    def generic_metadata(self) -> google.cloud.aiplatform.v1beta1.operation_pb2.GenericOperationMetadata:
        """Operation metadata for purging Artifacts."""
        pass
    def __init__(self,
        *,
        generic_metadata : typing.Optional[google.cloud.aiplatform.v1beta1.operation_pb2.GenericOperationMetadata] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["generic_metadata",b"generic_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["generic_metadata",b"generic_metadata"]) -> None: ...
global___PurgeArtifactsMetadata = PurgeArtifactsMetadata

class CreateContextRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.CreateContext][google.cloud.aiplatform.v1beta1.MetadataService.CreateContext]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    CONTEXT_FIELD_NUMBER: builtins.int
    CONTEXT_ID_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The resource name of the MetadataStore where the Context should be
    created.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
    """

    @property
    def context(self) -> google.cloud.aiplatform.v1beta1.context_pb2.Context:
        """Required. The Context to create."""
        pass
    context_id: typing.Text = ...
    """The {context} portion of the resource name with the format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`.
    If not provided, the Context's ID will be a UUID generated by the service.
    Must be 4-128 characters in length. Valid characters are `/[a-z][0-9]-/`.
    Must be unique across all Contexts in the parent MetadataStore. (Otherwise
    the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the
    caller can't view the preexisting Context.)
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        context : typing.Optional[google.cloud.aiplatform.v1beta1.context_pb2.Context] = ...,
        context_id : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["context",b"context"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["context",b"context","context_id",b"context_id","parent",b"parent"]) -> None: ...
global___CreateContextRequest = CreateContextRequest

class GetContextRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.GetContext][google.cloud.aiplatform.v1beta1.MetadataService.GetContext]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the Context to retrieve.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetContextRequest = GetContextRequest

class ListContextsRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.ListContexts][google.cloud.aiplatform.v1beta1.MetadataService.ListContexts]"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The MetadataStore whose Contexts should be listed.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
    """

    page_size: builtins.int = ...
    """The maximum number of Contexts to return. The service may return fewer.
    Must be in range 1-1000, inclusive. Defaults to 100.
    """

    page_token: typing.Text = ...
    """A page token, received from a previous [MetadataService.ListContexts][google.cloud.aiplatform.v1beta1.MetadataService.ListContexts]
    call. Provide this to retrieve the subsequent page.

    When paginating, all other provided parameters must match the call that
    provided the page token. (Otherwise the request will fail with
    INVALID_ARGUMENT error.)
    """

    filter: typing.Text = ...
    """Filter specifying the boolean condition for the Contexts to satisfy in
    order to be part of the result set.
    The syntax to define filter query is based on https://google.aip.dev/160.
    Following are the supported set of filters:

    *  **Attribute filtering**:
       For example: `display_name = "test"`.
       Supported fields include: `name`, `display_name`, `schema_title`,
       `create_time`, and `update_time`.
       Time fields, such as `create_time` and `update_time`, require values
       specified in RFC-3339 format.
       For example: `create_time = "2020-11-19T11:30:00-04:00"`.
    *  **Metadata field**:
       To filter on metadata fields use traversal operation as follows:
       `metadata.<field_name>.<type_value>`.
       For example: `metadata.field_1.number_value = 10.0`.
    *  **Parent Child filtering**:
       To filter Contexts based on parent-child relationship use the HAS
       operator as follows:

       ```
       parent_contexts:
       "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
       child_contexts:
       "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
       ```

    Each of the above supported filters can be combined together using
    logical operators (`AND` & `OR`).

    For example: `display_name = "test" AND metadata.field1.bool_value = true`.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        filter : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListContextsRequest = ListContextsRequest

class ListContextsResponse(google.protobuf.message.Message):
    """Response message for [MetadataService.ListContexts][google.cloud.aiplatform.v1beta1.MetadataService.ListContexts]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONTEXTS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def contexts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.aiplatform.v1beta1.context_pb2.Context]:
        """The Contexts retrieved from the MetadataStore."""
        pass
    next_page_token: typing.Text = ...
    """A token, which can be sent as [ListContextsRequest.page_token][google.cloud.aiplatform.v1beta1.ListContextsRequest.page_token]
    to retrieve the next page.
    If this field is not populated, there are no subsequent pages.
    """

    def __init__(self,
        *,
        contexts : typing.Optional[typing.Iterable[google.cloud.aiplatform.v1beta1.context_pb2.Context]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["contexts",b"contexts","next_page_token",b"next_page_token"]) -> None: ...
global___ListContextsResponse = ListContextsResponse

class UpdateContextRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.UpdateContext][google.cloud.aiplatform.v1beta1.MetadataService.UpdateContext]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONTEXT_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    ALLOW_MISSING_FIELD_NUMBER: builtins.int
    @property
    def context(self) -> google.cloud.aiplatform.v1beta1.context_pb2.Context:
        """Required. The Context containing updates.
        The Context's [Context.name][google.cloud.aiplatform.v1beta1.Context.name] field is used to identify the Context to be
        updated.
        Format:
        `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
        """
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Required. A FieldMask indicating which fields should be updated.
        Functionality of this field is not yet supported.
        """
        pass
    allow_missing: builtins.bool = ...
    """If set to true, and the [Context][google.cloud.aiplatform.v1beta1.Context] is not found, a new [Context][google.cloud.aiplatform.v1beta1.Context] is
    created.
    """

    def __init__(self,
        *,
        context : typing.Optional[google.cloud.aiplatform.v1beta1.context_pb2.Context] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        allow_missing : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["context",b"context","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["allow_missing",b"allow_missing","context",b"context","update_mask",b"update_mask"]) -> None: ...
global___UpdateContextRequest = UpdateContextRequest

class DeleteContextRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.DeleteContext][google.cloud.aiplatform.v1beta1.MetadataService.DeleteContext]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    FORCE_FIELD_NUMBER: builtins.int
    ETAG_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the Context to delete.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
    """

    force: builtins.bool = ...
    """The force deletion semantics is still undefined.
    Users should not use this field.
    """

    etag: typing.Text = ...
    """Optional. The etag of the Context to delete.
    If this is provided, it must match the server's etag. Otherwise, the
    request will fail with a FAILED_PRECONDITION.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        force : builtins.bool = ...,
        etag : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["etag",b"etag","force",b"force","name",b"name"]) -> None: ...
global___DeleteContextRequest = DeleteContextRequest

class PurgeContextsRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.PurgeContexts][google.cloud.aiplatform.v1beta1.MetadataService.PurgeContexts]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    FORCE_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The metadata store to purge Contexts from.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
    """

    filter: typing.Text = ...
    """Required. A required filter matching the Contexts to be purged.
    E.g., `update_time <= 2020-11-19T11:30:00-04:00`.
    """

    force: builtins.bool = ...
    """Optional. Flag to indicate to actually perform the purge.
    If `force` is set to false, the method will return a sample of
    Context names that would be deleted.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        filter : typing.Text = ...,
        force : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","force",b"force","parent",b"parent"]) -> None: ...
global___PurgeContextsRequest = PurgeContextsRequest

class PurgeContextsResponse(google.protobuf.message.Message):
    """Response message for [MetadataService.PurgeContexts][google.cloud.aiplatform.v1beta1.MetadataService.PurgeContexts]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PURGE_COUNT_FIELD_NUMBER: builtins.int
    PURGE_SAMPLE_FIELD_NUMBER: builtins.int
    purge_count: builtins.int = ...
    """The number of Contexts that this request deleted (or, if `force` is false,
    the number of Contexts that will be deleted). This can be an estimate.
    """

    @property
    def purge_sample(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A sample of the Context names that will be deleted.
        Only populated if `force` is set to false. The maximum number of samples is
        100 (it is possible to return fewer).
        """
        pass
    def __init__(self,
        *,
        purge_count : builtins.int = ...,
        purge_sample : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["purge_count",b"purge_count","purge_sample",b"purge_sample"]) -> None: ...
global___PurgeContextsResponse = PurgeContextsResponse

class PurgeContextsMetadata(google.protobuf.message.Message):
    """Details of operations that perform [MetadataService.PurgeContexts][google.cloud.aiplatform.v1beta1.MetadataService.PurgeContexts]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GENERIC_METADATA_FIELD_NUMBER: builtins.int
    @property
    def generic_metadata(self) -> google.cloud.aiplatform.v1beta1.operation_pb2.GenericOperationMetadata:
        """Operation metadata for purging Contexts."""
        pass
    def __init__(self,
        *,
        generic_metadata : typing.Optional[google.cloud.aiplatform.v1beta1.operation_pb2.GenericOperationMetadata] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["generic_metadata",b"generic_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["generic_metadata",b"generic_metadata"]) -> None: ...
global___PurgeContextsMetadata = PurgeContextsMetadata

class AddContextArtifactsAndExecutionsRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.AddContextArtifactsAndExecutions][google.cloud.aiplatform.v1beta1.MetadataService.AddContextArtifactsAndExecutions]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONTEXT_FIELD_NUMBER: builtins.int
    ARTIFACTS_FIELD_NUMBER: builtins.int
    EXECUTIONS_FIELD_NUMBER: builtins.int
    context: typing.Text = ...
    """Required. The resource name of the Context that the Artifacts and Executions
    belong to.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
    """

    @property
    def artifacts(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The resource names of the Artifacts to attribute to the Context.

        Format:
        `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`
        """
        pass
    @property
    def executions(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The resource names of the Executions to associate with the
        Context.

        Format:
        `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
        """
        pass
    def __init__(self,
        *,
        context : typing.Text = ...,
        artifacts : typing.Optional[typing.Iterable[typing.Text]] = ...,
        executions : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["artifacts",b"artifacts","context",b"context","executions",b"executions"]) -> None: ...
global___AddContextArtifactsAndExecutionsRequest = AddContextArtifactsAndExecutionsRequest

class AddContextArtifactsAndExecutionsResponse(google.protobuf.message.Message):
    """Response message for [MetadataService.AddContextArtifactsAndExecutions][google.cloud.aiplatform.v1beta1.MetadataService.AddContextArtifactsAndExecutions]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___AddContextArtifactsAndExecutionsResponse = AddContextArtifactsAndExecutionsResponse

class AddContextChildrenRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.AddContextChildren][google.cloud.aiplatform.v1beta1.MetadataService.AddContextChildren]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONTEXT_FIELD_NUMBER: builtins.int
    CHILD_CONTEXTS_FIELD_NUMBER: builtins.int
    context: typing.Text = ...
    """Required. The resource name of the parent Context.

    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`
    """

    @property
    def child_contexts(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The resource names of the child Contexts."""
        pass
    def __init__(self,
        *,
        context : typing.Text = ...,
        child_contexts : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["child_contexts",b"child_contexts","context",b"context"]) -> None: ...
global___AddContextChildrenRequest = AddContextChildrenRequest

class AddContextChildrenResponse(google.protobuf.message.Message):
    """Response message for [MetadataService.AddContextChildren][google.cloud.aiplatform.v1beta1.MetadataService.AddContextChildren]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___AddContextChildrenResponse = AddContextChildrenResponse

class QueryContextLineageSubgraphRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.QueryContextLineageSubgraph][google.cloud.aiplatform.v1beta1.MetadataService.QueryContextLineageSubgraph]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONTEXT_FIELD_NUMBER: builtins.int
    context: typing.Text = ...
    """Required. The resource name of the Context whose Artifacts and Executions
    should be retrieved as a LineageSubgraph.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`

    The request may error with FAILED_PRECONDITION if the number of Artifacts,
    the number of Executions, or the number of Events that would be returned
    for the Context exceeds 1000.
    """

    def __init__(self,
        *,
        context : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["context",b"context"]) -> None: ...
global___QueryContextLineageSubgraphRequest = QueryContextLineageSubgraphRequest

class CreateExecutionRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.CreateExecution][google.cloud.aiplatform.v1beta1.MetadataService.CreateExecution]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    EXECUTION_FIELD_NUMBER: builtins.int
    EXECUTION_ID_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The resource name of the MetadataStore where the Execution should
    be created.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
    """

    @property
    def execution(self) -> google.cloud.aiplatform.v1beta1.execution_pb2.Execution:
        """Required. The Execution to create."""
        pass
    execution_id: typing.Text = ...
    """The {execution} portion of the resource name with the format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
    If not provided, the Execution's ID will be a UUID generated by the
    service.
    Must be 4-128 characters in length. Valid characters are `/[a-z][0-9]-/`.
    Must be unique across all Executions in the parent MetadataStore.
    (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED
    if the caller can't view the preexisting Execution.)
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        execution : typing.Optional[google.cloud.aiplatform.v1beta1.execution_pb2.Execution] = ...,
        execution_id : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["execution",b"execution"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["execution",b"execution","execution_id",b"execution_id","parent",b"parent"]) -> None: ...
global___CreateExecutionRequest = CreateExecutionRequest

class GetExecutionRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.GetExecution][google.cloud.aiplatform.v1beta1.MetadataService.GetExecution]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the Execution to retrieve.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetExecutionRequest = GetExecutionRequest

class ListExecutionsRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.ListExecutions][google.cloud.aiplatform.v1beta1.MetadataService.ListExecutions]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The MetadataStore whose Executions should be listed.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
    """

    page_size: builtins.int = ...
    """The maximum number of Executions to return. The service may return fewer.
    Must be in range 1-1000, inclusive. Defaults to 100.
    """

    page_token: typing.Text = ...
    """A page token, received from a previous [MetadataService.ListExecutions][google.cloud.aiplatform.v1beta1.MetadataService.ListExecutions]
    call. Provide this to retrieve the subsequent page.

    When paginating, all other provided parameters must match the call that
    provided the page token. (Otherwise the request will fail with an
    INVALID_ARGUMENT error.)
    """

    filter: typing.Text = ...
    """Filter specifying the boolean condition for the Executions to satisfy in
    order to be part of the result set.
    The syntax to define filter query is based on https://google.aip.dev/160.
    Following are the supported set of filters:

    *  **Attribute filtering**:
       For example: `display_name = "test"`.
       Supported fields include: `name`, `display_name`, `state`,
       `schema_title`, `create_time`, and `update_time`.
       Time fields, such as `create_time` and `update_time`, require values
       specified in RFC-3339 format.
       For example: `create_time = "2020-11-19T11:30:00-04:00"`.
    *  **Metadata field**:
       To filter on metadata fields use traversal operation as follows:
       `metadata.<field_name>.<type_value>`
       For example: `metadata.field_1.number_value = 10.0`
    *  **Context based filtering**:
       To filter Executions based on the contexts to which they belong use
       the function operator with the full resource name:
       `in_context(<context-name>)`.
       For example:
       `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`

    Each of the above supported filters can be combined together using
    logical operators (`AND` & `OR`).
    For example: `display_name = "test" AND metadata.field1.bool_value = true`.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        filter : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListExecutionsRequest = ListExecutionsRequest

class ListExecutionsResponse(google.protobuf.message.Message):
    """Response message for [MetadataService.ListExecutions][google.cloud.aiplatform.v1beta1.MetadataService.ListExecutions]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    EXECUTIONS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def executions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.aiplatform.v1beta1.execution_pb2.Execution]:
        """The Executions retrieved from the MetadataStore."""
        pass
    next_page_token: typing.Text = ...
    """A token, which can be sent as [ListExecutionsRequest.page_token][google.cloud.aiplatform.v1beta1.ListExecutionsRequest.page_token]
    to retrieve the next page.
    If this field is not populated, there are no subsequent pages.
    """

    def __init__(self,
        *,
        executions : typing.Optional[typing.Iterable[google.cloud.aiplatform.v1beta1.execution_pb2.Execution]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["executions",b"executions","next_page_token",b"next_page_token"]) -> None: ...
global___ListExecutionsResponse = ListExecutionsResponse

class UpdateExecutionRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.UpdateExecution][google.cloud.aiplatform.v1beta1.MetadataService.UpdateExecution]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    EXECUTION_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    ALLOW_MISSING_FIELD_NUMBER: builtins.int
    @property
    def execution(self) -> google.cloud.aiplatform.v1beta1.execution_pb2.Execution:
        """Required. The Execution containing updates.
        The Execution's [Execution.name][google.cloud.aiplatform.v1beta1.Execution.name] field is used to identify the Execution
        to be updated.
        Format:
        `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
        """
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Required. A FieldMask indicating which fields should be updated.
        Functionality of this field is not yet supported.
        """
        pass
    allow_missing: builtins.bool = ...
    """If set to true, and the [Execution][google.cloud.aiplatform.v1beta1.Execution] is not found, a new [Execution][google.cloud.aiplatform.v1beta1.Execution]
    is created.
    """

    def __init__(self,
        *,
        execution : typing.Optional[google.cloud.aiplatform.v1beta1.execution_pb2.Execution] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        allow_missing : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["execution",b"execution","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["allow_missing",b"allow_missing","execution",b"execution","update_mask",b"update_mask"]) -> None: ...
global___UpdateExecutionRequest = UpdateExecutionRequest

class DeleteExecutionRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.DeleteExecution][google.cloud.aiplatform.v1beta1.MetadataService.DeleteExecution]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    ETAG_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the Execution to delete.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
    """

    etag: typing.Text = ...
    """Optional. The etag of the Execution to delete.
    If this is provided, it must match the server's etag. Otherwise, the
    request will fail with a FAILED_PRECONDITION.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        etag : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["etag",b"etag","name",b"name"]) -> None: ...
global___DeleteExecutionRequest = DeleteExecutionRequest

class PurgeExecutionsRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.PurgeExecutions][google.cloud.aiplatform.v1beta1.MetadataService.PurgeExecutions]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    FORCE_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The metadata store to purge Executions from.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
    """

    filter: typing.Text = ...
    """Required. A required filter matching the Executions to be purged.
    E.g., `update_time <= 2020-11-19T11:30:00-04:00`.
    """

    force: builtins.bool = ...
    """Optional. Flag to indicate to actually perform the purge.
    If `force` is set to false, the method will return a sample of
    Execution names that would be deleted.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        filter : typing.Text = ...,
        force : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","force",b"force","parent",b"parent"]) -> None: ...
global___PurgeExecutionsRequest = PurgeExecutionsRequest

class PurgeExecutionsResponse(google.protobuf.message.Message):
    """Response message for [MetadataService.PurgeExecutions][google.cloud.aiplatform.v1beta1.MetadataService.PurgeExecutions]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PURGE_COUNT_FIELD_NUMBER: builtins.int
    PURGE_SAMPLE_FIELD_NUMBER: builtins.int
    purge_count: builtins.int = ...
    """The number of Executions that this request deleted (or, if `force` is
    false, the number of Executions that will be deleted). This can be an
    estimate.
    """

    @property
    def purge_sample(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A sample of the Execution names that will be deleted.
        Only populated if `force` is set to false. The maximum number of samples is
        100 (it is possible to return fewer).
        """
        pass
    def __init__(self,
        *,
        purge_count : builtins.int = ...,
        purge_sample : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["purge_count",b"purge_count","purge_sample",b"purge_sample"]) -> None: ...
global___PurgeExecutionsResponse = PurgeExecutionsResponse

class PurgeExecutionsMetadata(google.protobuf.message.Message):
    """Details of operations that perform [MetadataService.PurgeExecutions][google.cloud.aiplatform.v1beta1.MetadataService.PurgeExecutions]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GENERIC_METADATA_FIELD_NUMBER: builtins.int
    @property
    def generic_metadata(self) -> google.cloud.aiplatform.v1beta1.operation_pb2.GenericOperationMetadata:
        """Operation metadata for purging Executions."""
        pass
    def __init__(self,
        *,
        generic_metadata : typing.Optional[google.cloud.aiplatform.v1beta1.operation_pb2.GenericOperationMetadata] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["generic_metadata",b"generic_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["generic_metadata",b"generic_metadata"]) -> None: ...
global___PurgeExecutionsMetadata = PurgeExecutionsMetadata

class AddExecutionEventsRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.AddExecutionEvents][google.cloud.aiplatform.v1beta1.MetadataService.AddExecutionEvents]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    EXECUTION_FIELD_NUMBER: builtins.int
    EVENTS_FIELD_NUMBER: builtins.int
    execution: typing.Text = ...
    """Required. The resource name of the Execution that the Events connect
    Artifacts with.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
    """

    @property
    def events(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.aiplatform.v1beta1.event_pb2.Event]:
        """The Events to create and add."""
        pass
    def __init__(self,
        *,
        execution : typing.Text = ...,
        events : typing.Optional[typing.Iterable[google.cloud.aiplatform.v1beta1.event_pb2.Event]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["events",b"events","execution",b"execution"]) -> None: ...
global___AddExecutionEventsRequest = AddExecutionEventsRequest

class AddExecutionEventsResponse(google.protobuf.message.Message):
    """Response message for [MetadataService.AddExecutionEvents][google.cloud.aiplatform.v1beta1.MetadataService.AddExecutionEvents]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___AddExecutionEventsResponse = AddExecutionEventsResponse

class QueryExecutionInputsAndOutputsRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.QueryExecutionInputsAndOutputs][google.cloud.aiplatform.v1beta1.MetadataService.QueryExecutionInputsAndOutputs]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    EXECUTION_FIELD_NUMBER: builtins.int
    execution: typing.Text = ...
    """Required. The resource name of the Execution whose input and output Artifacts should
    be retrieved as a LineageSubgraph.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`
    """

    def __init__(self,
        *,
        execution : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["execution",b"execution"]) -> None: ...
global___QueryExecutionInputsAndOutputsRequest = QueryExecutionInputsAndOutputsRequest

class CreateMetadataSchemaRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.CreateMetadataSchema][google.cloud.aiplatform.v1beta1.MetadataService.CreateMetadataSchema]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    METADATA_SCHEMA_FIELD_NUMBER: builtins.int
    METADATA_SCHEMA_ID_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The resource name of the MetadataStore where the MetadataSchema should
    be created.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
    """

    @property
    def metadata_schema(self) -> google.cloud.aiplatform.v1beta1.metadata_schema_pb2.MetadataSchema:
        """Required. The MetadataSchema to create."""
        pass
    metadata_schema_id: typing.Text = ...
    """The {metadata_schema} portion of the resource name with the format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/metadataSchemas/{metadataschema}`
    If not provided, the MetadataStore's ID will be a UUID generated by the
    service.
    Must be 4-128 characters in length. Valid characters are `/[a-z][0-9]-/`.
    Must be unique across all MetadataSchemas in the parent Location.
    (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED
    if the caller can't view the preexisting MetadataSchema.)
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        metadata_schema : typing.Optional[google.cloud.aiplatform.v1beta1.metadata_schema_pb2.MetadataSchema] = ...,
        metadata_schema_id : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["metadata_schema",b"metadata_schema"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["metadata_schema",b"metadata_schema","metadata_schema_id",b"metadata_schema_id","parent",b"parent"]) -> None: ...
global___CreateMetadataSchemaRequest = CreateMetadataSchemaRequest

class GetMetadataSchemaRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.GetMetadataSchema][google.cloud.aiplatform.v1beta1.MetadataService.GetMetadataSchema]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the MetadataSchema to retrieve.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/metadataSchemas/{metadataschema}`
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetMetadataSchemaRequest = GetMetadataSchemaRequest

class ListMetadataSchemasRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.ListMetadataSchemas][google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataSchemas]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The MetadataStore whose MetadataSchemas should be listed.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}`
    """

    page_size: builtins.int = ...
    """The maximum number of MetadataSchemas to return. The service may return
    fewer.
    Must be in range 1-1000, inclusive. Defaults to 100.
    """

    page_token: typing.Text = ...
    """A page token, received from a previous
    [MetadataService.ListMetadataSchemas][google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataSchemas] call. Provide this to retrieve the
    next page.

    When paginating, all other provided parameters must match the call that
    provided the page token. (Otherwise the request will fail with
    INVALID_ARGUMENT error.)
    """

    filter: typing.Text = ...
    """A query to filter available MetadataSchemas for matching results."""

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        filter : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListMetadataSchemasRequest = ListMetadataSchemasRequest

class ListMetadataSchemasResponse(google.protobuf.message.Message):
    """Response message for [MetadataService.ListMetadataSchemas][google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataSchemas]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    METADATA_SCHEMAS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def metadata_schemas(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.aiplatform.v1beta1.metadata_schema_pb2.MetadataSchema]:
        """The MetadataSchemas found for the MetadataStore."""
        pass
    next_page_token: typing.Text = ...
    """A token, which can be sent as
    [ListMetadataSchemasRequest.page_token][google.cloud.aiplatform.v1beta1.ListMetadataSchemasRequest.page_token] to retrieve the next
    page. If this field is not populated, there are no subsequent pages.
    """

    def __init__(self,
        *,
        metadata_schemas : typing.Optional[typing.Iterable[google.cloud.aiplatform.v1beta1.metadata_schema_pb2.MetadataSchema]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["metadata_schemas",b"metadata_schemas","next_page_token",b"next_page_token"]) -> None: ...
global___ListMetadataSchemasResponse = ListMetadataSchemasResponse

class QueryArtifactLineageSubgraphRequest(google.protobuf.message.Message):
    """Request message for [MetadataService.QueryArtifactLineageSubgraph][google.cloud.aiplatform.v1beta1.MetadataService.QueryArtifactLineageSubgraph]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ARTIFACT_FIELD_NUMBER: builtins.int
    MAX_HOPS_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    artifact: typing.Text = ...
    """Required. The resource name of the Artifact whose Lineage needs to be retrieved as a
    LineageSubgraph.
    Format:
    `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`

    The request may error with FAILED_PRECONDITION if the number of Artifacts,
    the number of Executions, or the number of Events that would be returned
    for the Context exceeds 1000.
    """

    max_hops: builtins.int = ...
    """Specifies the size of the lineage graph in terms of number of hops from the
    specified artifact.
    Negative Value: INVALID_ARGUMENT error is returned
    0: Only input artifact is returned.
    No value: Transitive closure is performed to return the complete graph.
    """

    filter: typing.Text = ...
    """Filter specifying the boolean condition for the Artifacts to satisfy in
    order to be part of the Lineage Subgraph.
    The syntax to define filter query is based on https://google.aip.dev/160.
    The supported set of filters include the following:

    *  **Attribute filtering**:
       For example: `display_name = "test"`
       Supported fields include: `name`, `display_name`, `uri`, `state`,
       `schema_title`, `create_time`, and `update_time`.
       Time fields, such as `create_time` and `update_time`, require values
       specified in RFC-3339 format.
       For example: `create_time = "2020-11-19T11:30:00-04:00"`
    *  **Metadata field**:
       To filter on metadata fields use traversal operation as follows:
       `metadata.<field_name>.<type_value>`.
       For example: `metadata.field_1.number_value = 10.0`

    Each of the above supported filter types can be combined together using
    logical operators (`AND` & `OR`).

    For example: `display_name = "test" AND metadata.field1.bool_value = true`.
    """

    def __init__(self,
        *,
        artifact : typing.Text = ...,
        max_hops : builtins.int = ...,
        filter : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["artifact",b"artifact","filter",b"filter","max_hops",b"max_hops"]) -> None: ...
global___QueryArtifactLineageSubgraphRequest = QueryArtifactLineageSubgraphRequest
