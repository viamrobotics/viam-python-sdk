"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class MetadataSchema(google.protobuf.message.Message):
    """Instance of a general MetadataSchema."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _MetadataSchemaType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _MetadataSchemaTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MetadataSchemaType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        METADATA_SCHEMA_TYPE_UNSPECIFIED: MetadataSchema.MetadataSchemaType.ValueType = ...  # 0
        """Unspecified type for the MetadataSchema."""

        ARTIFACT_TYPE: MetadataSchema.MetadataSchemaType.ValueType = ...  # 1
        """A type indicating that the MetadataSchema will be used by Artifacts."""

        EXECUTION_TYPE: MetadataSchema.MetadataSchemaType.ValueType = ...  # 2
        """A typee indicating that the MetadataSchema will be used by Executions."""

        CONTEXT_TYPE: MetadataSchema.MetadataSchemaType.ValueType = ...  # 3
        """A state indicating that the MetadataSchema will be used by Contexts."""

    class MetadataSchemaType(_MetadataSchemaType, metaclass=_MetadataSchemaTypeEnumTypeWrapper):
        """Describes the type of the MetadataSchema."""
        pass

    METADATA_SCHEMA_TYPE_UNSPECIFIED: MetadataSchema.MetadataSchemaType.ValueType = ...  # 0
    """Unspecified type for the MetadataSchema."""

    ARTIFACT_TYPE: MetadataSchema.MetadataSchemaType.ValueType = ...  # 1
    """A type indicating that the MetadataSchema will be used by Artifacts."""

    EXECUTION_TYPE: MetadataSchema.MetadataSchemaType.ValueType = ...  # 2
    """A typee indicating that the MetadataSchema will be used by Executions."""

    CONTEXT_TYPE: MetadataSchema.MetadataSchemaType.ValueType = ...  # 3
    """A state indicating that the MetadataSchema will be used by Contexts."""


    NAME_FIELD_NUMBER: builtins.int
    SCHEMA_VERSION_FIELD_NUMBER: builtins.int
    SCHEMA_FIELD_NUMBER: builtins.int
    SCHEMA_TYPE_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. The resource name of the MetadataSchema."""

    schema_version: typing.Text = ...
    """The version of the MetadataSchema. The version's format must match
    the following regular expression: `^[0-9]+[.][0-9]+[.][0-9]+$`, which would
    allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
    """

    schema: typing.Text = ...
    """Required. The raw YAML string representation of the MetadataSchema. The combination
    of [MetadataSchema.version] and the schema name given by `title` in
    [MetadataSchema.schema] must be unique within a MetadataStore.

    The schema is defined as an OpenAPI 3.0.2
    [MetadataSchema
    Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
    """

    schema_type: global___MetadataSchema.MetadataSchemaType.ValueType = ...
    """The type of the MetadataSchema. This is a property that identifies which
    metadata types will use the MetadataSchema.
    """

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Timestamp when this MetadataSchema was created."""
        pass
    description: typing.Text = ...
    """Description of the Metadata Schema"""

    def __init__(self,
        *,
        name : typing.Text = ...,
        schema_version : typing.Text = ...,
        schema : typing.Text = ...,
        schema_type : global___MetadataSchema.MetadataSchemaType.ValueType = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        description : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["create_time",b"create_time","description",b"description","name",b"name","schema",b"schema","schema_type",b"schema_type","schema_version",b"schema_version"]) -> None: ...
global___MetadataSchema = MetadataSchema
