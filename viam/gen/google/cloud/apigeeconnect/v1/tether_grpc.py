# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/cloud/apigeeconnect/v1/tether.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.duration_pb2
import google.rpc.status_pb2
import google.api.client_pb2
import google.cloud.apigeeconnect.v1.tether_pb2


class TetherBase(abc.ABC):

    @abc.abstractmethod
    async def Egress(self, stream: 'grpclib.server.Stream[google.cloud.apigeeconnect.v1.tether_pb2.EgressResponse, google.cloud.apigeeconnect.v1.tether_pb2.EgressRequest]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.apigeeconnect.v1.Tether/Egress': grpclib.const.Handler(
                self.Egress,
                grpclib.const.Cardinality.STREAM_STREAM,
                google.cloud.apigeeconnect.v1.tether_pb2.EgressResponse,
                google.cloud.apigeeconnect.v1.tether_pb2.EgressRequest,
            ),
        }


class TetherStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Egress = grpclib.client.StreamStreamMethod(
            channel,
            '/google.cloud.apigeeconnect.v1.Tether/Egress',
            google.cloud.apigeeconnect.v1.tether_pb2.EgressResponse,
            google.cloud.apigeeconnect.v1.tether_pb2.EgressRequest,
        )
