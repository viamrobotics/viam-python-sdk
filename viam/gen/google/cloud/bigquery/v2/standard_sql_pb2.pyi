"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class StandardSqlDataType(google.protobuf.message.Message):
    """The type of a variable, e.g., a function argument.
    Examples:
    INT64: {type_kind="INT64"}
    ARRAY<STRING>: {type_kind="ARRAY", array_element_type="STRING"}
    STRUCT<x STRING, y ARRAY<DATE>>:
      {type_kind="STRUCT",
       struct_type={fields=[
         {name="x", type={type_kind="STRING"}},
         {name="y", type={type_kind="ARRAY", array_element_type="DATE"}}
       ]}}
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _TypeKind:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TypeKindEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TypeKind.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        TYPE_KIND_UNSPECIFIED: StandardSqlDataType.TypeKind.ValueType = ...  # 0
        """Invalid type."""

        INT64: StandardSqlDataType.TypeKind.ValueType = ...  # 2
        """Encoded as a string in decimal format."""

        BOOL: StandardSqlDataType.TypeKind.ValueType = ...  # 5
        """Encoded as a boolean "false" or "true"."""

        FLOAT64: StandardSqlDataType.TypeKind.ValueType = ...  # 7
        """Encoded as a number, or string "NaN", "Infinity" or "-Infinity"."""

        STRING: StandardSqlDataType.TypeKind.ValueType = ...  # 8
        """Encoded as a string value."""

        BYTES: StandardSqlDataType.TypeKind.ValueType = ...  # 9
        """Encoded as a base64 string per RFC 4648, section 4."""

        TIMESTAMP: StandardSqlDataType.TypeKind.ValueType = ...  # 19
        """Encoded as an RFC 3339 timestamp with mandatory "Z" time zone string:
        1985-04-12T23:20:50.52Z
        """

        DATE: StandardSqlDataType.TypeKind.ValueType = ...  # 10
        """Encoded as RFC 3339 full-date format string: 1985-04-12"""

        TIME: StandardSqlDataType.TypeKind.ValueType = ...  # 20
        """Encoded as RFC 3339 partial-time format string: 23:20:50.52"""

        DATETIME: StandardSqlDataType.TypeKind.ValueType = ...  # 21
        """Encoded as RFC 3339 full-date "T" partial-time: 1985-04-12T23:20:50.52"""

        INTERVAL: StandardSqlDataType.TypeKind.ValueType = ...  # 26
        """Encoded as fully qualified 3 part: 0-5 15 2:30:45.6"""

        GEOGRAPHY: StandardSqlDataType.TypeKind.ValueType = ...  # 22
        """Encoded as WKT"""

        NUMERIC: StandardSqlDataType.TypeKind.ValueType = ...  # 23
        """Encoded as a decimal string."""

        BIGNUMERIC: StandardSqlDataType.TypeKind.ValueType = ...  # 24
        """Encoded as a decimal string."""

        JSON: StandardSqlDataType.TypeKind.ValueType = ...  # 25
        """Encoded as a string."""

        ARRAY: StandardSqlDataType.TypeKind.ValueType = ...  # 16
        """Encoded as a list with types matching Type.array_type."""

        STRUCT: StandardSqlDataType.TypeKind.ValueType = ...  # 17
        """Encoded as a list with fields of type Type.struct_type[i]. List is used
        because a JSON object cannot have duplicate field names.
        """

    class TypeKind(_TypeKind, metaclass=_TypeKindEnumTypeWrapper):
        pass

    TYPE_KIND_UNSPECIFIED: StandardSqlDataType.TypeKind.ValueType = ...  # 0
    """Invalid type."""

    INT64: StandardSqlDataType.TypeKind.ValueType = ...  # 2
    """Encoded as a string in decimal format."""

    BOOL: StandardSqlDataType.TypeKind.ValueType = ...  # 5
    """Encoded as a boolean "false" or "true"."""

    FLOAT64: StandardSqlDataType.TypeKind.ValueType = ...  # 7
    """Encoded as a number, or string "NaN", "Infinity" or "-Infinity"."""

    STRING: StandardSqlDataType.TypeKind.ValueType = ...  # 8
    """Encoded as a string value."""

    BYTES: StandardSqlDataType.TypeKind.ValueType = ...  # 9
    """Encoded as a base64 string per RFC 4648, section 4."""

    TIMESTAMP: StandardSqlDataType.TypeKind.ValueType = ...  # 19
    """Encoded as an RFC 3339 timestamp with mandatory "Z" time zone string:
    1985-04-12T23:20:50.52Z
    """

    DATE: StandardSqlDataType.TypeKind.ValueType = ...  # 10
    """Encoded as RFC 3339 full-date format string: 1985-04-12"""

    TIME: StandardSqlDataType.TypeKind.ValueType = ...  # 20
    """Encoded as RFC 3339 partial-time format string: 23:20:50.52"""

    DATETIME: StandardSqlDataType.TypeKind.ValueType = ...  # 21
    """Encoded as RFC 3339 full-date "T" partial-time: 1985-04-12T23:20:50.52"""

    INTERVAL: StandardSqlDataType.TypeKind.ValueType = ...  # 26
    """Encoded as fully qualified 3 part: 0-5 15 2:30:45.6"""

    GEOGRAPHY: StandardSqlDataType.TypeKind.ValueType = ...  # 22
    """Encoded as WKT"""

    NUMERIC: StandardSqlDataType.TypeKind.ValueType = ...  # 23
    """Encoded as a decimal string."""

    BIGNUMERIC: StandardSqlDataType.TypeKind.ValueType = ...  # 24
    """Encoded as a decimal string."""

    JSON: StandardSqlDataType.TypeKind.ValueType = ...  # 25
    """Encoded as a string."""

    ARRAY: StandardSqlDataType.TypeKind.ValueType = ...  # 16
    """Encoded as a list with types matching Type.array_type."""

    STRUCT: StandardSqlDataType.TypeKind.ValueType = ...  # 17
    """Encoded as a list with fields of type Type.struct_type[i]. List is used
    because a JSON object cannot have duplicate field names.
    """


    TYPE_KIND_FIELD_NUMBER: builtins.int
    ARRAY_ELEMENT_TYPE_FIELD_NUMBER: builtins.int
    STRUCT_TYPE_FIELD_NUMBER: builtins.int
    type_kind: global___StandardSqlDataType.TypeKind.ValueType = ...
    """Required. The top level type of this field.
    Can be any standard SQL data type (e.g., "INT64", "DATE", "ARRAY").
    """

    @property
    def array_element_type(self) -> global___StandardSqlDataType:
        """The type of the array's elements, if type_kind = "ARRAY"."""
        pass
    @property
    def struct_type(self) -> global___StandardSqlStructType:
        """The fields of this struct, in order, if type_kind = "STRUCT"."""
        pass
    def __init__(self,
        *,
        type_kind : global___StandardSqlDataType.TypeKind.ValueType = ...,
        array_element_type : typing.Optional[global___StandardSqlDataType] = ...,
        struct_type : typing.Optional[global___StandardSqlStructType] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["array_element_type",b"array_element_type","struct_type",b"struct_type","sub_type",b"sub_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["array_element_type",b"array_element_type","struct_type",b"struct_type","sub_type",b"sub_type","type_kind",b"type_kind"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["sub_type",b"sub_type"]) -> typing.Optional[typing_extensions.Literal["array_element_type","struct_type"]]: ...
global___StandardSqlDataType = StandardSqlDataType

class StandardSqlField(google.protobuf.message.Message):
    """A field or a column."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Optional. The name of this field. Can be absent for struct fields."""

    @property
    def type(self) -> global___StandardSqlDataType:
        """Optional. The type of this parameter. Absent if not explicitly
        specified (e.g., CREATE FUNCTION statement can omit the return type;
        in this case the output parameter does not have this "type" field).
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        type : typing.Optional[global___StandardSqlDataType] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["type",b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","type",b"type"]) -> None: ...
global___StandardSqlField = StandardSqlField

class StandardSqlStructType(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FIELDS_FIELD_NUMBER: builtins.int
    @property
    def fields(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StandardSqlField]: ...
    def __init__(self,
        *,
        fields : typing.Optional[typing.Iterable[global___StandardSqlField]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["fields",b"fields"]) -> None: ...
global___StandardSqlStructType = StandardSqlStructType

class StandardSqlTableType(google.protobuf.message.Message):
    """A table type"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    COLUMNS_FIELD_NUMBER: builtins.int
    @property
    def columns(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StandardSqlField]:
        """The columns in this table type"""
        pass
    def __init__(self,
        *,
        columns : typing.Optional[typing.Iterable[global___StandardSqlField]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["columns",b"columns"]) -> None: ...
global___StandardSqlTableType = StandardSqlTableType
