# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/cloud/bigquery/storage/v1beta2/storage.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.api.client_pb2
import google.api.field_behavior_pb2
import google.api.resource_pb2
import google.cloud.bigquery.storage.v1beta2.arrow_pb2
import google.cloud.bigquery.storage.v1beta2.avro_pb2
import google.cloud.bigquery.storage.v1beta2.protobuf_pb2
import google.cloud.bigquery.storage.v1beta2.stream_pb2
import google.cloud.bigquery.storage.v1beta2.table_pb2
import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
import google.rpc.status_pb2
import google.cloud.bigquery.storage.v1beta2.storage_pb2


class BigQueryReadBase(abc.ABC):

    @abc.abstractmethod
    async def CreateReadSession(self, stream: 'grpclib.server.Stream[google.cloud.bigquery.storage.v1beta2.storage_pb2.CreateReadSessionRequest, google.cloud.bigquery.storage.v1beta2.stream_pb2.ReadSession]') -> None:
        pass

    @abc.abstractmethod
    async def ReadRows(self, stream: 'grpclib.server.Stream[google.cloud.bigquery.storage.v1beta2.storage_pb2.ReadRowsRequest, google.cloud.bigquery.storage.v1beta2.storage_pb2.ReadRowsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SplitReadStream(self, stream: 'grpclib.server.Stream[google.cloud.bigquery.storage.v1beta2.storage_pb2.SplitReadStreamRequest, google.cloud.bigquery.storage.v1beta2.storage_pb2.SplitReadStreamResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.bigquery.storage.v1beta2.BigQueryRead/CreateReadSession': grpclib.const.Handler(
                self.CreateReadSession,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.CreateReadSessionRequest,
                google.cloud.bigquery.storage.v1beta2.stream_pb2.ReadSession,
            ),
            '/google.cloud.bigquery.storage.v1beta2.BigQueryRead/ReadRows': grpclib.const.Handler(
                self.ReadRows,
                grpclib.const.Cardinality.UNARY_STREAM,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.ReadRowsRequest,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.ReadRowsResponse,
            ),
            '/google.cloud.bigquery.storage.v1beta2.BigQueryRead/SplitReadStream': grpclib.const.Handler(
                self.SplitReadStream,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.SplitReadStreamRequest,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.SplitReadStreamResponse,
            ),
        }


class BigQueryReadStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.CreateReadSession = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.storage.v1beta2.BigQueryRead/CreateReadSession',
            google.cloud.bigquery.storage.v1beta2.storage_pb2.CreateReadSessionRequest,
            google.cloud.bigquery.storage.v1beta2.stream_pb2.ReadSession,
        )
        self.ReadRows = grpclib.client.UnaryStreamMethod(
            channel,
            '/google.cloud.bigquery.storage.v1beta2.BigQueryRead/ReadRows',
            google.cloud.bigquery.storage.v1beta2.storage_pb2.ReadRowsRequest,
            google.cloud.bigquery.storage.v1beta2.storage_pb2.ReadRowsResponse,
        )
        self.SplitReadStream = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.storage.v1beta2.BigQueryRead/SplitReadStream',
            google.cloud.bigquery.storage.v1beta2.storage_pb2.SplitReadStreamRequest,
            google.cloud.bigquery.storage.v1beta2.storage_pb2.SplitReadStreamResponse,
        )


class BigQueryWriteBase(abc.ABC):

    @abc.abstractmethod
    async def CreateWriteStream(self, stream: 'grpclib.server.Stream[google.cloud.bigquery.storage.v1beta2.storage_pb2.CreateWriteStreamRequest, google.cloud.bigquery.storage.v1beta2.stream_pb2.WriteStream]') -> None:
        pass

    @abc.abstractmethod
    async def AppendRows(self, stream: 'grpclib.server.Stream[google.cloud.bigquery.storage.v1beta2.storage_pb2.AppendRowsRequest, google.cloud.bigquery.storage.v1beta2.storage_pb2.AppendRowsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetWriteStream(self, stream: 'grpclib.server.Stream[google.cloud.bigquery.storage.v1beta2.storage_pb2.GetWriteStreamRequest, google.cloud.bigquery.storage.v1beta2.stream_pb2.WriteStream]') -> None:
        pass

    @abc.abstractmethod
    async def FinalizeWriteStream(self, stream: 'grpclib.server.Stream[google.cloud.bigquery.storage.v1beta2.storage_pb2.FinalizeWriteStreamRequest, google.cloud.bigquery.storage.v1beta2.storage_pb2.FinalizeWriteStreamResponse]') -> None:
        pass

    @abc.abstractmethod
    async def BatchCommitWriteStreams(self, stream: 'grpclib.server.Stream[google.cloud.bigquery.storage.v1beta2.storage_pb2.BatchCommitWriteStreamsRequest, google.cloud.bigquery.storage.v1beta2.storage_pb2.BatchCommitWriteStreamsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def FlushRows(self, stream: 'grpclib.server.Stream[google.cloud.bigquery.storage.v1beta2.storage_pb2.FlushRowsRequest, google.cloud.bigquery.storage.v1beta2.storage_pb2.FlushRowsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.bigquery.storage.v1beta2.BigQueryWrite/CreateWriteStream': grpclib.const.Handler(
                self.CreateWriteStream,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.CreateWriteStreamRequest,
                google.cloud.bigquery.storage.v1beta2.stream_pb2.WriteStream,
            ),
            '/google.cloud.bigquery.storage.v1beta2.BigQueryWrite/AppendRows': grpclib.const.Handler(
                self.AppendRows,
                grpclib.const.Cardinality.STREAM_STREAM,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.AppendRowsRequest,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.AppendRowsResponse,
            ),
            '/google.cloud.bigquery.storage.v1beta2.BigQueryWrite/GetWriteStream': grpclib.const.Handler(
                self.GetWriteStream,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.GetWriteStreamRequest,
                google.cloud.bigquery.storage.v1beta2.stream_pb2.WriteStream,
            ),
            '/google.cloud.bigquery.storage.v1beta2.BigQueryWrite/FinalizeWriteStream': grpclib.const.Handler(
                self.FinalizeWriteStream,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.FinalizeWriteStreamRequest,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.FinalizeWriteStreamResponse,
            ),
            '/google.cloud.bigquery.storage.v1beta2.BigQueryWrite/BatchCommitWriteStreams': grpclib.const.Handler(
                self.BatchCommitWriteStreams,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.BatchCommitWriteStreamsRequest,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.BatchCommitWriteStreamsResponse,
            ),
            '/google.cloud.bigquery.storage.v1beta2.BigQueryWrite/FlushRows': grpclib.const.Handler(
                self.FlushRows,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.FlushRowsRequest,
                google.cloud.bigquery.storage.v1beta2.storage_pb2.FlushRowsResponse,
            ),
        }


class BigQueryWriteStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.CreateWriteStream = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.storage.v1beta2.BigQueryWrite/CreateWriteStream',
            google.cloud.bigquery.storage.v1beta2.storage_pb2.CreateWriteStreamRequest,
            google.cloud.bigquery.storage.v1beta2.stream_pb2.WriteStream,
        )
        self.AppendRows = grpclib.client.StreamStreamMethod(
            channel,
            '/google.cloud.bigquery.storage.v1beta2.BigQueryWrite/AppendRows',
            google.cloud.bigquery.storage.v1beta2.storage_pb2.AppendRowsRequest,
            google.cloud.bigquery.storage.v1beta2.storage_pb2.AppendRowsResponse,
        )
        self.GetWriteStream = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.storage.v1beta2.BigQueryWrite/GetWriteStream',
            google.cloud.bigquery.storage.v1beta2.storage_pb2.GetWriteStreamRequest,
            google.cloud.bigquery.storage.v1beta2.stream_pb2.WriteStream,
        )
        self.FinalizeWriteStream = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.storage.v1beta2.BigQueryWrite/FinalizeWriteStream',
            google.cloud.bigquery.storage.v1beta2.storage_pb2.FinalizeWriteStreamRequest,
            google.cloud.bigquery.storage.v1beta2.storage_pb2.FinalizeWriteStreamResponse,
        )
        self.BatchCommitWriteStreams = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.storage.v1beta2.BigQueryWrite/BatchCommitWriteStreams',
            google.cloud.bigquery.storage.v1beta2.storage_pb2.BatchCommitWriteStreamsRequest,
            google.cloud.bigquery.storage.v1beta2.storage_pb2.BatchCommitWriteStreamsResponse,
        )
        self.FlushRows = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.bigquery.storage.v1beta2.BigQueryWrite/FlushRows',
            google.cloud.bigquery.storage.v1beta2.storage_pb2.FlushRowsRequest,
            google.cloud.bigquery.storage.v1beta2.storage_pb2.FlushRowsResponse,
        )
