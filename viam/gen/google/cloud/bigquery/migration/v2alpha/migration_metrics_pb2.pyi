"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.api.distribution_pb2
import google.api.metric_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class TimeSeries(google.protobuf.message.Message):
    """The metrics object for a SubTask."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    METRIC_FIELD_NUMBER: builtins.int
    VALUE_TYPE_FIELD_NUMBER: builtins.int
    METRIC_KIND_FIELD_NUMBER: builtins.int
    POINTS_FIELD_NUMBER: builtins.int
    metric: typing.Text = ...
    """Required. The name of the metric.

    If the metric is not known by the service yet, it will be auto-created.
    """

    value_type: google.api.metric_pb2.MetricDescriptor.ValueType.ValueType = ...
    """Required. The value type of the time series."""

    metric_kind: google.api.metric_pb2.MetricDescriptor.MetricKind.ValueType = ...
    """Optional. The metric kind of the time series.

    If present, it must be the same as the metric kind of the associated
    metric. If the associated metric's descriptor must be auto-created, then
    this field specifies the metric kind of the new descriptor and must be
    either `GAUGE` (the default) or `CUMULATIVE`.
    """

    @property
    def points(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Point]:
        """Required. The data points of this time series. When listing time series, points are
        returned in reverse time order.

        When creating a time series, this field must contain exactly one point and
        the point's type must be the same as the value type of the associated
        metric. If the associated metric's descriptor must be auto-created, then
        the value type of the descriptor is determined by the point's type, which
        must be `BOOL`, `INT64`, `DOUBLE`, or `DISTRIBUTION`.
        """
        pass
    def __init__(self,
        *,
        metric : typing.Text = ...,
        value_type : google.api.metric_pb2.MetricDescriptor.ValueType.ValueType = ...,
        metric_kind : google.api.metric_pb2.MetricDescriptor.MetricKind.ValueType = ...,
        points : typing.Optional[typing.Iterable[global___Point]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["metric",b"metric","metric_kind",b"metric_kind","points",b"points","value_type",b"value_type"]) -> None: ...
global___TimeSeries = TimeSeries

class Point(google.protobuf.message.Message):
    """A single data point in a time series."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INTERVAL_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    @property
    def interval(self) -> global___TimeInterval:
        """The time interval to which the data point applies.  For `GAUGE` metrics,
        the start time does not need to be supplied, but if it is supplied, it must
        equal the end time.  For `DELTA` metrics, the start and end time should
        specify a non-zero interval, with subsequent points specifying contiguous
        and non-overlapping intervals.  For `CUMULATIVE` metrics, the start and end
        time should specify a non-zero interval, with subsequent points specifying
        the same start time and increasing end times, until an event resets the
        cumulative value to zero and sets a new start time for the following
        points.
        """
        pass
    @property
    def value(self) -> global___TypedValue:
        """The value of the data point."""
        pass
    def __init__(self,
        *,
        interval : typing.Optional[global___TimeInterval] = ...,
        value : typing.Optional[global___TypedValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["interval",b"interval","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["interval",b"interval","value",b"value"]) -> None: ...
global___Point = Point

class TimeInterval(google.protobuf.message.Message):
    """A time interval extending just after a start time through an end time.
    If the start time is the same as the end time, then the interval
    represents a single point in time.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Optional. The beginning of the time interval.  The default value
        for the start time is the end time. The start time must not be
        later than the end time.
        """
        pass
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Required. The end of the time interval."""
        pass
    def __init__(self,
        *,
        start_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        end_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_time",b"end_time","start_time",b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_time",b"end_time","start_time",b"start_time"]) -> None: ...
global___TimeInterval = TimeInterval

class TypedValue(google.protobuf.message.Message):
    """A single strongly-typed value."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BOOL_VALUE_FIELD_NUMBER: builtins.int
    INT64_VALUE_FIELD_NUMBER: builtins.int
    DOUBLE_VALUE_FIELD_NUMBER: builtins.int
    STRING_VALUE_FIELD_NUMBER: builtins.int
    DISTRIBUTION_VALUE_FIELD_NUMBER: builtins.int
    bool_value: builtins.bool = ...
    """A Boolean value: `true` or `false`."""

    int64_value: builtins.int = ...
    """A 64-bit integer. Its range is approximately +/-9.2x10^18."""

    double_value: builtins.float = ...
    """A 64-bit double-precision floating-point number. Its magnitude
    is approximately +/-10^(+/-300) and it has 16 significant digits of
    precision.
    """

    string_value: typing.Text = ...
    """A variable-length string value."""

    @property
    def distribution_value(self) -> google.api.distribution_pb2.Distribution:
        """A distribution value."""
        pass
    def __init__(self,
        *,
        bool_value : builtins.bool = ...,
        int64_value : builtins.int = ...,
        double_value : builtins.float = ...,
        string_value : typing.Text = ...,
        distribution_value : typing.Optional[google.api.distribution_pb2.Distribution] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bool_value",b"bool_value","distribution_value",b"distribution_value","double_value",b"double_value","int64_value",b"int64_value","string_value",b"string_value","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bool_value",b"bool_value","distribution_value",b"distribution_value","double_value",b"double_value","int64_value",b"int64_value","string_value",b"string_value","value",b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["value",b"value"]) -> typing.Optional[typing_extensions.Literal["bool_value","int64_value","double_value","string_value","distribution_value"]]: ...
global___TypedValue = TypedValue
