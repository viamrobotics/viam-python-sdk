"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.datacatalog.v1beta1.policytagmanager_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class SerializedTaxonomy(google.protobuf.message.Message):
    """Message capturing a taxonomy and its policy tag hierarchy as a nested proto.
    Used for taxonomy import/export and mutation.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    POLICY_TAGS_FIELD_NUMBER: builtins.int
    display_name: typing.Text = ...
    """Required. Display name of the taxonomy. Max 200 bytes when encoded in UTF-8."""

    description: typing.Text = ...
    """Description of the serialized taxonomy. The length of the
    description is limited to 2000 bytes when encoded in UTF-8. If not set,
    defaults to an empty description.
    """

    @property
    def policy_tags(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SerializedPolicyTag]:
        """Top level policy tags associated with the taxonomy if any."""
        pass
    def __init__(self,
        *,
        display_name : typing.Text = ...,
        description : typing.Text = ...,
        policy_tags : typing.Optional[typing.Iterable[global___SerializedPolicyTag]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","display_name",b"display_name","policy_tags",b"policy_tags"]) -> None: ...
global___SerializedTaxonomy = SerializedTaxonomy

class SerializedPolicyTag(google.protobuf.message.Message):
    """Message representing one policy tag when exported as a nested proto."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    CHILD_POLICY_TAGS_FIELD_NUMBER: builtins.int
    display_name: typing.Text = ...
    """Required. Display name of the policy tag. Max 200 bytes when encoded in UTF-8."""

    description: typing.Text = ...
    """Description of the serialized policy tag. The length of the
    description is limited to 2000 bytes when encoded in UTF-8. If not set,
    defaults to an empty description.
    """

    @property
    def child_policy_tags(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SerializedPolicyTag]:
        """Children of the policy tag if any."""
        pass
    def __init__(self,
        *,
        display_name : typing.Text = ...,
        description : typing.Text = ...,
        child_policy_tags : typing.Optional[typing.Iterable[global___SerializedPolicyTag]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["child_policy_tags",b"child_policy_tags","description",b"description","display_name",b"display_name"]) -> None: ...
global___SerializedPolicyTag = SerializedPolicyTag

class ImportTaxonomiesRequest(google.protobuf.message.Message):
    """Request message for
    [ImportTaxonomies][google.cloud.datacatalog.v1beta1.PolicyTagManagerSerialization.ImportTaxonomies].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    INLINE_SOURCE_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. Resource name of project that the newly created taxonomies will
    belong to.
    """

    @property
    def inline_source(self) -> global___InlineSource:
        """Inline source used for taxonomies import"""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        inline_source : typing.Optional[global___InlineSource] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["inline_source",b"inline_source","source",b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["inline_source",b"inline_source","parent",b"parent","source",b"source"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source",b"source"]) -> typing.Optional[typing_extensions.Literal["inline_source"]]: ...
global___ImportTaxonomiesRequest = ImportTaxonomiesRequest

class InlineSource(google.protobuf.message.Message):
    """Inline source used for taxonomies import."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TAXONOMIES_FIELD_NUMBER: builtins.int
    @property
    def taxonomies(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SerializedTaxonomy]:
        """Required. Taxonomies to be imported."""
        pass
    def __init__(self,
        *,
        taxonomies : typing.Optional[typing.Iterable[global___SerializedTaxonomy]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["taxonomies",b"taxonomies"]) -> None: ...
global___InlineSource = InlineSource

class ImportTaxonomiesResponse(google.protobuf.message.Message):
    """Response message for
    [ImportTaxonomies][google.cloud.datacatalog.v1beta1.PolicyTagManagerSerialization.ImportTaxonomies].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TAXONOMIES_FIELD_NUMBER: builtins.int
    @property
    def taxonomies(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.datacatalog.v1beta1.policytagmanager_pb2.Taxonomy]:
        """Taxonomies that were imported."""
        pass
    def __init__(self,
        *,
        taxonomies : typing.Optional[typing.Iterable[google.cloud.datacatalog.v1beta1.policytagmanager_pb2.Taxonomy]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["taxonomies",b"taxonomies"]) -> None: ...
global___ImportTaxonomiesResponse = ImportTaxonomiesResponse

class ExportTaxonomiesRequest(google.protobuf.message.Message):
    """Request message for
    [ExportTaxonomies][google.cloud.datacatalog.v1beta1.PolicyTagManagerSerialization.ExportTaxonomies].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    TAXONOMIES_FIELD_NUMBER: builtins.int
    SERIALIZED_TAXONOMIES_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. Resource name of the project that taxonomies to be exported
    will share.
    """

    @property
    def taxonomies(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Required. Resource names of the taxonomies to be exported."""
        pass
    serialized_taxonomies: builtins.bool = ...
    """Export taxonomies as serialized taxonomies."""

    def __init__(self,
        *,
        parent : typing.Text = ...,
        taxonomies : typing.Optional[typing.Iterable[typing.Text]] = ...,
        serialized_taxonomies : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["destination",b"destination","serialized_taxonomies",b"serialized_taxonomies"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["destination",b"destination","parent",b"parent","serialized_taxonomies",b"serialized_taxonomies","taxonomies",b"taxonomies"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["destination",b"destination"]) -> typing.Optional[typing_extensions.Literal["serialized_taxonomies"]]: ...
global___ExportTaxonomiesRequest = ExportTaxonomiesRequest

class ExportTaxonomiesResponse(google.protobuf.message.Message):
    """Response message for
    [ExportTaxonomies][google.cloud.datacatalog.v1beta1.PolicyTagManagerSerialization.ExportTaxonomies].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TAXONOMIES_FIELD_NUMBER: builtins.int
    @property
    def taxonomies(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SerializedTaxonomy]:
        """List of taxonomies and policy tags in a tree structure."""
        pass
    def __init__(self,
        *,
        taxonomies : typing.Optional[typing.Iterable[global___SerializedTaxonomy]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["taxonomies",b"taxonomies"]) -> None: ...
global___ExportTaxonomiesResponse = ExportTaxonomiesResponse
