"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Taxonomy(google.protobuf.message.Message):
    """A taxonomy is a collection of policy tags that classify data along a common
    axis. For instance a data *sensitivity* taxonomy could contain policy tags
    denoting PII such as age, zipcode, and SSN. A data *origin* taxonomy could
    contain policy tags to distinguish user data, employee data, partner data,
    public data.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _PolicyType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _PolicyTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_PolicyType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        POLICY_TYPE_UNSPECIFIED: Taxonomy.PolicyType.ValueType = ...  # 0
        """Unspecified policy type."""

        FINE_GRAINED_ACCESS_CONTROL: Taxonomy.PolicyType.ValueType = ...  # 1
        """Fine grained access control policy, which enables access control on
        tagged resources.
        """

    class PolicyType(_PolicyType, metaclass=_PolicyTypeEnumTypeWrapper):
        """Defines policy types where policy tag can be used for."""
        pass

    POLICY_TYPE_UNSPECIFIED: Taxonomy.PolicyType.ValueType = ...  # 0
    """Unspecified policy type."""

    FINE_GRAINED_ACCESS_CONTROL: Taxonomy.PolicyType.ValueType = ...  # 1
    """Fine grained access control policy, which enables access control on
    tagged resources.
    """


    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    ACTIVATED_POLICY_TYPES_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. Resource name of this taxonomy, whose format is:
    "projects/{project_number}/locations/{location_id}/taxonomies/{id}".
    """

    display_name: typing.Text = ...
    """Required. User defined name of this taxonomy. It must: contain only unicode letters,
    numbers, underscores, dashes and spaces; not start or end with spaces; and
    be at most 200 bytes long when encoded in UTF-8.
    """

    description: typing.Text = ...
    """Optional. Description of this taxonomy. It must: contain only unicode characters,
    tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes
    long when encoded in UTF-8. If not set, defaults to an empty description.
    """

    @property
    def activated_policy_types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___Taxonomy.PolicyType.ValueType]:
        """Optional. A list of policy types that are activated for this taxonomy. If not set,
        defaults to an empty list.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        description : typing.Text = ...,
        activated_policy_types : typing.Optional[typing.Iterable[global___Taxonomy.PolicyType.ValueType]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["activated_policy_types",b"activated_policy_types","description",b"description","display_name",b"display_name","name",b"name"]) -> None: ...
global___Taxonomy = Taxonomy

class PolicyTag(google.protobuf.message.Message):
    """Denotes one policy tag in a taxonomy (e.g. ssn). Policy Tags can be defined
    in a hierarchy. For example, consider the following hierarchy:
    Geolocation -&gt; (LatLong, City, ZipCode). PolicyTag "Geolocation"
    contains three child policy tags: "LatLong", "City", and "ZipCode".
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    PARENT_POLICY_TAG_FIELD_NUMBER: builtins.int
    CHILD_POLICY_TAGS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. Resource name of this policy tag, whose format is:
    "projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{id}".
    """

    display_name: typing.Text = ...
    """Required. User defined name of this policy tag. It must: be unique within the parent
    taxonomy; contain only unicode letters, numbers, underscores, dashes and
    spaces; not start or end with spaces; and be at most 200 bytes long when
    encoded in UTF-8.
    """

    description: typing.Text = ...
    """Description of this policy tag. It must: contain only unicode characters,
    tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes
    long when encoded in UTF-8. If not set, defaults to an empty description.
    If not set, defaults to an empty description.
    """

    parent_policy_tag: typing.Text = ...
    """Resource name of this policy tag's parent policy tag (e.g. for the
    "LatLong" policy tag in the example above, this field contains the
    resource name of the "Geolocation" policy tag). If empty, it means this
    policy tag is a top level policy tag (e.g. this field is empty for the
    "Geolocation" policy tag in the example above). If not set, defaults to an
    empty string.
    """

    @property
    def child_policy_tags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Output only. Resource names of child policy tags of this policy tag."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        description : typing.Text = ...,
        parent_policy_tag : typing.Text = ...,
        child_policy_tags : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["child_policy_tags",b"child_policy_tags","description",b"description","display_name",b"display_name","name",b"name","parent_policy_tag",b"parent_policy_tag"]) -> None: ...
global___PolicyTag = PolicyTag

class CreateTaxonomyRequest(google.protobuf.message.Message):
    """Request message for
    [CreateTaxonomy][google.cloud.datacatalog.v1beta1.PolicyTagManager.CreateTaxonomy].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    TAXONOMY_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. Resource name of the project that the taxonomy will belong to."""

    @property
    def taxonomy(self) -> global___Taxonomy:
        """The taxonomy to be created."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        taxonomy : typing.Optional[global___Taxonomy] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["taxonomy",b"taxonomy"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent",b"parent","taxonomy",b"taxonomy"]) -> None: ...
global___CreateTaxonomyRequest = CreateTaxonomyRequest

class DeleteTaxonomyRequest(google.protobuf.message.Message):
    """Request message for
    [DeleteTaxonomy][google.cloud.datacatalog.v1beta1.PolicyTagManager.DeleteTaxonomy].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Resource name of the taxonomy to be deleted. All policy tags in
    this taxonomy will also be deleted.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteTaxonomyRequest = DeleteTaxonomyRequest

class UpdateTaxonomyRequest(google.protobuf.message.Message):
    """Request message for
    [UpdateTaxonomy][google.cloud.datacatalog.v1beta1.PolicyTagManager.UpdateTaxonomy].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TAXONOMY_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def taxonomy(self) -> global___Taxonomy:
        """The taxonomy to update. Only description, display_name, and activated
        policy types can be updated.
        """
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """The update mask applies to the resource. For the `FieldMask` definition,
        see
        https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
        If not set, defaults to all of the fields that are allowed to update.
        """
        pass
    def __init__(self,
        *,
        taxonomy : typing.Optional[global___Taxonomy] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["taxonomy",b"taxonomy","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["taxonomy",b"taxonomy","update_mask",b"update_mask"]) -> None: ...
global___UpdateTaxonomyRequest = UpdateTaxonomyRequest

class ListTaxonomiesRequest(google.protobuf.message.Message):
    """Request message for
    [ListTaxonomies][google.cloud.datacatalog.v1beta1.PolicyTagManager.ListTaxonomies].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. Resource name of the project to list the taxonomies of."""

    page_size: builtins.int = ...
    """The maximum number of items to return. Must be a value between 1 and 1000.
    If not set, defaults to 50.
    """

    page_token: typing.Text = ...
    """The next_page_token value returned from a previous list request, if any. If
    not set, defaults to an empty string.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListTaxonomiesRequest = ListTaxonomiesRequest

class ListTaxonomiesResponse(google.protobuf.message.Message):
    """Response message for
    [ListTaxonomies][google.cloud.datacatalog.v1beta1.PolicyTagManager.ListTaxonomies].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TAXONOMIES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def taxonomies(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Taxonomy]:
        """Taxonomies that the project contains."""
        pass
    next_page_token: typing.Text = ...
    """Token used to retrieve the next page of results, or empty if there are no
    more results in the list.
    """

    def __init__(self,
        *,
        taxonomies : typing.Optional[typing.Iterable[global___Taxonomy]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","taxonomies",b"taxonomies"]) -> None: ...
global___ListTaxonomiesResponse = ListTaxonomiesResponse

class GetTaxonomyRequest(google.protobuf.message.Message):
    """Request message for
    [GetTaxonomy][google.cloud.datacatalog.v1beta1.PolicyTagManager.GetTaxonomy].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Resource name of the requested taxonomy."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetTaxonomyRequest = GetTaxonomyRequest

class CreatePolicyTagRequest(google.protobuf.message.Message):
    """Request message for
    [CreatePolicyTag][google.cloud.datacatalog.v1beta1.PolicyTagManager.CreatePolicyTag].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    POLICY_TAG_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. Resource name of the taxonomy that the policy tag will belong to."""

    @property
    def policy_tag(self) -> global___PolicyTag:
        """The policy tag to be created."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        policy_tag : typing.Optional[global___PolicyTag] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["policy_tag",b"policy_tag"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent",b"parent","policy_tag",b"policy_tag"]) -> None: ...
global___CreatePolicyTagRequest = CreatePolicyTagRequest

class DeletePolicyTagRequest(google.protobuf.message.Message):
    """Request message for
    [DeletePolicyTag][google.cloud.datacatalog.v1beta1.PolicyTagManager.DeletePolicyTag].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Resource name of the policy tag to be deleted. All of its descendant
    policy tags will also be deleted.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeletePolicyTagRequest = DeletePolicyTagRequest

class UpdatePolicyTagRequest(google.protobuf.message.Message):
    """Request message for
    [UpdatePolicyTag][google.cloud.datacatalog.v1beta1.PolicyTagManager.UpdatePolicyTag].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    POLICY_TAG_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def policy_tag(self) -> global___PolicyTag:
        """The policy tag to update. Only the description, display_name, and
        parent_policy_tag fields can be updated.
        """
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """The update mask applies to the resource. Only display_name, description and
        parent_policy_tag can be updated and thus can be listed in the mask. If
        update_mask is not provided, all allowed fields (i.e. display_name,
        description and parent) will be updated. For more information including the
        `FieldMask` definition, see
        https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
        If not set, defaults to all of the fields that are allowed to update.
        """
        pass
    def __init__(self,
        *,
        policy_tag : typing.Optional[global___PolicyTag] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["policy_tag",b"policy_tag","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["policy_tag",b"policy_tag","update_mask",b"update_mask"]) -> None: ...
global___UpdatePolicyTagRequest = UpdatePolicyTagRequest

class ListPolicyTagsRequest(google.protobuf.message.Message):
    """Request message for
    [ListPolicyTags][google.cloud.datacatalog.v1beta1.PolicyTagManager.ListPolicyTags].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. Resource name of the taxonomy to list the policy tags of."""

    page_size: builtins.int = ...
    """The maximum number of items to return. Must be a value between 1 and 1000.
    If not set, defaults to 50.
    """

    page_token: typing.Text = ...
    """The next_page_token value returned from a previous List request, if any. If
    not set, defaults to an empty string.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListPolicyTagsRequest = ListPolicyTagsRequest

class ListPolicyTagsResponse(google.protobuf.message.Message):
    """Response message for
    [ListPolicyTags][google.cloud.datacatalog.v1beta1.PolicyTagManager.ListPolicyTags].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    POLICY_TAGS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def policy_tags(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PolicyTag]:
        """The policy tags that are in the requested taxonomy."""
        pass
    next_page_token: typing.Text = ...
    """Token used to retrieve the next page of results, or empty if there are no
    more results in the list.
    """

    def __init__(self,
        *,
        policy_tags : typing.Optional[typing.Iterable[global___PolicyTag]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","policy_tags",b"policy_tags"]) -> None: ...
global___ListPolicyTagsResponse = ListPolicyTagsResponse

class GetPolicyTagRequest(google.protobuf.message.Message):
    """Request message for
    [GetPolicyTag][google.cloud.datacatalog.v1beta1.PolicyTagManager.GetPolicyTag].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Resource name of the requested policy tag."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetPolicyTagRequest = GetPolicyTagRequest
