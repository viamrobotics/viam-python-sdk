"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.datacatalog.v1.bigquery_pb2
import google.cloud.datacatalog.v1.common_pb2
import google.cloud.datacatalog.v1.data_source_pb2
import google.cloud.datacatalog.v1.gcs_fileset_spec_pb2
import google.cloud.datacatalog.v1.schema_pb2
import google.cloud.datacatalog.v1.search_pb2
import google.cloud.datacatalog.v1.table_spec_pb2
import google.cloud.datacatalog.v1.tags_pb2
import google.cloud.datacatalog.v1.timestamps_pb2
import google.cloud.datacatalog.v1.usage_pb2
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _EntryType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _EntryTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_EntryType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    ENTRY_TYPE_UNSPECIFIED: EntryType.ValueType = ...  # 0
    """Default unknown type."""

    TABLE: EntryType.ValueType = ...  # 2
    """Output only. The entry type that has a GoogleSQL schema, including
    logical views.
    """

    MODEL: EntryType.ValueType = ...  # 5
    """Output only. The type of models.

    For more information, see [Supported models in BigQuery ML]
    (https://cloud.google.com/bigquery-ml/docs/introduction#supported_models_in).
    """

    DATA_STREAM: EntryType.ValueType = ...  # 3
    """An entry type for streaming entries. For example, a Pub/Sub topic."""

    FILESET: EntryType.ValueType = ...  # 4
    """An entry type for a set of files or objects. For example, a
    Cloud Storage fileset.
    """

    CLUSTER: EntryType.ValueType = ...  # 6
    """A group of servers that work together. For example, a Kafka cluster."""

    DATABASE: EntryType.ValueType = ...  # 7
    """A database."""

    DATA_SOURCE_CONNECTION: EntryType.ValueType = ...  # 8
    """Output only. Connection to a data source. For example, a BigQuery
    connection.
    """

    ROUTINE: EntryType.ValueType = ...  # 9
    """Output only. Routine, for example, a BigQuery routine."""

    SERVICE: EntryType.ValueType = ...  # 14
    """A service, for example, a Dataproc Metastore service."""

class EntryType(_EntryType, metaclass=_EntryTypeEnumTypeWrapper):
    """The enum field that lists all the types of entry resources in Data
    Catalog. For example, a BigQuery table entry has the `TABLE` type.
    """
    pass

ENTRY_TYPE_UNSPECIFIED: EntryType.ValueType = ...  # 0
"""Default unknown type."""

TABLE: EntryType.ValueType = ...  # 2
"""Output only. The entry type that has a GoogleSQL schema, including
logical views.
"""

MODEL: EntryType.ValueType = ...  # 5
"""Output only. The type of models.

For more information, see [Supported models in BigQuery ML]
(https://cloud.google.com/bigquery-ml/docs/introduction#supported_models_in).
"""

DATA_STREAM: EntryType.ValueType = ...  # 3
"""An entry type for streaming entries. For example, a Pub/Sub topic."""

FILESET: EntryType.ValueType = ...  # 4
"""An entry type for a set of files or objects. For example, a
Cloud Storage fileset.
"""

CLUSTER: EntryType.ValueType = ...  # 6
"""A group of servers that work together. For example, a Kafka cluster."""

DATABASE: EntryType.ValueType = ...  # 7
"""A database."""

DATA_SOURCE_CONNECTION: EntryType.ValueType = ...  # 8
"""Output only. Connection to a data source. For example, a BigQuery
connection.
"""

ROUTINE: EntryType.ValueType = ...  # 9
"""Output only. Routine, for example, a BigQuery routine."""

SERVICE: EntryType.ValueType = ...  # 14
"""A service, for example, a Dataproc Metastore service."""

global___EntryType = EntryType


class SearchCatalogRequest(google.protobuf.message.Message):
    """Request message for
    [SearchCatalog][google.cloud.datacatalog.v1.DataCatalog.SearchCatalog].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Scope(google.protobuf.message.Message):
        """The criteria that select the subspace used for query matching."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        INCLUDE_ORG_IDS_FIELD_NUMBER: builtins.int
        INCLUDE_PROJECT_IDS_FIELD_NUMBER: builtins.int
        INCLUDE_GCP_PUBLIC_DATASETS_FIELD_NUMBER: builtins.int
        RESTRICTED_LOCATIONS_FIELD_NUMBER: builtins.int
        INCLUDE_PUBLIC_TAG_TEMPLATES_FIELD_NUMBER: builtins.int
        @property
        def include_org_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """The list of organization IDs to search within.

            To find your organization ID, follow the steps from
            [Creating and managing organizations]
            (/resource-manager/docs/creating-managing-organization).
            """
            pass
        @property
        def include_project_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """The list of project IDs to search within.

            For more information on the distinction between project names, IDs, and
            numbers, see [Projects](/docs/overview/#projects).
            """
            pass
        include_gcp_public_datasets: builtins.bool = ...
        """If `true`, include Google Cloud Platform (GCP) public datasets in
        search results. By default, they are excluded.

        See [Google Cloud Public Datasets](/public-datasets) for more
        information.
        """

        @property
        def restricted_locations(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """Optional. The list of locations to search within. If empty, all locations are
            searched.

            Returns an error if any location in the list isn't one of the [Supported
            regions](https://cloud.google.com/data-catalog/docs/concepts/regions#supported_regions).

            If a location is unreachable, its name is returned in the
            `SearchCatalogResponse.unreachable` field. To get additional information
            on the error, repeat the search request and set the location name as the
            value of this parameter.
            """
            pass
        include_public_tag_templates: builtins.bool = ...
        """Optional. If `true`, include [public tag
        templates][google.cloud.datacatalog.v1.TagTemplate.is_publicly_readable]
        in the search results. By default, they are included only if you have
        explicit permissions on them to view them. For example, if you are the
        owner.

        Other scope fields, for example, `include_org_ids`,
        still restrict the returned public tag templates and at least one of
        them is required.
        """

        def __init__(self,
            *,
            include_org_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
            include_project_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
            include_gcp_public_datasets : builtins.bool = ...,
            restricted_locations : typing.Optional[typing.Iterable[typing.Text]] = ...,
            include_public_tag_templates : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["include_gcp_public_datasets",b"include_gcp_public_datasets","include_org_ids",b"include_org_ids","include_project_ids",b"include_project_ids","include_public_tag_templates",b"include_public_tag_templates","restricted_locations",b"restricted_locations"]) -> None: ...

    SCOPE_FIELD_NUMBER: builtins.int
    QUERY_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    @property
    def scope(self) -> global___SearchCatalogRequest.Scope:
        """Required. The scope of this search request.

        The `scope` is invalid if `include_org_ids`, `include_project_ids` are
        empty AND `include_gcp_public_datasets` is set to `false`. In this case,
        the request returns an error.
        """
        pass
    query: typing.Text = ...
    """Optional. The query string with a minimum of 3 characters and specific syntax.
    For more information, see
    [Data Catalog search
    syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference).

    An empty query string returns all data assets (in the specified scope)
    that you have access to.

    A query string can be a simple `xyz` or qualified by predicates:

    * `name:x`
    * `column:y`
    * `description:z`
    """

    page_size: builtins.int = ...
    """Number of results to return in a single search page.

    Can't be negative or 0, defaults to 10 in this case.
    The maximum number is 1000. If exceeded, throws an "invalid argument"
    exception.
    """

    page_token: typing.Text = ...
    """Optional. Pagination token that, if specified, returns the next page of search
    results. If empty, returns the first page.

    This token is returned in the [SearchCatalogResponse.next_page_token][google.cloud.datacatalog.v1.SearchCatalogResponse.next_page_token]
    field of the response to a previous
    [SearchCatalogRequest][google.cloud.datacatalog.v1.DataCatalog.SearchCatalog]
    call.
    """

    order_by: typing.Text = ...
    """Specifies the order of results.

    Currently supported case-sensitive values are:

    * `relevance` that can only be descending
    * `last_modified_timestamp [asc|desc]` with descending (`desc`) as default

    If this parameter is omitted, it defaults to the descending `relevance`.
    """

    def __init__(self,
        *,
        scope : typing.Optional[global___SearchCatalogRequest.Scope] = ...,
        query : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        order_by : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["scope",b"scope"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["order_by",b"order_by","page_size",b"page_size","page_token",b"page_token","query",b"query","scope",b"scope"]) -> None: ...
global___SearchCatalogRequest = SearchCatalogRequest

class SearchCatalogResponse(google.protobuf.message.Message):
    """Response message for
    [SearchCatalog][google.cloud.datacatalog.v1.DataCatalog.SearchCatalog].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESULTS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    UNREACHABLE_FIELD_NUMBER: builtins.int
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.datacatalog.v1.search_pb2.SearchCatalogResult]:
        """Search results."""
        pass
    next_page_token: typing.Text = ...
    """Pagination token that can be used in subsequent calls to retrieve the next
    page of results.
    """

    @property
    def unreachable(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Unreachable locations. Search results don't include data from those
        locations.

        To get additional information on an error, repeat the search request and
        restrict it to specific locations by setting the
        `SearchCatalogRequest.scope.restricted_locations` parameter.
        """
        pass
    def __init__(self,
        *,
        results : typing.Optional[typing.Iterable[google.cloud.datacatalog.v1.search_pb2.SearchCatalogResult]] = ...,
        next_page_token : typing.Text = ...,
        unreachable : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","results",b"results","unreachable",b"unreachable"]) -> None: ...
global___SearchCatalogResponse = SearchCatalogResponse

class CreateEntryGroupRequest(google.protobuf.message.Message):
    """Request message for
    [CreateEntryGroup][google.cloud.datacatalog.v1.DataCatalog.CreateEntryGroup].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    ENTRY_GROUP_ID_FIELD_NUMBER: builtins.int
    ENTRY_GROUP_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The names of the project and location that the new entry group belongs to.

    Note: The entry group itself and its child resources might not be
    stored in the location specified in its name.
    """

    entry_group_id: typing.Text = ...
    """Required. The ID of the entry group to create.

    The ID must contain only letters (a-z, A-Z), numbers (0-9),
    underscores (_), and must start with a letter or underscore.
    The maximum size is 64 bytes when encoded in UTF-8.
    """

    @property
    def entry_group(self) -> global___EntryGroup:
        """The entry group to create. Defaults to empty."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        entry_group_id : typing.Text = ...,
        entry_group : typing.Optional[global___EntryGroup] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entry_group",b"entry_group"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entry_group",b"entry_group","entry_group_id",b"entry_group_id","parent",b"parent"]) -> None: ...
global___CreateEntryGroupRequest = CreateEntryGroupRequest

class UpdateEntryGroupRequest(google.protobuf.message.Message):
    """Request message for
    [UpdateEntryGroup][google.cloud.datacatalog.v1.DataCatalog.UpdateEntryGroup].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ENTRY_GROUP_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def entry_group(self) -> global___EntryGroup:
        """Required. Updates for the entry group. The `name` field must be set."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Names of fields whose values to overwrite on an entry group.

        If this parameter is absent or empty, all modifiable fields
        are overwritten. If such fields are non-required and omitted in the
        request body, their values are emptied.
        """
        pass
    def __init__(self,
        *,
        entry_group : typing.Optional[global___EntryGroup] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entry_group",b"entry_group","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entry_group",b"entry_group","update_mask",b"update_mask"]) -> None: ...
global___UpdateEntryGroupRequest = UpdateEntryGroupRequest

class GetEntryGroupRequest(google.protobuf.message.Message):
    """Request message for
    [GetEntryGroup][google.cloud.datacatalog.v1.DataCatalog.GetEntryGroup].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    READ_MASK_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the entry group to get."""

    @property
    def read_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """The fields to return. If empty or omitted, all fields are returned."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        read_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["read_mask",b"read_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","read_mask",b"read_mask"]) -> None: ...
global___GetEntryGroupRequest = GetEntryGroupRequest

class DeleteEntryGroupRequest(google.protobuf.message.Message):
    """Request message for
    [DeleteEntryGroup][google.cloud.datacatalog.v1.DataCatalog.DeleteEntryGroup].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    FORCE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the entry group to delete."""

    force: builtins.bool = ...
    """Optional. If true, deletes all entries in the entry group."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        force : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["force",b"force","name",b"name"]) -> None: ...
global___DeleteEntryGroupRequest = DeleteEntryGroupRequest

class ListEntryGroupsRequest(google.protobuf.message.Message):
    """Request message for
    [ListEntryGroups][google.cloud.datacatalog.v1.DataCatalog.ListEntryGroups].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The name of the location that contains the entry groups to list.

    Can be provided as a URL.
    """

    page_size: builtins.int = ...
    """Optional. The maximum number of items to return.

    Default is 10. Maximum limit is 1000.
    Throws an invalid argument if `page_size` is greater than 1000.
    """

    page_token: typing.Text = ...
    """Optional. Pagination token that specifies the next page to return.
    If empty, returns the first page.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListEntryGroupsRequest = ListEntryGroupsRequest

class ListEntryGroupsResponse(google.protobuf.message.Message):
    """Response message for
    [ListEntryGroups][google.cloud.datacatalog.v1.DataCatalog.ListEntryGroups].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ENTRY_GROUPS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def entry_groups(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EntryGroup]:
        """Entry group details."""
        pass
    next_page_token: typing.Text = ...
    """Pagination token to specify in the next call to retrieve the next page of
    results. Empty if there are no more items.
    """

    def __init__(self,
        *,
        entry_groups : typing.Optional[typing.Iterable[global___EntryGroup]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["entry_groups",b"entry_groups","next_page_token",b"next_page_token"]) -> None: ...
global___ListEntryGroupsResponse = ListEntryGroupsResponse

class CreateEntryRequest(google.protobuf.message.Message):
    """Request message for
    [CreateEntry][google.cloud.datacatalog.v1.DataCatalog.CreateEntry].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    ENTRY_ID_FIELD_NUMBER: builtins.int
    ENTRY_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The name of the entry group this entry belongs to.

    Note: The entry itself and its child resources might not be stored in
    the location specified in its name.
    """

    entry_id: typing.Text = ...
    """Required. The ID of the entry to create.

    The ID must contain only letters (a-z, A-Z), numbers (0-9),
    and underscores (_).
    The maximum size is 64 bytes when encoded in UTF-8.
    """

    @property
    def entry(self) -> global___Entry:
        """Required. The entry to create."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        entry_id : typing.Text = ...,
        entry : typing.Optional[global___Entry] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entry",b"entry"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entry",b"entry","entry_id",b"entry_id","parent",b"parent"]) -> None: ...
global___CreateEntryRequest = CreateEntryRequest

class UpdateEntryRequest(google.protobuf.message.Message):
    """Request message for
    [UpdateEntry][google.cloud.datacatalog.v1.DataCatalog.UpdateEntry].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ENTRY_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def entry(self) -> global___Entry:
        """Required. Updates for the entry. The `name` field must be set."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Names of fields whose values to overwrite on an entry.

        If this parameter is absent or empty, all modifiable fields
        are overwritten. If such fields are non-required and omitted in the
        request body, their values are emptied.

        You can modify only the fields listed below.

        For entries with type `DATA_STREAM`:

        * `schema`

        For entries with type `FILESET`:

        * `schema`
        * `display_name`
        * `description`
        * `gcs_fileset_spec`
        * `gcs_fileset_spec.file_patterns`

        For entries with `user_specified_type`:

        * `schema`
        * `display_name`
        * `description`
        * `user_specified_type`
        * `user_specified_system`
        * `linked_resource`
        * `source_system_timestamps`
        """
        pass
    def __init__(self,
        *,
        entry : typing.Optional[global___Entry] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entry",b"entry","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["entry",b"entry","update_mask",b"update_mask"]) -> None: ...
global___UpdateEntryRequest = UpdateEntryRequest

class DeleteEntryRequest(google.protobuf.message.Message):
    """Request message for
    [DeleteEntry][google.cloud.datacatalog.v1.DataCatalog.DeleteEntry].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the entry to delete."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteEntryRequest = DeleteEntryRequest

class GetEntryRequest(google.protobuf.message.Message):
    """Request message for
    [GetEntry][google.cloud.datacatalog.v1.DataCatalog.GetEntry].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the entry to get."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetEntryRequest = GetEntryRequest

class LookupEntryRequest(google.protobuf.message.Message):
    """Request message for
    [LookupEntry][google.cloud.datacatalog.v1.DataCatalog.LookupEntry].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    LINKED_RESOURCE_FIELD_NUMBER: builtins.int
    SQL_RESOURCE_FIELD_NUMBER: builtins.int
    FULLY_QUALIFIED_NAME_FIELD_NUMBER: builtins.int
    linked_resource: typing.Text = ...
    """The full name of the Google Cloud Platform resource the Data Catalog
    entry represents. For more information, see [Full Resource Name]
    (https://cloud.google.com/apis/design/resource_names#full_resource_name).

    Full names are case-sensitive. For example:

     * `//bigquery.googleapis.com/projects/{PROJECT_ID}/datasets/{DATASET_ID}/tables/{TABLE_ID}`
     * `//pubsub.googleapis.com/projects/{PROJECT_ID}/topics/{TOPIC_ID}`
    """

    sql_resource: typing.Text = ...
    """The SQL name of the entry. SQL names are case-sensitive.

    Examples:

    * `pubsub.topic.{PROJECT_ID}.{TOPIC_ID}`
    * `pubsub.topic.{PROJECT_ID}.`\\``{TOPIC.ID.SEPARATED.WITH.DOTS}`\\`
    * `bigquery.table.{PROJECT_ID}.{DATASET_ID}.{TABLE_ID}`
    * `bigquery.dataset.{PROJECT_ID}.{DATASET_ID}`
    * `datacatalog.entry.{PROJECT_ID}.{LOCATION_ID}.{ENTRY_GROUP_ID}.{ENTRY_ID}`

    Identifiers (`*_ID`) should comply with the
    [Lexical structure in Standard SQL]
    (https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical).
    """

    fully_qualified_name: typing.Text = ...
    """Fully qualified name (FQN) of the resource.

    FQNs take two forms:

    * For non-regionalized resources:

      `{SYSTEM}:{PROJECT}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}`

    * For regionalized resources:

      `{SYSTEM}:{PROJECT}.{LOCATION_ID}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}`

    Example for a DPMS table:

    `dataproc_metastore:{PROJECT_ID}.{LOCATION_ID}.{INSTANCE_ID}.{DATABASE_ID}.{TABLE_ID}`
    """

    def __init__(self,
        *,
        linked_resource : typing.Text = ...,
        sql_resource : typing.Text = ...,
        fully_qualified_name : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["fully_qualified_name",b"fully_qualified_name","linked_resource",b"linked_resource","sql_resource",b"sql_resource","target_name",b"target_name"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["fully_qualified_name",b"fully_qualified_name","linked_resource",b"linked_resource","sql_resource",b"sql_resource","target_name",b"target_name"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["target_name",b"target_name"]) -> typing.Optional[typing_extensions.Literal["linked_resource","sql_resource","fully_qualified_name"]]: ...
global___LookupEntryRequest = LookupEntryRequest

class Entry(google.protobuf.message.Message):
    """Entry metadata.
    A Data Catalog entry represents another resource in Google
    Cloud Platform (such as a BigQuery dataset or a Pub/Sub topic) or
    outside of it. You can use the `linked_resource` field
    in the entry resource to refer to the original resource ID of the source
    system.

    An entry resource contains resource details, for example, its schema.
    Additionally, you can attach flexible metadata to an entry in the form of a
    [Tag][google.cloud.datacatalog.v1.Tag].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    LINKED_RESOURCE_FIELD_NUMBER: builtins.int
    FULLY_QUALIFIED_NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    USER_SPECIFIED_TYPE_FIELD_NUMBER: builtins.int
    INTEGRATED_SYSTEM_FIELD_NUMBER: builtins.int
    USER_SPECIFIED_SYSTEM_FIELD_NUMBER: builtins.int
    GCS_FILESET_SPEC_FIELD_NUMBER: builtins.int
    BIGQUERY_TABLE_SPEC_FIELD_NUMBER: builtins.int
    BIGQUERY_DATE_SHARDED_SPEC_FIELD_NUMBER: builtins.int
    DATABASE_TABLE_SPEC_FIELD_NUMBER: builtins.int
    DATA_SOURCE_CONNECTION_SPEC_FIELD_NUMBER: builtins.int
    ROUTINE_SPEC_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    SCHEMA_FIELD_NUMBER: builtins.int
    SOURCE_SYSTEM_TIMESTAMPS_FIELD_NUMBER: builtins.int
    USAGE_SIGNAL_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    DATA_SOURCE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. The resource name of an entry in URL format.

    Note: The entry itself and its child resources might not be
    stored in the location specified in its name.
    """

    linked_resource: typing.Text = ...
    """The resource this metadata entry refers to.

    For Google Cloud Platform resources, `linked_resource` is the
    [Full Resource Name]
    (https://cloud.google.com/apis/design/resource_names#full_resource_name).
    For example, the `linked_resource` for a table resource from BigQuery is:

    `//bigquery.googleapis.com/projects/{PROJECT_ID}/datasets/{DATASET_ID}/tables/{TABLE_ID}`

    Output only when the entry is one of the types in the `EntryType` enum.

    For entries with a `user_specified_type`, this field is optional and
    defaults to an empty string.

    The resource string must contain only letters (a-z, A-Z), numbers (0-9),
    underscores (_), periods (.), colons (:), slashes (/), dashes (-),
    and hashes (#).
    The maximum size is 200 bytes when encoded in UTF-8.
    """

    fully_qualified_name: typing.Text = ...
    """Fully qualified name (FQN) of the resource. Set automatically for entries
    representing resources from synced systems. Settable only during creation
    and read-only afterwards. Can be used for search and lookup of the entries.



    FQNs take two forms:

    * For non-regionalized resources:

      `{SYSTEM}:{PROJECT}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}`

    * For regionalized resources:

      `{SYSTEM}:{PROJECT}.{LOCATION_ID}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}`

    Example for a DPMS table:

    `dataproc_metastore:{PROJECT_ID}.{LOCATION_ID}.{INSTANCE_ID}.{DATABASE_ID}.{TABLE_ID}`
    """

    type: global___EntryType.ValueType = ...
    """The type of the entry.
    Only used for entries with types listed in the `EntryType` enum.

    Currently, only `FILESET` enum value is allowed. All other entries
    created in Data Catalog must use the `user_specified_type`.
    """

    user_specified_type: typing.Text = ...
    """Custom entry type that doesn't match any of the values allowed for input
    and listed in the `EntryType` enum.

    When creating an entry, first check the type values in the enum.
    If there are no appropriate types for the new entry,
    provide a custom value, for example, `my_special_type`.

    The `user_specified_type` string has the following limitations:

    * Is case insensitive.
    * Must begin with a letter or underscore.
    * Can only contain letters, numbers, and underscores.
    * Must be at least 1 character and at most 64 characters long.
    """

    integrated_system: google.cloud.datacatalog.v1.common_pb2.IntegratedSystem.ValueType = ...
    """Output only. Indicates the entry's source system that Data Catalog
    integrates with, such as BigQuery, Pub/Sub, or Dataproc Metastore.
    """

    user_specified_system: typing.Text = ...
    """Indicates the entry's source system that Data Catalog doesn't
    automatically integrate with.

    The `user_specified_system` string has the following limitations:

    * Is case insensitive.
    * Must begin with a letter or underscore.
    * Can only contain letters, numbers, and underscores.
    * Must be at least 1 character and at most 64 characters long.
    """

    @property
    def gcs_fileset_spec(self) -> google.cloud.datacatalog.v1.gcs_fileset_spec_pb2.GcsFilesetSpec:
        """Specification that applies to a Cloud Storage fileset. Valid only
        for entries with the `FILESET` type.
        """
        pass
    @property
    def bigquery_table_spec(self) -> google.cloud.datacatalog.v1.table_spec_pb2.BigQueryTableSpec:
        """Specification that applies to a BigQuery table. Valid only for
        entries with the `TABLE` type.
        """
        pass
    @property
    def bigquery_date_sharded_spec(self) -> google.cloud.datacatalog.v1.table_spec_pb2.BigQueryDateShardedSpec:
        """Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD`
        name pattern.

        For more information, see [Introduction to partitioned tables]
        (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
        """
        pass
    @property
    def database_table_spec(self) -> global___DatabaseTableSpec:
        """Specification that applies to a table resource. Valid only
        for entries with the `TABLE` type.
        """
        pass
    @property
    def data_source_connection_spec(self) -> global___DataSourceConnectionSpec:
        """Specification that applies to a data source connection. Valid only
        for entries with the `DATA_SOURCE_CONNECTION` type.
        """
        pass
    @property
    def routine_spec(self) -> global___RoutineSpec:
        """Specification that applies to a user-defined function or procedure. Valid
        only for entries with the `ROUTINE` type.
        """
        pass
    display_name: typing.Text = ...
    """Display name of an entry.

    The name must contain only Unicode letters, numbers (0-9), underscores (_),
    dashes (-), spaces ( ), and can't start or end with spaces.
    The maximum size is 200 bytes when encoded in UTF-8.
    Default value is an empty string.
    """

    description: typing.Text = ...
    """Entry description that can consist of several sentences or paragraphs
    that describe entry contents.

    The description must not contain Unicode non-characters as well as C0
    and C1 control codes except tabs (HT), new lines (LF), carriage returns
    (CR), and page breaks (FF).
    The maximum size is 2000 bytes when encoded in UTF-8.
    Default value is an empty string.
    """

    @property
    def schema(self) -> google.cloud.datacatalog.v1.schema_pb2.Schema:
        """Schema of the entry. An entry might not have any schema attached to it."""
        pass
    @property
    def source_system_timestamps(self) -> google.cloud.datacatalog.v1.timestamps_pb2.SystemTimestamps:
        """Timestamps from the underlying resource, not from the Data Catalog
        entry.

        Output only when the entry has a type listed in the `EntryType` enum.
        For entries with `user_specified_type`, this field is optional and defaults
        to an empty timestamp.
        """
        pass
    @property
    def usage_signal(self) -> google.cloud.datacatalog.v1.usage_pb2.UsageSignal:
        """Output only. Resource usage statistics."""
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Cloud labels attached to the entry.

        In Data Catalog, you can create and modify labels attached only to custom
        entries. Synced entries have unmodifiable labels that come from the source
        system.
        """
        pass
    @property
    def data_source(self) -> google.cloud.datacatalog.v1.data_source_pb2.DataSource:
        """Output only. Physical location of the entry."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        linked_resource : typing.Text = ...,
        fully_qualified_name : typing.Text = ...,
        type : global___EntryType.ValueType = ...,
        user_specified_type : typing.Text = ...,
        integrated_system : google.cloud.datacatalog.v1.common_pb2.IntegratedSystem.ValueType = ...,
        user_specified_system : typing.Text = ...,
        gcs_fileset_spec : typing.Optional[google.cloud.datacatalog.v1.gcs_fileset_spec_pb2.GcsFilesetSpec] = ...,
        bigquery_table_spec : typing.Optional[google.cloud.datacatalog.v1.table_spec_pb2.BigQueryTableSpec] = ...,
        bigquery_date_sharded_spec : typing.Optional[google.cloud.datacatalog.v1.table_spec_pb2.BigQueryDateShardedSpec] = ...,
        database_table_spec : typing.Optional[global___DatabaseTableSpec] = ...,
        data_source_connection_spec : typing.Optional[global___DataSourceConnectionSpec] = ...,
        routine_spec : typing.Optional[global___RoutineSpec] = ...,
        display_name : typing.Text = ...,
        description : typing.Text = ...,
        schema : typing.Optional[google.cloud.datacatalog.v1.schema_pb2.Schema] = ...,
        source_system_timestamps : typing.Optional[google.cloud.datacatalog.v1.timestamps_pb2.SystemTimestamps] = ...,
        usage_signal : typing.Optional[google.cloud.datacatalog.v1.usage_pb2.UsageSignal] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        data_source : typing.Optional[google.cloud.datacatalog.v1.data_source_pb2.DataSource] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bigquery_date_sharded_spec",b"bigquery_date_sharded_spec","bigquery_table_spec",b"bigquery_table_spec","data_source",b"data_source","data_source_connection_spec",b"data_source_connection_spec","database_table_spec",b"database_table_spec","entry_type",b"entry_type","gcs_fileset_spec",b"gcs_fileset_spec","integrated_system",b"integrated_system","routine_spec",b"routine_spec","schema",b"schema","source_system_timestamps",b"source_system_timestamps","spec",b"spec","system",b"system","type",b"type","type_spec",b"type_spec","usage_signal",b"usage_signal","user_specified_system",b"user_specified_system","user_specified_type",b"user_specified_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bigquery_date_sharded_spec",b"bigquery_date_sharded_spec","bigquery_table_spec",b"bigquery_table_spec","data_source",b"data_source","data_source_connection_spec",b"data_source_connection_spec","database_table_spec",b"database_table_spec","description",b"description","display_name",b"display_name","entry_type",b"entry_type","fully_qualified_name",b"fully_qualified_name","gcs_fileset_spec",b"gcs_fileset_spec","integrated_system",b"integrated_system","labels",b"labels","linked_resource",b"linked_resource","name",b"name","routine_spec",b"routine_spec","schema",b"schema","source_system_timestamps",b"source_system_timestamps","spec",b"spec","system",b"system","type",b"type","type_spec",b"type_spec","usage_signal",b"usage_signal","user_specified_system",b"user_specified_system","user_specified_type",b"user_specified_type"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["entry_type",b"entry_type"]) -> typing.Optional[typing_extensions.Literal["type","user_specified_type"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["spec",b"spec"]) -> typing.Optional[typing_extensions.Literal["database_table_spec","data_source_connection_spec","routine_spec"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["system",b"system"]) -> typing.Optional[typing_extensions.Literal["integrated_system","user_specified_system"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["type_spec",b"type_spec"]) -> typing.Optional[typing_extensions.Literal["gcs_fileset_spec","bigquery_table_spec","bigquery_date_sharded_spec"]]: ...
global___Entry = Entry

class DatabaseTableSpec(google.protobuf.message.Message):
    """Specification that applies to a table resource. Valid only
    for entries with the `TABLE` type.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _TableType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TableTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TableType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        TABLE_TYPE_UNSPECIFIED: DatabaseTableSpec.TableType.ValueType = ...  # 0
        """Default unknown table type."""

        NATIVE: DatabaseTableSpec.TableType.ValueType = ...  # 1
        """Native table."""

        EXTERNAL: DatabaseTableSpec.TableType.ValueType = ...  # 2
        """External table."""

    class TableType(_TableType, metaclass=_TableTypeEnumTypeWrapper):
        """Type of the table."""
        pass

    TABLE_TYPE_UNSPECIFIED: DatabaseTableSpec.TableType.ValueType = ...  # 0
    """Default unknown table type."""

    NATIVE: DatabaseTableSpec.TableType.ValueType = ...  # 1
    """Native table."""

    EXTERNAL: DatabaseTableSpec.TableType.ValueType = ...  # 2
    """External table."""


    TYPE_FIELD_NUMBER: builtins.int
    type: global___DatabaseTableSpec.TableType.ValueType = ...
    """Type of this table."""

    def __init__(self,
        *,
        type : global___DatabaseTableSpec.TableType.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["type",b"type"]) -> None: ...
global___DatabaseTableSpec = DatabaseTableSpec

class DataSourceConnectionSpec(google.protobuf.message.Message):
    """Specification that applies to a data source connection. Valid only for
    entries with the `DATA_SOURCE_CONNECTION` type.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BIGQUERY_CONNECTION_SPEC_FIELD_NUMBER: builtins.int
    @property
    def bigquery_connection_spec(self) -> google.cloud.datacatalog.v1.bigquery_pb2.BigQueryConnectionSpec:
        """Fields specific to BigQuery connections."""
        pass
    def __init__(self,
        *,
        bigquery_connection_spec : typing.Optional[google.cloud.datacatalog.v1.bigquery_pb2.BigQueryConnectionSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bigquery_connection_spec",b"bigquery_connection_spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bigquery_connection_spec",b"bigquery_connection_spec"]) -> None: ...
global___DataSourceConnectionSpec = DataSourceConnectionSpec

class RoutineSpec(google.protobuf.message.Message):
    """Specification that applies to a routine. Valid only for
    entries with the `ROUTINE` type.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _RoutineType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _RoutineTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RoutineType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        ROUTINE_TYPE_UNSPECIFIED: RoutineSpec.RoutineType.ValueType = ...  # 0
        """Unspecified type."""

        SCALAR_FUNCTION: RoutineSpec.RoutineType.ValueType = ...  # 1
        """Non-builtin permanent scalar function."""

        PROCEDURE: RoutineSpec.RoutineType.ValueType = ...  # 2
        """Stored procedure."""

    class RoutineType(_RoutineType, metaclass=_RoutineTypeEnumTypeWrapper):
        """The fine-grained type of the routine."""
        pass

    ROUTINE_TYPE_UNSPECIFIED: RoutineSpec.RoutineType.ValueType = ...  # 0
    """Unspecified type."""

    SCALAR_FUNCTION: RoutineSpec.RoutineType.ValueType = ...  # 1
    """Non-builtin permanent scalar function."""

    PROCEDURE: RoutineSpec.RoutineType.ValueType = ...  # 2
    """Stored procedure."""


    class Argument(google.protobuf.message.Message):
        """Input or output argument of a function or stored procedure."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _Mode:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _ModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Mode.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            MODE_UNSPECIFIED: RoutineSpec.Argument.Mode.ValueType = ...  # 0
            """Unspecified mode."""

            IN: RoutineSpec.Argument.Mode.ValueType = ...  # 1
            """The argument is input-only."""

            OUT: RoutineSpec.Argument.Mode.ValueType = ...  # 2
            """The argument is output-only."""

            INOUT: RoutineSpec.Argument.Mode.ValueType = ...  # 3
            """The argument is both an input and an output."""

        class Mode(_Mode, metaclass=_ModeEnumTypeWrapper):
            """The input or output mode of the argument."""
            pass

        MODE_UNSPECIFIED: RoutineSpec.Argument.Mode.ValueType = ...  # 0
        """Unspecified mode."""

        IN: RoutineSpec.Argument.Mode.ValueType = ...  # 1
        """The argument is input-only."""

        OUT: RoutineSpec.Argument.Mode.ValueType = ...  # 2
        """The argument is output-only."""

        INOUT: RoutineSpec.Argument.Mode.ValueType = ...  # 3
        """The argument is both an input and an output."""


        NAME_FIELD_NUMBER: builtins.int
        MODE_FIELD_NUMBER: builtins.int
        TYPE_FIELD_NUMBER: builtins.int
        name: typing.Text = ...
        """The name of the argument. A return argument of a function might not have
        a name.
        """

        mode: global___RoutineSpec.Argument.Mode.ValueType = ...
        """Specifies whether the argument is input or output."""

        type: typing.Text = ...
        """Type of the argument. The exact value depends on the source system and
        the language.
        """

        def __init__(self,
            *,
            name : typing.Text = ...,
            mode : global___RoutineSpec.Argument.Mode.ValueType = ...,
            type : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["mode",b"mode","name",b"name","type",b"type"]) -> None: ...

    ROUTINE_TYPE_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    ROUTINE_ARGUMENTS_FIELD_NUMBER: builtins.int
    RETURN_TYPE_FIELD_NUMBER: builtins.int
    DEFINITION_BODY_FIELD_NUMBER: builtins.int
    BIGQUERY_ROUTINE_SPEC_FIELD_NUMBER: builtins.int
    routine_type: global___RoutineSpec.RoutineType.ValueType = ...
    """The type of the routine."""

    language: typing.Text = ...
    """The language the routine is written in. The exact value depends on the
    source system. For BigQuery routines, possible values are:

    * `SQL`
    * `JAVASCRIPT`
    """

    @property
    def routine_arguments(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RoutineSpec.Argument]:
        """Arguments of the routine."""
        pass
    return_type: typing.Text = ...
    """Return type of the argument. The exact value depends on the source system
    and the language.
    """

    definition_body: typing.Text = ...
    """The body of the routine."""

    @property
    def bigquery_routine_spec(self) -> google.cloud.datacatalog.v1.bigquery_pb2.BigQueryRoutineSpec:
        """Fields specific for BigQuery routines."""
        pass
    def __init__(self,
        *,
        routine_type : global___RoutineSpec.RoutineType.ValueType = ...,
        language : typing.Text = ...,
        routine_arguments : typing.Optional[typing.Iterable[global___RoutineSpec.Argument]] = ...,
        return_type : typing.Text = ...,
        definition_body : typing.Text = ...,
        bigquery_routine_spec : typing.Optional[google.cloud.datacatalog.v1.bigquery_pb2.BigQueryRoutineSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bigquery_routine_spec",b"bigquery_routine_spec","system_spec",b"system_spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bigquery_routine_spec",b"bigquery_routine_spec","definition_body",b"definition_body","language",b"language","return_type",b"return_type","routine_arguments",b"routine_arguments","routine_type",b"routine_type","system_spec",b"system_spec"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["system_spec",b"system_spec"]) -> typing.Optional[typing_extensions.Literal["bigquery_routine_spec"]]: ...
global___RoutineSpec = RoutineSpec

class EntryGroup(google.protobuf.message.Message):
    """Entry group metadata.

    An `EntryGroup` resource represents a logical grouping of zero or more
    Data Catalog [Entry][google.cloud.datacatalog.v1.Entry] resources.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    DATA_CATALOG_TIMESTAMPS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The resource name of the entry group in URL format.

    Note: The entry group itself and its child resources might not be
    stored in the location specified in its name.
    """

    display_name: typing.Text = ...
    """A short name to identify the entry group, for example,
    "analytics data - jan 2011". Default value is an empty string.
    """

    description: typing.Text = ...
    """Entry group description. Can consist of several sentences or
    paragraphs that describe the entry group contents.
    Default value is an empty string.
    """

    @property
    def data_catalog_timestamps(self) -> google.cloud.datacatalog.v1.timestamps_pb2.SystemTimestamps:
        """Output only. Timestamps of the entry group. Default value is empty."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        description : typing.Text = ...,
        data_catalog_timestamps : typing.Optional[google.cloud.datacatalog.v1.timestamps_pb2.SystemTimestamps] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["data_catalog_timestamps",b"data_catalog_timestamps"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["data_catalog_timestamps",b"data_catalog_timestamps","description",b"description","display_name",b"display_name","name",b"name"]) -> None: ...
global___EntryGroup = EntryGroup

class CreateTagTemplateRequest(google.protobuf.message.Message):
    """Request message for
    [CreateTagTemplate][google.cloud.datacatalog.v1.DataCatalog.CreateTagTemplate].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    TAG_TEMPLATE_ID_FIELD_NUMBER: builtins.int
    TAG_TEMPLATE_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The name of the project and the template location
    [region](https://cloud.google.com/data-catalog/docs/concepts/regions).
    """

    tag_template_id: typing.Text = ...
    """Required. The ID of the tag template to create.

    The ID must contain only lowercase letters (a-z), numbers (0-9),
    or underscores (_), and must start with a letter or underscore.
    The maximum size is 64 bytes when encoded in UTF-8.
    """

    @property
    def tag_template(self) -> google.cloud.datacatalog.v1.tags_pb2.TagTemplate:
        """Required. The tag template to create."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        tag_template_id : typing.Text = ...,
        tag_template : typing.Optional[google.cloud.datacatalog.v1.tags_pb2.TagTemplate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["tag_template",b"tag_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent",b"parent","tag_template",b"tag_template","tag_template_id",b"tag_template_id"]) -> None: ...
global___CreateTagTemplateRequest = CreateTagTemplateRequest

class GetTagTemplateRequest(google.protobuf.message.Message):
    """Request message for
    [GetTagTemplate][google.cloud.datacatalog.v1.DataCatalog.GetTagTemplate].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the tag template to get."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetTagTemplateRequest = GetTagTemplateRequest

class UpdateTagTemplateRequest(google.protobuf.message.Message):
    """Request message for
    [UpdateTagTemplate][google.cloud.datacatalog.v1.DataCatalog.UpdateTagTemplate].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TAG_TEMPLATE_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def tag_template(self) -> google.cloud.datacatalog.v1.tags_pb2.TagTemplate:
        """Required. The template to update. The `name` field must be set."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Names of fields whose values to overwrite on a tag template. Currently,
        only `display_name` and `is_publicly_readable` can be overwritten.

        If this parameter is absent or empty, all modifiable fields
        are overwritten. If such fields are non-required and omitted in the
        request body, their values are emptied.

        Note: Updating the `is_publicly_readable` field may require up to 12
        hours to take effect in search results. Additionally, it also requires
        the `tagTemplates.getIamPolicy` and `tagTemplates.setIamPolicy`
        permissions.
        """
        pass
    def __init__(self,
        *,
        tag_template : typing.Optional[google.cloud.datacatalog.v1.tags_pb2.TagTemplate] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["tag_template",b"tag_template","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["tag_template",b"tag_template","update_mask",b"update_mask"]) -> None: ...
global___UpdateTagTemplateRequest = UpdateTagTemplateRequest

class DeleteTagTemplateRequest(google.protobuf.message.Message):
    """Request message for
    [DeleteTagTemplate][google.cloud.datacatalog.v1.DataCatalog.DeleteTagTemplate].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    FORCE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the tag template to delete."""

    force: builtins.bool = ...
    """Required. If true, deletes all tags that use this template.

    Currently, `true` is the only supported value.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        force : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["force",b"force","name",b"name"]) -> None: ...
global___DeleteTagTemplateRequest = DeleteTagTemplateRequest

class CreateTagRequest(google.protobuf.message.Message):
    """Request message for
    [CreateTag][google.cloud.datacatalog.v1.DataCatalog.CreateTag].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    TAG_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The name of the resource to attach this tag to.

    Tags can be attached to entries or entry groups. An entry can have up to
    1000 attached tags.

    Note: The tag and its child resources might not be stored in
    the location specified in its name.
    """

    @property
    def tag(self) -> google.cloud.datacatalog.v1.tags_pb2.Tag:
        """Required. The tag to create."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        tag : typing.Optional[google.cloud.datacatalog.v1.tags_pb2.Tag] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["tag",b"tag"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent",b"parent","tag",b"tag"]) -> None: ...
global___CreateTagRequest = CreateTagRequest

class UpdateTagRequest(google.protobuf.message.Message):
    """Request message for
    [UpdateTag][google.cloud.datacatalog.v1.DataCatalog.UpdateTag].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TAG_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def tag(self) -> google.cloud.datacatalog.v1.tags_pb2.Tag:
        """Required. The updated tag. The "name" field must be set."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Names of fields whose values to overwrite on a tag. Currently, a tag has
        the only modifiable field with the name `fields`.

        In general, if this parameter is absent or empty, all modifiable fields
        are overwritten. If such fields are non-required and omitted in the
        request body, their values are emptied.
        """
        pass
    def __init__(self,
        *,
        tag : typing.Optional[google.cloud.datacatalog.v1.tags_pb2.Tag] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["tag",b"tag","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["tag",b"tag","update_mask",b"update_mask"]) -> None: ...
global___UpdateTagRequest = UpdateTagRequest

class DeleteTagRequest(google.protobuf.message.Message):
    """Request message for
    [DeleteTag][google.cloud.datacatalog.v1.DataCatalog.DeleteTag].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the tag to delete."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteTagRequest = DeleteTagRequest

class CreateTagTemplateFieldRequest(google.protobuf.message.Message):
    """Request message for
    [CreateTagTemplateField][google.cloud.datacatalog.v1.DataCatalog.CreateTagTemplateField].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    TAG_TEMPLATE_FIELD_ID_FIELD_NUMBER: builtins.int
    TAG_TEMPLATE_FIELD_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The name of the project and the template location
    [region](https://cloud.google.com/data-catalog/docs/concepts/regions).
    """

    tag_template_field_id: typing.Text = ...
    """Required. The ID of the tag template field to create.

    Note: Adding a required field to an existing template is *not* allowed.

    Field IDs can contain letters (both uppercase and lowercase), numbers
    (0-9), underscores (_) and dashes (-). Field IDs must be at least 1
    character long and at most 128 characters long. Field IDs must also be
    unique within their template.
    """

    @property
    def tag_template_field(self) -> google.cloud.datacatalog.v1.tags_pb2.TagTemplateField:
        """Required. The tag template field to create."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        tag_template_field_id : typing.Text = ...,
        tag_template_field : typing.Optional[google.cloud.datacatalog.v1.tags_pb2.TagTemplateField] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["tag_template_field",b"tag_template_field"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent",b"parent","tag_template_field",b"tag_template_field","tag_template_field_id",b"tag_template_field_id"]) -> None: ...
global___CreateTagTemplateFieldRequest = CreateTagTemplateFieldRequest

class UpdateTagTemplateFieldRequest(google.protobuf.message.Message):
    """Request message for
    [UpdateTagTemplateField][google.cloud.datacatalog.v1.DataCatalog.UpdateTagTemplateField].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    TAG_TEMPLATE_FIELD_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the tag template field."""

    @property
    def tag_template_field(self) -> google.cloud.datacatalog.v1.tags_pb2.TagTemplateField:
        """Required. The template to update."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Optional. Names of fields whose values to overwrite on an individual field of a tag
        template. The following fields are modifiable:

        * `display_name`
        * `type.enum_type`
        * `is_required`

        If this parameter is absent or empty, all modifiable fields
        are overwritten. If such fields are non-required and omitted in the request
        body, their values are emptied with one exception: when updating an enum
        type, the provided values are merged with the existing values. Therefore,
        enum values can only be added, existing enum values cannot be deleted or
        renamed.

        Additionally, updating a template field from optional to required is
        *not* allowed.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        tag_template_field : typing.Optional[google.cloud.datacatalog.v1.tags_pb2.TagTemplateField] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["tag_template_field",b"tag_template_field","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","tag_template_field",b"tag_template_field","update_mask",b"update_mask"]) -> None: ...
global___UpdateTagTemplateFieldRequest = UpdateTagTemplateFieldRequest

class RenameTagTemplateFieldRequest(google.protobuf.message.Message):
    """Request message for
    [RenameTagTemplateField][google.cloud.datacatalog.v1.DataCatalog.RenameTagTemplateField].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    NEW_TAG_TEMPLATE_FIELD_ID_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the tag template field."""

    new_tag_template_field_id: typing.Text = ...
    """Required. The new ID of this tag template field. For example, `my_new_field`."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        new_tag_template_field_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","new_tag_template_field_id",b"new_tag_template_field_id"]) -> None: ...
global___RenameTagTemplateFieldRequest = RenameTagTemplateFieldRequest

class RenameTagTemplateFieldEnumValueRequest(google.protobuf.message.Message):
    """Request message for
    [RenameTagTemplateFieldEnumValue][google.cloud.datacatalog.v1.DataCatalog.RenameTagTemplateFieldEnumValue].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    NEW_ENUM_VALUE_DISPLAY_NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the enum field value."""

    new_enum_value_display_name: typing.Text = ...
    """Required. The new display name of the enum value. For example, `my_new_enum_value`."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        new_enum_value_display_name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","new_enum_value_display_name",b"new_enum_value_display_name"]) -> None: ...
global___RenameTagTemplateFieldEnumValueRequest = RenameTagTemplateFieldEnumValueRequest

class DeleteTagTemplateFieldRequest(google.protobuf.message.Message):
    """Request message for
    [DeleteTagTemplateField][google.cloud.datacatalog.v1.DataCatalog.DeleteTagTemplateField].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    FORCE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the tag template field to delete."""

    force: builtins.bool = ...
    """Required. If true, deletes this field from any tags that use it.

    Currently, `true` is the only supported value.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        force : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["force",b"force","name",b"name"]) -> None: ...
global___DeleteTagTemplateFieldRequest = DeleteTagTemplateFieldRequest

class ListTagsRequest(google.protobuf.message.Message):
    """Request message for
    [ListTags][google.cloud.datacatalog.v1.DataCatalog.ListTags].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The name of the Data Catalog resource to list the tags of.

    The resource can be an [Entry][google.cloud.datacatalog.v1.Entry]
    or an [EntryGroup][google.cloud.datacatalog.v1.EntryGroup]
    (without `/entries/{entries}` at the end).
    """

    page_size: builtins.int = ...
    """The maximum number of tags to return. Default is 10. Maximum limit is 1000."""

    page_token: typing.Text = ...
    """Pagination token that specifies the next page to return. If empty, the
    first page is returned.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListTagsRequest = ListTagsRequest

class ListTagsResponse(google.protobuf.message.Message):
    """Response message for
    [ListTags][google.cloud.datacatalog.v1.DataCatalog.ListTags].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TAGS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def tags(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.datacatalog.v1.tags_pb2.Tag]:
        """[Tag][google.cloud.datacatalog.v1.Tag] details."""
        pass
    next_page_token: typing.Text = ...
    """Pagination token of the next results page. Empty if there are
    no more items in results.
    """

    def __init__(self,
        *,
        tags : typing.Optional[typing.Iterable[google.cloud.datacatalog.v1.tags_pb2.Tag]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","tags",b"tags"]) -> None: ...
global___ListTagsResponse = ListTagsResponse

class ListEntriesRequest(google.protobuf.message.Message):
    """Request message for
    [ListEntries][google.cloud.datacatalog.v1.DataCatalog.ListEntries].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    READ_MASK_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The name of the entry group that contains the entries to list.

    Can be provided in URL format.
    """

    page_size: builtins.int = ...
    """The maximum number of items to return. Default is 10. Maximum limit is
    1000. Throws an invalid argument if `page_size` is more than 1000.
    """

    page_token: typing.Text = ...
    """Pagination token that specifies the next page to return. If empty, the
    first page is returned.
    """

    @property
    def read_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """The fields to return for each entry. If empty or omitted, all
        fields are returned.

        For example, to return a list of entries with only the `name` field,
        set `read_mask` to only one path with the `name` value.
        """
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        read_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["read_mask",b"read_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent","read_mask",b"read_mask"]) -> None: ...
global___ListEntriesRequest = ListEntriesRequest

class ListEntriesResponse(google.protobuf.message.Message):
    """Response message for
    [ListEntries][google.cloud.datacatalog.v1.DataCatalog.ListEntries].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ENTRIES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def entries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Entry]:
        """Entry details."""
        pass
    next_page_token: typing.Text = ...
    """Pagination token of the next results page. Empty if there are no more items
    in results.
    """

    def __init__(self,
        *,
        entries : typing.Optional[typing.Iterable[global___Entry]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["entries",b"entries","next_page_token",b"next_page_token"]) -> None: ...
global___ListEntriesResponse = ListEntriesResponse
