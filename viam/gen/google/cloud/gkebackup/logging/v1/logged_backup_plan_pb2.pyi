"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.gkebackup.logging.v1.logged_common_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class LoggedBackupPlan(google.protobuf.message.Message):
    """BackupPlan as stored in Platform log. It's used to log the details of
    a createBackupPlan/updateBackupPlan request, so only fields that can be taken
    from user input are included here.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class RetentionPolicy(google.protobuf.message.Message):
        """RentionPolicy is an inner message type to define:
        1. When to automatically delete Backups created under this BackupPlan
        2. A plan level minimum Backup retain days which blocks deletion
        3. Lock to disallow any policy updates
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        BACKUP_DELETE_LOCK_DAYS_FIELD_NUMBER: builtins.int
        BACKUP_RETAIN_DAYS_FIELD_NUMBER: builtins.int
        LOCKED_FIELD_NUMBER: builtins.int
        backup_delete_lock_days: builtins.int = ...
        """Number of days during which deletion of a Backup created under this
        BackupPlan will be blocked.
        """

        backup_retain_days: builtins.int = ...
        """Number of days after which the service will delete a Backup.
        If specified, a Backup created under this BackupPlan will be
        automatically deleted after its age reaches create_time +
        backup_retain_days.
        """

        locked: builtins.bool = ...
        """A flag denotes that the retention policy of this BackupPlan is locked.
        If set to True, no further update is allowed on this policy, including
        the 'locked' field itself.
        Default to False.
        """

        def __init__(self,
            *,
            backup_delete_lock_days : builtins.int = ...,
            backup_retain_days : builtins.int = ...,
            locked : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["backup_delete_lock_days",b"backup_delete_lock_days","backup_retain_days",b"backup_retain_days","locked",b"locked"]) -> None: ...

    class Schedule(google.protobuf.message.Message):
        """Schedule, an inner message type defines a cron schedule."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        CRON_SCHEDULE_FIELD_NUMBER: builtins.int
        PAUSED_FIELD_NUMBER: builtins.int
        cron_schedule: typing.Text = ...
        """A cron style string schedule on which an operation will be executed."""

        paused: builtins.bool = ...
        """A flag to toggle scheduled operation."""

        def __init__(self,
            *,
            cron_schedule : typing.Text = ...,
            paused : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["cron_schedule",b"cron_schedule","paused",b"paused"]) -> None: ...

    class BackupConfig(google.protobuf.message.Message):
        """BackupConfig, an inner message type defines the configuration of creating
        a backup from this BackupPlan
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        ALL_NAMESPACES_FIELD_NUMBER: builtins.int
        SELECTED_NAMESPACES_FIELD_NUMBER: builtins.int
        SELECTED_APPLICATIONS_FIELD_NUMBER: builtins.int
        INCLUDE_VOLUME_DATA_FIELD_NUMBER: builtins.int
        INCLUDE_SECRETS_FIELD_NUMBER: builtins.int
        ENCRYPTION_KEY_FIELD_NUMBER: builtins.int
        all_namespaces: builtins.bool = ...
        """If set to true, backup whole cluster"""

        @property
        def selected_namespaces(self) -> google.cloud.gkebackup.logging.v1.logged_common_pb2.Namespaces:
            """If set, backup the list of namespaces"""
            pass
        @property
        def selected_applications(self) -> google.cloud.gkebackup.logging.v1.logged_common_pb2.NamespacedNames:
            """If set, backup the list of applications"""
            pass
        include_volume_data: builtins.bool = ...
        """A boolean flag specifies whether volume data should be backed up"""

        include_secrets: builtins.bool = ...
        """A boolean flag specifies whether secrets should be backed up"""

        @property
        def encryption_key(self) -> google.cloud.gkebackup.logging.v1.logged_common_pb2.EncryptionKey:
            """Custom encryption key. For preview, support GCP KMS only.
            This only contains the key metadata, and no key material.
            """
            pass
        def __init__(self,
            *,
            all_namespaces : builtins.bool = ...,
            selected_namespaces : typing.Optional[google.cloud.gkebackup.logging.v1.logged_common_pb2.Namespaces] = ...,
            selected_applications : typing.Optional[google.cloud.gkebackup.logging.v1.logged_common_pb2.NamespacedNames] = ...,
            include_volume_data : builtins.bool = ...,
            include_secrets : builtins.bool = ...,
            encryption_key : typing.Optional[google.cloud.gkebackup.logging.v1.logged_common_pb2.EncryptionKey] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["all_namespaces",b"all_namespaces","backup_scope",b"backup_scope","encryption_key",b"encryption_key","selected_applications",b"selected_applications","selected_namespaces",b"selected_namespaces"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["all_namespaces",b"all_namespaces","backup_scope",b"backup_scope","encryption_key",b"encryption_key","include_secrets",b"include_secrets","include_volume_data",b"include_volume_data","selected_applications",b"selected_applications","selected_namespaces",b"selected_namespaces"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["backup_scope",b"backup_scope"]) -> typing.Optional[typing_extensions.Literal["all_namespaces","selected_namespaces","selected_applications"]]: ...

    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    DESCRIPTION_FIELD_NUMBER: builtins.int
    CLUSTER_FIELD_NUMBER: builtins.int
    RETENTION_POLICY_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    BACKUP_SCHEDULE_FIELD_NUMBER: builtins.int
    DEACTIVATED_FIELD_NUMBER: builtins.int
    BACKUP_CONFIG_FIELD_NUMBER: builtins.int
    description: typing.Text = ...
    """User specified descriptive string for this BackupPlan."""

    cluster: typing.Text = ...
    """GCP resource name of the source cluster for this BackupPlan."""

    @property
    def retention_policy(self) -> global___LoggedBackupPlan.RetentionPolicy:
        """RetentionPolicy governs lifecycle of Backups created under this plan."""
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """A set of custom labels supplied by user."""
        pass
    @property
    def backup_schedule(self) -> global___LoggedBackupPlan.Schedule:
        """Defines scheduled Backup creation under this BackupPlan."""
        pass
    deactivated: builtins.bool = ...
    """A flag indicates whether the plan has been deactivated."""

    @property
    def backup_config(self) -> global___LoggedBackupPlan.BackupConfig:
        """Defines backup configuration of this BackupPlan."""
        pass
    def __init__(self,
        *,
        description : typing.Text = ...,
        cluster : typing.Text = ...,
        retention_policy : typing.Optional[global___LoggedBackupPlan.RetentionPolicy] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        backup_schedule : typing.Optional[global___LoggedBackupPlan.Schedule] = ...,
        deactivated : builtins.bool = ...,
        backup_config : typing.Optional[global___LoggedBackupPlan.BackupConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["backup_config",b"backup_config","backup_schedule",b"backup_schedule","retention_policy",b"retention_policy"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["backup_config",b"backup_config","backup_schedule",b"backup_schedule","cluster",b"cluster","deactivated",b"deactivated","description",b"description","labels",b"labels","retention_policy",b"retention_policy"]) -> None: ...
global___LoggedBackupPlan = LoggedBackupPlan
