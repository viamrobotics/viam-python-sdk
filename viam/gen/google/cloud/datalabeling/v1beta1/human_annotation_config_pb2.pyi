"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _StringAggregationType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _StringAggregationTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_StringAggregationType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    STRING_AGGREGATION_TYPE_UNSPECIFIED: StringAggregationType.ValueType = ...  # 0
    MAJORITY_VOTE: StringAggregationType.ValueType = ...  # 1
    """Majority vote to aggregate answers."""

    UNANIMOUS_VOTE: StringAggregationType.ValueType = ...  # 2
    """Unanimous answers will be adopted."""

    NO_AGGREGATION: StringAggregationType.ValueType = ...  # 3
    """Preserve all answers by crowd compute."""

class StringAggregationType(_StringAggregationType, metaclass=_StringAggregationTypeEnumTypeWrapper):
    pass

STRING_AGGREGATION_TYPE_UNSPECIFIED: StringAggregationType.ValueType = ...  # 0
MAJORITY_VOTE: StringAggregationType.ValueType = ...  # 1
"""Majority vote to aggregate answers."""

UNANIMOUS_VOTE: StringAggregationType.ValueType = ...  # 2
"""Unanimous answers will be adopted."""

NO_AGGREGATION: StringAggregationType.ValueType = ...  # 3
"""Preserve all answers by crowd compute."""

global___StringAggregationType = StringAggregationType


class HumanAnnotationConfig(google.protobuf.message.Message):
    """Configuration for how human labeling task should be done."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INSTRUCTION_FIELD_NUMBER: builtins.int
    ANNOTATED_DATASET_DISPLAY_NAME_FIELD_NUMBER: builtins.int
    ANNOTATED_DATASET_DESCRIPTION_FIELD_NUMBER: builtins.int
    LABEL_GROUP_FIELD_NUMBER: builtins.int
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    REPLICA_COUNT_FIELD_NUMBER: builtins.int
    QUESTION_DURATION_FIELD_NUMBER: builtins.int
    CONTRIBUTOR_EMAILS_FIELD_NUMBER: builtins.int
    USER_EMAIL_ADDRESS_FIELD_NUMBER: builtins.int
    instruction: typing.Text = ...
    """Required. Instruction resource name."""

    annotated_dataset_display_name: typing.Text = ...
    """Required. A human-readable name for AnnotatedDataset defined by
    users. Maximum of 64 characters
    .
    """

    annotated_dataset_description: typing.Text = ...
    """Optional. A human-readable description for AnnotatedDataset.
    The description can be up to 10000 characters long.
    """

    label_group: typing.Text = ...
    """Optional. A human-readable label used to logically group labeling tasks.
    This string must match the regular expression `[a-zA-Z\\\\d_-]{0,128}`.
    """

    language_code: typing.Text = ...
    """Optional. The Language of this question, as a
    [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt).
    Default value is en-US.
    Only need to set this when task is language related. For example, French
    text classification.
    """

    replica_count: builtins.int = ...
    """Optional. Replication of questions. Each question will be sent to up to
    this number of contributors to label. Aggregated answers will be returned.
    Default is set to 1.
    For image related labeling, valid values are 1, 3, 5.
    """

    @property
    def question_duration(self) -> google.protobuf.duration_pb2.Duration:
        """Optional. Maximum duration for contributors to answer a question. Maximum
        is 3600 seconds. Default is 3600 seconds.
        """
        pass
    @property
    def contributor_emails(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Optional. If you want your own labeling contributors to manage and work on
        this labeling request, you can set these contributors here. We will give
        them access to the question types in crowdcompute. Note that these
        emails must be registered in crowdcompute worker UI:
        https://crowd-compute.appspot.com/
        """
        pass
    user_email_address: typing.Text = ...
    """Email of the user who started the labeling task and should be notified by
    email. If empty no notification will be sent.
    """

    def __init__(self,
        *,
        instruction : typing.Text = ...,
        annotated_dataset_display_name : typing.Text = ...,
        annotated_dataset_description : typing.Text = ...,
        label_group : typing.Text = ...,
        language_code : typing.Text = ...,
        replica_count : builtins.int = ...,
        question_duration : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        contributor_emails : typing.Optional[typing.Iterable[typing.Text]] = ...,
        user_email_address : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["question_duration",b"question_duration"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotated_dataset_description",b"annotated_dataset_description","annotated_dataset_display_name",b"annotated_dataset_display_name","contributor_emails",b"contributor_emails","instruction",b"instruction","label_group",b"label_group","language_code",b"language_code","question_duration",b"question_duration","replica_count",b"replica_count","user_email_address",b"user_email_address"]) -> None: ...
global___HumanAnnotationConfig = HumanAnnotationConfig

class ImageClassificationConfig(google.protobuf.message.Message):
    """Config for image classification human labeling task."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANNOTATION_SPEC_SET_FIELD_NUMBER: builtins.int
    ALLOW_MULTI_LABEL_FIELD_NUMBER: builtins.int
    ANSWER_AGGREGATION_TYPE_FIELD_NUMBER: builtins.int
    annotation_spec_set: typing.Text = ...
    """Required. Annotation spec set resource name."""

    allow_multi_label: builtins.bool = ...
    """Optional. If allow_multi_label is true, contributors are able to choose
    multiple labels for one image.
    """

    answer_aggregation_type: global___StringAggregationType.ValueType = ...
    """Optional. The type of how to aggregate answers."""

    def __init__(self,
        *,
        annotation_spec_set : typing.Text = ...,
        allow_multi_label : builtins.bool = ...,
        answer_aggregation_type : global___StringAggregationType.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["allow_multi_label",b"allow_multi_label","annotation_spec_set",b"annotation_spec_set","answer_aggregation_type",b"answer_aggregation_type"]) -> None: ...
global___ImageClassificationConfig = ImageClassificationConfig

class BoundingPolyConfig(google.protobuf.message.Message):
    """Config for image bounding poly (and bounding box) human labeling task."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANNOTATION_SPEC_SET_FIELD_NUMBER: builtins.int
    INSTRUCTION_MESSAGE_FIELD_NUMBER: builtins.int
    annotation_spec_set: typing.Text = ...
    """Required. Annotation spec set resource name."""

    instruction_message: typing.Text = ...
    """Optional. Instruction message showed on contributors UI."""

    def __init__(self,
        *,
        annotation_spec_set : typing.Text = ...,
        instruction_message : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec_set",b"annotation_spec_set","instruction_message",b"instruction_message"]) -> None: ...
global___BoundingPolyConfig = BoundingPolyConfig

class PolylineConfig(google.protobuf.message.Message):
    """Config for image polyline human labeling task."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANNOTATION_SPEC_SET_FIELD_NUMBER: builtins.int
    INSTRUCTION_MESSAGE_FIELD_NUMBER: builtins.int
    annotation_spec_set: typing.Text = ...
    """Required. Annotation spec set resource name."""

    instruction_message: typing.Text = ...
    """Optional. Instruction message showed on contributors UI."""

    def __init__(self,
        *,
        annotation_spec_set : typing.Text = ...,
        instruction_message : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec_set",b"annotation_spec_set","instruction_message",b"instruction_message"]) -> None: ...
global___PolylineConfig = PolylineConfig

class SegmentationConfig(google.protobuf.message.Message):
    """Config for image segmentation"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANNOTATION_SPEC_SET_FIELD_NUMBER: builtins.int
    INSTRUCTION_MESSAGE_FIELD_NUMBER: builtins.int
    annotation_spec_set: typing.Text = ...
    """Required. Annotation spec set resource name. format:
    projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}
    """

    instruction_message: typing.Text = ...
    """Instruction message showed on labelers UI."""

    def __init__(self,
        *,
        annotation_spec_set : typing.Text = ...,
        instruction_message : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec_set",b"annotation_spec_set","instruction_message",b"instruction_message"]) -> None: ...
global___SegmentationConfig = SegmentationConfig

class VideoClassificationConfig(google.protobuf.message.Message):
    """Config for video classification human labeling task.
    Currently two types of video classification are supported:
    1. Assign labels on the entire video.
    2. Split the video into multiple video clips based on camera shot, and
    assign labels on each video clip.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class AnnotationSpecSetConfig(google.protobuf.message.Message):
        """Annotation spec set with the setting of allowing multi labels or not."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        ANNOTATION_SPEC_SET_FIELD_NUMBER: builtins.int
        ALLOW_MULTI_LABEL_FIELD_NUMBER: builtins.int
        annotation_spec_set: typing.Text = ...
        """Required. Annotation spec set resource name."""

        allow_multi_label: builtins.bool = ...
        """Optional. If allow_multi_label is true, contributors are able to
        choose multiple labels from one annotation spec set.
        """

        def __init__(self,
            *,
            annotation_spec_set : typing.Text = ...,
            allow_multi_label : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["allow_multi_label",b"allow_multi_label","annotation_spec_set",b"annotation_spec_set"]) -> None: ...

    ANNOTATION_SPEC_SET_CONFIGS_FIELD_NUMBER: builtins.int
    APPLY_SHOT_DETECTION_FIELD_NUMBER: builtins.int
    @property
    def annotation_spec_set_configs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___VideoClassificationConfig.AnnotationSpecSetConfig]:
        """Required. The list of annotation spec set configs.
        Since watching a video clip takes much longer time than an image, we
        support label with multiple AnnotationSpecSet at the same time. Labels
        in each AnnotationSpecSet will be shown in a group to contributors.
        Contributors can select one or more (depending on whether to allow multi
        label) from each group.
        """
        pass
    apply_shot_detection: builtins.bool = ...
    """Optional. Option to apply shot detection on the video."""

    def __init__(self,
        *,
        annotation_spec_set_configs : typing.Optional[typing.Iterable[global___VideoClassificationConfig.AnnotationSpecSetConfig]] = ...,
        apply_shot_detection : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec_set_configs",b"annotation_spec_set_configs","apply_shot_detection",b"apply_shot_detection"]) -> None: ...
global___VideoClassificationConfig = VideoClassificationConfig

class ObjectDetectionConfig(google.protobuf.message.Message):
    """Config for video object detection human labeling task.
    Object detection will be conducted on the images extracted from the video,
    and those objects will be labeled with bounding boxes.
    User need to specify the number of images to be extracted per second as the
    extraction frame rate.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANNOTATION_SPEC_SET_FIELD_NUMBER: builtins.int
    EXTRACTION_FRAME_RATE_FIELD_NUMBER: builtins.int
    annotation_spec_set: typing.Text = ...
    """Required. Annotation spec set resource name."""

    extraction_frame_rate: builtins.float = ...
    """Required. Number of frames per second to be extracted from the video."""

    def __init__(self,
        *,
        annotation_spec_set : typing.Text = ...,
        extraction_frame_rate : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec_set",b"annotation_spec_set","extraction_frame_rate",b"extraction_frame_rate"]) -> None: ...
global___ObjectDetectionConfig = ObjectDetectionConfig

class ObjectTrackingConfig(google.protobuf.message.Message):
    """Config for video object tracking human labeling task."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANNOTATION_SPEC_SET_FIELD_NUMBER: builtins.int
    annotation_spec_set: typing.Text = ...
    """Required. Annotation spec set resource name."""

    def __init__(self,
        *,
        annotation_spec_set : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec_set",b"annotation_spec_set"]) -> None: ...
global___ObjectTrackingConfig = ObjectTrackingConfig

class EventConfig(google.protobuf.message.Message):
    """Config for video event human labeling task."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANNOTATION_SPEC_SETS_FIELD_NUMBER: builtins.int
    @property
    def annotation_spec_sets(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Required. The list of annotation spec set resource name. Similar to video
        classification, we support selecting event from multiple AnnotationSpecSet
        at the same time.
        """
        pass
    def __init__(self,
        *,
        annotation_spec_sets : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec_sets",b"annotation_spec_sets"]) -> None: ...
global___EventConfig = EventConfig

class TextClassificationConfig(google.protobuf.message.Message):
    """Config for text classification human labeling task."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ALLOW_MULTI_LABEL_FIELD_NUMBER: builtins.int
    ANNOTATION_SPEC_SET_FIELD_NUMBER: builtins.int
    SENTIMENT_CONFIG_FIELD_NUMBER: builtins.int
    allow_multi_label: builtins.bool = ...
    """Optional. If allow_multi_label is true, contributors are able to choose
    multiple labels for one text segment.
    """

    annotation_spec_set: typing.Text = ...
    """Required. Annotation spec set resource name."""

    @property
    def sentiment_config(self) -> global___SentimentConfig:
        """Optional. Configs for sentiment selection."""
        pass
    def __init__(self,
        *,
        allow_multi_label : builtins.bool = ...,
        annotation_spec_set : typing.Text = ...,
        sentiment_config : typing.Optional[global___SentimentConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["sentiment_config",b"sentiment_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["allow_multi_label",b"allow_multi_label","annotation_spec_set",b"annotation_spec_set","sentiment_config",b"sentiment_config"]) -> None: ...
global___TextClassificationConfig = TextClassificationConfig

class SentimentConfig(google.protobuf.message.Message):
    """Config for setting up sentiments."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ENABLE_LABEL_SENTIMENT_SELECTION_FIELD_NUMBER: builtins.int
    enable_label_sentiment_selection: builtins.bool = ...
    """If set to true, contributors will have the option to select sentiment of
    the label they selected, to mark it as negative or positive label. Default
    is false.
    """

    def __init__(self,
        *,
        enable_label_sentiment_selection : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["enable_label_sentiment_selection",b"enable_label_sentiment_selection"]) -> None: ...
global___SentimentConfig = SentimentConfig

class TextEntityExtractionConfig(google.protobuf.message.Message):
    """Config for text entity extraction human labeling task."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ANNOTATION_SPEC_SET_FIELD_NUMBER: builtins.int
    annotation_spec_set: typing.Text = ...
    """Required. Annotation spec set resource name."""

    def __init__(self,
        *,
        annotation_spec_set : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec_set",b"annotation_spec_set"]) -> None: ...
global___TextEntityExtractionConfig = TextEntityExtractionConfig
