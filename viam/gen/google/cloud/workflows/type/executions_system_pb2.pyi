"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class ExecutionsSystemLog(google.protobuf.message.Message):
    """Logged during the lifetime of Workflow Execution."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _State:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_State.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        STATE_UNSPECIFIED: ExecutionsSystemLog.State.ValueType = ...  # 0
        """Invalid state."""

        ACTIVE: ExecutionsSystemLog.State.ValueType = ...  # 1
        """The Workflow Execution is in progress."""

        SUCCEEDED: ExecutionsSystemLog.State.ValueType = ...  # 2
        """The Workflow Execution has finished successfully."""

        FAILED: ExecutionsSystemLog.State.ValueType = ...  # 3
        """The Workflow Execution failed with an error."""

        CANCELLED: ExecutionsSystemLog.State.ValueType = ...  # 4
        """The Workflow Execution has been stopped intentionally."""

    class State(_State, metaclass=_StateEnumTypeWrapper):
        """Possible states of the execution. There could be more states in the future."""
        pass

    STATE_UNSPECIFIED: ExecutionsSystemLog.State.ValueType = ...  # 0
    """Invalid state."""

    ACTIVE: ExecutionsSystemLog.State.ValueType = ...  # 1
    """The Workflow Execution is in progress."""

    SUCCEEDED: ExecutionsSystemLog.State.ValueType = ...  # 2
    """The Workflow Execution has finished successfully."""

    FAILED: ExecutionsSystemLog.State.ValueType = ...  # 3
    """The Workflow Execution failed with an error."""

    CANCELLED: ExecutionsSystemLog.State.ValueType = ...  # 4
    """The Workflow Execution has been stopped intentionally."""


    class Start(google.protobuf.message.Message):
        """Detailed information about the start of the execution."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        ARGUMENT_FIELD_NUMBER: builtins.int
        argument: typing.Text = ...
        """The execution input argument."""

        def __init__(self,
            *,
            argument : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["argument",b"argument"]) -> None: ...

    class Success(google.protobuf.message.Message):
        """Detailed information about the successful finish of the execution."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        RESULT_FIELD_NUMBER: builtins.int
        result: typing.Text = ...
        """The final result of the execution."""

        def __init__(self,
            *,
            result : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["result",b"result"]) -> None: ...

    class Failure(google.protobuf.message.Message):
        """Detailed information about the execution failure."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        EXCEPTION_FIELD_NUMBER: builtins.int
        SOURCE_FIELD_NUMBER: builtins.int
        exception: typing.Text = ...
        """The exception message, e.g. "division by zero". The size limit is 1 kB."""

        source: typing.Text = ...
        """The code location of the statement that has created the log. For example,
        a log created in subworkflow 'Foo' in step 'bar' will have its source
        equal to 'Foo.bar'. The size limit is 1 kB.
        """

        def __init__(self,
            *,
            exception : typing.Text = ...,
            source : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["exception",b"exception","source",b"source"]) -> None: ...

    MESSAGE_FIELD_NUMBER: builtins.int
    ACTIVITY_TIME_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    START_FIELD_NUMBER: builtins.int
    SUCCESS_FIELD_NUMBER: builtins.int
    FAILURE_FIELD_NUMBER: builtins.int
    message: typing.Text = ...
    """Human readable contents of the log in English. The size limit is 5 kB."""

    @property
    def activity_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The absolute point in time when the activity happened."""
        pass
    state: global___ExecutionsSystemLog.State.ValueType = ...
    """State of the execution when the log was created."""

    @property
    def start(self) -> global___ExecutionsSystemLog.Start:
        """Appears only in the log created when the execution has started."""
        pass
    @property
    def success(self) -> global___ExecutionsSystemLog.Success:
        """Appears only in the log created when the execution has finished
        successfully.
        """
        pass
    @property
    def failure(self) -> global___ExecutionsSystemLog.Failure:
        """Appears only in the log created when the execution has failed."""
        pass
    def __init__(self,
        *,
        message : typing.Text = ...,
        activity_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        state : global___ExecutionsSystemLog.State.ValueType = ...,
        start : typing.Optional[global___ExecutionsSystemLog.Start] = ...,
        success : typing.Optional[global___ExecutionsSystemLog.Success] = ...,
        failure : typing.Optional[global___ExecutionsSystemLog.Failure] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["activity_time",b"activity_time","details",b"details","failure",b"failure","start",b"start","success",b"success"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["activity_time",b"activity_time","details",b"details","failure",b"failure","message",b"message","start",b"start","state",b"state","success",b"success"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["details",b"details"]) -> typing.Optional[typing_extensions.Literal["start","success","failure"]]: ...
global___ExecutionsSystemLog = ExecutionsSystemLog
