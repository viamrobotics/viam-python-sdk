"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class AdvancedSettings(google.protobuf.message.Message):
    """Hierarchical advanced settings for agent/flow/page/fulfillment/parameter.
    Settings exposed at lower level overrides the settings exposed at higher
    level.

    Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LoggingSettings(google.protobuf.message.Message):
        """Define behaviors on logging."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        ENABLE_STACKDRIVER_LOGGING_FIELD_NUMBER: builtins.int
        ENABLE_INTERACTION_LOGGING_FIELD_NUMBER: builtins.int
        enable_stackdriver_logging: builtins.bool = ...
        """If true, StackDriver logging is currently enabled."""

        enable_interaction_logging: builtins.bool = ...
        """If true, DF Interaction logging is currently enabled."""

        def __init__(self,
            *,
            enable_stackdriver_logging : builtins.bool = ...,
            enable_interaction_logging : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["enable_interaction_logging",b"enable_interaction_logging","enable_stackdriver_logging",b"enable_stackdriver_logging"]) -> None: ...

    LOGGING_SETTINGS_FIELD_NUMBER: builtins.int
    @property
    def logging_settings(self) -> global___AdvancedSettings.LoggingSettings:
        """Settings for logging.
        Settings for Dialogflow History, Contact Center messages, StackDriver logs,
        and speech logging.
        Exposed at the following levels:
        - Agent level.
        """
        pass
    def __init__(self,
        *,
        logging_settings : typing.Optional[global___AdvancedSettings.LoggingSettings] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["logging_settings",b"logging_settings"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["logging_settings",b"logging_settings"]) -> None: ...
global___AdvancedSettings = AdvancedSettings
