"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.dialogflow.v2beta1.audio_config_pb2
import google.cloud.dialogflow.v2beta1.participant_pb2
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class ConversationProfile(google.protobuf.message.Message):
    """Defines the services to connect to incoming Dialogflow conversations."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    AUTOMATED_AGENT_CONFIG_FIELD_NUMBER: builtins.int
    HUMAN_AGENT_ASSISTANT_CONFIG_FIELD_NUMBER: builtins.int
    HUMAN_AGENT_HANDOFF_CONFIG_FIELD_NUMBER: builtins.int
    NOTIFICATION_CONFIG_FIELD_NUMBER: builtins.int
    LOGGING_CONFIG_FIELD_NUMBER: builtins.int
    NEW_MESSAGE_EVENT_NOTIFICATION_CONFIG_FIELD_NUMBER: builtins.int
    STT_CONFIG_FIELD_NUMBER: builtins.int
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    TIME_ZONE_FIELD_NUMBER: builtins.int
    SECURITY_SETTINGS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The unique identifier of this conversation profile.
    Format: `projects/<Project ID>/locations/<Location
    ID>/conversationProfiles/<Conversation Profile ID>`.
    """

    display_name: typing.Text = ...
    """Required. Human readable name for this profile. Max length 1024 bytes."""

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Create time of the conversation profile."""
        pass
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. Update time of the conversation profile."""
        pass
    @property
    def automated_agent_config(self) -> global___AutomatedAgentConfig:
        """Configuration for an automated agent to use with this profile."""
        pass
    @property
    def human_agent_assistant_config(self) -> global___HumanAgentAssistantConfig:
        """Configuration for agent assistance to use with this profile."""
        pass
    @property
    def human_agent_handoff_config(self) -> global___HumanAgentHandoffConfig:
        """Configuration for connecting to a live agent.

        Currently, this feature is not general available, please contact Google
        to get access.
        """
        pass
    @property
    def notification_config(self) -> global___NotificationConfig:
        """Configuration for publishing conversation lifecycle events."""
        pass
    @property
    def logging_config(self) -> global___LoggingConfig:
        """Configuration for logging conversation lifecycle events."""
        pass
    @property
    def new_message_event_notification_config(self) -> global___NotificationConfig:
        """Configuration for publishing new message events. Event will be sent in
        format of [ConversationEvent][google.cloud.dialogflow.v2beta1.ConversationEvent]
        """
        pass
    @property
    def stt_config(self) -> google.cloud.dialogflow.v2beta1.audio_config_pb2.SpeechToTextConfig:
        """Settings for speech transcription."""
        pass
    language_code: typing.Text = ...
    """Language code for the conversation profile. If not specified, the language
    is en-US. Language at ConversationProfile should be set for all non en-us
    languages.
    This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt)
    language tag. Example: "en-US".
    """

    time_zone: typing.Text = ...
    """The time zone of this conversational profile from the
    [time zone database](https://www.iana.org/time-zones), e.g.,
    America/New_York, Europe/Paris. Defaults to America/New_York.
    """

    security_settings: typing.Text = ...
    """Name of the CX SecuritySettings reference for the agent.
    Format: `projects/<Project ID>/locations/<Location
    ID>/securitySettings/<Security Settings ID>`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        display_name : typing.Text = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        automated_agent_config : typing.Optional[global___AutomatedAgentConfig] = ...,
        human_agent_assistant_config : typing.Optional[global___HumanAgentAssistantConfig] = ...,
        human_agent_handoff_config : typing.Optional[global___HumanAgentHandoffConfig] = ...,
        notification_config : typing.Optional[global___NotificationConfig] = ...,
        logging_config : typing.Optional[global___LoggingConfig] = ...,
        new_message_event_notification_config : typing.Optional[global___NotificationConfig] = ...,
        stt_config : typing.Optional[google.cloud.dialogflow.v2beta1.audio_config_pb2.SpeechToTextConfig] = ...,
        language_code : typing.Text = ...,
        time_zone : typing.Text = ...,
        security_settings : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["automated_agent_config",b"automated_agent_config","create_time",b"create_time","human_agent_assistant_config",b"human_agent_assistant_config","human_agent_handoff_config",b"human_agent_handoff_config","logging_config",b"logging_config","new_message_event_notification_config",b"new_message_event_notification_config","notification_config",b"notification_config","stt_config",b"stt_config","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["automated_agent_config",b"automated_agent_config","create_time",b"create_time","display_name",b"display_name","human_agent_assistant_config",b"human_agent_assistant_config","human_agent_handoff_config",b"human_agent_handoff_config","language_code",b"language_code","logging_config",b"logging_config","name",b"name","new_message_event_notification_config",b"new_message_event_notification_config","notification_config",b"notification_config","security_settings",b"security_settings","stt_config",b"stt_config","time_zone",b"time_zone","update_time",b"update_time"]) -> None: ...
global___ConversationProfile = ConversationProfile

class AutomatedAgentConfig(google.protobuf.message.Message):
    """Defines the Automated Agent to connect to a conversation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    AGENT_FIELD_NUMBER: builtins.int
    agent: typing.Text = ...
    """Required. ID of the Dialogflow agent environment to use.

    This project needs to either be the same project as the conversation or you
    need to grant `service-<Conversation Project
    Number>@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow API
    Service Agent` role in this project.

    - For ES agents, use format: `projects/<Project ID>/locations/<Location
    ID>/agent/environments/<Environment ID or '-'>`. If environment is not
    specified, the default `draft` environment is used. Refer to
    [DetectIntentRequest](/dialogflow/docs/reference/rpc/google.cloud.dialogflow.v2beta1#google.cloud.dialogflow.v2beta1.DetectIntentRequest)
    for more details.

    - For CX agents, use format `projects/<Project ID>/locations/<Location
    ID>/agents/<Agent ID>/environments/<Environment ID
    or '-'>`. If environment is not specified, the default `draft` environment
    is used.
    """

    def __init__(self,
        *,
        agent : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["agent",b"agent"]) -> None: ...
global___AutomatedAgentConfig = AutomatedAgentConfig

class HumanAgentAssistantConfig(google.protobuf.message.Message):
    """Defines the Human Agent Assistant to connect to a conversation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class SuggestionTriggerSettings(google.protobuf.message.Message):
        """Settings of suggestion trigger."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        NO_SMALL_TALK_FIELD_NUMBER: builtins.int
        ONLY_END_USER_FIELD_NUMBER: builtins.int
        no_small_talk: builtins.bool = ...
        """Do not trigger if last utterance is small talk."""

        only_end_user: builtins.bool = ...
        """Only trigger suggestion if participant role of last utterance is
        END_USER.
        """

        def __init__(self,
            *,
            no_small_talk : builtins.bool = ...,
            only_end_user : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["no_small_talk",b"no_small_talk","only_end_user",b"only_end_user"]) -> None: ...

    class SuggestionFeatureConfig(google.protobuf.message.Message):
        """Config for suggestion features."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        SUGGESTION_FEATURE_FIELD_NUMBER: builtins.int
        ENABLE_EVENT_BASED_SUGGESTION_FIELD_NUMBER: builtins.int
        SUGGESTION_TRIGGER_SETTINGS_FIELD_NUMBER: builtins.int
        QUERY_CONFIG_FIELD_NUMBER: builtins.int
        CONVERSATION_MODEL_CONFIG_FIELD_NUMBER: builtins.int
        CONVERSATION_PROCESS_CONFIG_FIELD_NUMBER: builtins.int
        @property
        def suggestion_feature(self) -> google.cloud.dialogflow.v2beta1.participant_pb2.SuggestionFeature:
            """The suggestion feature."""
            pass
        enable_event_based_suggestion: builtins.bool = ...
        """Automatically iterates all participants and tries to compile
        suggestions.

        Supported features: ARTICLE_SUGGESTION, FAQ, DIALOGFLOW_ASSIST.
        """

        @property
        def suggestion_trigger_settings(self) -> global___HumanAgentAssistantConfig.SuggestionTriggerSettings:
            """Settings of suggestion trigger.

            Currently, only ARTICLE_SUGGESTION, FAQ, and DIALOGFLOW_ASSIST will use
            this field.
            """
            pass
        @property
        def query_config(self) -> global___HumanAgentAssistantConfig.SuggestionQueryConfig:
            """Configs of query."""
            pass
        @property
        def conversation_model_config(self) -> global___HumanAgentAssistantConfig.ConversationModelConfig:
            """Configs of custom conversation model."""
            pass
        @property
        def conversation_process_config(self) -> global___HumanAgentAssistantConfig.ConversationProcessConfig:
            """Configs for processing conversation."""
            pass
        def __init__(self,
            *,
            suggestion_feature : typing.Optional[google.cloud.dialogflow.v2beta1.participant_pb2.SuggestionFeature] = ...,
            enable_event_based_suggestion : builtins.bool = ...,
            suggestion_trigger_settings : typing.Optional[global___HumanAgentAssistantConfig.SuggestionTriggerSettings] = ...,
            query_config : typing.Optional[global___HumanAgentAssistantConfig.SuggestionQueryConfig] = ...,
            conversation_model_config : typing.Optional[global___HumanAgentAssistantConfig.ConversationModelConfig] = ...,
            conversation_process_config : typing.Optional[global___HumanAgentAssistantConfig.ConversationProcessConfig] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["conversation_model_config",b"conversation_model_config","conversation_process_config",b"conversation_process_config","query_config",b"query_config","suggestion_feature",b"suggestion_feature","suggestion_trigger_settings",b"suggestion_trigger_settings"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["conversation_model_config",b"conversation_model_config","conversation_process_config",b"conversation_process_config","enable_event_based_suggestion",b"enable_event_based_suggestion","query_config",b"query_config","suggestion_feature",b"suggestion_feature","suggestion_trigger_settings",b"suggestion_trigger_settings"]) -> None: ...

    class SuggestionConfig(google.protobuf.message.Message):
        """Detail human agent assistant config."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        FEATURE_CONFIGS_FIELD_NUMBER: builtins.int
        GROUP_SUGGESTION_RESPONSES_FIELD_NUMBER: builtins.int
        @property
        def feature_configs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___HumanAgentAssistantConfig.SuggestionFeatureConfig]:
            """Configuration of different suggestion features. One feature can have only
            one config.
            """
            pass
        group_suggestion_responses: builtins.bool = ...
        """If `group_suggestion_responses` is false, and there are multiple
        `feature_configs` in `event based suggestion` or
        StreamingAnalyzeContent, we will try to deliver suggestions to customers
        as soon as we get new suggestion. Different type of suggestions based on
        the same context will be in  separate Pub/Sub event or
        `StreamingAnalyzeContentResponse`.

        If `group_suggestion_responses` set to true. All the suggestions to the
        same participant based on the same context will be grouped into a single
        Pub/Sub event or StreamingAnalyzeContentResponse.
        """

        def __init__(self,
            *,
            feature_configs : typing.Optional[typing.Iterable[global___HumanAgentAssistantConfig.SuggestionFeatureConfig]] = ...,
            group_suggestion_responses : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["feature_configs",b"feature_configs","group_suggestion_responses",b"group_suggestion_responses"]) -> None: ...

    class SuggestionQueryConfig(google.protobuf.message.Message):
        """Config for suggestion query."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class KnowledgeBaseQuerySource(google.protobuf.message.Message):
            """Knowledge base source settings.

            Supported features: ARTICLE_SUGGESTION, FAQ.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KNOWLEDGE_BASES_FIELD_NUMBER: builtins.int
            @property
            def knowledge_bases(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
                """Required. Knowledge bases to query. Format:
                `projects/<Project ID>/locations/<Location
                ID>/knowledgeBases/<Knowledge Base ID>`. Currently, only one knowledge
                base is supported.
                """
                pass
            def __init__(self,
                *,
                knowledge_bases : typing.Optional[typing.Iterable[typing.Text]] = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["knowledge_bases",b"knowledge_bases"]) -> None: ...

        class DocumentQuerySource(google.protobuf.message.Message):
            """Document source settings.

            Supported features: SMART_REPLY, SMART_COMPOSE.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            DOCUMENTS_FIELD_NUMBER: builtins.int
            @property
            def documents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
                """Required. Knowledge documents to query from. Format:
                `projects/<Project ID>/locations/<Location
                ID>/knowledgeBases/<KnowledgeBase ID>/documents/<Document ID>`.
                Currently, only one document is supported.
                """
                pass
            def __init__(self,
                *,
                documents : typing.Optional[typing.Iterable[typing.Text]] = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["documents",b"documents"]) -> None: ...

        class DialogflowQuerySource(google.protobuf.message.Message):
            """Dialogflow source setting.

            Supported feature: DIALOGFLOW_ASSIST.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            AGENT_FIELD_NUMBER: builtins.int
            agent: typing.Text = ...
            """Required. The name of a dialogflow virtual agent used for end user side intent
            detection and suggestion. Format: `projects/<Project Number /
            ID>/locations/<Location ID>/agent`. When multiple agents are allowed in
            the same Dialogflow project.
            """

            def __init__(self,
                *,
                agent : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["agent",b"agent"]) -> None: ...

        class ContextFilterSettings(google.protobuf.message.Message):
            """Settings that determine how to filter recent conversation context when
            generating suggestions.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            DROP_HANDOFF_MESSAGES_FIELD_NUMBER: builtins.int
            DROP_VIRTUAL_AGENT_MESSAGES_FIELD_NUMBER: builtins.int
            DROP_IVR_MESSAGES_FIELD_NUMBER: builtins.int
            drop_handoff_messages: builtins.bool = ...
            """If set to true, the last message from virtual agent (hand off message)
            and the message before it (trigger message of hand off) are dropped.
            """

            drop_virtual_agent_messages: builtins.bool = ...
            """If set to true, all messages from virtual agent are dropped."""

            drop_ivr_messages: builtins.bool = ...
            """If set to true, all messages from ivr stage are dropped."""

            def __init__(self,
                *,
                drop_handoff_messages : builtins.bool = ...,
                drop_virtual_agent_messages : builtins.bool = ...,
                drop_ivr_messages : builtins.bool = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["drop_handoff_messages",b"drop_handoff_messages","drop_ivr_messages",b"drop_ivr_messages","drop_virtual_agent_messages",b"drop_virtual_agent_messages"]) -> None: ...

        KNOWLEDGE_BASE_QUERY_SOURCE_FIELD_NUMBER: builtins.int
        DOCUMENT_QUERY_SOURCE_FIELD_NUMBER: builtins.int
        DIALOGFLOW_QUERY_SOURCE_FIELD_NUMBER: builtins.int
        MAX_RESULTS_FIELD_NUMBER: builtins.int
        CONFIDENCE_THRESHOLD_FIELD_NUMBER: builtins.int
        CONTEXT_FILTER_SETTINGS_FIELD_NUMBER: builtins.int
        @property
        def knowledge_base_query_source(self) -> global___HumanAgentAssistantConfig.SuggestionQueryConfig.KnowledgeBaseQuerySource:
            """Query from knowledgebase. It is used by:
            ARTICLE_SUGGESTION, FAQ.
            """
            pass
        @property
        def document_query_source(self) -> global___HumanAgentAssistantConfig.SuggestionQueryConfig.DocumentQuerySource:
            """Query from knowledge base document. It is used by:
            SMART_REPLY, SMART_COMPOSE.
            """
            pass
        @property
        def dialogflow_query_source(self) -> global___HumanAgentAssistantConfig.SuggestionQueryConfig.DialogflowQuerySource:
            """Query from Dialogflow agent. It is used by DIALOGFLOW_ASSIST."""
            pass
        max_results: builtins.int = ...
        """Maximum number of results to return. Currently, if unset, defaults to 10.
        And the max number is 20.
        """

        confidence_threshold: builtins.float = ...
        """Confidence threshold of query result.

        Agent Assist gives each suggestion a score in the range [0.0, 1.0], based
        on the relevance between the suggestion and the current conversation
        context. A score of 0.0 has no relevance, while a score of 1.0 has high
        relevance. Only suggestions with a score greater than or equal to the
        value of this field are included in the results.

        For a baseline model (the default), the recommended value is in the range
        [0.05, 0.1].

        For a custom model, there is no recommended value. Tune this value by
        starting from a very low value and slowly increasing until you have
        desired results.

        If this field is not set, it is default to 0.0, which means that all
        suggestions are returned.

        Supported features: ARTICLE_SUGGESTION, FAQ, SMART_REPLY, SMART_COMPOSE.
        """

        @property
        def context_filter_settings(self) -> global___HumanAgentAssistantConfig.SuggestionQueryConfig.ContextFilterSettings:
            """Determines how recent conversation context is filtered when generating
            suggestions. If unspecified, no messages will be dropped.
            """
            pass
        def __init__(self,
            *,
            knowledge_base_query_source : typing.Optional[global___HumanAgentAssistantConfig.SuggestionQueryConfig.KnowledgeBaseQuerySource] = ...,
            document_query_source : typing.Optional[global___HumanAgentAssistantConfig.SuggestionQueryConfig.DocumentQuerySource] = ...,
            dialogflow_query_source : typing.Optional[global___HumanAgentAssistantConfig.SuggestionQueryConfig.DialogflowQuerySource] = ...,
            max_results : builtins.int = ...,
            confidence_threshold : builtins.float = ...,
            context_filter_settings : typing.Optional[global___HumanAgentAssistantConfig.SuggestionQueryConfig.ContextFilterSettings] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["context_filter_settings",b"context_filter_settings","dialogflow_query_source",b"dialogflow_query_source","document_query_source",b"document_query_source","knowledge_base_query_source",b"knowledge_base_query_source","query_source",b"query_source"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["confidence_threshold",b"confidence_threshold","context_filter_settings",b"context_filter_settings","dialogflow_query_source",b"dialogflow_query_source","document_query_source",b"document_query_source","knowledge_base_query_source",b"knowledge_base_query_source","max_results",b"max_results","query_source",b"query_source"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["query_source",b"query_source"]) -> typing.Optional[typing_extensions.Literal["knowledge_base_query_source","document_query_source","dialogflow_query_source"]]: ...

    class ConversationModelConfig(google.protobuf.message.Message):
        """Custom conversation models used in agent assist feature.

        Supported feature: ARTICLE_SUGGESTION, SMART_COMPOSE, SMART_REPLY.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        MODEL_FIELD_NUMBER: builtins.int
        model: typing.Text = ...
        """Conversation model resource name. Format: `projects/<Project
        ID>/conversationModels/<Model ID>`.
        """

        def __init__(self,
            *,
            model : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["model",b"model"]) -> None: ...

    class ConversationProcessConfig(google.protobuf.message.Message):
        """Config to process conversation."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        RECENT_SENTENCES_COUNT_FIELD_NUMBER: builtins.int
        recent_sentences_count: builtins.int = ...
        """Number of recent non-small-talk sentences to use as context for article
        and FAQ suggestion
        """

        def __init__(self,
            *,
            recent_sentences_count : builtins.int = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["recent_sentences_count",b"recent_sentences_count"]) -> None: ...

    class MessageAnalysisConfig(google.protobuf.message.Message):
        """Configuration for analyses to run on each conversation message."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        ENABLE_ENTITY_EXTRACTION_FIELD_NUMBER: builtins.int
        ENABLE_SENTIMENT_ANALYSIS_FIELD_NUMBER: builtins.int
        enable_entity_extraction: builtins.bool = ...
        """Enable entity extraction in conversation messages on [agent assist
        stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages).
        If unspecified, defaults to false.

        Currently, this feature is not general available, please contact Google
        to get access.
        """

        enable_sentiment_analysis: builtins.bool = ...
        """Enable sentiment analysis in conversation messages on [agent assist
        stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages).
        If unspecified, defaults to false. Sentiment analysis inspects user input
        and identifies the prevailing subjective opinion, especially to determine
        a user's attitude as positive, negative, or neutral:
        https://cloud.google.com/natural-language/docs/basics#sentiment_analysis
        For [Participants.StreamingAnalyzeContent][google.cloud.dialogflow.v2beta1.Participants.StreamingAnalyzeContent] method, result will be in
        [StreamingAnalyzeContentResponse.message.SentimentAnalysisResult][google.cloud.dialogflow.v2beta1.StreamingAnalyzeContentResponse.message].
        For [Participants.AnalyzeContent][google.cloud.dialogflow.v2beta1.Participants.AnalyzeContent] method, result will be in
        [AnalyzeContentResponse.message.SentimentAnalysisResult][google.cloud.dialogflow.v2beta1.AnalyzeContentResponse.message]
        For [Conversations.ListMessages][google.cloud.dialogflow.v2beta1.Conversations.ListMessages] method, result will be in
        [ListMessagesResponse.messages.SentimentAnalysisResult][google.cloud.dialogflow.v2beta1.ListMessagesResponse.messages]
        If Pub/Sub notification is configured, result will be in
        [ConversationEvent.new_message_payload.SentimentAnalysisResult][google.cloud.dialogflow.v2beta1.ConversationEvent.new_message_payload].
        """

        def __init__(self,
            *,
            enable_entity_extraction : builtins.bool = ...,
            enable_sentiment_analysis : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["enable_entity_extraction",b"enable_entity_extraction","enable_sentiment_analysis",b"enable_sentiment_analysis"]) -> None: ...

    NOTIFICATION_CONFIG_FIELD_NUMBER: builtins.int
    HUMAN_AGENT_SUGGESTION_CONFIG_FIELD_NUMBER: builtins.int
    END_USER_SUGGESTION_CONFIG_FIELD_NUMBER: builtins.int
    MESSAGE_ANALYSIS_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def notification_config(self) -> global___NotificationConfig:
        """Pub/Sub topic on which to publish new agent assistant events."""
        pass
    @property
    def human_agent_suggestion_config(self) -> global___HumanAgentAssistantConfig.SuggestionConfig:
        """Configuration for agent assistance of human agent participant."""
        pass
    @property
    def end_user_suggestion_config(self) -> global___HumanAgentAssistantConfig.SuggestionConfig:
        """Configuration for agent assistance of end user participant.

        Currently, this feature is not general available, please contact Google
        to get access.
        """
        pass
    @property
    def message_analysis_config(self) -> global___HumanAgentAssistantConfig.MessageAnalysisConfig:
        """Configuration for message analysis."""
        pass
    def __init__(self,
        *,
        notification_config : typing.Optional[global___NotificationConfig] = ...,
        human_agent_suggestion_config : typing.Optional[global___HumanAgentAssistantConfig.SuggestionConfig] = ...,
        end_user_suggestion_config : typing.Optional[global___HumanAgentAssistantConfig.SuggestionConfig] = ...,
        message_analysis_config : typing.Optional[global___HumanAgentAssistantConfig.MessageAnalysisConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_user_suggestion_config",b"end_user_suggestion_config","human_agent_suggestion_config",b"human_agent_suggestion_config","message_analysis_config",b"message_analysis_config","notification_config",b"notification_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_user_suggestion_config",b"end_user_suggestion_config","human_agent_suggestion_config",b"human_agent_suggestion_config","message_analysis_config",b"message_analysis_config","notification_config",b"notification_config"]) -> None: ...
global___HumanAgentAssistantConfig = HumanAgentAssistantConfig

class HumanAgentHandoffConfig(google.protobuf.message.Message):
    """Defines the hand off to a live agent, typically on which external agent
    service provider to connect to a conversation.

    Currently, this feature is not general available, please contact Google
    to get access.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LivePersonConfig(google.protobuf.message.Message):
        """Configuration specific to LivePerson (https://www.liveperson.com)."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        ACCOUNT_NUMBER_FIELD_NUMBER: builtins.int
        account_number: typing.Text = ...
        """Required. Account number of the LivePerson account to connect. This is
        the account number you input at the login page.
        """

        def __init__(self,
            *,
            account_number : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["account_number",b"account_number"]) -> None: ...

    class SalesforceLiveAgentConfig(google.protobuf.message.Message):
        """Configuration specific to Salesforce Live Agent."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        ORGANIZATION_ID_FIELD_NUMBER: builtins.int
        DEPLOYMENT_ID_FIELD_NUMBER: builtins.int
        BUTTON_ID_FIELD_NUMBER: builtins.int
        ENDPOINT_DOMAIN_FIELD_NUMBER: builtins.int
        organization_id: typing.Text = ...
        """Required. The organization ID of the Salesforce account."""

        deployment_id: typing.Text = ...
        """Required. Live Agent deployment ID."""

        button_id: typing.Text = ...
        """Required. Live Agent chat button ID."""

        endpoint_domain: typing.Text = ...
        """Required. Domain of the Live Agent endpoint for this agent. You can find
        the endpoint URL in the `Live Agent settings` page. For example if URL
        has the form https://d.la4-c2-phx.salesforceliveagent.com/...,
        you should fill in d.la4-c2-phx.salesforceliveagent.com.
        """

        def __init__(self,
            *,
            organization_id : typing.Text = ...,
            deployment_id : typing.Text = ...,
            button_id : typing.Text = ...,
            endpoint_domain : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["button_id",b"button_id","deployment_id",b"deployment_id","endpoint_domain",b"endpoint_domain","organization_id",b"organization_id"]) -> None: ...

    LIVE_PERSON_CONFIG_FIELD_NUMBER: builtins.int
    SALESFORCE_LIVE_AGENT_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def live_person_config(self) -> global___HumanAgentHandoffConfig.LivePersonConfig:
        """Uses LivePerson (https://www.liveperson.com)."""
        pass
    @property
    def salesforce_live_agent_config(self) -> global___HumanAgentHandoffConfig.SalesforceLiveAgentConfig:
        """Uses Salesforce Live Agent."""
        pass
    def __init__(self,
        *,
        live_person_config : typing.Optional[global___HumanAgentHandoffConfig.LivePersonConfig] = ...,
        salesforce_live_agent_config : typing.Optional[global___HumanAgentHandoffConfig.SalesforceLiveAgentConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["agent_service",b"agent_service","live_person_config",b"live_person_config","salesforce_live_agent_config",b"salesforce_live_agent_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["agent_service",b"agent_service","live_person_config",b"live_person_config","salesforce_live_agent_config",b"salesforce_live_agent_config"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["agent_service",b"agent_service"]) -> typing.Optional[typing_extensions.Literal["live_person_config","salesforce_live_agent_config"]]: ...
global___HumanAgentHandoffConfig = HumanAgentHandoffConfig

class NotificationConfig(google.protobuf.message.Message):
    """Defines notification behavior."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _MessageFormat:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _MessageFormatEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MessageFormat.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        MESSAGE_FORMAT_UNSPECIFIED: NotificationConfig.MessageFormat.ValueType = ...  # 0
        """If it is unspecified, PROTO will be used."""

        PROTO: NotificationConfig.MessageFormat.ValueType = ...  # 1
        """Pubsub message will be serialized proto."""

        JSON: NotificationConfig.MessageFormat.ValueType = ...  # 2
        """Pubsub message will be json."""

    class MessageFormat(_MessageFormat, metaclass=_MessageFormatEnumTypeWrapper):
        """Format of cloud pub/sub message."""
        pass

    MESSAGE_FORMAT_UNSPECIFIED: NotificationConfig.MessageFormat.ValueType = ...  # 0
    """If it is unspecified, PROTO will be used."""

    PROTO: NotificationConfig.MessageFormat.ValueType = ...  # 1
    """Pubsub message will be serialized proto."""

    JSON: NotificationConfig.MessageFormat.ValueType = ...  # 2
    """Pubsub message will be json."""


    TOPIC_FIELD_NUMBER: builtins.int
    MESSAGE_FORMAT_FIELD_NUMBER: builtins.int
    topic: typing.Text = ...
    """Name of the Pub/Sub topic to publish conversation
    events like
    [CONVERSATION_STARTED][google.cloud.dialogflow.v2beta1.ConversationEvent.Type.CONVERSATION_STARTED] as
    serialized [ConversationEvent][google.cloud.dialogflow.v2beta1.ConversationEvent] protos.

    Notification works for phone calls, if this topic either is in the same
    project as the conversation or you grant `service-<Conversation Project
    Number>@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow Service
    Agent` role in the topic project.

    Format: `projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>`.
    """

    message_format: global___NotificationConfig.MessageFormat.ValueType = ...
    """Format of message."""

    def __init__(self,
        *,
        topic : typing.Text = ...,
        message_format : global___NotificationConfig.MessageFormat.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["message_format",b"message_format","topic",b"topic"]) -> None: ...
global___NotificationConfig = NotificationConfig

class LoggingConfig(google.protobuf.message.Message):
    """Defines logging behavior for conversation lifecycle events."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ENABLE_STACKDRIVER_LOGGING_FIELD_NUMBER: builtins.int
    enable_stackdriver_logging: builtins.bool = ...
    """Whether to log conversation events like
    [CONVERSATION_STARTED][google.cloud.dialogflow.v2beta1.ConversationEvent.Type.CONVERSATION_STARTED] to
    Stackdriver in the conversation project as JSON format
    [ConversationEvent][google.cloud.dialogflow.v2beta1.ConversationEvent] protos.
    """

    def __init__(self,
        *,
        enable_stackdriver_logging : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["enable_stackdriver_logging",b"enable_stackdriver_logging"]) -> None: ...
global___LoggingConfig = LoggingConfig

class ListConversationProfilesRequest(google.protobuf.message.Message):
    """The request message for [ConversationProfiles.ListConversationProfiles][google.cloud.dialogflow.v2beta1.ConversationProfiles.ListConversationProfiles]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The project to list all conversation profiles from.
    Format: `projects/<Project ID>/locations/<Location ID>`.
    """

    page_size: builtins.int = ...
    """The maximum number of items to return in a single page. By
    default 100 and at most 1000.
    """

    page_token: typing.Text = ...
    """The next_page_token value returned from a previous list request."""

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListConversationProfilesRequest = ListConversationProfilesRequest

class ListConversationProfilesResponse(google.protobuf.message.Message):
    """The response message for [ConversationProfiles.ListConversationProfiles][google.cloud.dialogflow.v2beta1.ConversationProfiles.ListConversationProfiles]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONVERSATION_PROFILES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def conversation_profiles(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ConversationProfile]:
        """The list of project conversation profiles. There is a maximum number
        of items returned based on the page_size field in the request.
        """
        pass
    next_page_token: typing.Text = ...
    """Token to retrieve the next page of results, or empty if there are no
    more results in the list.
    """

    def __init__(self,
        *,
        conversation_profiles : typing.Optional[typing.Iterable[global___ConversationProfile]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["conversation_profiles",b"conversation_profiles","next_page_token",b"next_page_token"]) -> None: ...
global___ListConversationProfilesResponse = ListConversationProfilesResponse

class GetConversationProfileRequest(google.protobuf.message.Message):
    """The request message for [ConversationProfiles.GetConversationProfile][google.cloud.dialogflow.v2beta1.ConversationProfiles.GetConversationProfile]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the conversation profile.
    Format: `projects/<Project ID>/locations/<Location
    ID>/conversationProfiles/<Conversation Profile ID>`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetConversationProfileRequest = GetConversationProfileRequest

class CreateConversationProfileRequest(google.protobuf.message.Message):
    """The request message for [ConversationProfiles.CreateConversationProfile][google.cloud.dialogflow.v2beta1.ConversationProfiles.CreateConversationProfile]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    CONVERSATION_PROFILE_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The project to create a conversation profile for.
    Format: `projects/<Project ID>/locations/<Location ID>`.
    """

    @property
    def conversation_profile(self) -> global___ConversationProfile:
        """Required. The conversation profile to create."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        conversation_profile : typing.Optional[global___ConversationProfile] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["conversation_profile",b"conversation_profile"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["conversation_profile",b"conversation_profile","parent",b"parent"]) -> None: ...
global___CreateConversationProfileRequest = CreateConversationProfileRequest

class UpdateConversationProfileRequest(google.protobuf.message.Message):
    """The request message for [ConversationProfiles.UpdateConversationProfile][google.cloud.dialogflow.v2beta1.ConversationProfiles.UpdateConversationProfile]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONVERSATION_PROFILE_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    @property
    def conversation_profile(self) -> global___ConversationProfile:
        """Required. The conversation profile to update."""
        pass
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Required. The mask to control which fields to update."""
        pass
    def __init__(self,
        *,
        conversation_profile : typing.Optional[global___ConversationProfile] = ...,
        update_mask : typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["conversation_profile",b"conversation_profile","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["conversation_profile",b"conversation_profile","update_mask",b"update_mask"]) -> None: ...
global___UpdateConversationProfileRequest = UpdateConversationProfileRequest

class DeleteConversationProfileRequest(google.protobuf.message.Message):
    """The request message for [ConversationProfiles.DeleteConversationProfile][google.cloud.dialogflow.v2beta1.ConversationProfiles.DeleteConversationProfile].

    This operation fails if the conversation profile is still referenced from
    a phone number.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The name of the conversation profile to delete.
    Format: `projects/<Project ID>/locations/<Location
    ID>/conversationProfiles/<Conversation Profile ID>`.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeleteConversationProfileRequest = DeleteConversationProfileRequest
