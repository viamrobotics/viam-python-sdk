"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.automl.v1beta1.classification_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class TextSentimentAnnotation(google.protobuf.message.Message):
    """Contains annotation details specific to text sentiment."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SENTIMENT_FIELD_NUMBER: builtins.int
    sentiment: builtins.int = ...
    """Output only. The sentiment with the semantic, as given to the
    [AutoMl.ImportData][google.cloud.automl.v1beta1.AutoMl.ImportData] when populating the dataset from which the model used
    for the prediction had been trained.
    The sentiment values are between 0 and
    Dataset.text_sentiment_dataset_metadata.sentiment_max (inclusive),
    with higher value meaning more positive sentiment. They are completely
    relative, i.e. 0 means least positive sentiment and sentiment_max means
    the most positive from the sentiments present in the train data. Therefore
     e.g. if train data had only negative sentiment, then sentiment_max, would
    be still negative (although least negative).
    The sentiment shouldn't be confused with "score" or "magnitude"
    from the previous Natural Language Sentiment Analysis API.
    """

    def __init__(self,
        *,
        sentiment : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["sentiment",b"sentiment"]) -> None: ...
global___TextSentimentAnnotation = TextSentimentAnnotation

class TextSentimentEvaluationMetrics(google.protobuf.message.Message):
    """Model evaluation metrics for text sentiment problems."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PRECISION_FIELD_NUMBER: builtins.int
    RECALL_FIELD_NUMBER: builtins.int
    F1_SCORE_FIELD_NUMBER: builtins.int
    MEAN_ABSOLUTE_ERROR_FIELD_NUMBER: builtins.int
    MEAN_SQUARED_ERROR_FIELD_NUMBER: builtins.int
    LINEAR_KAPPA_FIELD_NUMBER: builtins.int
    QUADRATIC_KAPPA_FIELD_NUMBER: builtins.int
    CONFUSION_MATRIX_FIELD_NUMBER: builtins.int
    ANNOTATION_SPEC_ID_FIELD_NUMBER: builtins.int
    precision: builtins.float = ...
    """Output only. Precision."""

    recall: builtins.float = ...
    """Output only. Recall."""

    f1_score: builtins.float = ...
    """Output only. The harmonic mean of recall and precision."""

    mean_absolute_error: builtins.float = ...
    """Output only. Mean absolute error. Only set for the overall model
    evaluation, not for evaluation of a single annotation spec.
    """

    mean_squared_error: builtins.float = ...
    """Output only. Mean squared error. Only set for the overall model
    evaluation, not for evaluation of a single annotation spec.
    """

    linear_kappa: builtins.float = ...
    """Output only. Linear weighted kappa. Only set for the overall model
    evaluation, not for evaluation of a single annotation spec.
    """

    quadratic_kappa: builtins.float = ...
    """Output only. Quadratic weighted kappa. Only set for the overall model
    evaluation, not for evaluation of a single annotation spec.
    """

    @property
    def confusion_matrix(self) -> google.cloud.automl.v1beta1.classification_pb2.ClassificationEvaluationMetrics.ConfusionMatrix:
        """Output only. Confusion matrix of the evaluation.
        Only set for the overall model evaluation, not for evaluation of a single
        annotation spec.
        """
        pass
    @property
    def annotation_spec_id(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Output only. The annotation spec ids used for this evaluation.
        Deprecated .
        """
        pass
    def __init__(self,
        *,
        precision : builtins.float = ...,
        recall : builtins.float = ...,
        f1_score : builtins.float = ...,
        mean_absolute_error : builtins.float = ...,
        mean_squared_error : builtins.float = ...,
        linear_kappa : builtins.float = ...,
        quadratic_kappa : builtins.float = ...,
        confusion_matrix : typing.Optional[google.cloud.automl.v1beta1.classification_pb2.ClassificationEvaluationMetrics.ConfusionMatrix] = ...,
        annotation_spec_id : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["confusion_matrix",b"confusion_matrix"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annotation_spec_id",b"annotation_spec_id","confusion_matrix",b"confusion_matrix","f1_score",b"f1_score","linear_kappa",b"linear_kappa","mean_absolute_error",b"mean_absolute_error","mean_squared_error",b"mean_squared_error","precision",b"precision","quadratic_kappa",b"quadratic_kappa","recall",b"recall"]) -> None: ...
global___TextSentimentEvaluationMetrics = TextSentimentEvaluationMetrics
