"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.talent.v4beta1.common_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
import google.type.date_pb2
import google.type.latlng_pb2
import google.type.timeofday_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class JobQuery(google.protobuf.message.Message):
    """The query required to perform a search query."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    QUERY_FIELD_NUMBER: builtins.int
    QUERY_LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    COMPANIES_FIELD_NUMBER: builtins.int
    LOCATION_FILTERS_FIELD_NUMBER: builtins.int
    JOB_CATEGORIES_FIELD_NUMBER: builtins.int
    COMMUTE_FILTER_FIELD_NUMBER: builtins.int
    COMPANY_DISPLAY_NAMES_FIELD_NUMBER: builtins.int
    COMPENSATION_FILTER_FIELD_NUMBER: builtins.int
    CUSTOM_ATTRIBUTE_FILTER_FIELD_NUMBER: builtins.int
    DISABLE_SPELL_CHECK_FIELD_NUMBER: builtins.int
    EMPLOYMENT_TYPES_FIELD_NUMBER: builtins.int
    LANGUAGE_CODES_FIELD_NUMBER: builtins.int
    PUBLISH_TIME_RANGE_FIELD_NUMBER: builtins.int
    EXCLUDED_JOBS_FIELD_NUMBER: builtins.int
    query: typing.Text = ...
    """The query string that matches against the job title, description, and
    location fields.

    The maximum number of allowed characters is 255.
    """

    query_language_code: typing.Text = ...
    """The language code of [query][google.cloud.talent.v4beta1.JobQuery.query]. For example, "en-US". This field helps to
    better interpret the query.

    If a value isn't specified, the query language code is automatically
    detected, which may not be accurate.

    Language code should be in BCP-47 format, such as "en-US" or "sr-Latn".
    For more information, see
    [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
    """

    @property
    def companies(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """This filter specifies the company entities to search against.

        If a value isn't specified, jobs are searched for against all
        companies.

        If multiple values are specified, jobs are searched against the
        companies specified.

        The format is
        "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}". For
        example, "projects/foo/tenants/bar/companies/baz".

        If tenant id is unspecified, the default tenant is used. For
        example, "projects/foo/companies/bar".

        At most 20 company filters are allowed.
        """
        pass
    @property
    def location_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___LocationFilter]:
        """The location filter specifies geo-regions containing the jobs to
        search against. See [LocationFilter][google.cloud.talent.v4beta1.LocationFilter] for more information.

        If a location value isn't specified, jobs fitting the other search
        criteria are retrieved regardless of where they're located.

        If multiple values are specified, jobs are retrieved from any of the
        specified locations. If different values are specified for the
        [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] parameter, the maximum provided
        distance is used for all locations.

        At most 5 location filters are allowed.
        """
        pass
    @property
    def job_categories(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[google.cloud.talent.v4beta1.common_pb2.JobCategory.ValueType]:
        """The category filter specifies the categories of jobs to search against.
        See [JobCategory][google.cloud.talent.v4beta1.JobCategory] for more information.

        If a value isn't specified, jobs from any category are searched against.

        If multiple values are specified, jobs from any of the specified
        categories are searched against.
        """
        pass
    @property
    def commute_filter(self) -> global___CommuteFilter:
        """Allows filtering jobs by commute time with different travel methods (for
         example, driving or public transit).

        Note: This only works when you specify a [CommuteMethod][google.cloud.talent.v4beta1.CommuteMethod]. In this case,
        [location_filters][google.cloud.talent.v4beta1.JobQuery.location_filters] is ignored.

         Currently we don't support sorting by commute time.
        """
        pass
    @property
    def company_display_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """This filter specifies the exact company [Company.display_name][google.cloud.talent.v4beta1.Company.display_name]
        of the jobs to search against.

        If a value isn't specified, jobs within the search results are
        associated with any company.

        If multiple values are specified, jobs within the search results may be
        associated with any of the specified companies.

        At most 20 company display name filters are allowed.
        """
        pass
    @property
    def compensation_filter(self) -> global___CompensationFilter:
        """This search filter is applied only to
        [Job.compensation_info][google.cloud.talent.v4beta1.Job.compensation_info]. For example, if the filter is specified
        as "Hourly job with per-hour compensation > $15", only jobs meeting
        these criteria are searched. If a filter isn't defined, all open jobs
        are searched.
        """
        pass
    custom_attribute_filter: typing.Text = ...
    """This filter specifies a structured syntax to match against the
    [Job.custom_attributes][google.cloud.talent.v4beta1.Job.custom_attributes] marked as `filterable`.

    The syntax for this expression is a subset of SQL syntax.

    Supported operators are: `=`, `!=`, `<`, `<=`, `>`, and `>=` where the
    left of the operator is a custom field key and the right of the operator
    is a number or a quoted string. You must escape backslash (\\\\) and
    quote (\\") characters.

    Supported functions are `LOWER([field_name])` to
    perform a case insensitive match and `EMPTY([field_name])` to filter on the
    existence of a key.

    Boolean expressions (AND/OR/NOT) are supported up to 3 levels of
    nesting (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100
    comparisons or functions are allowed in the expression. The expression
    must be < 6000 bytes in length.

    Sample Query:
    `(LOWER(driving_license)="class \\"a\\"" OR EMPTY(driving_license)) AND
    driving_years > 10`
    """

    disable_spell_check: builtins.bool = ...
    """This flag controls the spell-check feature. If false, the
    service attempts to correct a misspelled query,
    for example, "enginee" is corrected to "engineer".

    Defaults to false: a spell check is performed.
    """

    @property
    def employment_types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[google.cloud.talent.v4beta1.common_pb2.EmploymentType.ValueType]:
        """The employment type filter specifies the employment type of jobs to
        search against, such as [EmploymentType.FULL_TIME][google.cloud.talent.v4beta1.EmploymentType.FULL_TIME].

        If a value isn't specified, jobs in the search results includes any
        employment type.

        If multiple values are specified, jobs in the search results include
        any of the specified employment types.
        """
        pass
    @property
    def language_codes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """This filter specifies the locale of jobs to search against,
        for example, "en-US".

        If a value isn't specified, the search results can contain jobs in any
        locale.


        Language codes should be in BCP-47 format, such as "en-US" or "sr-Latn".
        For more information, see
        [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).

        At most 10 language code filters are allowed.
        """
        pass
    @property
    def publish_time_range(self) -> google.cloud.talent.v4beta1.common_pb2.TimestampRange:
        """Jobs published within a range specified by this filter are searched
        against.
        """
        pass
    @property
    def excluded_jobs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """This filter specifies a list of job names to be excluded during search.

        At most 400 excluded job names are allowed.
        """
        pass
    def __init__(self,
        *,
        query : typing.Text = ...,
        query_language_code : typing.Text = ...,
        companies : typing.Optional[typing.Iterable[typing.Text]] = ...,
        location_filters : typing.Optional[typing.Iterable[global___LocationFilter]] = ...,
        job_categories : typing.Optional[typing.Iterable[google.cloud.talent.v4beta1.common_pb2.JobCategory.ValueType]] = ...,
        commute_filter : typing.Optional[global___CommuteFilter] = ...,
        company_display_names : typing.Optional[typing.Iterable[typing.Text]] = ...,
        compensation_filter : typing.Optional[global___CompensationFilter] = ...,
        custom_attribute_filter : typing.Text = ...,
        disable_spell_check : builtins.bool = ...,
        employment_types : typing.Optional[typing.Iterable[google.cloud.talent.v4beta1.common_pb2.EmploymentType.ValueType]] = ...,
        language_codes : typing.Optional[typing.Iterable[typing.Text]] = ...,
        publish_time_range : typing.Optional[google.cloud.talent.v4beta1.common_pb2.TimestampRange] = ...,
        excluded_jobs : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["commute_filter",b"commute_filter","compensation_filter",b"compensation_filter","publish_time_range",b"publish_time_range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["commute_filter",b"commute_filter","companies",b"companies","company_display_names",b"company_display_names","compensation_filter",b"compensation_filter","custom_attribute_filter",b"custom_attribute_filter","disable_spell_check",b"disable_spell_check","employment_types",b"employment_types","excluded_jobs",b"excluded_jobs","job_categories",b"job_categories","language_codes",b"language_codes","location_filters",b"location_filters","publish_time_range",b"publish_time_range","query",b"query","query_language_code",b"query_language_code"]) -> None: ...
global___JobQuery = JobQuery

class ProfileQuery(google.protobuf.message.Message):
    """Filters to apply when performing the search query."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    QUERY_FIELD_NUMBER: builtins.int
    LOCATION_FILTERS_FIELD_NUMBER: builtins.int
    JOB_TITLE_FILTERS_FIELD_NUMBER: builtins.int
    EMPLOYER_FILTERS_FIELD_NUMBER: builtins.int
    EDUCATION_FILTERS_FIELD_NUMBER: builtins.int
    SKILL_FILTERS_FIELD_NUMBER: builtins.int
    WORK_EXPERIENCE_FILTER_FIELD_NUMBER: builtins.int
    TIME_FILTERS_FIELD_NUMBER: builtins.int
    HIRABLE_FILTER_FIELD_NUMBER: builtins.int
    APPLICATION_DATE_FILTERS_FIELD_NUMBER: builtins.int
    APPLICATION_OUTCOME_NOTES_FILTERS_FIELD_NUMBER: builtins.int
    APPLICATION_JOB_FILTERS_FIELD_NUMBER: builtins.int
    CUSTOM_ATTRIBUTE_FILTER_FIELD_NUMBER: builtins.int
    CANDIDATE_AVAILABILITY_FILTER_FIELD_NUMBER: builtins.int
    AVAILABILITY_FILTERS_FIELD_NUMBER: builtins.int
    PERSON_NAME_FILTERS_FIELD_NUMBER: builtins.int
    query: typing.Text = ...
    """Keywords to match any text fields of profiles.

    For example, "software engineer in Palo Alto".
    """

    @property
    def location_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___LocationFilter]:
        """The location filter specifies geo-regions containing the profiles to
        search against.

        One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
        provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
        [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.

        The following logic is used to determine which locations in
        the profile to filter against:

        1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
        [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.

        2. If the above set of locations is empty, all of the profile's geocoded
        [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
        CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.

        3. If the above set of locations is empty, all of the profile's geocoded
        [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
        CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.

        This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
        any of the above criteria will not be included in a search with location
        filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
        WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
        location filter.

        If a location filter isn't specified, profiles fitting the other search
        criteria are retrieved regardless of where they're located.

        If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
        profiles from that location.

        If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
        [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
        point (latitude and longitude), and radius are automatically detected by
        the Google Maps Geocoding API and included as well. If
        [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
        falls back to keyword search.

        If the detected
        [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
        [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
        [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
        or
        [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
        the filter is performed against the detected location name (using exact
        text matching). Otherwise, the filter is performed against the detected
        center point and a radius of detected location radius +
        [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].

        If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
        [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
        radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
        [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
        [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.

        [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
        of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
        does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
        explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
        set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
        set to 0, the server will use the default value of
        [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
        effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
        setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
        (such as 0.00001).

        If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
        """
        pass
    @property
    def job_title_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___JobTitleFilter]:
        """Job title filter specifies job titles of profiles to match on.

        If a job title isn't specified, profiles with any titles are retrieved.

        If multiple values are specified, profiles are retrieved with any of the
        specified job titles.

        If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
        profiles with the job titles.

        For example, search for profiles with a job title "Product Manager".
        """
        pass
    @property
    def employer_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EmployerFilter]:
        """Employer filter specifies employers of profiles to match on.

        If an employer filter isn't specified, profiles with any employers are
        retrieved.

        If multiple employer filters are specified, profiles with any matching
        employers are retrieved.

        If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
        profiles that match the employers.

        For example, search for profiles that have working experience at "Google
        LLC".
        """
        pass
    @property
    def education_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EducationFilter]:
        """Education filter specifies education of profiles to match on.

        If an education filter isn't specified, profiles with any education are
        retrieved.

        If multiple education filters are specified, profiles that match any
        education filters are retrieved.

        If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
        profiles that match the educations.

        For example, search for profiles with a master degree.
        """
        pass
    @property
    def skill_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SkillFilter]:
        """Skill filter specifies skill of profiles to match on.

        If a skill filter isn't specified, profiles with any skills are retrieved.

        If multiple skill filters are specified, profiles that match any skill
        filters are retrieved.

        If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
        that match the skills.

        For example, search for profiles that have "Java" and "Python" in skill
        list.
        """
        pass
    @property
    def work_experience_filter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___WorkExperienceFilter]:
        """Work experience filter specifies the total working experience of profiles
        to match on.

        If a work experience filter isn't specified, profiles with any
        professional experience are retrieved.

        If multiple work experience filters are specified, profiles that match any
        work experience filters are retrieved.

        For example, search for profiles with 10 years of work experience.
        """
        pass
    @property
    def time_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TimeFilter]:
        """Time filter specifies the create/update timestamp of the profiles to match
        on.

        For example, search for profiles created since "2018-1-1".
        """
        pass
    @property
    def hirable_filter(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """The hirable filter specifies the profile's hirable status to match on."""
        pass
    @property
    def application_date_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ApplicationDateFilter]:
        """The application date filters specify application date ranges to match on."""
        pass
    @property
    def application_outcome_notes_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ApplicationOutcomeNotesFilter]:
        """The application outcome notes filters specify the notes for the outcome of
        the job application.
        """
        pass
    @property
    def application_job_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ApplicationJobFilter]:
        """The application job filters specify the job applied for in the application."""
        pass
    custom_attribute_filter: typing.Text = ...
    """This filter specifies a structured syntax to match against the
    [Profile.custom_attributes][google.cloud.talent.v4beta1.Profile.custom_attributes] that are marked as `filterable`.

    The syntax for this expression is a subset of Google SQL syntax.

    String custom attributes: supported operators are =, != where the left of
    the operator is a custom field key and the right of the operator is a
    string (surrounded by quotes) value.

    Numeric custom attributes: Supported operators are '>', '<' or '='
    operators where the left of the operator is a custom field key and the
    right of the operator is a numeric value.

    Supported functions are LOWER(<field_name>) to
    perform case insensitive match and EMPTY(<field_name>) to filter on the
    existence of a key.

    Boolean expressions (AND/OR/NOT) are supported up to 3 levels of
    nesting (for example "((A AND B AND C) OR NOT D) AND E"), and there can be
    a maximum of 50 comparisons/functions in the expression. The expression
    must be < 2000 characters in length.

    Sample Query:
    (key1 = "TEST" OR LOWER(key1)="test" OR NOT EMPTY(key1))
    """

    @property
    def candidate_availability_filter(self) -> global___CandidateAvailabilityFilter:
        """Deprecated. Use availability_filters instead.

        The candidate availability filter which filters based on availability
        signals.

        Signal 1: Number of days since most recent job application.  See
        [Availability.JobApplicationAvailabilitySignal][google.cloud.talent.v4beta1.Availability.JobApplicationAvailabilitySignal] for the details of this
        signal.

        Signal 2: Number of days since last profile update. See
        [Availability.ProfileUpdateAvailabilitySignal][google.cloud.talent.v4beta1.Availability.ProfileUpdateAvailabilitySignal]
        for the details of this signal.

        The candidate availability filter helps a recruiter understand if a
        specific candidate is likely to be actively seeking new job opportunities
        based on an aggregated set of signals.  Specifically, the intent is NOT to
        indicate the candidate's potential qualification / interest / close ability
        for a specific job.
        """
        pass
    @property
    def availability_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AvailabilityFilter]:
        """The availability filter which filters based on
        [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].

        The availability filter helps a recruiter understand if a
        specific candidate is likely to be actively seeking new job opportunities
        based on an aggregated set of signals.  Specifically, the intent is NOT to
        indicate the candidate's potential qualification / interest / close ability
        for a specific job.

        There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
        [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
        [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
        an error is thrown.
        """
        pass
    @property
    def person_name_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PersonNameFilter]:
        """Person name filter specifies person name of profiles to match on.

        If multiple person name filters are specified, profiles that match any
        person name filters are retrieved.

        For example, search for profiles of candidates with name "John Smith".
        """
        pass
    def __init__(self,
        *,
        query : typing.Text = ...,
        location_filters : typing.Optional[typing.Iterable[global___LocationFilter]] = ...,
        job_title_filters : typing.Optional[typing.Iterable[global___JobTitleFilter]] = ...,
        employer_filters : typing.Optional[typing.Iterable[global___EmployerFilter]] = ...,
        education_filters : typing.Optional[typing.Iterable[global___EducationFilter]] = ...,
        skill_filters : typing.Optional[typing.Iterable[global___SkillFilter]] = ...,
        work_experience_filter : typing.Optional[typing.Iterable[global___WorkExperienceFilter]] = ...,
        time_filters : typing.Optional[typing.Iterable[global___TimeFilter]] = ...,
        hirable_filter : typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        application_date_filters : typing.Optional[typing.Iterable[global___ApplicationDateFilter]] = ...,
        application_outcome_notes_filters : typing.Optional[typing.Iterable[global___ApplicationOutcomeNotesFilter]] = ...,
        application_job_filters : typing.Optional[typing.Iterable[global___ApplicationJobFilter]] = ...,
        custom_attribute_filter : typing.Text = ...,
        candidate_availability_filter : typing.Optional[global___CandidateAvailabilityFilter] = ...,
        availability_filters : typing.Optional[typing.Iterable[global___AvailabilityFilter]] = ...,
        person_name_filters : typing.Optional[typing.Iterable[global___PersonNameFilter]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["candidate_availability_filter",b"candidate_availability_filter","hirable_filter",b"hirable_filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["application_date_filters",b"application_date_filters","application_job_filters",b"application_job_filters","application_outcome_notes_filters",b"application_outcome_notes_filters","availability_filters",b"availability_filters","candidate_availability_filter",b"candidate_availability_filter","custom_attribute_filter",b"custom_attribute_filter","education_filters",b"education_filters","employer_filters",b"employer_filters","hirable_filter",b"hirable_filter","job_title_filters",b"job_title_filters","location_filters",b"location_filters","person_name_filters",b"person_name_filters","query",b"query","skill_filters",b"skill_filters","time_filters",b"time_filters","work_experience_filter",b"work_experience_filter"]) -> None: ...
global___ProfileQuery = ProfileQuery

class LocationFilter(google.protobuf.message.Message):
    """Geographic region of the search."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _TelecommutePreference:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TelecommutePreferenceEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TelecommutePreference.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        TELECOMMUTE_PREFERENCE_UNSPECIFIED: LocationFilter.TelecommutePreference.ValueType = ...  # 0
        """Default value if the telecommute preference isn't specified."""

        TELECOMMUTE_EXCLUDED: LocationFilter.TelecommutePreference.ValueType = ...  # 1
        """Exclude telecommute jobs."""

        TELECOMMUTE_ALLOWED: LocationFilter.TelecommutePreference.ValueType = ...  # 2
        """Allow telecommute jobs."""

    class TelecommutePreference(_TelecommutePreference, metaclass=_TelecommutePreferenceEnumTypeWrapper):
        """Specify whether to include telecommute jobs."""
        pass

    TELECOMMUTE_PREFERENCE_UNSPECIFIED: LocationFilter.TelecommutePreference.ValueType = ...  # 0
    """Default value if the telecommute preference isn't specified."""

    TELECOMMUTE_EXCLUDED: LocationFilter.TelecommutePreference.ValueType = ...  # 1
    """Exclude telecommute jobs."""

    TELECOMMUTE_ALLOWED: LocationFilter.TelecommutePreference.ValueType = ...  # 2
    """Allow telecommute jobs."""


    ADDRESS_FIELD_NUMBER: builtins.int
    REGION_CODE_FIELD_NUMBER: builtins.int
    LAT_LNG_FIELD_NUMBER: builtins.int
    DISTANCE_IN_MILES_FIELD_NUMBER: builtins.int
    TELECOMMUTE_PREFERENCE_FIELD_NUMBER: builtins.int
    NEGATED_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    """The address name, such as "Mountain View" or "Bay Area"."""

    region_code: typing.Text = ...
    """CLDR region code of the country/region of the address. This is used
    to address ambiguity of the user-input location, for example, "Liverpool"
    against "Liverpool, NY, US" or "Liverpool, UK".

    Set this field to bias location resolution toward a specific country
    or territory. If this field is not set, application behavior is biased
    toward the United States by default.

    See
    https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html
    for details. Example: "CH" for Switzerland.
    Note that this filter is not applicable for Profile Search related queries.
    """

    @property
    def lat_lng(self) -> google.type.latlng_pb2.LatLng:
        """The latitude and longitude of the geographic center to search from. This
        field is ignored if `address` is provided.
        """
        pass
    distance_in_miles: builtins.float = ...
    """The distance_in_miles is applied when the location being searched for is
    identified as a city or smaller. This field is ignored if the location
    being searched for is a state or larger.
    """

    telecommute_preference: global___LocationFilter.TelecommutePreference.ValueType = ...
    """Allows the client to return jobs without a
    set location, specifically, telecommuting jobs (telecommuting is considered
    by the service as a special location.
    [Job.posting_region][google.cloud.talent.v4beta1.Job.posting_region] indicates if a job permits telecommuting.
    If this field is set to [TelecommutePreference.TELECOMMUTE_ALLOWED][google.cloud.talent.v4beta1.LocationFilter.TelecommutePreference.TELECOMMUTE_ALLOWED],
    telecommuting jobs are searched, and [address][google.cloud.talent.v4beta1.LocationFilter.address] and [lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are
    ignored. If not set or set to
    [TelecommutePreference.TELECOMMUTE_EXCLUDED][google.cloud.talent.v4beta1.LocationFilter.TelecommutePreference.TELECOMMUTE_EXCLUDED], telecommute job are not
    searched.

    This filter can be used by itself to search exclusively for telecommuting
    jobs, or it can be combined with another location
    filter to search for a combination of job locations,
    such as "Mountain View" or "telecommuting" jobs. However, when used in
    combination with other location filters, telecommuting jobs can be
    treated as less relevant than other jobs in the search response.

    This field is only used for job search requests.
    """

    negated: builtins.bool = ...
    """Whether to apply negation to the filter so profiles matching the filter
    are excluded.

    Currently only supported in profile search.
    """

    def __init__(self,
        *,
        address : typing.Text = ...,
        region_code : typing.Text = ...,
        lat_lng : typing.Optional[google.type.latlng_pb2.LatLng] = ...,
        distance_in_miles : builtins.float = ...,
        telecommute_preference : global___LocationFilter.TelecommutePreference.ValueType = ...,
        negated : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["lat_lng",b"lat_lng"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","distance_in_miles",b"distance_in_miles","lat_lng",b"lat_lng","negated",b"negated","region_code",b"region_code","telecommute_preference",b"telecommute_preference"]) -> None: ...
global___LocationFilter = LocationFilter

class CompensationFilter(google.protobuf.message.Message):
    """Filter on job compensation type and amount."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _FilterType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _FilterTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_FilterType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        FILTER_TYPE_UNSPECIFIED: CompensationFilter.FilterType.ValueType = ...  # 0
        """Filter type unspecified. Position holder, INVALID, should never be used."""

        UNIT_ONLY: CompensationFilter.FilterType.ValueType = ...  # 1
        """Filter by `base compensation entry's` unit. A job is a match if and
        only if the job contains a base CompensationEntry and the base
        CompensationEntry's unit matches provided [units][google.cloud.talent.v4beta1.CompensationFilter.units].
        Populate one or more [units][google.cloud.talent.v4beta1.CompensationFilter.units].

        See [CompensationInfo.CompensationEntry][google.cloud.talent.v4beta1.CompensationInfo.CompensationEntry] for definition of
        base compensation entry.
        """

        UNIT_AND_AMOUNT: CompensationFilter.FilterType.ValueType = ...  # 2
        """Filter by `base compensation entry's` unit and amount / range. A job
        is a match if and only if the job contains a base CompensationEntry, and
        the base entry's unit matches provided
        [CompensationUnit][google.cloud.talent.v4beta1.CompensationInfo.CompensationUnit] and
        amount or range overlaps with provided
        [CompensationRange][google.cloud.talent.v4beta1.CompensationInfo.CompensationRange].

        See [CompensationInfo.CompensationEntry][google.cloud.talent.v4beta1.CompensationInfo.CompensationEntry] for definition of
        base compensation entry.

        Set exactly one [units][google.cloud.talent.v4beta1.CompensationFilter.units] and populate [range][google.cloud.talent.v4beta1.CompensationFilter.range].
        """

        ANNUALIZED_BASE_AMOUNT: CompensationFilter.FilterType.ValueType = ...  # 3
        """Filter by annualized base compensation amount and `base compensation
        entry's` unit. Populate [range][google.cloud.talent.v4beta1.CompensationFilter.range] and zero or more [units][google.cloud.talent.v4beta1.CompensationFilter.units].
        """

        ANNUALIZED_TOTAL_AMOUNT: CompensationFilter.FilterType.ValueType = ...  # 4
        """Filter by annualized total compensation amount and `base compensation
        entry's` unit . Populate [range][google.cloud.talent.v4beta1.CompensationFilter.range] and zero or more [units][google.cloud.talent.v4beta1.CompensationFilter.units].
        """

    class FilterType(_FilterType, metaclass=_FilterTypeEnumTypeWrapper):
        """Specify the type of filtering."""
        pass

    FILTER_TYPE_UNSPECIFIED: CompensationFilter.FilterType.ValueType = ...  # 0
    """Filter type unspecified. Position holder, INVALID, should never be used."""

    UNIT_ONLY: CompensationFilter.FilterType.ValueType = ...  # 1
    """Filter by `base compensation entry's` unit. A job is a match if and
    only if the job contains a base CompensationEntry and the base
    CompensationEntry's unit matches provided [units][google.cloud.talent.v4beta1.CompensationFilter.units].
    Populate one or more [units][google.cloud.talent.v4beta1.CompensationFilter.units].

    See [CompensationInfo.CompensationEntry][google.cloud.talent.v4beta1.CompensationInfo.CompensationEntry] for definition of
    base compensation entry.
    """

    UNIT_AND_AMOUNT: CompensationFilter.FilterType.ValueType = ...  # 2
    """Filter by `base compensation entry's` unit and amount / range. A job
    is a match if and only if the job contains a base CompensationEntry, and
    the base entry's unit matches provided
    [CompensationUnit][google.cloud.talent.v4beta1.CompensationInfo.CompensationUnit] and
    amount or range overlaps with provided
    [CompensationRange][google.cloud.talent.v4beta1.CompensationInfo.CompensationRange].

    See [CompensationInfo.CompensationEntry][google.cloud.talent.v4beta1.CompensationInfo.CompensationEntry] for definition of
    base compensation entry.

    Set exactly one [units][google.cloud.talent.v4beta1.CompensationFilter.units] and populate [range][google.cloud.talent.v4beta1.CompensationFilter.range].
    """

    ANNUALIZED_BASE_AMOUNT: CompensationFilter.FilterType.ValueType = ...  # 3
    """Filter by annualized base compensation amount and `base compensation
    entry's` unit. Populate [range][google.cloud.talent.v4beta1.CompensationFilter.range] and zero or more [units][google.cloud.talent.v4beta1.CompensationFilter.units].
    """

    ANNUALIZED_TOTAL_AMOUNT: CompensationFilter.FilterType.ValueType = ...  # 4
    """Filter by annualized total compensation amount and `base compensation
    entry's` unit . Populate [range][google.cloud.talent.v4beta1.CompensationFilter.range] and zero or more [units][google.cloud.talent.v4beta1.CompensationFilter.units].
    """


    TYPE_FIELD_NUMBER: builtins.int
    UNITS_FIELD_NUMBER: builtins.int
    RANGE_FIELD_NUMBER: builtins.int
    INCLUDE_JOBS_WITH_UNSPECIFIED_COMPENSATION_RANGE_FIELD_NUMBER: builtins.int
    type: global___CompensationFilter.FilterType.ValueType = ...
    """Required. Type of filter."""

    @property
    def units(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[google.cloud.talent.v4beta1.common_pb2.CompensationInfo.CompensationUnit.ValueType]:
        """Required. Specify desired `base compensation entry's`
        [CompensationInfo.CompensationUnit][google.cloud.talent.v4beta1.CompensationInfo.CompensationUnit].
        """
        pass
    @property
    def range(self) -> google.cloud.talent.v4beta1.common_pb2.CompensationInfo.CompensationRange:
        """Compensation range."""
        pass
    include_jobs_with_unspecified_compensation_range: builtins.bool = ...
    """If set to true, jobs with unspecified compensation range fields are
    included.
    """

    def __init__(self,
        *,
        type : global___CompensationFilter.FilterType.ValueType = ...,
        units : typing.Optional[typing.Iterable[google.cloud.talent.v4beta1.common_pb2.CompensationInfo.CompensationUnit.ValueType]] = ...,
        range : typing.Optional[google.cloud.talent.v4beta1.common_pb2.CompensationInfo.CompensationRange] = ...,
        include_jobs_with_unspecified_compensation_range : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["range",b"range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["include_jobs_with_unspecified_compensation_range",b"include_jobs_with_unspecified_compensation_range","range",b"range","type",b"type","units",b"units"]) -> None: ...
global___CompensationFilter = CompensationFilter

class CommuteFilter(google.protobuf.message.Message):
    """Parameters needed for commute search."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _RoadTraffic:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _RoadTrafficEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RoadTraffic.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        ROAD_TRAFFIC_UNSPECIFIED: CommuteFilter.RoadTraffic.ValueType = ...  # 0
        """Road traffic situation isn't specified."""

        TRAFFIC_FREE: CommuteFilter.RoadTraffic.ValueType = ...  # 1
        """Optimal commute time without considering any traffic impact."""

        BUSY_HOUR: CommuteFilter.RoadTraffic.ValueType = ...  # 2
        """Commute time calculation takes in account the peak traffic impact."""

    class RoadTraffic(_RoadTraffic, metaclass=_RoadTrafficEnumTypeWrapper):
        """The traffic density to use when calculating commute time."""
        pass

    ROAD_TRAFFIC_UNSPECIFIED: CommuteFilter.RoadTraffic.ValueType = ...  # 0
    """Road traffic situation isn't specified."""

    TRAFFIC_FREE: CommuteFilter.RoadTraffic.ValueType = ...  # 1
    """Optimal commute time without considering any traffic impact."""

    BUSY_HOUR: CommuteFilter.RoadTraffic.ValueType = ...  # 2
    """Commute time calculation takes in account the peak traffic impact."""


    COMMUTE_METHOD_FIELD_NUMBER: builtins.int
    START_COORDINATES_FIELD_NUMBER: builtins.int
    TRAVEL_DURATION_FIELD_NUMBER: builtins.int
    ALLOW_IMPRECISE_ADDRESSES_FIELD_NUMBER: builtins.int
    ROAD_TRAFFIC_FIELD_NUMBER: builtins.int
    DEPARTURE_TIME_FIELD_NUMBER: builtins.int
    commute_method: google.cloud.talent.v4beta1.common_pb2.CommuteMethod.ValueType = ...
    """Required. The method of transportation to calculate the commute time for."""

    @property
    def start_coordinates(self) -> google.type.latlng_pb2.LatLng:
        """Required. The latitude and longitude of the location to calculate the
        commute time from.
        """
        pass
    @property
    def travel_duration(self) -> google.protobuf.duration_pb2.Duration:
        """Required. The maximum travel time in seconds. The maximum allowed value is `3600s`
        (one hour). Format is `123s`.
        """
        pass
    allow_imprecise_addresses: builtins.bool = ...
    """If `true`, jobs without street level addresses may also be returned.
    For city level addresses, the city center is used. For state and coarser
    level addresses, text matching is used.
    If this field is set to `false` or isn't specified, only jobs that include
    street level addresses will be returned by commute search.
    """

    road_traffic: global___CommuteFilter.RoadTraffic.ValueType = ...
    """Specifies the traffic density to use when calculating commute time."""

    @property
    def departure_time(self) -> google.type.timeofday_pb2.TimeOfDay:
        """The departure time used to calculate traffic impact, represented as
        [google.type.TimeOfDay][google.type.TimeOfDay] in local time zone.

        Currently traffic model is restricted to hour level resolution.
        """
        pass
    def __init__(self,
        *,
        commute_method : google.cloud.talent.v4beta1.common_pb2.CommuteMethod.ValueType = ...,
        start_coordinates : typing.Optional[google.type.latlng_pb2.LatLng] = ...,
        travel_duration : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        allow_imprecise_addresses : builtins.bool = ...,
        road_traffic : global___CommuteFilter.RoadTraffic.ValueType = ...,
        departure_time : typing.Optional[google.type.timeofday_pb2.TimeOfDay] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["departure_time",b"departure_time","road_traffic",b"road_traffic","start_coordinates",b"start_coordinates","traffic_option",b"traffic_option","travel_duration",b"travel_duration"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["allow_imprecise_addresses",b"allow_imprecise_addresses","commute_method",b"commute_method","departure_time",b"departure_time","road_traffic",b"road_traffic","start_coordinates",b"start_coordinates","traffic_option",b"traffic_option","travel_duration",b"travel_duration"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["traffic_option",b"traffic_option"]) -> typing.Optional[typing_extensions.Literal["road_traffic","departure_time"]]: ...
global___CommuteFilter = CommuteFilter

class JobTitleFilter(google.protobuf.message.Message):
    """Job title of the search."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    JOB_TITLE_FIELD_NUMBER: builtins.int
    NEGATED_FIELD_NUMBER: builtins.int
    job_title: typing.Text = ...
    """Required. The job title. For example, "Software engineer", or "Product manager"."""

    negated: builtins.bool = ...
    """Whether to apply negation to the filter so profiles matching the filter
    are excluded.
    """

    def __init__(self,
        *,
        job_title : typing.Text = ...,
        negated : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["job_title",b"job_title","negated",b"negated"]) -> None: ...
global___JobTitleFilter = JobTitleFilter

class SkillFilter(google.protobuf.message.Message):
    """Skill filter of the search."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SKILL_FIELD_NUMBER: builtins.int
    NEGATED_FIELD_NUMBER: builtins.int
    skill: typing.Text = ...
    """Required. The skill name. For example, "java", "j2ee", and so on."""

    negated: builtins.bool = ...
    """Whether to apply negation to the filter so profiles matching the filter
    are excluded.
    """

    def __init__(self,
        *,
        skill : typing.Text = ...,
        negated : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["negated",b"negated","skill",b"skill"]) -> None: ...
global___SkillFilter = SkillFilter

class EmployerFilter(google.protobuf.message.Message):
    """Employer filter of the search."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _EmployerFilterMode:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _EmployerFilterModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_EmployerFilterMode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        EMPLOYER_FILTER_MODE_UNSPECIFIED: EmployerFilter.EmployerFilterMode.ValueType = ...  # 0
        """Default value."""

        ALL_EMPLOYMENT_RECORDS: EmployerFilter.EmployerFilterMode.ValueType = ...  # 1
        """Apply to all employers in [Profile.employment_records][google.cloud.talent.v4beta1.Profile.employment_records]."""

        CURRENT_EMPLOYMENT_RECORDS_ONLY: EmployerFilter.EmployerFilterMode.ValueType = ...  # 2
        """Apply only to current employer in [Profile.employment_records][google.cloud.talent.v4beta1.Profile.employment_records]."""

        PAST_EMPLOYMENT_RECORDS_ONLY: EmployerFilter.EmployerFilterMode.ValueType = ...  # 3
        """Apply only to past (not current) employers in
        [Profile.employment_records][google.cloud.talent.v4beta1.Profile.employment_records].
        """

    class EmployerFilterMode(_EmployerFilterMode, metaclass=_EmployerFilterModeEnumTypeWrapper):
        """Enum indicating which set of [Profile.employment_records][google.cloud.talent.v4beta1.Profile.employment_records] to search
        against.
        """
        pass

    EMPLOYER_FILTER_MODE_UNSPECIFIED: EmployerFilter.EmployerFilterMode.ValueType = ...  # 0
    """Default value."""

    ALL_EMPLOYMENT_RECORDS: EmployerFilter.EmployerFilterMode.ValueType = ...  # 1
    """Apply to all employers in [Profile.employment_records][google.cloud.talent.v4beta1.Profile.employment_records]."""

    CURRENT_EMPLOYMENT_RECORDS_ONLY: EmployerFilter.EmployerFilterMode.ValueType = ...  # 2
    """Apply only to current employer in [Profile.employment_records][google.cloud.talent.v4beta1.Profile.employment_records]."""

    PAST_EMPLOYMENT_RECORDS_ONLY: EmployerFilter.EmployerFilterMode.ValueType = ...  # 3
    """Apply only to past (not current) employers in
    [Profile.employment_records][google.cloud.talent.v4beta1.Profile.employment_records].
    """


    EMPLOYER_FIELD_NUMBER: builtins.int
    MODE_FIELD_NUMBER: builtins.int
    NEGATED_FIELD_NUMBER: builtins.int
    employer: typing.Text = ...
    """Required. The name of the employer, for example "Google", "Alphabet"."""

    mode: global___EmployerFilter.EmployerFilterMode.ValueType = ...
    """Define set of [EmploymentRecord][google.cloud.talent.v4beta1.EmploymentRecord]s to search against.

    Defaults to [EmployerFilterMode.ALL_EMPLOYMENT_RECORDS][google.cloud.talent.v4beta1.EmployerFilter.EmployerFilterMode.ALL_EMPLOYMENT_RECORDS].
    """

    negated: builtins.bool = ...
    """Whether to apply negation to the filter so profiles matching the filter
    is excluded.
    """

    def __init__(self,
        *,
        employer : typing.Text = ...,
        mode : global___EmployerFilter.EmployerFilterMode.ValueType = ...,
        negated : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["employer",b"employer","mode",b"mode","negated",b"negated"]) -> None: ...
global___EmployerFilter = EmployerFilter

class EducationFilter(google.protobuf.message.Message):
    """Education filter of the search."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SCHOOL_FIELD_NUMBER: builtins.int
    FIELD_OF_STUDY_FIELD_NUMBER: builtins.int
    DEGREE_TYPE_FIELD_NUMBER: builtins.int
    NEGATED_FIELD_NUMBER: builtins.int
    school: typing.Text = ...
    """The school name. For example "MIT", "University of California, Berkeley"."""

    field_of_study: typing.Text = ...
    """The field of study. This is to search against value provided in
    [Degree.fields_of_study][google.cloud.talent.v4beta1.Degree.fields_of_study].
    For example "Computer Science", "Mathematics".
    """

    degree_type: google.cloud.talent.v4beta1.common_pb2.DegreeType.ValueType = ...
    """Education degree in ISCED code. Each value in degree covers a specific
    level of education, without any expansion to upper nor lower levels of
    education degree.
    """

    negated: builtins.bool = ...
    """Whether to apply negation to the filter so profiles matching the filter
    is excluded.
    """

    def __init__(self,
        *,
        school : typing.Text = ...,
        field_of_study : typing.Text = ...,
        degree_type : google.cloud.talent.v4beta1.common_pb2.DegreeType.ValueType = ...,
        negated : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["degree_type",b"degree_type","field_of_study",b"field_of_study","negated",b"negated","school",b"school"]) -> None: ...
global___EducationFilter = EducationFilter

class WorkExperienceFilter(google.protobuf.message.Message):
    """Work experience filter.

    This filter is used to search for profiles with working experience length
    between [min_experience][google.cloud.talent.v4beta1.WorkExperienceFilter.min_experience] and [max_experience][google.cloud.talent.v4beta1.WorkExperienceFilter.max_experience].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    MIN_EXPERIENCE_FIELD_NUMBER: builtins.int
    MAX_EXPERIENCE_FIELD_NUMBER: builtins.int
    @property
    def min_experience(self) -> google.protobuf.duration_pb2.Duration:
        """The minimum duration of the work experience (inclusive)."""
        pass
    @property
    def max_experience(self) -> google.protobuf.duration_pb2.Duration:
        """The maximum duration of the work experience (exclusive)."""
        pass
    def __init__(self,
        *,
        min_experience : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        max_experience : typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["max_experience",b"max_experience","min_experience",b"min_experience"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["max_experience",b"max_experience","min_experience",b"min_experience"]) -> None: ...
global___WorkExperienceFilter = WorkExperienceFilter

class ApplicationDateFilter(google.protobuf.message.Message):
    """Application Date Range Filter.

    The API matches profiles with [Application.application_date][google.cloud.talent.v4beta1.Application.application_date] between
    start date and end date (both boundaries are inclusive). The filter is
    ignored if both [start_date][google.cloud.talent.v4beta1.ApplicationDateFilter.start_date] and [end_date][google.cloud.talent.v4beta1.ApplicationDateFilter.end_date] are missing.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    START_DATE_FIELD_NUMBER: builtins.int
    END_DATE_FIELD_NUMBER: builtins.int
    @property
    def start_date(self) -> google.type.date_pb2.Date:
        """Start date. If it's missing, The API matches profiles with application date
        not after the end date.
        """
        pass
    @property
    def end_date(self) -> google.type.date_pb2.Date:
        """End date. If it's missing, The API matches profiles with application date
        not before the start date.
        """
        pass
    def __init__(self,
        *,
        start_date : typing.Optional[google.type.date_pb2.Date] = ...,
        end_date : typing.Optional[google.type.date_pb2.Date] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_date",b"end_date","start_date",b"start_date"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_date",b"end_date","start_date",b"start_date"]) -> None: ...
global___ApplicationDateFilter = ApplicationDateFilter

class ApplicationOutcomeNotesFilter(google.protobuf.message.Message):
    """Outcome Notes Filter."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    OUTCOME_NOTES_FIELD_NUMBER: builtins.int
    NEGATED_FIELD_NUMBER: builtins.int
    outcome_notes: typing.Text = ...
    """Required. User entered or selected outcome reason. The API does an exact match on the
    [Application.outcome_notes][google.cloud.talent.v4beta1.Application.outcome_notes] in profiles.
    """

    negated: builtins.bool = ...
    """If true, The API excludes all candidates with any
    [Application.outcome_notes][google.cloud.talent.v4beta1.Application.outcome_notes] matching the outcome reason specified in
    the filter.
    """

    def __init__(self,
        *,
        outcome_notes : typing.Text = ...,
        negated : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["negated",b"negated","outcome_notes",b"outcome_notes"]) -> None: ...
global___ApplicationOutcomeNotesFilter = ApplicationOutcomeNotesFilter

class ApplicationJobFilter(google.protobuf.message.Message):
    """Filter on the job information of Application."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    JOB_REQUISITION_ID_FIELD_NUMBER: builtins.int
    JOB_TITLE_FIELD_NUMBER: builtins.int
    NEGATED_FIELD_NUMBER: builtins.int
    job_requisition_id: typing.Text = ...
    """The job requisition id in the application. The API does an exact match on
    the [Job.requisition_id][google.cloud.talent.v4beta1.Job.requisition_id] of [Application.job][google.cloud.talent.v4beta1.Application.job] in profiles.
    """

    job_title: typing.Text = ...
    """The job title in the application. The API does an exact match on the
    [Job.title][google.cloud.talent.v4beta1.Job.title] of [Application.job][google.cloud.talent.v4beta1.Application.job] in profiles.
    """

    negated: builtins.bool = ...
    """If true, the API excludes all profiles with any [Application.job][google.cloud.talent.v4beta1.Application.job]
    matching the filters.
    """

    def __init__(self,
        *,
        job_requisition_id : typing.Text = ...,
        job_title : typing.Text = ...,
        negated : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["job_requisition_id",b"job_requisition_id","job_title",b"job_title","negated",b"negated"]) -> None: ...
global___ApplicationJobFilter = ApplicationJobFilter

class TimeFilter(google.protobuf.message.Message):
    """Filter on create timestamp or update timestamp of profiles."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _TimeField:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TimeFieldEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TimeField.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        TIME_FIELD_UNSPECIFIED: TimeFilter.TimeField.ValueType = ...  # 0
        """Default value."""

        CREATE_TIME: TimeFilter.TimeField.ValueType = ...  # 1
        """Earliest profile create time."""

        UPDATE_TIME: TimeFilter.TimeField.ValueType = ...  # 2
        """Latest profile update time."""

    class TimeField(_TimeField, metaclass=_TimeFieldEnumTypeWrapper):
        """Time fields can be used in TimeFilter."""
        pass

    TIME_FIELD_UNSPECIFIED: TimeFilter.TimeField.ValueType = ...  # 0
    """Default value."""

    CREATE_TIME: TimeFilter.TimeField.ValueType = ...  # 1
    """Earliest profile create time."""

    UPDATE_TIME: TimeFilter.TimeField.ValueType = ...  # 2
    """Latest profile update time."""


    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    TIME_FIELD_FIELD_NUMBER: builtins.int
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Start timestamp, matching profiles with the start time. If this field
        missing, The API matches profiles with create / update timestamp before the
        end timestamp.
        """
        pass
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """End timestamp, matching profiles with the end time. If this field
        missing, The API matches profiles with create / update timestamp after the
        start timestamp.
        """
        pass
    time_field: global___TimeFilter.TimeField.ValueType = ...
    """Specifies which time field to filter profiles.

    Defaults to [TimeField.CREATE_TIME][google.cloud.talent.v4beta1.TimeFilter.TimeField.CREATE_TIME].
    """

    def __init__(self,
        *,
        start_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        end_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        time_field : global___TimeFilter.TimeField.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_time",b"end_time","start_time",b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_time",b"end_time","start_time",b"start_time","time_field",b"time_field"]) -> None: ...
global___TimeFilter = TimeFilter

class CandidateAvailabilityFilter(google.protobuf.message.Message):
    """Deprecated. Use AvailabilityFilter instead.

    Filter on availability signals.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NEGATED_FIELD_NUMBER: builtins.int
    negated: builtins.bool = ...
    """It is false by default. If true, API excludes all the potential available
    profiles.
    """

    def __init__(self,
        *,
        negated : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["negated",b"negated"]) -> None: ...
global___CandidateAvailabilityFilter = CandidateAvailabilityFilter

class AvailabilityFilter(google.protobuf.message.Message):
    """Filter on availability signals."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SIGNAL_TYPE_FIELD_NUMBER: builtins.int
    RANGE_FIELD_NUMBER: builtins.int
    REQUIRED_FIELD_NUMBER: builtins.int
    signal_type: google.cloud.talent.v4beta1.common_pb2.AvailabilitySignalType.ValueType = ...
    """Required. Type of signal to apply filter on."""

    @property
    def range(self) -> google.cloud.talent.v4beta1.common_pb2.TimestampRange:
        """Required. Range of times to filter candidate signals by."""
        pass
    required: builtins.bool = ...
    """If multiple [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] are provided, the default
    behavior is to OR all filters, but if this field is set to true, this
    particular [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] will be AND'ed against other
    [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter].
    """

    def __init__(self,
        *,
        signal_type : google.cloud.talent.v4beta1.common_pb2.AvailabilitySignalType.ValueType = ...,
        range : typing.Optional[google.cloud.talent.v4beta1.common_pb2.TimestampRange] = ...,
        required : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["range",b"range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["range",b"range","required",b"required","signal_type",b"signal_type"]) -> None: ...
global___AvailabilityFilter = AvailabilityFilter

class PersonNameFilter(google.protobuf.message.Message):
    """Filter on person name."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PERSON_NAME_FIELD_NUMBER: builtins.int
    person_name: typing.Text = ...
    """Required. The person name. For example, "John Smith".

    Can be any combination of [PersonName.structured_name.given_name][],
    [PersonName.structured_name.middle_initial][],
    [PersonName.structured_name.family_name][], and
    [PersonName.formatted_name][google.cloud.talent.v4beta1.PersonName.formatted_name].
    """

    def __init__(self,
        *,
        person_name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["person_name",b"person_name"]) -> None: ...
global___PersonNameFilter = PersonNameFilter
