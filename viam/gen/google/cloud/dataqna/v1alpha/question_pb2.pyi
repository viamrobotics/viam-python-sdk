"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.dataqna.v1alpha.annotated_string_pb2
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.rpc.status_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _InterpretEntity:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _InterpretEntityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_InterpretEntity.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    INTERPRET_ENTITY_UNSPECIFIED: InterpretEntity.ValueType = ...  # 0
    """No interpret entity was specified."""

    DIMENSION: InterpretEntity.ValueType = ...  # 1
    """A dimenstion entity."""

    METRIC: InterpretEntity.ValueType = ...  # 2
    """A metric entity."""

class InterpretEntity(_InterpretEntity, metaclass=_InterpretEntityEnumTypeWrapper):
    """Query entities of an interpretation."""
    pass

INTERPRET_ENTITY_UNSPECIFIED: InterpretEntity.ValueType = ...  # 0
"""No interpret entity was specified."""

DIMENSION: InterpretEntity.ValueType = ...  # 1
"""A dimenstion entity."""

METRIC: InterpretEntity.ValueType = ...  # 2
"""A metric entity."""

global___InterpretEntity = InterpretEntity


class Question(google.protobuf.message.Message):
    """The question resource represents a natural language query, its settings,
    understanding generated by the system, and answer retrieval status.
    A question cannot be modified.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    SCOPES_FIELD_NUMBER: builtins.int
    QUERY_FIELD_NUMBER: builtins.int
    DATA_SOURCE_ANNOTATIONS_FIELD_NUMBER: builtins.int
    INTERPRET_ERROR_FIELD_NUMBER: builtins.int
    INTERPRETATIONS_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    USER_EMAIL_FIELD_NUMBER: builtins.int
    DEBUG_FLAGS_FIELD_NUMBER: builtins.int
    DEBUG_INFO_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Output only. Immutable. The unique identifier for the Question. The ID is server-generated.
    Example: `projects/foo/locations/bar/questions/123`
    """

    @property
    def scopes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Required. Immutable. Scopes to be used for the question. A scope defines the relevant data set
        scope. It can be a reference to a specific data source or a collection of
        data sources. Currently, support is limited to a single BigQuery table.
        There must be exactly one `scopes` element.

        Example:
        `//bigquery.googleapis.com/projects/test-project/datasets/foo/tables/bar`
        """
        pass
    query: typing.Text = ...
    """Required. Immutable. The query in natural language."""

    @property
    def data_source_annotations(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A list of annotations to use instead of the default annotation of a data
        source (set in the data source reference resource). There must not be
        more than one annotation with the same data source reference.
        """
        pass
    @property
    def interpret_error(self) -> global___InterpretError:
        """An error field explaining why interpretation failed. This is only populated
        if the interpretation failed.

        Note: This is different from getting a status error on the request itself.
        This is not a client or server error and the Question resource is still
        persisted, but the service could not interpret the question. Clients should
        present the error to the user so the user can rephrase the question.
        """
        pass
    @property
    def interpretations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Interpretation]:
        """A list of interpretations for this question."""
        pass
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time when the question was created."""
        pass
    user_email: typing.Text = ...
    """Output only. The e-mail address of the user that created this question."""

    @property
    def debug_flags(self) -> global___DebugFlags:
        """Input only. Immutable. Flags to request additional information for debugging purposes."""
        pass
    @property
    def debug_info(self) -> google.protobuf.any_pb2.Any:
        """Top level debug information.
        This will be stored as the type DebugInformation.
        Using Any so clients don't need to pull in anything
        inside the debug message.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        scopes : typing.Optional[typing.Iterable[typing.Text]] = ...,
        query : typing.Text = ...,
        data_source_annotations : typing.Optional[typing.Iterable[typing.Text]] = ...,
        interpret_error : typing.Optional[global___InterpretError] = ...,
        interpretations : typing.Optional[typing.Iterable[global___Interpretation]] = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        user_email : typing.Text = ...,
        debug_flags : typing.Optional[global___DebugFlags] = ...,
        debug_info : typing.Optional[google.protobuf.any_pb2.Any] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time","debug_flags",b"debug_flags","debug_info",b"debug_info","interpret_error",b"interpret_error"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["create_time",b"create_time","data_source_annotations",b"data_source_annotations","debug_flags",b"debug_flags","debug_info",b"debug_info","interpret_error",b"interpret_error","interpretations",b"interpretations","name",b"name","query",b"query","scopes",b"scopes","user_email",b"user_email"]) -> None: ...
global___Question = Question

class InterpretError(google.protobuf.message.Message):
    """Details on the failure to interpret the question."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _InterpretErrorCode:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _InterpretErrorCodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_InterpretErrorCode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        INTERPRET_ERROR_CODE_UNSPECIFIED: InterpretError.InterpretErrorCode.ValueType = ...  # 0
        """No interpret error code was specified."""

        INVALID_QUERY: InterpretError.InterpretErrorCode.ValueType = ...  # 1
        """The query is not valid."""

        FAILED_TO_UNDERSTAND: InterpretError.InterpretErrorCode.ValueType = ...  # 2
        """The interpreter failed to understand the question. For example, because
        it was too ambiguous.
        """

        FAILED_TO_ANSWER: InterpretError.InterpretErrorCode.ValueType = ...  # 3
        """The interpreter could understand the question, but was not able to arrive
        at an answer. For example, because a requested operation is not
        supported.
        """

    class InterpretErrorCode(_InterpretErrorCode, metaclass=_InterpretErrorCodeEnumTypeWrapper):
        """The interpret error code provides an error category why the interpretation
        failed.
        """
        pass

    INTERPRET_ERROR_CODE_UNSPECIFIED: InterpretError.InterpretErrorCode.ValueType = ...  # 0
    """No interpret error code was specified."""

    INVALID_QUERY: InterpretError.InterpretErrorCode.ValueType = ...  # 1
    """The query is not valid."""

    FAILED_TO_UNDERSTAND: InterpretError.InterpretErrorCode.ValueType = ...  # 2
    """The interpreter failed to understand the question. For example, because
    it was too ambiguous.
    """

    FAILED_TO_ANSWER: InterpretError.InterpretErrorCode.ValueType = ...  # 3
    """The interpreter could understand the question, but was not able to arrive
    at an answer. For example, because a requested operation is not
    supported.
    """


    class InterpretErrorDetails(google.protobuf.message.Message):
        """Details on interpretation failure."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        UNSUPPORTED_DETAILS_FIELD_NUMBER: builtins.int
        INCOMPLETE_QUERY_DETAILS_FIELD_NUMBER: builtins.int
        AMBIGUITY_DETAILS_FIELD_NUMBER: builtins.int
        @property
        def unsupported_details(self) -> global___InterpretError.InterpretUnsupportedDetails:
            """Populated if parts of the query are unsupported."""
            pass
        @property
        def incomplete_query_details(self) -> global___InterpretError.InterpretIncompleteQueryDetails:
            """Populated if the query is incomplete."""
            pass
        @property
        def ambiguity_details(self) -> global___InterpretError.InterpretAmbiguityDetails:
            """Populated if the query was too ambiguous."""
            pass
        def __init__(self,
            *,
            unsupported_details : typing.Optional[global___InterpretError.InterpretUnsupportedDetails] = ...,
            incomplete_query_details : typing.Optional[global___InterpretError.InterpretIncompleteQueryDetails] = ...,
            ambiguity_details : typing.Optional[global___InterpretError.InterpretAmbiguityDetails] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["ambiguity_details",b"ambiguity_details","incomplete_query_details",b"incomplete_query_details","unsupported_details",b"unsupported_details"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["ambiguity_details",b"ambiguity_details","incomplete_query_details",b"incomplete_query_details","unsupported_details",b"unsupported_details"]) -> None: ...

    class InterpretUnsupportedDetails(google.protobuf.message.Message):
        """Details about unsupported parts in a query."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        OPERATORS_FIELD_NUMBER: builtins.int
        INTENT_FIELD_NUMBER: builtins.int
        @property
        def operators(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """Unsupported operators. For example: median."""
            pass
        @property
        def intent(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """Unsupported intents."""
            pass
        def __init__(self,
            *,
            operators : typing.Optional[typing.Iterable[typing.Text]] = ...,
            intent : typing.Optional[typing.Iterable[typing.Text]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["intent",b"intent","operators",b"operators"]) -> None: ...

    class InterpretIncompleteQueryDetails(google.protobuf.message.Message):
        """Details about an incomplete query."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        ENTITIES_FIELD_NUMBER: builtins.int
        @property
        def entities(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___InterpretEntity.ValueType]:
            """List of missing interpret entities."""
            pass
        def __init__(self,
            *,
            entities : typing.Optional[typing.Iterable[global___InterpretEntity.ValueType]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["entities",b"entities"]) -> None: ...

    class InterpretAmbiguityDetails(google.protobuf.message.Message):
        """Details about a query that was too ambiguous. Currently, the message
        has no fields and its presence signals that there was ambiguity.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    MESSAGE_FIELD_NUMBER: builtins.int
    CODE_FIELD_NUMBER: builtins.int
    DETAILS_FIELD_NUMBER: builtins.int
    message: typing.Text = ...
    """Error message explaining why this question could not be interpreted."""

    code: global___InterpretError.InterpretErrorCode.ValueType = ...
    """The code for the error category why the interpretation failed."""

    @property
    def details(self) -> global___InterpretError.InterpretErrorDetails:
        """Details on interpretation failure."""
        pass
    def __init__(self,
        *,
        message : typing.Text = ...,
        code : global___InterpretError.InterpretErrorCode.ValueType = ...,
        details : typing.Optional[global___InterpretError.InterpretErrorDetails] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["details",b"details"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["code",b"code","details",b"details","message",b"message"]) -> None: ...
global___InterpretError = InterpretError

class ExecutionInfo(google.protobuf.message.Message):
    """Information about the backend status (such as BigQuery) of the execution."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _JobExecutionState:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _JobExecutionStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_JobExecutionState.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        JOB_EXECUTION_STATE_UNSPECIFIED: ExecutionInfo.JobExecutionState.ValueType = ...  # 0
        """No job execution was specified."""

        NOT_EXECUTED: ExecutionInfo.JobExecutionState.ValueType = ...  # 1
        """No job execution was requested, yet."""

        RUNNING: ExecutionInfo.JobExecutionState.ValueType = ...  # 2
        """The job is running."""

        SUCCEEDED: ExecutionInfo.JobExecutionState.ValueType = ...  # 3
        """The job completed successfully."""

        FAILED: ExecutionInfo.JobExecutionState.ValueType = ...  # 4
        """The job completed unsuccessfully."""

    class JobExecutionState(_JobExecutionState, metaclass=_JobExecutionStateEnumTypeWrapper):
        """Enum of possible job execution statuses."""
        pass

    JOB_EXECUTION_STATE_UNSPECIFIED: ExecutionInfo.JobExecutionState.ValueType = ...  # 0
    """No job execution was specified."""

    NOT_EXECUTED: ExecutionInfo.JobExecutionState.ValueType = ...  # 1
    """No job execution was requested, yet."""

    RUNNING: ExecutionInfo.JobExecutionState.ValueType = ...  # 2
    """The job is running."""

    SUCCEEDED: ExecutionInfo.JobExecutionState.ValueType = ...  # 3
    """The job completed successfully."""

    FAILED: ExecutionInfo.JobExecutionState.ValueType = ...  # 4
    """The job completed unsuccessfully."""


    JOB_CREATION_STATUS_FIELD_NUMBER: builtins.int
    JOB_EXECUTION_STATE_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    BIGQUERY_JOB_FIELD_NUMBER: builtins.int
    @property
    def job_creation_status(self) -> google.rpc.status_pb2.Status:
        """Status returned by the backend when the job was created."""
        pass
    job_execution_state: global___ExecutionInfo.JobExecutionState.ValueType = ...
    """Status of the job execution."""

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time when the execution was triggered."""
        pass
    @property
    def bigquery_job(self) -> global___BigQueryJob:
        """BigQuery job information.
        Future versions will have different backends. Hence, clients must make sure
        they can handle it when this field is not populated.
        """
        pass
    def __init__(self,
        *,
        job_creation_status : typing.Optional[google.rpc.status_pb2.Status] = ...,
        job_execution_state : global___ExecutionInfo.JobExecutionState.ValueType = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        bigquery_job : typing.Optional[global___BigQueryJob] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bigquery_job",b"bigquery_job","create_time",b"create_time","job_creation_status",b"job_creation_status"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bigquery_job",b"bigquery_job","create_time",b"create_time","job_creation_status",b"job_creation_status","job_execution_state",b"job_execution_state"]) -> None: ...
global___ExecutionInfo = ExecutionInfo

class BigQueryJob(google.protobuf.message.Message):
    """BigQuery job information. This can be used to query the BigQuery API and
    retrieve the current job's status (using
    [jobs.get](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/get)).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    JOB_ID_FIELD_NUMBER: builtins.int
    PROJECT_ID_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    job_id: typing.Text = ...
    """The job ID."""

    project_id: typing.Text = ...
    """The project ID of the job."""

    location: typing.Text = ...
    """The location where the job is running."""

    def __init__(self,
        *,
        job_id : typing.Text = ...,
        project_id : typing.Text = ...,
        location : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["job_id",b"job_id","location",b"location","project_id",b"project_id"]) -> None: ...
global___BigQueryJob = BigQueryJob

class Interpretation(google.protobuf.message.Message):
    """An interpretation of a natural language query."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DATA_SOURCES_FIELD_NUMBER: builtins.int
    CONFIDENCE_FIELD_NUMBER: builtins.int
    UNUSED_PHRASES_FIELD_NUMBER: builtins.int
    HUMAN_READABLE_FIELD_NUMBER: builtins.int
    INTERPRETATION_STRUCTURE_FIELD_NUMBER: builtins.int
    DATA_QUERY_FIELD_NUMBER: builtins.int
    EXECUTION_INFO_FIELD_NUMBER: builtins.int
    @property
    def data_sources(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """List of data sources used in the current understanding."""
        pass
    confidence: builtins.float = ...
    """The level of confidence that one of the interpretations is correct. This is
    a value in the range [0, 1] where a value of 0.5 or below is to be
    considered a low confidence.
    """

    @property
    def unused_phrases(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A list of unused phrases. Clients should display a Did You Mean (DYM)
         dialog if this is non-empty, even if this is the only interpretation.
        """
        pass
    @property
    def human_readable(self) -> global___HumanReadable:
        """Human readable representation of the query."""
        pass
    @property
    def interpretation_structure(self) -> global___InterpretationStructure:
        """Information about the interpretation structure that helps to understand and
        visualize the response.
        """
        pass
    @property
    def data_query(self) -> global___DataQuery:
        """Representation of the data query to be sent to the backend."""
        pass
    @property
    def execution_info(self) -> global___ExecutionInfo:
        """Information about the backend response. This is populated only if execution
        of an interpretation was requested.
        """
        pass
    def __init__(self,
        *,
        data_sources : typing.Optional[typing.Iterable[typing.Text]] = ...,
        confidence : builtins.float = ...,
        unused_phrases : typing.Optional[typing.Iterable[typing.Text]] = ...,
        human_readable : typing.Optional[global___HumanReadable] = ...,
        interpretation_structure : typing.Optional[global___InterpretationStructure] = ...,
        data_query : typing.Optional[global___DataQuery] = ...,
        execution_info : typing.Optional[global___ExecutionInfo] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["data_query",b"data_query","execution_info",b"execution_info","human_readable",b"human_readable","interpretation_structure",b"interpretation_structure"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["confidence",b"confidence","data_query",b"data_query","data_sources",b"data_sources","execution_info",b"execution_info","human_readable",b"human_readable","interpretation_structure",b"interpretation_structure","unused_phrases",b"unused_phrases"]) -> None: ...
global___Interpretation = Interpretation

class DataQuery(google.protobuf.message.Message):
    """Representation of the data query for the backend.
    This is provided for informational purposes only. Clients should not use
    it to send it to the backend directly, but rather use the `execute` RPC
    to trigger the execution. Using the `execute` RPC is needed in order to
    track the state of a question and report on it correctly to the data
    administrators.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SQL_FIELD_NUMBER: builtins.int
    sql: typing.Text = ...
    """The generated SQL query to be sent to the backend."""

    def __init__(self,
        *,
        sql : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["sql",b"sql"]) -> None: ...
global___DataQuery = DataQuery

class HumanReadable(google.protobuf.message.Message):
    """Human readable interpretation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GENERATED_INTERPRETATION_FIELD_NUMBER: builtins.int
    ORIGINAL_QUESTION_FIELD_NUMBER: builtins.int
    @property
    def generated_interpretation(self) -> google.cloud.dataqna.v1alpha.annotated_string_pb2.AnnotatedString:
        """Generated query explaining the interpretation."""
        pass
    @property
    def original_question(self) -> google.cloud.dataqna.v1alpha.annotated_string_pb2.AnnotatedString:
        """Annotations on the original query."""
        pass
    def __init__(self,
        *,
        generated_interpretation : typing.Optional[google.cloud.dataqna.v1alpha.annotated_string_pb2.AnnotatedString] = ...,
        original_question : typing.Optional[google.cloud.dataqna.v1alpha.annotated_string_pb2.AnnotatedString] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["generated_interpretation",b"generated_interpretation","original_question",b"original_question"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["generated_interpretation",b"generated_interpretation","original_question",b"original_question"]) -> None: ...
global___HumanReadable = HumanReadable

class InterpretationStructure(google.protobuf.message.Message):
    """Information about the interpretation structure that helps to understand and
    visualize the response.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _VisualizationType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _VisualizationTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_VisualizationType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        VISUALIZATION_TYPE_UNSPECIFIED: InterpretationStructure.VisualizationType.ValueType = ...  # 0
        """No visualization type was specified."""

        TABLE: InterpretationStructure.VisualizationType.ValueType = ...  # 1
        """Show a table."""

        BAR_CHART: InterpretationStructure.VisualizationType.ValueType = ...  # 2
        """Show a [bar
        chart](https://developers.google.com/chart/interactive/docs/gallery/barchart).
        """

        COLUMN_CHART: InterpretationStructure.VisualizationType.ValueType = ...  # 3
        """Show a [column
        chart](https://developers.google.com/chart/interactive/docs/gallery/columnchart).
        """

        TIMELINE: InterpretationStructure.VisualizationType.ValueType = ...  # 4
        """Show a
        [timeline](https://developers.google.com/chart/interactive/docs/gallery/timeline).
        """

        SCATTER_PLOT: InterpretationStructure.VisualizationType.ValueType = ...  # 5
        """Show a [scatter
        plot](https://developers.google.com/chart/interactive/docs/gallery/scatterchart).
        """

        PIE_CHART: InterpretationStructure.VisualizationType.ValueType = ...  # 6
        """Show a [pie
        chart](https://developers.google.com/chart/interactive/docs/gallery/piechart).
        """

        LINE_CHART: InterpretationStructure.VisualizationType.ValueType = ...  # 7
        """Show a [line
        chart](https://developers.google.com/chart/interactive/docs/gallery/linechart).
        """

        AREA_CHART: InterpretationStructure.VisualizationType.ValueType = ...  # 8
        """Show an [area
        chart](https://developers.google.com/chart/interactive/docs/gallery/areachart).
        """

        COMBO_CHART: InterpretationStructure.VisualizationType.ValueType = ...  # 9
        """Show a [combo
        chart](https://developers.google.com/chart/interactive/docs/gallery/combochart).
        """

        HISTOGRAM: InterpretationStructure.VisualizationType.ValueType = ...  # 10
        """Show a
        [histogram](https://developers.google.com/chart/interactive/docs/gallery/histogram).
        """

        GENERIC_CHART: InterpretationStructure.VisualizationType.ValueType = ...  # 11
        """This denotes queries when the user has not specified the particular type
        of chart and has mentioned only a generic chart name such as "Chart",
        "Plot", "Graph", etc. This will differentiate it from specific charting
        terms such as "Bar chart", "Pie chart", etc.
        """

        CHART_NOT_UNDERSTOOD: InterpretationStructure.VisualizationType.ValueType = ...  # 12
        """The user tried to specify a chart type, but the interpreter could not
        understand the type. The client should display a generic chart and may
        give a hint to the user that the requested type was not understood.
        """

    class VisualizationType(_VisualizationType, metaclass=_VisualizationTypeEnumTypeWrapper):
        """Enumeration of visualzation types to use for query response data."""
        pass

    VISUALIZATION_TYPE_UNSPECIFIED: InterpretationStructure.VisualizationType.ValueType = ...  # 0
    """No visualization type was specified."""

    TABLE: InterpretationStructure.VisualizationType.ValueType = ...  # 1
    """Show a table."""

    BAR_CHART: InterpretationStructure.VisualizationType.ValueType = ...  # 2
    """Show a [bar
    chart](https://developers.google.com/chart/interactive/docs/gallery/barchart).
    """

    COLUMN_CHART: InterpretationStructure.VisualizationType.ValueType = ...  # 3
    """Show a [column
    chart](https://developers.google.com/chart/interactive/docs/gallery/columnchart).
    """

    TIMELINE: InterpretationStructure.VisualizationType.ValueType = ...  # 4
    """Show a
    [timeline](https://developers.google.com/chart/interactive/docs/gallery/timeline).
    """

    SCATTER_PLOT: InterpretationStructure.VisualizationType.ValueType = ...  # 5
    """Show a [scatter
    plot](https://developers.google.com/chart/interactive/docs/gallery/scatterchart).
    """

    PIE_CHART: InterpretationStructure.VisualizationType.ValueType = ...  # 6
    """Show a [pie
    chart](https://developers.google.com/chart/interactive/docs/gallery/piechart).
    """

    LINE_CHART: InterpretationStructure.VisualizationType.ValueType = ...  # 7
    """Show a [line
    chart](https://developers.google.com/chart/interactive/docs/gallery/linechart).
    """

    AREA_CHART: InterpretationStructure.VisualizationType.ValueType = ...  # 8
    """Show an [area
    chart](https://developers.google.com/chart/interactive/docs/gallery/areachart).
    """

    COMBO_CHART: InterpretationStructure.VisualizationType.ValueType = ...  # 9
    """Show a [combo
    chart](https://developers.google.com/chart/interactive/docs/gallery/combochart).
    """

    HISTOGRAM: InterpretationStructure.VisualizationType.ValueType = ...  # 10
    """Show a
    [histogram](https://developers.google.com/chart/interactive/docs/gallery/histogram).
    """

    GENERIC_CHART: InterpretationStructure.VisualizationType.ValueType = ...  # 11
    """This denotes queries when the user has not specified the particular type
    of chart and has mentioned only a generic chart name such as "Chart",
    "Plot", "Graph", etc. This will differentiate it from specific charting
    terms such as "Bar chart", "Pie chart", etc.
    """

    CHART_NOT_UNDERSTOOD: InterpretationStructure.VisualizationType.ValueType = ...  # 12
    """The user tried to specify a chart type, but the interpreter could not
    understand the type. The client should display a generic chart and may
    give a hint to the user that the requested type was not understood.
    """


    class ColumnInfo(google.protobuf.message.Message):
        """Information about a column."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        OUTPUT_ALIAS_FIELD_NUMBER: builtins.int
        DISPLAY_NAME_FIELD_NUMBER: builtins.int
        output_alias: typing.Text = ...
        """The alias of the output column as used by the backend. For example, the
        field name in the schema provided in the query response in BigQuery.
        """

        display_name: typing.Text = ...
        """Human readable name of the output column."""

        def __init__(self,
            *,
            output_alias : typing.Text = ...,
            display_name : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["display_name",b"display_name","output_alias",b"output_alias"]) -> None: ...

    VISUALIZATION_TYPES_FIELD_NUMBER: builtins.int
    COLUMN_INFO_FIELD_NUMBER: builtins.int
    @property
    def visualization_types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___InterpretationStructure.VisualizationType.ValueType]:
        """List of possible visualization types to apply for this interpretation. The
        order has no relevance.
        """
        pass
    @property
    def column_info(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InterpretationStructure.ColumnInfo]:
        """Information about the output columns, that is, the columns that will be
        returned by the backend.
        """
        pass
    def __init__(self,
        *,
        visualization_types : typing.Optional[typing.Iterable[global___InterpretationStructure.VisualizationType.ValueType]] = ...,
        column_info : typing.Optional[typing.Iterable[global___InterpretationStructure.ColumnInfo]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["column_info",b"column_info","visualization_types",b"visualization_types"]) -> None: ...
global___InterpretationStructure = InterpretationStructure

class DebugFlags(google.protobuf.message.Message):
    """Configuriation of debug flags."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INCLUDE_VA_QUERY_FIELD_NUMBER: builtins.int
    INCLUDE_NESTED_VA_QUERY_FIELD_NUMBER: builtins.int
    INCLUDE_HUMAN_INTERPRETATION_FIELD_NUMBER: builtins.int
    INCLUDE_AQUA_DEBUG_RESPONSE_FIELD_NUMBER: builtins.int
    TIME_OVERRIDE_FIELD_NUMBER: builtins.int
    IS_INTERNAL_GOOGLE_USER_FIELD_NUMBER: builtins.int
    IGNORE_CACHE_FIELD_NUMBER: builtins.int
    INCLUDE_SEARCH_ENTITIES_RPC_FIELD_NUMBER: builtins.int
    INCLUDE_LIST_COLUMN_ANNOTATIONS_RPC_FIELD_NUMBER: builtins.int
    INCLUDE_VIRTUAL_ANALYST_ENTITIES_FIELD_NUMBER: builtins.int
    INCLUDE_TABLE_LIST_FIELD_NUMBER: builtins.int
    INCLUDE_DOMAIN_LIST_FIELD_NUMBER: builtins.int
    include_va_query: builtins.bool = ...
    """Whether to include the original VAQuery."""

    include_nested_va_query: builtins.bool = ...
    """Whether to include the original nested VAQuery."""

    include_human_interpretation: builtins.bool = ...
    """Whether to include the original human interpretation strings generated
    by Analyza.
    """

    include_aqua_debug_response: builtins.bool = ...
    """Whether to include the Aqua debug response."""

    time_override: builtins.int = ...
    """The time in milliseconds from Unix epoch to be used
    to process the query. This is useful for testing
    the queries at different time period.
    If not set or time_override <= 0, then the current
    time is used.
    """

    is_internal_google_user: builtins.bool = ...
    """Set to true if request is initiated by an internal Google user."""

    ignore_cache: builtins.bool = ...
    """Determines whether cache needs to be ignored. If set to
    true, cache won't be queried and updated.
    """

    include_search_entities_rpc: builtins.bool = ...
    """Whether to include the request/response pair from the call to the
    EntityIndex for SearchEntities.
    """

    include_list_column_annotations_rpc: builtins.bool = ...
    """Whether to include the request/response pair from the call to the
    Annotations service for ListColumnAnnotations.
    """

    include_virtual_analyst_entities: builtins.bool = ...
    """Whether to include the entity list passed to Analyza."""

    include_table_list: builtins.bool = ...
    """Whether to include the table list."""

    include_domain_list: builtins.bool = ...
    """Whether to include the domain list."""

    def __init__(self,
        *,
        include_va_query : builtins.bool = ...,
        include_nested_va_query : builtins.bool = ...,
        include_human_interpretation : builtins.bool = ...,
        include_aqua_debug_response : builtins.bool = ...,
        time_override : builtins.int = ...,
        is_internal_google_user : builtins.bool = ...,
        ignore_cache : builtins.bool = ...,
        include_search_entities_rpc : builtins.bool = ...,
        include_list_column_annotations_rpc : builtins.bool = ...,
        include_virtual_analyst_entities : builtins.bool = ...,
        include_table_list : builtins.bool = ...,
        include_domain_list : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ignore_cache",b"ignore_cache","include_aqua_debug_response",b"include_aqua_debug_response","include_domain_list",b"include_domain_list","include_human_interpretation",b"include_human_interpretation","include_list_column_annotations_rpc",b"include_list_column_annotations_rpc","include_nested_va_query",b"include_nested_va_query","include_search_entities_rpc",b"include_search_entities_rpc","include_table_list",b"include_table_list","include_va_query",b"include_va_query","include_virtual_analyst_entities",b"include_virtual_analyst_entities","is_internal_google_user",b"is_internal_google_user","time_override",b"time_override"]) -> None: ...
global___DebugFlags = DebugFlags
