"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.orgpolicy.v2.constraint_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.type.expr_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Policy(google.protobuf.message.Message):
    """Defines a Cloud Organization `Policy` which is used to specify `Constraints`
    for configurations of Cloud Platform resources.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    SPEC_FIELD_NUMBER: builtins.int
    ALTERNATE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Immutable. The resource name of the Policy. Must be one of the following
    forms, where constraint_name is the name of the constraint which this
    Policy configures:
    * `projects/{project_number}/policies/{constraint_name}`
    * `folders/{folder_id}/policies/{constraint_name}`
    * `organizations/{organization_id}/policies/{constraint_name}`

    For example, "projects/123/policies/compute.disableSerialPortAccess".

    Note: `projects/{project_id}/policies/{constraint_name}` is also an
    acceptable name for API requests, but responses will return the name using
    the equivalent project number.
    """

    @property
    def spec(self) -> global___PolicySpec:
        """Basic information about the Organization Policy."""
        pass
    @property
    def alternate(self) -> global___AlternatePolicySpec:
        """An alternate policy configuration that will be used instead of the baseline
        policy configurations as determined by the launch.
        Currently the only way the launch can trigger the alternate configuration
        is via dry-run/darklaunch.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        spec : typing.Optional[global___PolicySpec] = ...,
        alternate : typing.Optional[global___AlternatePolicySpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["alternate",b"alternate","spec",b"spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["alternate",b"alternate","name",b"name","spec",b"spec"]) -> None: ...
global___Policy = Policy

class AlternatePolicySpec(google.protobuf.message.Message):
    """Similar to PolicySpec but with an extra 'launch' field for launch reference.
    The PolicySpec here is specific for dry-run/darklaunch.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    LAUNCH_FIELD_NUMBER: builtins.int
    SPEC_FIELD_NUMBER: builtins.int
    launch: typing.Text = ...
    """Reference to the launch that will be used while audit logging and to
    control the launch.
    Should be set only in the alternate policy.
    """

    @property
    def spec(self) -> global___PolicySpec:
        """Specify `Constraint` for configurations of Cloud Platform resources."""
        pass
    def __init__(self,
        *,
        launch : typing.Text = ...,
        spec : typing.Optional[global___PolicySpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["spec",b"spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["launch",b"launch","spec",b"spec"]) -> None: ...
global___AlternatePolicySpec = AlternatePolicySpec

class PolicySpec(google.protobuf.message.Message):
    """Defines a Cloud Organization `PolicySpec` which is used to specify
    `Constraints` for configurations of Cloud Platform resources.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class PolicyRule(google.protobuf.message.Message):
        """A rule used to express this policy."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class StringValues(google.protobuf.message.Message):
            """A message that holds specific allowed and denied values.
            This message can define specific values and subtrees of Cloud Resource
            Manager resource hierarchy (`Organizations`, `Folders`, `Projects`) that
            are allowed or denied. This is achieved by using the `under:` and
            optional `is:` prefixes.
            The `under:` prefix is used to denote resource subtree values.
            The `is:` prefix is used to denote specific values, and is required only
            if the value contains a ":". Values prefixed with "is:" are treated the
            same as values with no prefix.
            Ancestry subtrees must be in one of the following formats:
                - "projects/<project-id>", e.g. "projects/tokyo-rain-123"
                - "folders/<folder-id>", e.g. "folders/1234"
                - "organizations/<organization-id>", e.g. "organizations/1234"
            The `supports_under` field of the associated `Constraint`  defines
            whether ancestry prefixes can be used.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            ALLOWED_VALUES_FIELD_NUMBER: builtins.int
            DENIED_VALUES_FIELD_NUMBER: builtins.int
            @property
            def allowed_values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
                """List of values allowed at this resource."""
                pass
            @property
            def denied_values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
                """List of values denied at this resource."""
                pass
            def __init__(self,
                *,
                allowed_values : typing.Optional[typing.Iterable[typing.Text]] = ...,
                denied_values : typing.Optional[typing.Iterable[typing.Text]] = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["allowed_values",b"allowed_values","denied_values",b"denied_values"]) -> None: ...

        VALUES_FIELD_NUMBER: builtins.int
        ALLOW_ALL_FIELD_NUMBER: builtins.int
        DENY_ALL_FIELD_NUMBER: builtins.int
        ENFORCE_FIELD_NUMBER: builtins.int
        CONDITION_FIELD_NUMBER: builtins.int
        @property
        def values(self) -> global___PolicySpec.PolicyRule.StringValues:
            """List of values to be used for this PolicyRule. This field can be set
            only in Policies for list constraints.
            """
            pass
        allow_all: builtins.bool = ...
        """Setting this to true means that all values are allowed. This field can
        be set only in Policies for list constraints.
        """

        deny_all: builtins.bool = ...
        """Setting this to true means that all values are denied. This field can
        be set only in Policies for list constraints.
        """

        enforce: builtins.bool = ...
        """If `true`, then the `Policy` is enforced. If `false`, then any
        configuration is acceptable.
        This field can be set only in Policies for boolean constraints.
        """

        @property
        def condition(self) -> google.type.expr_pb2.Expr:
            """A condition which determines whether this rule is used
            in the evaluation of the policy. When set, the `expression` field in
            the `Expr' must include from 1 to 10 subexpressions, joined by the "||"
            or "&&" operators. Each subexpression must be of the form
            "resource.matchLabels(key_name, value_name)",
            where key_name and value_name are the resource names for Label Keys
            and Values. These names are available from the Label Manager Service. An
            example expression is:
            "resource.matchLabels('labelKeys/123, 'labelValues/456')".
            """
            pass
        def __init__(self,
            *,
            values : typing.Optional[global___PolicySpec.PolicyRule.StringValues] = ...,
            allow_all : builtins.bool = ...,
            deny_all : builtins.bool = ...,
            enforce : builtins.bool = ...,
            condition : typing.Optional[google.type.expr_pb2.Expr] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["allow_all",b"allow_all","condition",b"condition","deny_all",b"deny_all","enforce",b"enforce","kind",b"kind","values",b"values"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["allow_all",b"allow_all","condition",b"condition","deny_all",b"deny_all","enforce",b"enforce","kind",b"kind","values",b"values"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["kind",b"kind"]) -> typing.Optional[typing_extensions.Literal["values","allow_all","deny_all","enforce"]]: ...

    ETAG_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    RULES_FIELD_NUMBER: builtins.int
    INHERIT_FROM_PARENT_FIELD_NUMBER: builtins.int
    RESET_FIELD_NUMBER: builtins.int
    etag: typing.Text = ...
    """An opaque tag indicating the current version of the `Policy`, used for
    concurrency control.

    This field is ignored if used in a `CreatePolicy` request.

    When the `Policy` is returned from either a `GetPolicy` or a
    `ListPolicies` request, this `etag` indicates the version of the
    current `Policy` to use when executing a read-modify-write loop.

    When the `Policy` is returned from a `GetEffectivePolicy` request, the
    `etag` will be unset.
    """

    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Output only. The time stamp this was previously updated. This
        represents the last time a call to `CreatePolicy` or `UpdatePolicy` was
        made for that `Policy`.
        """
        pass
    @property
    def rules(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PolicySpec.PolicyRule]:
        """Up to 10 PolicyRules are allowed.

        In Policies for boolean constraints, the following requirements apply:
          - There must be one and only one PolicyRule where condition is unset.
          - BooleanPolicyRules with conditions must set `enforced` to the opposite
            of the PolicyRule without a condition.
          - During policy evaluation, PolicyRules with conditions that are
            true for a target resource take precedence.
        """
        pass
    inherit_from_parent: builtins.bool = ...
    """Determines the inheritance behavior for this `Policy`.

    If `inherit_from_parent` is true, PolicyRules set higher up in the
    hierarchy (up to the closest root) are inherited and present in the
    effective policy. If it is false, then no rules are inherited, and this
    Policy becomes the new root for evaluation.
    This field can be set only for Policies which configure list constraints.
    """

    reset: builtins.bool = ...
    """Ignores policies set above this resource and restores the
    `constraint_default` enforcement behavior of the specific `Constraint` at
    this resource.
    This field can be set in policies for either list or boolean
    constraints. If set, `rules` must be empty and `inherit_from_parent`
    must be set to false.
    """

    def __init__(self,
        *,
        etag : typing.Text = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        rules : typing.Optional[typing.Iterable[global___PolicySpec.PolicyRule]] = ...,
        inherit_from_parent : builtins.bool = ...,
        reset : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["etag",b"etag","inherit_from_parent",b"inherit_from_parent","reset",b"reset","rules",b"rules","update_time",b"update_time"]) -> None: ...
global___PolicySpec = PolicySpec

class ListConstraintsRequest(google.protobuf.message.Message):
    """The request sent to the [ListConstraints]
    [google.cloud.orgpolicy.v2.OrgPolicy.ListConstraints] method.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The Cloud resource that parents the constraint. Must be in one of the
    following forms:
    * `projects/{project_number}`
    * `projects/{project_id}`
    * `folders/{folder_id}`
    * `organizations/{organization_id}`
    """

    page_size: builtins.int = ...
    """Size of the pages to be returned. This is currently unsupported and will
    be ignored. The server may at any point start using this field to limit
    page size.
    """

    page_token: typing.Text = ...
    """Page token used to retrieve the next page. This is currently unsupported
    and will be ignored. The server may at any point start using this field.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListConstraintsRequest = ListConstraintsRequest

class ListConstraintsResponse(google.protobuf.message.Message):
    """The response returned from the [ListConstraints]
    [google.cloud.orgpolicy.v2.OrgPolicy.ListConstraints] method.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONSTRAINTS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def constraints(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.orgpolicy.v2.constraint_pb2.Constraint]:
        """The collection of constraints that are available on the targeted resource."""
        pass
    next_page_token: typing.Text = ...
    """Page token used to retrieve the next page. This is currently not used."""

    def __init__(self,
        *,
        constraints : typing.Optional[typing.Iterable[google.cloud.orgpolicy.v2.constraint_pb2.Constraint]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["constraints",b"constraints","next_page_token",b"next_page_token"]) -> None: ...
global___ListConstraintsResponse = ListConstraintsResponse

class ListPoliciesRequest(google.protobuf.message.Message):
    """The request sent to the [ListPolicies]
    [google.cloud.orgpolicy.v2.OrgPolicy.ListPolicies] method.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The target Cloud resource that parents the set of constraints and policies
    that will be returned from this call. Must be in one of the following
    forms:
    * `projects/{project_number}`
    * `projects/{project_id}`
    * `folders/{folder_id}`
    * `organizations/{organization_id}`
    """

    page_size: builtins.int = ...
    """Size of the pages to be returned. This is currently unsupported and will
    be ignored. The server may at any point start using this field to limit
    page size.
    """

    page_token: typing.Text = ...
    """Page token used to retrieve the next page. This is currently unsupported
    and will be ignored. The server may at any point start using this field.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListPoliciesRequest = ListPoliciesRequest

class ListPoliciesResponse(google.protobuf.message.Message):
    """The response returned from the [ListPolicies]
    [google.cloud.orgpolicy.v2.OrgPolicy.ListPolicies] method. It will be empty
    if no `Policies` are set on the resource.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    POLICIES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def policies(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Policy]:
        """All `Policies` that exist on the resource. It will be empty if no
        `Policies` are set.
        """
        pass
    next_page_token: typing.Text = ...
    """Page token used to retrieve the next page. This is currently not used, but
    the server may at any point start supplying a valid token.
    """

    def __init__(self,
        *,
        policies : typing.Optional[typing.Iterable[global___Policy]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","policies",b"policies"]) -> None: ...
global___ListPoliciesResponse = ListPoliciesResponse

class GetPolicyRequest(google.protobuf.message.Message):
    """The request sent to the [GetPolicy]
    [google.cloud.orgpolicy.v2.OrgPolicy.GetPolicy] method.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Resource name of the policy. See `Policy` for naming requirements."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetPolicyRequest = GetPolicyRequest

class GetEffectivePolicyRequest(google.protobuf.message.Message):
    """The request sent to the [GetEffectivePolicy]
    [google.cloud.orgpolicy.v2.OrgPolicy.GetEffectivePolicy] method.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The effective policy to compute. See `Policy` for naming rules."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetEffectivePolicyRequest = GetEffectivePolicyRequest

class CreatePolicyRequest(google.protobuf.message.Message):
    """The request sent to the [CreatePolicyRequest]
    [google.cloud.orgpolicy.v2.OrgPolicy.CreatePolicy] method.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    POLICY_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The Cloud resource that will parent the new Policy. Must be in one of the
    following forms:
    * `projects/{project_number}`
    * `projects/{project_id}`
    * `folders/{folder_id}`
    * `organizations/{organization_id}`
    """

    @property
    def policy(self) -> global___Policy:
        """Required. `Policy` to create."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        policy : typing.Optional[global___Policy] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["policy",b"policy"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent",b"parent","policy",b"policy"]) -> None: ...
global___CreatePolicyRequest = CreatePolicyRequest

class UpdatePolicyRequest(google.protobuf.message.Message):
    """The request sent to the [UpdatePolicyRequest]
    [google.cloud.orgpolicy.v2.OrgPolicy.UpdatePolicy] method.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    POLICY_FIELD_NUMBER: builtins.int
    @property
    def policy(self) -> global___Policy:
        """Required. `Policy` to update."""
        pass
    def __init__(self,
        *,
        policy : typing.Optional[global___Policy] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["policy",b"policy"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["policy",b"policy"]) -> None: ...
global___UpdatePolicyRequest = UpdatePolicyRequest

class DeletePolicyRequest(google.protobuf.message.Message):
    """The request sent to the [DeletePolicy]
    [google.cloud.orgpolicy.v2.OrgPolicy.DeletePolicy] method.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Name of the policy to delete.
    See `Policy` for naming rules.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___DeletePolicyRequest = DeletePolicyRequest
