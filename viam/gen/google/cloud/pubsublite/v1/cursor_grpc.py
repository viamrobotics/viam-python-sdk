# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/cloud/pubsublite/v1/cursor.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.api.client_pb2
import google.api.field_behavior_pb2
import google.api.resource_pb2
import google.cloud.pubsublite.v1.common_pb2
import google.cloud.pubsublite.v1.cursor_pb2


class CursorServiceBase(abc.ABC):

    @abc.abstractmethod
    async def StreamingCommitCursor(self, stream: 'grpclib.server.Stream[google.cloud.pubsublite.v1.cursor_pb2.StreamingCommitCursorRequest, google.cloud.pubsublite.v1.cursor_pb2.StreamingCommitCursorResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CommitCursor(self, stream: 'grpclib.server.Stream[google.cloud.pubsublite.v1.cursor_pb2.CommitCursorRequest, google.cloud.pubsublite.v1.cursor_pb2.CommitCursorResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListPartitionCursors(self, stream: 'grpclib.server.Stream[google.cloud.pubsublite.v1.cursor_pb2.ListPartitionCursorsRequest, google.cloud.pubsublite.v1.cursor_pb2.ListPartitionCursorsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.pubsublite.v1.CursorService/StreamingCommitCursor': grpclib.const.Handler(
                self.StreamingCommitCursor,
                grpclib.const.Cardinality.STREAM_STREAM,
                google.cloud.pubsublite.v1.cursor_pb2.StreamingCommitCursorRequest,
                google.cloud.pubsublite.v1.cursor_pb2.StreamingCommitCursorResponse,
            ),
            '/google.cloud.pubsublite.v1.CursorService/CommitCursor': grpclib.const.Handler(
                self.CommitCursor,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.pubsublite.v1.cursor_pb2.CommitCursorRequest,
                google.cloud.pubsublite.v1.cursor_pb2.CommitCursorResponse,
            ),
            '/google.cloud.pubsublite.v1.CursorService/ListPartitionCursors': grpclib.const.Handler(
                self.ListPartitionCursors,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.pubsublite.v1.cursor_pb2.ListPartitionCursorsRequest,
                google.cloud.pubsublite.v1.cursor_pb2.ListPartitionCursorsResponse,
            ),
        }


class CursorServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.StreamingCommitCursor = grpclib.client.StreamStreamMethod(
            channel,
            '/google.cloud.pubsublite.v1.CursorService/StreamingCommitCursor',
            google.cloud.pubsublite.v1.cursor_pb2.StreamingCommitCursorRequest,
            google.cloud.pubsublite.v1.cursor_pb2.StreamingCommitCursorResponse,
        )
        self.CommitCursor = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.pubsublite.v1.CursorService/CommitCursor',
            google.cloud.pubsublite.v1.cursor_pb2.CommitCursorRequest,
            google.cloud.pubsublite.v1.cursor_pb2.CommitCursorResponse,
        )
        self.ListPartitionCursors = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.pubsublite.v1.CursorService/ListPartitionCursors',
            google.cloud.pubsublite.v1.cursor_pb2.ListPartitionCursorsRequest,
            google.cloud.pubsublite.v1.cursor_pb2.ListPartitionCursorsResponse,
        )
