"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.recommendationengine.v1beta1.user_event_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class PurgeUserEventsRequest(google.protobuf.message.Message):
    """Request message for PurgeUserEvents method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    FORCE_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The resource name of the event_store under which the events are
    created. The format is
    `projects/${projectId}/locations/global/catalogs/${catalogId}/eventStores/${eventStoreId}`
    """

    filter: typing.Text = ...
    """Required. The filter string to specify the events to be deleted. Empty
    string filter is not allowed. This filter can also be used with
    ListUserEvents API to list events that will be deleted. The eligible fields
    for filtering are:
    * eventType - UserEvent.eventType field of type string.
    * eventTime - in ISO 8601 "zulu" format.
    * visitorId - field of type string. Specifying this will delete all events
    associated with a visitor.
    * userId - field of type string. Specifying this will delete all events
    associated with a user.
    Example 1: Deleting all events in a time range.
    `eventTime > "2012-04-23T18:25:43.511Z" eventTime <
    "2012-04-23T18:30:43.511Z"`
    Example 2: Deleting specific eventType in time range.
    `eventTime > "2012-04-23T18:25:43.511Z" eventType = "detail-page-view"`
    Example 3: Deleting all events for a specific visitor
    `visitorId = visitor1024`
    The filtering fields are assumed to have an implicit AND.
    """

    force: builtins.bool = ...
    """Optional. The default value is false. Override this flag to true to
    actually perform the purge. If the field is not set to true, a sampling of
    events to be deleted will be returned.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        filter : typing.Text = ...,
        force : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","force",b"force","parent",b"parent"]) -> None: ...
global___PurgeUserEventsRequest = PurgeUserEventsRequest

class PurgeUserEventsMetadata(google.protobuf.message.Message):
    """Metadata related to the progress of the PurgeUserEvents operation.
    This will be returned by the google.longrunning.Operation.metadata field.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    OPERATION_NAME_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    operation_name: typing.Text = ...
    """The ID of the request / operation."""

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Operation create time."""
        pass
    def __init__(self,
        *,
        operation_name : typing.Text = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["create_time",b"create_time","operation_name",b"operation_name"]) -> None: ...
global___PurgeUserEventsMetadata = PurgeUserEventsMetadata

class PurgeUserEventsResponse(google.protobuf.message.Message):
    """Response of the PurgeUserEventsRequest. If the long running operation is
    successfully done, then this message is returned by the
    google.longrunning.Operations.response field.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PURGED_EVENTS_COUNT_FIELD_NUMBER: builtins.int
    USER_EVENTS_SAMPLE_FIELD_NUMBER: builtins.int
    purged_events_count: builtins.int = ...
    """The total count of events purged as a result of the operation."""

    @property
    def user_events_sample(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.recommendationengine.v1beta1.user_event_pb2.UserEvent]:
        """A sampling of events deleted (or will be deleted) depending on the `force`
        property in the request. Max of 500 items will be returned.
        """
        pass
    def __init__(self,
        *,
        purged_events_count : builtins.int = ...,
        user_events_sample : typing.Optional[typing.Iterable[google.cloud.recommendationengine.v1beta1.user_event_pb2.UserEvent]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["purged_events_count",b"purged_events_count","user_events_sample",b"user_events_sample"]) -> None: ...
global___PurgeUserEventsResponse = PurgeUserEventsResponse

class WriteUserEventRequest(google.protobuf.message.Message):
    """Request message for WriteUserEvent method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    USER_EVENT_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The parent eventStore resource name, such as
    `projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store`.
    """

    @property
    def user_event(self) -> google.cloud.recommendationengine.v1beta1.user_event_pb2.UserEvent:
        """Required. User event to write."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        user_event : typing.Optional[google.cloud.recommendationengine.v1beta1.user_event_pb2.UserEvent] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["user_event",b"user_event"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent",b"parent","user_event",b"user_event"]) -> None: ...
global___WriteUserEventRequest = WriteUserEventRequest

class CollectUserEventRequest(google.protobuf.message.Message):
    """Request message for CollectUserEvent method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    USER_EVENT_FIELD_NUMBER: builtins.int
    URI_FIELD_NUMBER: builtins.int
    ETS_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The parent eventStore name, such as
    `projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store`.
    """

    user_event: typing.Text = ...
    """Required. URL encoded UserEvent proto."""

    uri: typing.Text = ...
    """Optional. The url including cgi-parameters but excluding the hash fragment.
    The URL must be truncated to 1.5K bytes to conservatively be under the 2K
    bytes. This is often more useful than the referer url, because many
    browsers only send the domain for 3rd party requests.
    """

    ets: builtins.int = ...
    """Optional. The event timestamp in milliseconds. This prevents browser
    caching of otherwise identical get requests. The name is abbreviated to
    reduce the payload bytes.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        user_event : typing.Text = ...,
        uri : typing.Text = ...,
        ets : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ets",b"ets","parent",b"parent","uri",b"uri","user_event",b"user_event"]) -> None: ...
global___CollectUserEventRequest = CollectUserEventRequest

class ListUserEventsRequest(google.protobuf.message.Message):
    """Request message for ListUserEvents method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The parent eventStore resource name, such as
    `projects/*/locations/*/catalogs/default_catalog/eventStores/default_event_store`.
    """

    page_size: builtins.int = ...
    """Optional. Maximum number of results to return per page. If zero, the
    service will choose a reasonable default.
    """

    page_token: typing.Text = ...
    """Optional. The previous ListUserEventsResponse.next_page_token."""

    filter: typing.Text = ...
    """Optional. Filtering expression to specify restrictions over
    returned events. This is a sequence of terms, where each term applies some
    kind of a restriction to the returned user events. Use this expression to
    restrict results to a specific time range, or filter events by eventType.
       eg: eventTime > "2012-04-23T18:25:43.511Z" eventsMissingCatalogItems
       eventTime<"2012-04-23T18:25:43.511Z" eventType=search

      We expect only 3 types of fields:

       * eventTime: this can be specified a maximum of 2 times, once with a
         less than operator and once with a greater than operator. The
         eventTime restrict should result in one contiguous valid eventTime
         range.

       * eventType: only 1 eventType restriction can be specified.

       * eventsMissingCatalogItems: specififying this will restrict results
         to events for which catalog items were not found in the catalog. The
         default behavior is to return only those events for which catalog
         items were found.

      Some examples of valid filters expressions:

      * Example 1: eventTime > "2012-04-23T18:25:43.511Z"
                eventTime < "2012-04-23T18:30:43.511Z"
      * Example 2: eventTime > "2012-04-23T18:25:43.511Z"
                eventType = detail-page-view
      * Example 3: eventsMissingCatalogItems
                eventType = search eventTime < "2018-04-23T18:30:43.511Z"
      * Example 4: eventTime > "2012-04-23T18:25:43.511Z"
      * Example 5: eventType = search
      * Example 6: eventsMissingCatalogItems
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        filter : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListUserEventsRequest = ListUserEventsRequest

class ListUserEventsResponse(google.protobuf.message.Message):
    """Response message for ListUserEvents method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    USER_EVENTS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def user_events(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.recommendationengine.v1beta1.user_event_pb2.UserEvent]:
        """The user events."""
        pass
    next_page_token: typing.Text = ...
    """If empty, the list is complete. If nonempty, the token to pass to the next
    request's ListUserEvents.page_token.
    """

    def __init__(self,
        *,
        user_events : typing.Optional[typing.Iterable[google.cloud.recommendationengine.v1beta1.user_event_pb2.UserEvent]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","user_events",b"user_events"]) -> None: ...
global___ListUserEventsResponse = ListUserEventsResponse
