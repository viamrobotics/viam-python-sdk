"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class FeatureMap(google.protobuf.message.Message):
    """FeatureMap represents extra features that customers want to include in the
    recommendation model for catalogs/user events as categorical/numerical
    features.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class StringList(google.protobuf.message.Message):
        """A list of string features."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        VALUE_FIELD_NUMBER: builtins.int
        @property
        def value(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """String feature value with a length limit of 128 bytes."""
            pass
        def __init__(self,
            *,
            value : typing.Optional[typing.Iterable[typing.Text]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["value",b"value"]) -> None: ...

    class FloatList(google.protobuf.message.Message):
        """A list of float features."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        VALUE_FIELD_NUMBER: builtins.int
        @property
        def value(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
            """Float feature value."""
            pass
        def __init__(self,
            *,
            value : typing.Optional[typing.Iterable[builtins.float]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["value",b"value"]) -> None: ...

    class CategoricalFeaturesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___FeatureMap.StringList: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___FeatureMap.StringList] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class NumericalFeaturesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___FeatureMap.FloatList: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___FeatureMap.FloatList] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    CATEGORICAL_FEATURES_FIELD_NUMBER: builtins.int
    NUMERICAL_FEATURES_FIELD_NUMBER: builtins.int
    @property
    def categorical_features(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___FeatureMap.StringList]:
        """Categorical features that can take on one of a limited number of possible
        values. Some examples would be the brand/maker of a product, or country of
        a customer.

        Feature names and values must be UTF-8 encoded strings.

        For example: `{ "colors": {"value": ["yellow", "green"]},
                        "sizes": {"value":["S", "M"]}`
        """
        pass
    @property
    def numerical_features(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___FeatureMap.FloatList]:
        """Numerical features. Some examples would be the height/weight of a product,
        or age of a customer.

        Feature names must be UTF-8 encoded strings.

        For example: `{ "lengths_cm": {"value":[2.3, 15.4]},
                        "heights_cm": {"value":[8.1, 6.4]} }`
        """
        pass
    def __init__(self,
        *,
        categorical_features : typing.Optional[typing.Mapping[typing.Text, global___FeatureMap.StringList]] = ...,
        numerical_features : typing.Optional[typing.Mapping[typing.Text, global___FeatureMap.FloatList]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["categorical_features",b"categorical_features","numerical_features",b"numerical_features"]) -> None: ...
global___FeatureMap = FeatureMap
