"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.recommendationengine.v1beta1.user_event_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.struct_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class PredictRequest(google.protobuf.message.Message):
    """Request message for Predict method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ParamsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> google.protobuf.struct_pb2.Value: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[google.protobuf.struct_pb2.Value] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    USER_EVENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    DRY_RUN_FIELD_NUMBER: builtins.int
    PARAMS_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. Full resource name of the format:
    `{name=projects/*/locations/global/catalogs/default_catalog/eventStores/default_event_store/placements/*}`
    The id of the recommendation engine placement. This id is used to identify
    the set of models that will be used to make the prediction.

    We currently support three placements with the following IDs by default:

    * `shopping_cart`: Predicts items frequently bought together with one or
      more catalog items in the same shopping session. Commonly displayed after
      `add-to-cart` events, on product detail pages, or on the shopping cart
      page.

    * `home_page`: Predicts the next product that a user will most likely
      engage with or purchase based on the shopping or viewing history of the
      specified `userId` or `visitorId`. For example - Recommendations for you.

    * `product_detail`: Predicts the next product that a user will most likely
      engage with or purchase. The prediction is based on the shopping or
      viewing history of the specified `userId` or `visitorId` and its
      relevance to a specified `CatalogItem`. Typically used on product detail
      pages. For example - More items like this.

    * `recently_viewed_default`: Returns up to 75 items recently viewed by the
      specified `userId` or `visitorId`, most recent ones first. Returns
      nothing if neither of them has viewed any items yet. For example -
      Recently viewed.

    The full list of available placements can be seen at
    https://console.cloud.google.com/recommendation/datafeeds/default_catalog/dashboard
    """

    @property
    def user_event(self) -> google.cloud.recommendationengine.v1beta1.user_event_pb2.UserEvent:
        """Required. Context about the user, what they are looking at and what action
        they took to trigger the predict request. Note that this user event detail
        won't be ingested to userEvent logs. Thus, a separate userEvent write
        request is required for event logging.
        """
        pass
    page_size: builtins.int = ...
    """Optional. Maximum number of results to return per page. Set this property
    to the number of prediction results required. If zero, the service will
    choose a reasonable default.
    """

    page_token: typing.Text = ...
    """Optional. The previous PredictResponse.next_page_token."""

    filter: typing.Text = ...
    """Optional. Filter for restricting prediction results. Accepts values for
    tags and the `filterOutOfStockItems` flag.

     * Tag expressions. Restricts predictions to items that match all of the
       specified tags. Boolean operators `OR` and `NOT` are supported if the
       expression is enclosed in parentheses, and must be separated from the
       tag values by a space. `-"tagA"` is also supported and is equivalent to
       `NOT "tagA"`. Tag values must be double quoted UTF-8 encoded strings
       with a size limit of 1 KiB.

     * filterOutOfStockItems. Restricts predictions to items that do not have a
       stockState value of OUT_OF_STOCK.

    Examples:

     * tag=("Red" OR "Blue") tag="New-Arrival" tag=(NOT "promotional")
     * filterOutOfStockItems  tag=(-"promotional")
     * filterOutOfStockItems
    """

    dry_run: builtins.bool = ...
    """Optional. Use dryRun mode for this prediction query. If set to true, a
    dummy model will be used that returns arbitrary catalog items.
    Note that the dryRun mode should only be used for testing the API, or if
    the model is not ready.
    """

    @property
    def params(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, google.protobuf.struct_pb2.Value]:
        """Optional. Additional domain specific parameters for the predictions.

        Allowed values:

        * `returnCatalogItem`: Boolean. If set to true, the associated catalogItem
           object will be returned in the
          `PredictResponse.PredictionResult.itemMetadata` object in the method
           response.
        * `returnItemScore`: Boolean. If set to true, the prediction 'score'
           corresponding to each returned item will be set in the `metadata`
           field in the prediction response. The given 'score' indicates the
           probability of an item being clicked/purchased given the user's context
           and history.
        """
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Optional. The labels for the predict request.

         * Label keys can contain lowercase letters, digits and hyphens, must start
           with a letter, and must end with a letter or digit.
         * Non-zero label values can contain lowercase letters, digits and hyphens,
           must start with a letter, and must end with a letter or digit.
         * No more than 64 labels can be associated with a given request.

        See https://goo.gl/xmQnxf for more information on and examples of labels.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        user_event : typing.Optional[google.cloud.recommendationengine.v1beta1.user_event_pb2.UserEvent] = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        filter : typing.Text = ...,
        dry_run : builtins.bool = ...,
        params : typing.Optional[typing.Mapping[typing.Text, google.protobuf.struct_pb2.Value]] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["user_event",b"user_event"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dry_run",b"dry_run","filter",b"filter","labels",b"labels","name",b"name","page_size",b"page_size","page_token",b"page_token","params",b"params","user_event",b"user_event"]) -> None: ...
global___PredictRequest = PredictRequest

class PredictResponse(google.protobuf.message.Message):
    """Response message for predict method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class PredictionResult(google.protobuf.message.Message):
        """PredictionResult represents the recommendation prediction results."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class ItemMetadataEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            @property
            def value(self) -> google.protobuf.struct_pb2.Value: ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Optional[google.protobuf.struct_pb2.Value] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        ID_FIELD_NUMBER: builtins.int
        ITEM_METADATA_FIELD_NUMBER: builtins.int
        id: typing.Text = ...
        """ID of the recommended catalog item"""

        @property
        def item_metadata(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, google.protobuf.struct_pb2.Value]:
            """Additional item metadata / annotations.

            Possible values:

            * `catalogItem`: JSON representation of the catalogItem. Will be set if
              `returnCatalogItem` is set to true in `PredictRequest.params`.
            * `score`: Prediction score in double value. Will be set if
              `returnItemScore` is set to true in `PredictRequest.params`.
            """
            pass
        def __init__(self,
            *,
            id : typing.Text = ...,
            item_metadata : typing.Optional[typing.Mapping[typing.Text, google.protobuf.struct_pb2.Value]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["id",b"id","item_metadata",b"item_metadata"]) -> None: ...

    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> google.protobuf.struct_pb2.Value: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[google.protobuf.struct_pb2.Value] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    RESULTS_FIELD_NUMBER: builtins.int
    RECOMMENDATION_TOKEN_FIELD_NUMBER: builtins.int
    ITEMS_MISSING_IN_CATALOG_FIELD_NUMBER: builtins.int
    DRY_RUN_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PredictResponse.PredictionResult]:
        """A list of recommended items. The order represents the ranking (from the
        most relevant item to the least).
        """
        pass
    recommendation_token: typing.Text = ...
    """A unique recommendation token. This should be included in the user event
    logs resulting from this recommendation, which enables accurate attribution
    of recommendation model performance.
    """

    @property
    def items_missing_in_catalog(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """IDs of items in the request that were missing from the catalog."""
        pass
    dry_run: builtins.bool = ...
    """True if the dryRun property was set in the request."""

    @property
    def metadata(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, google.protobuf.struct_pb2.Value]:
        """Additional domain specific prediction response metadata."""
        pass
    next_page_token: typing.Text = ...
    """If empty, the list is complete. If nonempty, the token to pass to the next
    request's PredictRequest.page_token.
    """

    def __init__(self,
        *,
        results : typing.Optional[typing.Iterable[global___PredictResponse.PredictionResult]] = ...,
        recommendation_token : typing.Text = ...,
        items_missing_in_catalog : typing.Optional[typing.Iterable[typing.Text]] = ...,
        dry_run : builtins.bool = ...,
        metadata : typing.Optional[typing.Mapping[typing.Text, google.protobuf.struct_pb2.Value]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dry_run",b"dry_run","items_missing_in_catalog",b"items_missing_in_catalog","metadata",b"metadata","next_page_token",b"next_page_token","recommendation_token",b"recommendation_token","results",b"results"]) -> None: ...
global___PredictResponse = PredictResponse
