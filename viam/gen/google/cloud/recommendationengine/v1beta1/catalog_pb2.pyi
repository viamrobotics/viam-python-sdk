"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.recommendationengine.v1beta1.common_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class CatalogItem(google.protobuf.message.Message):
    """CatalogItem captures all metadata information of items to be recommended."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class CategoryHierarchy(google.protobuf.message.Message):
        """Category represents catalog item category hierarchy."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        CATEGORIES_FIELD_NUMBER: builtins.int
        @property
        def categories(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """Required. Catalog item categories. Each category should be a UTF-8
            encoded string with a length limit of 2 KiB.

            Note that the order in the list denotes the specificity (from least to
            most specific).
            """
            pass
        def __init__(self,
            *,
            categories : typing.Optional[typing.Iterable[typing.Text]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["categories",b"categories"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    CATEGORY_HIERARCHIES_FIELD_NUMBER: builtins.int
    TITLE_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    ITEM_ATTRIBUTES_FIELD_NUMBER: builtins.int
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    TAGS_FIELD_NUMBER: builtins.int
    ITEM_GROUP_ID_FIELD_NUMBER: builtins.int
    PRODUCT_METADATA_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """Required. Catalog item identifier. UTF-8 encoded string with a length limit
    of 128 bytes.

    This id must be unique among all catalog items within the same catalog. It
    should also be used when logging user events in order for the user events
    to be joined with the Catalog.
    """

    @property
    def category_hierarchies(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CatalogItem.CategoryHierarchy]:
        """Required. Catalog item categories. This field is repeated for supporting
        one catalog item belonging to several parallel category hierarchies.

        For example, if a shoes product belongs to both
        ["Shoes & Accessories" -> "Shoes"] and
        ["Sports & Fitness" -> "Athletic Clothing" -> "Shoes"], it could be
        represented as:

             "categoryHierarchies": [
               { "categories": ["Shoes & Accessories", "Shoes"]},
               { "categories": ["Sports & Fitness", "Athletic Clothing", "Shoes"] }
             ]
        """
        pass
    title: typing.Text = ...
    """Required. Catalog item title. UTF-8 encoded string with a length limit of 1
    KiB.
    """

    description: typing.Text = ...
    """Optional. Catalog item description. UTF-8 encoded string with a length
    limit of 5 KiB.
    """

    @property
    def item_attributes(self) -> google.cloud.recommendationengine.v1beta1.common_pb2.FeatureMap:
        """Optional. Highly encouraged. Extra catalog item attributes to be
        included in the recommendation model. For example, for retail products,
        this could include the store name, vendor, style, color, etc. These are
        very strong signals for recommendation model, thus we highly recommend
        providing the item attributes here.
        """
        pass
    language_code: typing.Text = ...
    """Optional. Language of the title/description/item_attributes. Use language
    tags defined by BCP 47. https://www.rfc-editor.org/rfc/bcp/bcp47.txt. Our
    supported language codes include 'en', 'es', 'fr', 'de', 'ar', 'fa', 'zh',
    'ja', 'ko', 'sv', 'ro', 'nl'. For other languages, contact
    your Google account manager.
    """

    @property
    def tags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Optional. Filtering tags associated with the catalog item. Each tag should
        be a UTF-8 encoded string with a length limit of 1 KiB.

        This tag can be used for filtering recommendation results by passing the
        tag as part of the predict request filter.
        """
        pass
    item_group_id: typing.Text = ...
    """Optional. Variant group identifier for prediction results. UTF-8 encoded
    string with a length limit of 128 bytes.

    This field must be enabled before it can be used. [Learn
    more](/recommendations-ai/docs/catalog#item-group-id).
    """

    @property
    def product_metadata(self) -> global___ProductCatalogItem:
        """Optional. Metadata specific to retail products."""
        pass
    def __init__(self,
        *,
        id : typing.Text = ...,
        category_hierarchies : typing.Optional[typing.Iterable[global___CatalogItem.CategoryHierarchy]] = ...,
        title : typing.Text = ...,
        description : typing.Text = ...,
        item_attributes : typing.Optional[google.cloud.recommendationengine.v1beta1.common_pb2.FeatureMap] = ...,
        language_code : typing.Text = ...,
        tags : typing.Optional[typing.Iterable[typing.Text]] = ...,
        item_group_id : typing.Text = ...,
        product_metadata : typing.Optional[global___ProductCatalogItem] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["item_attributes",b"item_attributes","product_metadata",b"product_metadata","recommendation_type",b"recommendation_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["category_hierarchies",b"category_hierarchies","description",b"description","id",b"id","item_attributes",b"item_attributes","item_group_id",b"item_group_id","language_code",b"language_code","product_metadata",b"product_metadata","recommendation_type",b"recommendation_type","tags",b"tags","title",b"title"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["recommendation_type",b"recommendation_type"]) -> typing.Optional[typing_extensions.Literal["product_metadata"]]: ...
global___CatalogItem = CatalogItem

class ProductCatalogItem(google.protobuf.message.Message):
    """ProductCatalogItem captures item metadata specific to retail products."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _StockState:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StockStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_StockState.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        STOCK_STATE_UNSPECIFIED: ProductCatalogItem.StockState.ValueType = ...  # 0
        """Default item stock status. Should never be used."""

        IN_STOCK: ProductCatalogItem.StockState.ValueType = ...  # 0
        """Item in stock."""

        OUT_OF_STOCK: ProductCatalogItem.StockState.ValueType = ...  # 1
        """Item out of stock."""

        PREORDER: ProductCatalogItem.StockState.ValueType = ...  # 2
        """Item that is in pre-order state."""

        BACKORDER: ProductCatalogItem.StockState.ValueType = ...  # 3
        """Item that is back-ordered (i.e. temporarily out of stock)."""

    class StockState(_StockState, metaclass=_StockStateEnumTypeWrapper):
        """Item stock state. If this field is unspecified, the item is
        assumed to be in stock.
        """
        pass

    STOCK_STATE_UNSPECIFIED: ProductCatalogItem.StockState.ValueType = ...  # 0
    """Default item stock status. Should never be used."""

    IN_STOCK: ProductCatalogItem.StockState.ValueType = ...  # 0
    """Item in stock."""

    OUT_OF_STOCK: ProductCatalogItem.StockState.ValueType = ...  # 1
    """Item out of stock."""

    PREORDER: ProductCatalogItem.StockState.ValueType = ...  # 2
    """Item that is in pre-order state."""

    BACKORDER: ProductCatalogItem.StockState.ValueType = ...  # 3
    """Item that is back-ordered (i.e. temporarily out of stock)."""


    class ExactPrice(google.protobuf.message.Message):
        """Exact product price."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        DISPLAY_PRICE_FIELD_NUMBER: builtins.int
        ORIGINAL_PRICE_FIELD_NUMBER: builtins.int
        display_price: builtins.float = ...
        """Optional. Display price of the product."""

        original_price: builtins.float = ...
        """Optional. Price of the product without any discount. If zero, by default
        set to be the 'displayPrice'.
        """

        def __init__(self,
            *,
            display_price : builtins.float = ...,
            original_price : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["display_price",b"display_price","original_price",b"original_price"]) -> None: ...

    class PriceRange(google.protobuf.message.Message):
        """Product price range when there are a range of prices for different
        variations of the same product.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        MIN_FIELD_NUMBER: builtins.int
        MAX_FIELD_NUMBER: builtins.int
        min: builtins.float = ...
        """Required. The minimum product price."""

        max: builtins.float = ...
        """Required. The maximum product price."""

        def __init__(self,
            *,
            min : builtins.float = ...,
            max : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["max",b"max","min",b"min"]) -> None: ...

    class CostsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: builtins.float = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    EXACT_PRICE_FIELD_NUMBER: builtins.int
    PRICE_RANGE_FIELD_NUMBER: builtins.int
    COSTS_FIELD_NUMBER: builtins.int
    CURRENCY_CODE_FIELD_NUMBER: builtins.int
    STOCK_STATE_FIELD_NUMBER: builtins.int
    AVAILABLE_QUANTITY_FIELD_NUMBER: builtins.int
    CANONICAL_PRODUCT_URI_FIELD_NUMBER: builtins.int
    IMAGES_FIELD_NUMBER: builtins.int
    @property
    def exact_price(self) -> global___ProductCatalogItem.ExactPrice:
        """Optional. The exact product price."""
        pass
    @property
    def price_range(self) -> global___ProductCatalogItem.PriceRange:
        """Optional. The product price range."""
        pass
    @property
    def costs(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, builtins.float]:
        """Optional. A map to pass the costs associated with the product.

        For example:
        {"manufacturing": 45.5} The profit of selling this item is computed like
        so:

        * If 'exactPrice' is provided, profit = displayPrice - sum(costs)
        * If 'priceRange' is provided, profit = minPrice - sum(costs)
        """
        pass
    currency_code: typing.Text = ...
    """Optional. Only required if the price is set. Currency code for price/costs. Use
    three-character ISO-4217 code.
    """

    stock_state: global___ProductCatalogItem.StockState.ValueType = ...
    """Optional. Online stock state of the catalog item. Default is `IN_STOCK`."""

    available_quantity: builtins.int = ...
    """Optional. The available quantity of the item."""

    canonical_product_uri: typing.Text = ...
    """Optional. Canonical URL directly linking to the item detail page with a
    length limit of 5 KiB..
    """

    @property
    def images(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Image]:
        """Optional. Product images for the catalog item."""
        pass
    def __init__(self,
        *,
        exact_price : typing.Optional[global___ProductCatalogItem.ExactPrice] = ...,
        price_range : typing.Optional[global___ProductCatalogItem.PriceRange] = ...,
        costs : typing.Optional[typing.Mapping[typing.Text, builtins.float]] = ...,
        currency_code : typing.Text = ...,
        stock_state : global___ProductCatalogItem.StockState.ValueType = ...,
        available_quantity : builtins.int = ...,
        canonical_product_uri : typing.Text = ...,
        images : typing.Optional[typing.Iterable[global___Image]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["exact_price",b"exact_price","price",b"price","price_range",b"price_range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["available_quantity",b"available_quantity","canonical_product_uri",b"canonical_product_uri","costs",b"costs","currency_code",b"currency_code","exact_price",b"exact_price","images",b"images","price",b"price","price_range",b"price_range","stock_state",b"stock_state"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["price",b"price"]) -> typing.Optional[typing_extensions.Literal["exact_price","price_range"]]: ...
global___ProductCatalogItem = ProductCatalogItem

class Image(google.protobuf.message.Message):
    """Catalog item thumbnail/detail image."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    URI_FIELD_NUMBER: builtins.int
    HEIGHT_FIELD_NUMBER: builtins.int
    WIDTH_FIELD_NUMBER: builtins.int
    uri: typing.Text = ...
    """Required. URL of the image with a length limit of 5 KiB."""

    height: builtins.int = ...
    """Optional. Height of the image in number of pixels."""

    width: builtins.int = ...
    """Optional. Width of the image in number of pixels."""

    def __init__(self,
        *,
        uri : typing.Text = ...,
        height : builtins.int = ...,
        width : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["height",b"height","uri",b"uri","width",b"width"]) -> None: ...
global___Image = Image
