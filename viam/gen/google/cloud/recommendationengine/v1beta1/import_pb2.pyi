"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.cloud.recommendationengine.v1beta1.catalog_pb2
import google.cloud.recommendationengine.v1beta1.user_event_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.rpc.status_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class GcsSource(google.protobuf.message.Message):
    """Google Cloud Storage location for input content.
    format.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INPUT_URIS_FIELD_NUMBER: builtins.int
    @property
    def input_uris(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Required. Google Cloud Storage URIs to input files. URI can be up to
        2000 characters long. URIs can match the full object path (for example,
        `gs://bucket/directory/object.json`) or a pattern matching one or more
        files, such as `gs://bucket/directory/*.json`. A request can
        contain at most 100 files, and each file can be up to 2 GB. See
        [Importing catalog information](/recommendations-ai/docs/upload-catalog)
        for the expected file format and setup instructions.
        """
        pass
    def __init__(self,
        *,
        input_uris : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["input_uris",b"input_uris"]) -> None: ...
global___GcsSource = GcsSource

class CatalogInlineSource(google.protobuf.message.Message):
    """The inline source for the input config for ImportCatalogItems method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CATALOG_ITEMS_FIELD_NUMBER: builtins.int
    @property
    def catalog_items(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.recommendationengine.v1beta1.catalog_pb2.CatalogItem]:
        """Optional. A list of catalog items to update/create. Recommended max of 10k
        items.
        """
        pass
    def __init__(self,
        *,
        catalog_items : typing.Optional[typing.Iterable[google.cloud.recommendationengine.v1beta1.catalog_pb2.CatalogItem]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["catalog_items",b"catalog_items"]) -> None: ...
global___CatalogInlineSource = CatalogInlineSource

class UserEventInlineSource(google.protobuf.message.Message):
    """The inline source for the input config for ImportUserEvents method."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    USER_EVENTS_FIELD_NUMBER: builtins.int
    @property
    def user_events(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.cloud.recommendationengine.v1beta1.user_event_pb2.UserEvent]:
        """Optional. A list of user events to import. Recommended max of 10k items."""
        pass
    def __init__(self,
        *,
        user_events : typing.Optional[typing.Iterable[google.cloud.recommendationengine.v1beta1.user_event_pb2.UserEvent]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["user_events",b"user_events"]) -> None: ...
global___UserEventInlineSource = UserEventInlineSource

class ImportErrorsConfig(google.protobuf.message.Message):
    """Configuration of destination for Import related errors."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GCS_PREFIX_FIELD_NUMBER: builtins.int
    gcs_prefix: typing.Text = ...
    """Google Cloud Storage path for import errors. This must be an empty,
    existing Cloud Storage bucket. Import errors will be written to a file in
    this bucket, one per line, as a JSON-encoded
    `google.rpc.Status` message.
    """

    def __init__(self,
        *,
        gcs_prefix : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["destination",b"destination","gcs_prefix",b"gcs_prefix"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["destination",b"destination","gcs_prefix",b"gcs_prefix"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["destination",b"destination"]) -> typing.Optional[typing_extensions.Literal["gcs_prefix"]]: ...
global___ImportErrorsConfig = ImportErrorsConfig

class ImportCatalogItemsRequest(google.protobuf.message.Message):
    """Request message for Import methods."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    REQUEST_ID_FIELD_NUMBER: builtins.int
    INPUT_CONFIG_FIELD_NUMBER: builtins.int
    ERRORS_CONFIG_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. `projects/1234/locations/global/catalogs/default_catalog`"""

    request_id: typing.Text = ...
    """Optional. Unique identifier provided by client, within the ancestor
    dataset scope. Ensures idempotency and used for request deduplication.
    Server-generated if unspecified. Up to 128 characters long. This is
    returned as google.longrunning.Operation.name in the response.
    """

    @property
    def input_config(self) -> global___InputConfig:
        """Required. The desired input location of the data."""
        pass
    @property
    def errors_config(self) -> global___ImportErrorsConfig:
        """Optional. The desired location of errors incurred during the Import."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        request_id : typing.Text = ...,
        input_config : typing.Optional[global___InputConfig] = ...,
        errors_config : typing.Optional[global___ImportErrorsConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["errors_config",b"errors_config","input_config",b"input_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["errors_config",b"errors_config","input_config",b"input_config","parent",b"parent","request_id",b"request_id"]) -> None: ...
global___ImportCatalogItemsRequest = ImportCatalogItemsRequest

class ImportUserEventsRequest(google.protobuf.message.Message):
    """Request message for the ImportUserEvents request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    REQUEST_ID_FIELD_NUMBER: builtins.int
    INPUT_CONFIG_FIELD_NUMBER: builtins.int
    ERRORS_CONFIG_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required.
    `projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store`
    """

    request_id: typing.Text = ...
    """Optional. Unique identifier provided by client, within the ancestor
    dataset scope. Ensures idempotency for expensive long running operations.
    Server-generated if unspecified. Up to 128 characters long. This is
    returned as google.longrunning.Operation.name in the response. Note that
    this field must not be set if the desired input config is
    catalog_inline_source.
    """

    @property
    def input_config(self) -> global___InputConfig:
        """Required. The desired input location of the data."""
        pass
    @property
    def errors_config(self) -> global___ImportErrorsConfig:
        """Optional. The desired location of errors incurred during the Import."""
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        request_id : typing.Text = ...,
        input_config : typing.Optional[global___InputConfig] = ...,
        errors_config : typing.Optional[global___ImportErrorsConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["errors_config",b"errors_config","input_config",b"input_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["errors_config",b"errors_config","input_config",b"input_config","parent",b"parent","request_id",b"request_id"]) -> None: ...
global___ImportUserEventsRequest = ImportUserEventsRequest

class InputConfig(google.protobuf.message.Message):
    """The input config source."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CATALOG_INLINE_SOURCE_FIELD_NUMBER: builtins.int
    GCS_SOURCE_FIELD_NUMBER: builtins.int
    USER_EVENT_INLINE_SOURCE_FIELD_NUMBER: builtins.int
    @property
    def catalog_inline_source(self) -> global___CatalogInlineSource:
        """The Inline source for the input content for Catalog items."""
        pass
    @property
    def gcs_source(self) -> global___GcsSource:
        """Google Cloud Storage location for the input content."""
        pass
    @property
    def user_event_inline_source(self) -> global___UserEventInlineSource:
        """The Inline source for the input content for UserEvents."""
        pass
    def __init__(self,
        *,
        catalog_inline_source : typing.Optional[global___CatalogInlineSource] = ...,
        gcs_source : typing.Optional[global___GcsSource] = ...,
        user_event_inline_source : typing.Optional[global___UserEventInlineSource] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["catalog_inline_source",b"catalog_inline_source","gcs_source",b"gcs_source","source",b"source","user_event_inline_source",b"user_event_inline_source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["catalog_inline_source",b"catalog_inline_source","gcs_source",b"gcs_source","source",b"source","user_event_inline_source",b"user_event_inline_source"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source",b"source"]) -> typing.Optional[typing_extensions.Literal["catalog_inline_source","gcs_source","user_event_inline_source"]]: ...
global___InputConfig = InputConfig

class ImportMetadata(google.protobuf.message.Message):
    """Metadata related to the progress of the Import operation. This will be
    returned by the google.longrunning.Operation.metadata field.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    OPERATION_NAME_FIELD_NUMBER: builtins.int
    REQUEST_ID_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    SUCCESS_COUNT_FIELD_NUMBER: builtins.int
    FAILURE_COUNT_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    operation_name: typing.Text = ...
    """Name of the operation."""

    request_id: typing.Text = ...
    """Id of the request / operation. This is parroting back the requestId that
    was passed in the request.
    """

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Operation create time."""
        pass
    success_count: builtins.int = ...
    """Count of entries that were processed successfully."""

    failure_count: builtins.int = ...
    """Count of entries that encountered errors while processing."""

    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Operation last update time. If the operation is done, this is also the
        finish time.
        """
        pass
    def __init__(self,
        *,
        operation_name : typing.Text = ...,
        request_id : typing.Text = ...,
        create_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        success_count : builtins.int = ...,
        failure_count : builtins.int = ...,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time",b"create_time","update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["create_time",b"create_time","failure_count",b"failure_count","operation_name",b"operation_name","request_id",b"request_id","success_count",b"success_count","update_time",b"update_time"]) -> None: ...
global___ImportMetadata = ImportMetadata

class ImportCatalogItemsResponse(google.protobuf.message.Message):
    """Response of the ImportCatalogItemsRequest. If the long running
    operation is done, then this message is returned by the
    google.longrunning.Operations.response field if the operation was successful.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ERROR_SAMPLES_FIELD_NUMBER: builtins.int
    ERRORS_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def error_samples(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.rpc.status_pb2.Status]:
        """A sample of errors encountered while processing the request."""
        pass
    @property
    def errors_config(self) -> global___ImportErrorsConfig:
        """Echoes the destination for the complete errors in the request if set."""
        pass
    def __init__(self,
        *,
        error_samples : typing.Optional[typing.Iterable[google.rpc.status_pb2.Status]] = ...,
        errors_config : typing.Optional[global___ImportErrorsConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["errors_config",b"errors_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["error_samples",b"error_samples","errors_config",b"errors_config"]) -> None: ...
global___ImportCatalogItemsResponse = ImportCatalogItemsResponse

class ImportUserEventsResponse(google.protobuf.message.Message):
    """Response of the ImportUserEventsRequest. If the long running
    operation was successful, then this message is returned by the
    google.longrunning.Operations.response field if the operation was successful.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ERROR_SAMPLES_FIELD_NUMBER: builtins.int
    ERRORS_CONFIG_FIELD_NUMBER: builtins.int
    IMPORT_SUMMARY_FIELD_NUMBER: builtins.int
    @property
    def error_samples(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.rpc.status_pb2.Status]:
        """A sample of errors encountered while processing the request."""
        pass
    @property
    def errors_config(self) -> global___ImportErrorsConfig:
        """Echoes the destination for the complete errors if this field was set in
        the request.
        """
        pass
    @property
    def import_summary(self) -> global___UserEventImportSummary:
        """Aggregated statistics of user event import status."""
        pass
    def __init__(self,
        *,
        error_samples : typing.Optional[typing.Iterable[google.rpc.status_pb2.Status]] = ...,
        errors_config : typing.Optional[global___ImportErrorsConfig] = ...,
        import_summary : typing.Optional[global___UserEventImportSummary] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["errors_config",b"errors_config","import_summary",b"import_summary"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["error_samples",b"error_samples","errors_config",b"errors_config","import_summary",b"import_summary"]) -> None: ...
global___ImportUserEventsResponse = ImportUserEventsResponse

class UserEventImportSummary(google.protobuf.message.Message):
    """A summary of import result. The UserEventImportSummary summarizes
    the import status for user events.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    JOINED_EVENTS_COUNT_FIELD_NUMBER: builtins.int
    UNJOINED_EVENTS_COUNT_FIELD_NUMBER: builtins.int
    joined_events_count: builtins.int = ...
    """Count of user events imported with complete existing catalog information."""

    unjoined_events_count: builtins.int = ...
    """Count of user events imported, but with catalog information not found
    in the imported catalog.
    """

    def __init__(self,
        *,
        joined_events_count : builtins.int = ...,
        unjoined_events_count : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["joined_events_count",b"joined_events_count","unjoined_events_count",b"unjoined_events_count"]) -> None: ...
global___UserEventImportSummary = UserEventImportSummary
