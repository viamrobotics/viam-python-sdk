# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/cloud/mediatranslation/v1beta1/media_translation.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.field_behavior_pb2
import google.rpc.status_pb2
import google.api.client_pb2
import google.cloud.mediatranslation.v1beta1.media_translation_pb2


class SpeechTranslationServiceBase(abc.ABC):

    @abc.abstractmethod
    async def StreamingTranslateSpeech(self, stream: 'grpclib.server.Stream[google.cloud.mediatranslation.v1beta1.media_translation_pb2.StreamingTranslateSpeechRequest, google.cloud.mediatranslation.v1beta1.media_translation_pb2.StreamingTranslateSpeechResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.mediatranslation.v1beta1.SpeechTranslationService/StreamingTranslateSpeech': grpclib.const.Handler(
                self.StreamingTranslateSpeech,
                grpclib.const.Cardinality.STREAM_STREAM,
                google.cloud.mediatranslation.v1beta1.media_translation_pb2.StreamingTranslateSpeechRequest,
                google.cloud.mediatranslation.v1beta1.media_translation_pb2.StreamingTranslateSpeechResponse,
            ),
        }


class SpeechTranslationServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.StreamingTranslateSpeech = grpclib.client.StreamStreamMethod(
            channel,
            '/google.cloud.mediatranslation.v1beta1.SpeechTranslationService/StreamingTranslateSpeech',
            google.cloud.mediatranslation.v1beta1.media_translation_pb2.StreamingTranslateSpeechRequest,
            google.cloud.mediatranslation.v1beta1.media_translation_pb2.StreamingTranslateSpeechResponse,
        )
