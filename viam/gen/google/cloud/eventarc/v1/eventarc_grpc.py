# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/cloud/eventarc/v1/eventarc.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.api.client_pb2
import google.api.field_behavior_pb2
import google.api.resource_pb2
import google.cloud.eventarc.v1.trigger_pb2
import google.longrunning.operations_pb2
import google.protobuf.field_mask_pb2
import google.protobuf.timestamp_pb2
import google.cloud.eventarc.v1.eventarc_pb2


class EventarcBase(abc.ABC):

    @abc.abstractmethod
    async def GetTrigger(self, stream: 'grpclib.server.Stream[google.cloud.eventarc.v1.eventarc_pb2.GetTriggerRequest, google.cloud.eventarc.v1.trigger_pb2.Trigger]') -> None:
        pass

    @abc.abstractmethod
    async def ListTriggers(self, stream: 'grpclib.server.Stream[google.cloud.eventarc.v1.eventarc_pb2.ListTriggersRequest, google.cloud.eventarc.v1.eventarc_pb2.ListTriggersResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CreateTrigger(self, stream: 'grpclib.server.Stream[google.cloud.eventarc.v1.eventarc_pb2.CreateTriggerRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateTrigger(self, stream: 'grpclib.server.Stream[google.cloud.eventarc.v1.eventarc_pb2.UpdateTriggerRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteTrigger(self, stream: 'grpclib.server.Stream[google.cloud.eventarc.v1.eventarc_pb2.DeleteTriggerRequest, google.longrunning.operations_pb2.Operation]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.cloud.eventarc.v1.Eventarc/GetTrigger': grpclib.const.Handler(
                self.GetTrigger,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.eventarc.v1.eventarc_pb2.GetTriggerRequest,
                google.cloud.eventarc.v1.trigger_pb2.Trigger,
            ),
            '/google.cloud.eventarc.v1.Eventarc/ListTriggers': grpclib.const.Handler(
                self.ListTriggers,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.eventarc.v1.eventarc_pb2.ListTriggersRequest,
                google.cloud.eventarc.v1.eventarc_pb2.ListTriggersResponse,
            ),
            '/google.cloud.eventarc.v1.Eventarc/CreateTrigger': grpclib.const.Handler(
                self.CreateTrigger,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.eventarc.v1.eventarc_pb2.CreateTriggerRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.cloud.eventarc.v1.Eventarc/UpdateTrigger': grpclib.const.Handler(
                self.UpdateTrigger,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.eventarc.v1.eventarc_pb2.UpdateTriggerRequest,
                google.longrunning.operations_pb2.Operation,
            ),
            '/google.cloud.eventarc.v1.Eventarc/DeleteTrigger': grpclib.const.Handler(
                self.DeleteTrigger,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.cloud.eventarc.v1.eventarc_pb2.DeleteTriggerRequest,
                google.longrunning.operations_pb2.Operation,
            ),
        }


class EventarcStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetTrigger = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.eventarc.v1.Eventarc/GetTrigger',
            google.cloud.eventarc.v1.eventarc_pb2.GetTriggerRequest,
            google.cloud.eventarc.v1.trigger_pb2.Trigger,
        )
        self.ListTriggers = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.eventarc.v1.Eventarc/ListTriggers',
            google.cloud.eventarc.v1.eventarc_pb2.ListTriggersRequest,
            google.cloud.eventarc.v1.eventarc_pb2.ListTriggersResponse,
        )
        self.CreateTrigger = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.eventarc.v1.Eventarc/CreateTrigger',
            google.cloud.eventarc.v1.eventarc_pb2.CreateTriggerRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.UpdateTrigger = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.eventarc.v1.Eventarc/UpdateTrigger',
            google.cloud.eventarc.v1.eventarc_pb2.UpdateTriggerRequest,
            google.longrunning.operations_pb2.Operation,
        )
        self.DeleteTrigger = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.cloud.eventarc.v1.Eventarc/DeleteTrigger',
            google.cloud.eventarc.v1.eventarc_pb2.DeleteTriggerRequest,
            google.longrunning.operations_pb2.Operation,
        )
