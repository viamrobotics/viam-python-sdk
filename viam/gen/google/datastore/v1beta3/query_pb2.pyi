"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.datastore.v1beta3.entity_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class EntityResult(google.protobuf.message.Message):
    """The result of fetching an entity from Datastore."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _ResultType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ResultTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ResultType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        RESULT_TYPE_UNSPECIFIED: EntityResult.ResultType.ValueType = ...  # 0
        """Unspecified. This value is never used."""

        FULL: EntityResult.ResultType.ValueType = ...  # 1
        """The key and properties."""

        PROJECTION: EntityResult.ResultType.ValueType = ...  # 2
        """A projected subset of properties. The entity may have no key."""

        KEY_ONLY: EntityResult.ResultType.ValueType = ...  # 3
        """Only the key."""

    class ResultType(_ResultType, metaclass=_ResultTypeEnumTypeWrapper):
        """Specifies what data the 'entity' field contains.
        A `ResultType` is either implied (for example, in `LookupResponse.missing`
        from `datastore.proto`, it is always `KEY_ONLY`) or specified by context
        (for example, in message `QueryResultBatch`, field `entity_result_type`
        specifies a `ResultType` for all the values in field `entity_results`).
        """
        pass

    RESULT_TYPE_UNSPECIFIED: EntityResult.ResultType.ValueType = ...  # 0
    """Unspecified. This value is never used."""

    FULL: EntityResult.ResultType.ValueType = ...  # 1
    """The key and properties."""

    PROJECTION: EntityResult.ResultType.ValueType = ...  # 2
    """A projected subset of properties. The entity may have no key."""

    KEY_ONLY: EntityResult.ResultType.ValueType = ...  # 3
    """Only the key."""


    ENTITY_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    CURSOR_FIELD_NUMBER: builtins.int
    @property
    def entity(self) -> google.datastore.v1beta3.entity_pb2.Entity:
        """The resulting entity."""
        pass
    version: builtins.int = ...
    """The version of the entity, a strictly positive number that monotonically
    increases with changes to the entity.

    This field is set for
    [`FULL`][google.datastore.v1beta3.EntityResult.ResultType.FULL] entity
    results.

    For [missing][google.datastore.v1beta3.LookupResponse.missing] entities in
    `LookupResponse`, this is the version of the snapshot that was used to look
    up the entity, and it is always set except for eventually consistent reads.
    """

    cursor: builtins.bytes = ...
    """A cursor that points to the position after the result entity.
    Set only when the `EntityResult` is part of a `QueryResultBatch` message.
    """

    def __init__(self,
        *,
        entity : typing.Optional[google.datastore.v1beta3.entity_pb2.Entity] = ...,
        version : builtins.int = ...,
        cursor : builtins.bytes = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["entity",b"entity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cursor",b"cursor","entity",b"entity","version",b"version"]) -> None: ...
global___EntityResult = EntityResult

class Query(google.protobuf.message.Message):
    """A query for entities."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECTION_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    ORDER_FIELD_NUMBER: builtins.int
    DISTINCT_ON_FIELD_NUMBER: builtins.int
    START_CURSOR_FIELD_NUMBER: builtins.int
    END_CURSOR_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    LIMIT_FIELD_NUMBER: builtins.int
    @property
    def projection(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Projection]:
        """The projection to return. Defaults to returning all properties."""
        pass
    @property
    def kind(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___KindExpression]:
        """The kinds to query (if empty, returns entities of all kinds).
        Currently at most 1 kind may be specified.
        """
        pass
    @property
    def filter(self) -> global___Filter:
        """The filter to apply."""
        pass
    @property
    def order(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PropertyOrder]:
        """The order to apply to the query results (if empty, order is unspecified)."""
        pass
    @property
    def distinct_on(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PropertyReference]:
        """The properties to make distinct. The query results will contain the first
        result for each distinct combination of values for the given properties
        (if empty, all results are returned).
        """
        pass
    start_cursor: builtins.bytes = ...
    """A starting point for the query results. Query cursors are
    returned in query result batches and
    [can only be used to continue the same
    query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
    """

    end_cursor: builtins.bytes = ...
    """An ending point for the query results. Query cursors are
    returned in query result batches and
    [can only be used to limit the same
    query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
    """

    offset: builtins.int = ...
    """The number of results to skip. Applies before limit, but after all other
    constraints. Optional. Must be >= 0 if specified.
    """

    @property
    def limit(self) -> google.protobuf.wrappers_pb2.Int32Value:
        """The maximum number of results to return. Applies after all other
        constraints. Optional.
        Unspecified is interpreted as no limit.
        Must be >= 0 if specified.
        """
        pass
    def __init__(self,
        *,
        projection : typing.Optional[typing.Iterable[global___Projection]] = ...,
        kind : typing.Optional[typing.Iterable[global___KindExpression]] = ...,
        filter : typing.Optional[global___Filter] = ...,
        order : typing.Optional[typing.Iterable[global___PropertyOrder]] = ...,
        distinct_on : typing.Optional[typing.Iterable[global___PropertyReference]] = ...,
        start_cursor : builtins.bytes = ...,
        end_cursor : builtins.bytes = ...,
        offset : builtins.int = ...,
        limit : typing.Optional[google.protobuf.wrappers_pb2.Int32Value] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["filter",b"filter","limit",b"limit"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["distinct_on",b"distinct_on","end_cursor",b"end_cursor","filter",b"filter","kind",b"kind","limit",b"limit","offset",b"offset","order",b"order","projection",b"projection","start_cursor",b"start_cursor"]) -> None: ...
global___Query = Query

class KindExpression(google.protobuf.message.Message):
    """A representation of a kind."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the kind."""

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___KindExpression = KindExpression

class PropertyReference(google.protobuf.message.Message):
    """A reference to a property relative to the kind expressions."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the property.
    If name includes "."s, it may be interpreted as a property name path.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___PropertyReference = PropertyReference

class Projection(google.protobuf.message.Message):
    """A representation of a property in a projection."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROPERTY_FIELD_NUMBER: builtins.int
    @property
    def property(self) -> global___PropertyReference:
        """The property to project."""
        pass
    def __init__(self,
        *,
        property : typing.Optional[global___PropertyReference] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["property",b"property"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["property",b"property"]) -> None: ...
global___Projection = Projection

class PropertyOrder(google.protobuf.message.Message):
    """The desired order for a specific property."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Direction:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _DirectionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Direction.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        DIRECTION_UNSPECIFIED: PropertyOrder.Direction.ValueType = ...  # 0
        """Unspecified. This value must not be used."""

        ASCENDING: PropertyOrder.Direction.ValueType = ...  # 1
        """Ascending."""

        DESCENDING: PropertyOrder.Direction.ValueType = ...  # 2
        """Descending."""

    class Direction(_Direction, metaclass=_DirectionEnumTypeWrapper):
        """The sort direction."""
        pass

    DIRECTION_UNSPECIFIED: PropertyOrder.Direction.ValueType = ...  # 0
    """Unspecified. This value must not be used."""

    ASCENDING: PropertyOrder.Direction.ValueType = ...  # 1
    """Ascending."""

    DESCENDING: PropertyOrder.Direction.ValueType = ...  # 2
    """Descending."""


    PROPERTY_FIELD_NUMBER: builtins.int
    DIRECTION_FIELD_NUMBER: builtins.int
    @property
    def property(self) -> global___PropertyReference:
        """The property to order by."""
        pass
    direction: global___PropertyOrder.Direction.ValueType = ...
    """The direction to order by. Defaults to `ASCENDING`."""

    def __init__(self,
        *,
        property : typing.Optional[global___PropertyReference] = ...,
        direction : global___PropertyOrder.Direction.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["property",b"property"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["direction",b"direction","property",b"property"]) -> None: ...
global___PropertyOrder = PropertyOrder

class Filter(google.protobuf.message.Message):
    """A holder for any type of filter."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    COMPOSITE_FILTER_FIELD_NUMBER: builtins.int
    PROPERTY_FILTER_FIELD_NUMBER: builtins.int
    @property
    def composite_filter(self) -> global___CompositeFilter:
        """A composite filter."""
        pass
    @property
    def property_filter(self) -> global___PropertyFilter:
        """A filter on a property."""
        pass
    def __init__(self,
        *,
        composite_filter : typing.Optional[global___CompositeFilter] = ...,
        property_filter : typing.Optional[global___PropertyFilter] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["composite_filter",b"composite_filter","filter_type",b"filter_type","property_filter",b"property_filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["composite_filter",b"composite_filter","filter_type",b"filter_type","property_filter",b"property_filter"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["filter_type",b"filter_type"]) -> typing.Optional[typing_extensions.Literal["composite_filter","property_filter"]]: ...
global___Filter = Filter

class CompositeFilter(google.protobuf.message.Message):
    """A filter that merges multiple other filters using the given operator."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Operator:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _OperatorEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Operator.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        OPERATOR_UNSPECIFIED: CompositeFilter.Operator.ValueType = ...  # 0
        """Unspecified. This value must not be used."""

        AND: CompositeFilter.Operator.ValueType = ...  # 1
        """The results are required to satisfy each of the combined filters."""

    class Operator(_Operator, metaclass=_OperatorEnumTypeWrapper):
        """A composite filter operator."""
        pass

    OPERATOR_UNSPECIFIED: CompositeFilter.Operator.ValueType = ...  # 0
    """Unspecified. This value must not be used."""

    AND: CompositeFilter.Operator.ValueType = ...  # 1
    """The results are required to satisfy each of the combined filters."""


    OP_FIELD_NUMBER: builtins.int
    FILTERS_FIELD_NUMBER: builtins.int
    op: global___CompositeFilter.Operator.ValueType = ...
    """The operator for combining multiple filters."""

    @property
    def filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Filter]:
        """The list of filters to combine.
        Must contain at least one filter.
        """
        pass
    def __init__(self,
        *,
        op : global___CompositeFilter.Operator.ValueType = ...,
        filters : typing.Optional[typing.Iterable[global___Filter]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filters",b"filters","op",b"op"]) -> None: ...
global___CompositeFilter = CompositeFilter

class PropertyFilter(google.protobuf.message.Message):
    """A filter on a specific property."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Operator:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _OperatorEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Operator.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        OPERATOR_UNSPECIFIED: PropertyFilter.Operator.ValueType = ...  # 0
        """Unspecified. This value must not be used."""

        LESS_THAN: PropertyFilter.Operator.ValueType = ...  # 1
        """Less than."""

        LESS_THAN_OR_EQUAL: PropertyFilter.Operator.ValueType = ...  # 2
        """Less than or equal."""

        GREATER_THAN: PropertyFilter.Operator.ValueType = ...  # 3
        """Greater than."""

        GREATER_THAN_OR_EQUAL: PropertyFilter.Operator.ValueType = ...  # 4
        """Greater than or equal."""

        EQUAL: PropertyFilter.Operator.ValueType = ...  # 5
        """Equal."""

        HAS_ANCESTOR: PropertyFilter.Operator.ValueType = ...  # 11
        """Has ancestor."""

    class Operator(_Operator, metaclass=_OperatorEnumTypeWrapper):
        """A property filter operator."""
        pass

    OPERATOR_UNSPECIFIED: PropertyFilter.Operator.ValueType = ...  # 0
    """Unspecified. This value must not be used."""

    LESS_THAN: PropertyFilter.Operator.ValueType = ...  # 1
    """Less than."""

    LESS_THAN_OR_EQUAL: PropertyFilter.Operator.ValueType = ...  # 2
    """Less than or equal."""

    GREATER_THAN: PropertyFilter.Operator.ValueType = ...  # 3
    """Greater than."""

    GREATER_THAN_OR_EQUAL: PropertyFilter.Operator.ValueType = ...  # 4
    """Greater than or equal."""

    EQUAL: PropertyFilter.Operator.ValueType = ...  # 5
    """Equal."""

    HAS_ANCESTOR: PropertyFilter.Operator.ValueType = ...  # 11
    """Has ancestor."""


    PROPERTY_FIELD_NUMBER: builtins.int
    OP_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    @property
    def property(self) -> global___PropertyReference:
        """The property to filter by."""
        pass
    op: global___PropertyFilter.Operator.ValueType = ...
    """The operator to filter by."""

    @property
    def value(self) -> google.datastore.v1beta3.entity_pb2.Value:
        """The value to compare the property to."""
        pass
    def __init__(self,
        *,
        property : typing.Optional[global___PropertyReference] = ...,
        op : global___PropertyFilter.Operator.ValueType = ...,
        value : typing.Optional[google.datastore.v1beta3.entity_pb2.Value] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["property",b"property","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["op",b"op","property",b"property","value",b"value"]) -> None: ...
global___PropertyFilter = PropertyFilter

class GqlQuery(google.protobuf.message.Message):
    """A [GQL
    query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class NamedBindingsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___GqlQueryParameter: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___GqlQueryParameter] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    QUERY_STRING_FIELD_NUMBER: builtins.int
    ALLOW_LITERALS_FIELD_NUMBER: builtins.int
    NAMED_BINDINGS_FIELD_NUMBER: builtins.int
    POSITIONAL_BINDINGS_FIELD_NUMBER: builtins.int
    query_string: typing.Text = ...
    """A string of the format described
    [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
    """

    allow_literals: builtins.bool = ...
    """When false, the query string must not contain any literals and instead must
    bind all values. For example,
    `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while
    `SELECT * FROM Kind WHERE a = @value` is.
    """

    @property
    def named_bindings(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___GqlQueryParameter]:
        """For each non-reserved named binding site in the query string, there must be
        a named parameter with that name, but not necessarily the inverse.

        Key must match regex `[A-Za-z_$][A-Za-z_$0-9]*`, must not match regex
        `__.*__`, and must not be `""`.
        """
        pass
    @property
    def positional_bindings(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GqlQueryParameter]:
        """Numbered binding site @1 references the first numbered parameter,
        effectively using 1-based indexing, rather than the usual 0.

        For each binding site numbered i in `query_string`, there must be an i-th
        numbered parameter. The inverse must also be true.
        """
        pass
    def __init__(self,
        *,
        query_string : typing.Text = ...,
        allow_literals : builtins.bool = ...,
        named_bindings : typing.Optional[typing.Mapping[typing.Text, global___GqlQueryParameter]] = ...,
        positional_bindings : typing.Optional[typing.Iterable[global___GqlQueryParameter]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["allow_literals",b"allow_literals","named_bindings",b"named_bindings","positional_bindings",b"positional_bindings","query_string",b"query_string"]) -> None: ...
global___GqlQuery = GqlQuery

class GqlQueryParameter(google.protobuf.message.Message):
    """A binding parameter for a GQL query."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VALUE_FIELD_NUMBER: builtins.int
    CURSOR_FIELD_NUMBER: builtins.int
    @property
    def value(self) -> google.datastore.v1beta3.entity_pb2.Value:
        """A value parameter."""
        pass
    cursor: builtins.bytes = ...
    """A query cursor. Query cursors are returned in query
    result batches.
    """

    def __init__(self,
        *,
        value : typing.Optional[google.datastore.v1beta3.entity_pb2.Value] = ...,
        cursor : builtins.bytes = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cursor",b"cursor","parameter_type",b"parameter_type","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cursor",b"cursor","parameter_type",b"parameter_type","value",b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["parameter_type",b"parameter_type"]) -> typing.Optional[typing_extensions.Literal["value","cursor"]]: ...
global___GqlQueryParameter = GqlQueryParameter

class QueryResultBatch(google.protobuf.message.Message):
    """A batch of results produced by a query."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _MoreResultsType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _MoreResultsTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MoreResultsType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        MORE_RESULTS_TYPE_UNSPECIFIED: QueryResultBatch.MoreResultsType.ValueType = ...  # 0
        """Unspecified. This value is never used."""

        NOT_FINISHED: QueryResultBatch.MoreResultsType.ValueType = ...  # 1
        """There may be additional batches to fetch from this query."""

        MORE_RESULTS_AFTER_LIMIT: QueryResultBatch.MoreResultsType.ValueType = ...  # 2
        """The query is finished, but there may be more results after the limit."""

        MORE_RESULTS_AFTER_CURSOR: QueryResultBatch.MoreResultsType.ValueType = ...  # 4
        """The query is finished, but there may be more results after the end
        cursor.
        """

        NO_MORE_RESULTS: QueryResultBatch.MoreResultsType.ValueType = ...  # 3
        """The query is finished, and there are no more results."""

    class MoreResultsType(_MoreResultsType, metaclass=_MoreResultsTypeEnumTypeWrapper):
        """The possible values for the `more_results` field."""
        pass

    MORE_RESULTS_TYPE_UNSPECIFIED: QueryResultBatch.MoreResultsType.ValueType = ...  # 0
    """Unspecified. This value is never used."""

    NOT_FINISHED: QueryResultBatch.MoreResultsType.ValueType = ...  # 1
    """There may be additional batches to fetch from this query."""

    MORE_RESULTS_AFTER_LIMIT: QueryResultBatch.MoreResultsType.ValueType = ...  # 2
    """The query is finished, but there may be more results after the limit."""

    MORE_RESULTS_AFTER_CURSOR: QueryResultBatch.MoreResultsType.ValueType = ...  # 4
    """The query is finished, but there may be more results after the end
    cursor.
    """

    NO_MORE_RESULTS: QueryResultBatch.MoreResultsType.ValueType = ...  # 3
    """The query is finished, and there are no more results."""


    SKIPPED_RESULTS_FIELD_NUMBER: builtins.int
    SKIPPED_CURSOR_FIELD_NUMBER: builtins.int
    ENTITY_RESULT_TYPE_FIELD_NUMBER: builtins.int
    ENTITY_RESULTS_FIELD_NUMBER: builtins.int
    END_CURSOR_FIELD_NUMBER: builtins.int
    MORE_RESULTS_FIELD_NUMBER: builtins.int
    SNAPSHOT_VERSION_FIELD_NUMBER: builtins.int
    skipped_results: builtins.int = ...
    """The number of results skipped, typically because of an offset."""

    skipped_cursor: builtins.bytes = ...
    """A cursor that points to the position after the last skipped result.
    Will be set when `skipped_results` != 0.
    """

    entity_result_type: global___EntityResult.ResultType.ValueType = ...
    """The result type for every entity in `entity_results`."""

    @property
    def entity_results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EntityResult]:
        """The results for this batch."""
        pass
    end_cursor: builtins.bytes = ...
    """A cursor that points to the position after the last result in the batch."""

    more_results: global___QueryResultBatch.MoreResultsType.ValueType = ...
    """The state of the query after the current batch."""

    snapshot_version: builtins.int = ...
    """The version number of the snapshot this batch was returned from.
    This applies to the range of results from the query's `start_cursor` (or
    the beginning of the query if no cursor was given) to this batch's
    `end_cursor` (not the query's `end_cursor`).

    In a single transaction, subsequent query result batches for the same query
    can have a greater snapshot version number. Each batch's snapshot version
    is valid for all preceding batches.
    The value will be zero for eventually consistent queries.
    """

    def __init__(self,
        *,
        skipped_results : builtins.int = ...,
        skipped_cursor : builtins.bytes = ...,
        entity_result_type : global___EntityResult.ResultType.ValueType = ...,
        entity_results : typing.Optional[typing.Iterable[global___EntityResult]] = ...,
        end_cursor : builtins.bytes = ...,
        more_results : global___QueryResultBatch.MoreResultsType.ValueType = ...,
        snapshot_version : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_cursor",b"end_cursor","entity_result_type",b"entity_result_type","entity_results",b"entity_results","more_results",b"more_results","skipped_cursor",b"skipped_cursor","skipped_results",b"skipped_results","snapshot_version",b"snapshot_version"]) -> None: ...
global___QueryResultBatch = QueryResultBatch
