"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.datastore.v1.entity_pb2
import google.datastore.v1.query_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class LookupRequest(google.protobuf.message.Message):
    """The request for [Datastore.Lookup][google.datastore.v1.Datastore.Lookup]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    READ_OPTIONS_FIELD_NUMBER: builtins.int
    KEYS_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Required. The ID of the project against which to make the request."""

    @property
    def read_options(self) -> global___ReadOptions:
        """The options for this lookup request."""
        pass
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.datastore.v1.entity_pb2.Key]:
        """Required. Keys of entities to look up."""
        pass
    def __init__(self,
        *,
        project_id : typing.Text = ...,
        read_options : typing.Optional[global___ReadOptions] = ...,
        keys : typing.Optional[typing.Iterable[google.datastore.v1.entity_pb2.Key]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["read_options",b"read_options"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["keys",b"keys","project_id",b"project_id","read_options",b"read_options"]) -> None: ...
global___LookupRequest = LookupRequest

class LookupResponse(google.protobuf.message.Message):
    """The response for [Datastore.Lookup][google.datastore.v1.Datastore.Lookup]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FOUND_FIELD_NUMBER: builtins.int
    MISSING_FIELD_NUMBER: builtins.int
    DEFERRED_FIELD_NUMBER: builtins.int
    @property
    def found(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.datastore.v1.query_pb2.EntityResult]:
        """Entities found as `ResultType.FULL` entities. The order of results in this
        field is undefined and has no relation to the order of the keys in the
        input.
        """
        pass
    @property
    def missing(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.datastore.v1.query_pb2.EntityResult]:
        """Entities not found as `ResultType.KEY_ONLY` entities. The order of results
        in this field is undefined and has no relation to the order of the keys
        in the input.
        """
        pass
    @property
    def deferred(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.datastore.v1.entity_pb2.Key]:
        """A list of keys that were not looked up due to resource constraints. The
        order of results in this field is undefined and has no relation to the
        order of the keys in the input.
        """
        pass
    def __init__(self,
        *,
        found : typing.Optional[typing.Iterable[google.datastore.v1.query_pb2.EntityResult]] = ...,
        missing : typing.Optional[typing.Iterable[google.datastore.v1.query_pb2.EntityResult]] = ...,
        deferred : typing.Optional[typing.Iterable[google.datastore.v1.entity_pb2.Key]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["deferred",b"deferred","found",b"found","missing",b"missing"]) -> None: ...
global___LookupResponse = LookupResponse

class RunQueryRequest(google.protobuf.message.Message):
    """The request for [Datastore.RunQuery][google.datastore.v1.Datastore.RunQuery]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    PARTITION_ID_FIELD_NUMBER: builtins.int
    READ_OPTIONS_FIELD_NUMBER: builtins.int
    QUERY_FIELD_NUMBER: builtins.int
    GQL_QUERY_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Required. The ID of the project against which to make the request."""

    @property
    def partition_id(self) -> google.datastore.v1.entity_pb2.PartitionId:
        """Entities are partitioned into subsets, identified by a partition ID.
        Queries are scoped to a single partition.
        This partition ID is normalized with the standard default context
        partition ID.
        """
        pass
    @property
    def read_options(self) -> global___ReadOptions:
        """The options for this query."""
        pass
    @property
    def query(self) -> google.datastore.v1.query_pb2.Query:
        """The query to run."""
        pass
    @property
    def gql_query(self) -> google.datastore.v1.query_pb2.GqlQuery:
        """The GQL query to run."""
        pass
    def __init__(self,
        *,
        project_id : typing.Text = ...,
        partition_id : typing.Optional[google.datastore.v1.entity_pb2.PartitionId] = ...,
        read_options : typing.Optional[global___ReadOptions] = ...,
        query : typing.Optional[google.datastore.v1.query_pb2.Query] = ...,
        gql_query : typing.Optional[google.datastore.v1.query_pb2.GqlQuery] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["gql_query",b"gql_query","partition_id",b"partition_id","query",b"query","query_type",b"query_type","read_options",b"read_options"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["gql_query",b"gql_query","partition_id",b"partition_id","project_id",b"project_id","query",b"query","query_type",b"query_type","read_options",b"read_options"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["query_type",b"query_type"]) -> typing.Optional[typing_extensions.Literal["query","gql_query"]]: ...
global___RunQueryRequest = RunQueryRequest

class RunQueryResponse(google.protobuf.message.Message):
    """The response for [Datastore.RunQuery][google.datastore.v1.Datastore.RunQuery]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BATCH_FIELD_NUMBER: builtins.int
    QUERY_FIELD_NUMBER: builtins.int
    @property
    def batch(self) -> google.datastore.v1.query_pb2.QueryResultBatch:
        """A batch of query results (always present)."""
        pass
    @property
    def query(self) -> google.datastore.v1.query_pb2.Query:
        """The parsed form of the `GqlQuery` from the request, if it was set."""
        pass
    def __init__(self,
        *,
        batch : typing.Optional[google.datastore.v1.query_pb2.QueryResultBatch] = ...,
        query : typing.Optional[google.datastore.v1.query_pb2.Query] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["batch",b"batch","query",b"query"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["batch",b"batch","query",b"query"]) -> None: ...
global___RunQueryResponse = RunQueryResponse

class BeginTransactionRequest(google.protobuf.message.Message):
    """The request for [Datastore.BeginTransaction][google.datastore.v1.Datastore.BeginTransaction]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    TRANSACTION_OPTIONS_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Required. The ID of the project against which to make the request."""

    @property
    def transaction_options(self) -> global___TransactionOptions:
        """Options for a new transaction."""
        pass
    def __init__(self,
        *,
        project_id : typing.Text = ...,
        transaction_options : typing.Optional[global___TransactionOptions] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["transaction_options",b"transaction_options"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["project_id",b"project_id","transaction_options",b"transaction_options"]) -> None: ...
global___BeginTransactionRequest = BeginTransactionRequest

class BeginTransactionResponse(google.protobuf.message.Message):
    """The response for [Datastore.BeginTransaction][google.datastore.v1.Datastore.BeginTransaction]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TRANSACTION_FIELD_NUMBER: builtins.int
    transaction: builtins.bytes = ...
    """The transaction identifier (always present)."""

    def __init__(self,
        *,
        transaction : builtins.bytes = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["transaction",b"transaction"]) -> None: ...
global___BeginTransactionResponse = BeginTransactionResponse

class RollbackRequest(google.protobuf.message.Message):
    """The request for [Datastore.Rollback][google.datastore.v1.Datastore.Rollback]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    TRANSACTION_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Required. The ID of the project against which to make the request."""

    transaction: builtins.bytes = ...
    """Required. The transaction identifier, returned by a call to
    [Datastore.BeginTransaction][google.datastore.v1.Datastore.BeginTransaction].
    """

    def __init__(self,
        *,
        project_id : typing.Text = ...,
        transaction : builtins.bytes = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["project_id",b"project_id","transaction",b"transaction"]) -> None: ...
global___RollbackRequest = RollbackRequest

class RollbackResponse(google.protobuf.message.Message):
    """The response for [Datastore.Rollback][google.datastore.v1.Datastore.Rollback].
    (an empty message).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___RollbackResponse = RollbackResponse

class CommitRequest(google.protobuf.message.Message):
    """The request for [Datastore.Commit][google.datastore.v1.Datastore.Commit]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Mode:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Mode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        MODE_UNSPECIFIED: CommitRequest.Mode.ValueType = ...  # 0
        """Unspecified. This value must not be used."""

        TRANSACTIONAL: CommitRequest.Mode.ValueType = ...  # 1
        """Transactional: The mutations are either all applied, or none are applied.
        Learn about transactions
        [here](https://cloud.google.com/datastore/docs/concepts/transactions).
        """

        NON_TRANSACTIONAL: CommitRequest.Mode.ValueType = ...  # 2
        """Non-transactional: The mutations may not apply as all or none."""

    class Mode(_Mode, metaclass=_ModeEnumTypeWrapper):
        """The modes available for commits."""
        pass

    MODE_UNSPECIFIED: CommitRequest.Mode.ValueType = ...  # 0
    """Unspecified. This value must not be used."""

    TRANSACTIONAL: CommitRequest.Mode.ValueType = ...  # 1
    """Transactional: The mutations are either all applied, or none are applied.
    Learn about transactions
    [here](https://cloud.google.com/datastore/docs/concepts/transactions).
    """

    NON_TRANSACTIONAL: CommitRequest.Mode.ValueType = ...  # 2
    """Non-transactional: The mutations may not apply as all or none."""


    PROJECT_ID_FIELD_NUMBER: builtins.int
    MODE_FIELD_NUMBER: builtins.int
    TRANSACTION_FIELD_NUMBER: builtins.int
    MUTATIONS_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Required. The ID of the project against which to make the request."""

    mode: global___CommitRequest.Mode.ValueType = ...
    """The type of commit to perform. Defaults to `TRANSACTIONAL`."""

    transaction: builtins.bytes = ...
    """The identifier of the transaction associated with the commit. A
    transaction identifier is returned by a call to
    [Datastore.BeginTransaction][google.datastore.v1.Datastore.BeginTransaction].
    """

    @property
    def mutations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Mutation]:
        """The mutations to perform.

        When mode is `TRANSACTIONAL`, mutations affecting a single entity are
        applied in order. The following sequences of mutations affecting a single
        entity are not permitted in a single `Commit` request:

        - `insert` followed by `insert`
        - `update` followed by `insert`
        - `upsert` followed by `insert`
        - `delete` followed by `update`

        When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single
        entity.
        """
        pass
    def __init__(self,
        *,
        project_id : typing.Text = ...,
        mode : global___CommitRequest.Mode.ValueType = ...,
        transaction : builtins.bytes = ...,
        mutations : typing.Optional[typing.Iterable[global___Mutation]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["transaction",b"transaction","transaction_selector",b"transaction_selector"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["mode",b"mode","mutations",b"mutations","project_id",b"project_id","transaction",b"transaction","transaction_selector",b"transaction_selector"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["transaction_selector",b"transaction_selector"]) -> typing.Optional[typing_extensions.Literal["transaction"]]: ...
global___CommitRequest = CommitRequest

class CommitResponse(google.protobuf.message.Message):
    """The response for [Datastore.Commit][google.datastore.v1.Datastore.Commit]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    MUTATION_RESULTS_FIELD_NUMBER: builtins.int
    INDEX_UPDATES_FIELD_NUMBER: builtins.int
    @property
    def mutation_results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MutationResult]:
        """The result of performing the mutations.
        The i-th mutation result corresponds to the i-th mutation in the request.
        """
        pass
    index_updates: builtins.int = ...
    """The number of index entries updated during the commit, or zero if none were
    updated.
    """

    def __init__(self,
        *,
        mutation_results : typing.Optional[typing.Iterable[global___MutationResult]] = ...,
        index_updates : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["index_updates",b"index_updates","mutation_results",b"mutation_results"]) -> None: ...
global___CommitResponse = CommitResponse

class AllocateIdsRequest(google.protobuf.message.Message):
    """The request for [Datastore.AllocateIds][google.datastore.v1.Datastore.AllocateIds]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    KEYS_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Required. The ID of the project against which to make the request."""

    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.datastore.v1.entity_pb2.Key]:
        """Required. A list of keys with incomplete key paths for which to allocate IDs.
        No key may be reserved/read-only.
        """
        pass
    def __init__(self,
        *,
        project_id : typing.Text = ...,
        keys : typing.Optional[typing.Iterable[google.datastore.v1.entity_pb2.Key]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["keys",b"keys","project_id",b"project_id"]) -> None: ...
global___AllocateIdsRequest = AllocateIdsRequest

class AllocateIdsResponse(google.protobuf.message.Message):
    """The response for [Datastore.AllocateIds][google.datastore.v1.Datastore.AllocateIds]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    KEYS_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.datastore.v1.entity_pb2.Key]:
        """The keys specified in the request (in the same order), each with
        its key path completed with a newly allocated ID.
        """
        pass
    def __init__(self,
        *,
        keys : typing.Optional[typing.Iterable[google.datastore.v1.entity_pb2.Key]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["keys",b"keys"]) -> None: ...
global___AllocateIdsResponse = AllocateIdsResponse

class ReserveIdsRequest(google.protobuf.message.Message):
    """The request for [Datastore.ReserveIds][google.datastore.v1.Datastore.ReserveIds]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROJECT_ID_FIELD_NUMBER: builtins.int
    DATABASE_ID_FIELD_NUMBER: builtins.int
    KEYS_FIELD_NUMBER: builtins.int
    project_id: typing.Text = ...
    """Required. The ID of the project against which to make the request."""

    database_id: typing.Text = ...
    """If not empty, the ID of the database against which to make the request."""

    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.datastore.v1.entity_pb2.Key]:
        """Required. A list of keys with complete key paths whose numeric IDs should not be
        auto-allocated.
        """
        pass
    def __init__(self,
        *,
        project_id : typing.Text = ...,
        database_id : typing.Text = ...,
        keys : typing.Optional[typing.Iterable[google.datastore.v1.entity_pb2.Key]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["database_id",b"database_id","keys",b"keys","project_id",b"project_id"]) -> None: ...
global___ReserveIdsRequest = ReserveIdsRequest

class ReserveIdsResponse(google.protobuf.message.Message):
    """The response for [Datastore.ReserveIds][google.datastore.v1.Datastore.ReserveIds]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___ReserveIdsResponse = ReserveIdsResponse

class Mutation(google.protobuf.message.Message):
    """A mutation to apply to an entity."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INSERT_FIELD_NUMBER: builtins.int
    UPDATE_FIELD_NUMBER: builtins.int
    UPSERT_FIELD_NUMBER: builtins.int
    DELETE_FIELD_NUMBER: builtins.int
    BASE_VERSION_FIELD_NUMBER: builtins.int
    @property
    def insert(self) -> google.datastore.v1.entity_pb2.Entity:
        """The entity to insert. The entity must not already exist.
        The entity key's final path element may be incomplete.
        """
        pass
    @property
    def update(self) -> google.datastore.v1.entity_pb2.Entity:
        """The entity to update. The entity must already exist.
        Must have a complete key path.
        """
        pass
    @property
    def upsert(self) -> google.datastore.v1.entity_pb2.Entity:
        """The entity to upsert. The entity may or may not already exist.
        The entity key's final path element may be incomplete.
        """
        pass
    @property
    def delete(self) -> google.datastore.v1.entity_pb2.Key:
        """The key of the entity to delete. The entity may or may not already exist.
        Must have a complete key path and must not be reserved/read-only.
        """
        pass
    base_version: builtins.int = ...
    """The version of the entity that this mutation is being applied to. If this
    does not match the current version on the server, the mutation conflicts.
    """

    def __init__(self,
        *,
        insert : typing.Optional[google.datastore.v1.entity_pb2.Entity] = ...,
        update : typing.Optional[google.datastore.v1.entity_pb2.Entity] = ...,
        upsert : typing.Optional[google.datastore.v1.entity_pb2.Entity] = ...,
        delete : typing.Optional[google.datastore.v1.entity_pb2.Key] = ...,
        base_version : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["base_version",b"base_version","conflict_detection_strategy",b"conflict_detection_strategy","delete",b"delete","insert",b"insert","operation",b"operation","update",b"update","upsert",b"upsert"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["base_version",b"base_version","conflict_detection_strategy",b"conflict_detection_strategy","delete",b"delete","insert",b"insert","operation",b"operation","update",b"update","upsert",b"upsert"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["conflict_detection_strategy",b"conflict_detection_strategy"]) -> typing.Optional[typing_extensions.Literal["base_version"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["operation",b"operation"]) -> typing.Optional[typing_extensions.Literal["insert","update","upsert","delete"]]: ...
global___Mutation = Mutation

class MutationResult(google.protobuf.message.Message):
    """The result of applying a mutation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    KEY_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    CONFLICT_DETECTED_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> google.datastore.v1.entity_pb2.Key:
        """The automatically allocated key.
        Set only when the mutation allocated a key.
        """
        pass
    version: builtins.int = ...
    """The version of the entity on the server after processing the mutation. If
    the mutation doesn't change anything on the server, then the version will
    be the version of the current entity or, if no entity is present, a version
    that is strictly greater than the version of any previous entity and less
    than the version of any possible future entity.
    """

    conflict_detected: builtins.bool = ...
    """Whether a conflict was detected for this mutation. Always false when a
    conflict detection strategy field is not set in the mutation.
    """

    def __init__(self,
        *,
        key : typing.Optional[google.datastore.v1.entity_pb2.Key] = ...,
        version : builtins.int = ...,
        conflict_detected : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["key",b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["conflict_detected",b"conflict_detected","key",b"key","version",b"version"]) -> None: ...
global___MutationResult = MutationResult

class ReadOptions(google.protobuf.message.Message):
    """The options shared by read requests."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _ReadConsistency:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ReadConsistencyEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ReadConsistency.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        READ_CONSISTENCY_UNSPECIFIED: ReadOptions.ReadConsistency.ValueType = ...  # 0
        """Unspecified. This value must not be used."""

        STRONG: ReadOptions.ReadConsistency.ValueType = ...  # 1
        """Strong consistency."""

        EVENTUAL: ReadOptions.ReadConsistency.ValueType = ...  # 2
        """Eventual consistency."""

    class ReadConsistency(_ReadConsistency, metaclass=_ReadConsistencyEnumTypeWrapper):
        """The possible values for read consistencies."""
        pass

    READ_CONSISTENCY_UNSPECIFIED: ReadOptions.ReadConsistency.ValueType = ...  # 0
    """Unspecified. This value must not be used."""

    STRONG: ReadOptions.ReadConsistency.ValueType = ...  # 1
    """Strong consistency."""

    EVENTUAL: ReadOptions.ReadConsistency.ValueType = ...  # 2
    """Eventual consistency."""


    READ_CONSISTENCY_FIELD_NUMBER: builtins.int
    TRANSACTION_FIELD_NUMBER: builtins.int
    read_consistency: global___ReadOptions.ReadConsistency.ValueType = ...
    """The non-transactional read consistency to use.
    Cannot be set to `STRONG` for global queries.
    """

    transaction: builtins.bytes = ...
    """The identifier of the transaction in which to read. A
    transaction identifier is returned by a call to
    [Datastore.BeginTransaction][google.datastore.v1.Datastore.BeginTransaction].
    """

    def __init__(self,
        *,
        read_consistency : global___ReadOptions.ReadConsistency.ValueType = ...,
        transaction : builtins.bytes = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["consistency_type",b"consistency_type","read_consistency",b"read_consistency","transaction",b"transaction"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["consistency_type",b"consistency_type","read_consistency",b"read_consistency","transaction",b"transaction"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["consistency_type",b"consistency_type"]) -> typing.Optional[typing_extensions.Literal["read_consistency","transaction"]]: ...
global___ReadOptions = ReadOptions

class TransactionOptions(google.protobuf.message.Message):
    """Options for beginning a new transaction.

    Transactions can be created explicitly with calls to
    [Datastore.BeginTransaction][google.datastore.v1.Datastore.BeginTransaction] or implicitly by setting
    [ReadOptions.new_transaction][google.datastore.v1.ReadOptions.new_transaction] in read requests.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ReadWrite(google.protobuf.message.Message):
        """Options specific to read / write transactions."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        PREVIOUS_TRANSACTION_FIELD_NUMBER: builtins.int
        previous_transaction: builtins.bytes = ...
        """The transaction identifier of the transaction being retried."""

        def __init__(self,
            *,
            previous_transaction : builtins.bytes = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["previous_transaction",b"previous_transaction"]) -> None: ...

    class ReadOnly(google.protobuf.message.Message):
        """Options specific to read-only transactions."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    READ_WRITE_FIELD_NUMBER: builtins.int
    READ_ONLY_FIELD_NUMBER: builtins.int
    @property
    def read_write(self) -> global___TransactionOptions.ReadWrite:
        """The transaction should allow both reads and writes."""
        pass
    @property
    def read_only(self) -> global___TransactionOptions.ReadOnly:
        """The transaction should only allow reads."""
        pass
    def __init__(self,
        *,
        read_write : typing.Optional[global___TransactionOptions.ReadWrite] = ...,
        read_only : typing.Optional[global___TransactionOptions.ReadOnly] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["mode",b"mode","read_only",b"read_only","read_write",b"read_write"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["mode",b"mode","read_only",b"read_only","read_write",b"read_write"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["mode",b"mode"]) -> typing.Optional[typing_extensions.Literal["read_write","read_only"]]: ...
global___TransactionOptions = TransactionOptions
