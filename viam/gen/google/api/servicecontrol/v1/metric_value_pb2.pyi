"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.api.servicecontrol.v1.distribution_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class MetricValue(google.protobuf.message.Message):
    """Represents a single metric value."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    LABELS_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    BOOL_VALUE_FIELD_NUMBER: builtins.int
    INT64_VALUE_FIELD_NUMBER: builtins.int
    DOUBLE_VALUE_FIELD_NUMBER: builtins.int
    STRING_VALUE_FIELD_NUMBER: builtins.int
    DISTRIBUTION_VALUE_FIELD_NUMBER: builtins.int
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """The labels describing the metric value.
        See comments on [google.api.servicecontrol.v1.Operation.labels][google.api.servicecontrol.v1.Operation.labels] for
        the overriding relationship.
        Note that this map must not contain monitored resource labels.
        """
        pass
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The start of the time period over which this metric value's measurement
        applies. The time period has different semantics for different metric
        types (cumulative, delta, and gauge). See the metric definition
        documentation in the service configuration for details. If not specified,
        [google.api.servicecontrol.v1.Operation.start_time][google.api.servicecontrol.v1.Operation.start_time] will be used.
        """
        pass
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The end of the time period over which this metric value's measurement
        applies.  If not specified,
        [google.api.servicecontrol.v1.Operation.end_time][google.api.servicecontrol.v1.Operation.end_time] will be used.
        """
        pass
    bool_value: builtins.bool = ...
    """A boolean value."""

    int64_value: builtins.int = ...
    """A signed 64-bit integer value."""

    double_value: builtins.float = ...
    """A double precision floating point value."""

    string_value: typing.Text = ...
    """A text string value."""

    @property
    def distribution_value(self) -> google.api.servicecontrol.v1.distribution_pb2.Distribution:
        """A distribution value."""
        pass
    def __init__(self,
        *,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        start_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        end_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        bool_value : builtins.bool = ...,
        int64_value : builtins.int = ...,
        double_value : builtins.float = ...,
        string_value : typing.Text = ...,
        distribution_value : typing.Optional[google.api.servicecontrol.v1.distribution_pb2.Distribution] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bool_value",b"bool_value","distribution_value",b"distribution_value","double_value",b"double_value","end_time",b"end_time","int64_value",b"int64_value","start_time",b"start_time","string_value",b"string_value","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bool_value",b"bool_value","distribution_value",b"distribution_value","double_value",b"double_value","end_time",b"end_time","int64_value",b"int64_value","labels",b"labels","start_time",b"start_time","string_value",b"string_value","value",b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["value",b"value"]) -> typing.Optional[typing_extensions.Literal["bool_value","int64_value","double_value","string_value","distribution_value"]]: ...
global___MetricValue = MetricValue

class MetricValueSet(google.protobuf.message.Message):
    """Represents a set of metric values in the same metric.
    Each metric value in the set should have a unique combination of start time,
    end time, and label values.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    METRIC_NAME_FIELD_NUMBER: builtins.int
    METRIC_VALUES_FIELD_NUMBER: builtins.int
    metric_name: typing.Text = ...
    """The metric name defined in the service configuration."""

    @property
    def metric_values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MetricValue]:
        """The values in this metric."""
        pass
    def __init__(self,
        *,
        metric_name : typing.Text = ...,
        metric_values : typing.Optional[typing.Iterable[global___MetricValue]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["metric_name",b"metric_name","metric_values",b"metric_values"]) -> None: ...
global___MetricValueSet = MetricValueSet
