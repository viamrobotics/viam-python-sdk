"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Logging(google.protobuf.message.Message):
    """Logging configuration of the service.

    The following example shows how to configure logs to be sent to the
    producer and consumer projects. In the example, the `activity_history`
    log is sent to both the producer and consumer projects, whereas the
    `purchase_history` log is only sent to the producer project.

        monitored_resources:
        - type: library.googleapis.com/branch
          labels:
          - key: /city
            description: The city where the library branch is located in.
          - key: /name
            description: The name of the branch.
        logs:
        - name: activity_history
          labels:
          - key: /customer_id
        - name: purchase_history
        logging:
          producer_destinations:
          - monitored_resource: library.googleapis.com/branch
            logs:
            - activity_history
            - purchase_history
          consumer_destinations:
          - monitored_resource: library.googleapis.com/branch
            logs:
            - activity_history
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LoggingDestination(google.protobuf.message.Message):
        """Configuration of a specific logging destination (the producer project
        or the consumer project).
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        MONITORED_RESOURCE_FIELD_NUMBER: builtins.int
        LOGS_FIELD_NUMBER: builtins.int
        monitored_resource: typing.Text = ...
        """The monitored resource type. The type must be defined in the
        [Service.monitored_resources][google.api.Service.monitored_resources] section.
        """

        @property
        def logs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """Names of the logs to be sent to this destination. Each name must
            be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
            not a domain scoped name, it will be automatically prefixed with
            the service name followed by "/".
            """
            pass
        def __init__(self,
            *,
            monitored_resource : typing.Text = ...,
            logs : typing.Optional[typing.Iterable[typing.Text]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["logs",b"logs","monitored_resource",b"monitored_resource"]) -> None: ...

    PRODUCER_DESTINATIONS_FIELD_NUMBER: builtins.int
    CONSUMER_DESTINATIONS_FIELD_NUMBER: builtins.int
    @property
    def producer_destinations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Logging.LoggingDestination]:
        """Logging configurations for sending logs to the producer project.
        There can be multiple producer destinations, each one must have a
        different monitored resource type. A log can be used in at most
        one producer destination.
        """
        pass
    @property
    def consumer_destinations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Logging.LoggingDestination]:
        """Logging configurations for sending logs to the consumer project.
        There can be multiple consumer destinations, each one must have a
        different monitored resource type. A log can be used in at most
        one consumer destination.
        """
        pass
    def __init__(self,
        *,
        producer_destinations : typing.Optional[typing.Iterable[global___Logging.LoggingDestination]] = ...,
        consumer_destinations : typing.Optional[typing.Iterable[global___Logging.LoggingDestination]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["consumer_destinations",b"consumer_destinations","producer_destinations",b"producer_destinations"]) -> None: ...
global___Logging = Logging
