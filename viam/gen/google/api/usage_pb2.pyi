"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Usage(google.protobuf.message.Message):
    """Configuration controlling usage of a service."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    REQUIREMENTS_FIELD_NUMBER: builtins.int
    RULES_FIELD_NUMBER: builtins.int
    PRODUCER_NOTIFICATION_CHANNEL_FIELD_NUMBER: builtins.int
    @property
    def requirements(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Requirements that must be satisfied before a consumer project can use the
        service. Each requirement is of the form <service.name>/<requirement-id>;
        for example 'serviceusage.googleapis.com/billing-enabled'.

        For Google APIs, a Terms of Service requirement must be included here.
        Google Cloud APIs must include "serviceusage.googleapis.com/tos/cloud".
        Other Google APIs should include
        "serviceusage.googleapis.com/tos/universal". Additional ToS can be
        included based on the business needs.
        """
        pass
    @property
    def rules(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___UsageRule]:
        """A list of usage rules that apply to individual API methods.

        **NOTE:** All service configuration rules follow "last one wins" order.
        """
        pass
    producer_notification_channel: typing.Text = ...
    """The full resource name of a channel used for sending notifications to the
    service producer.

    Google Service Management currently only supports
    [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification
    channel. To use Google Cloud Pub/Sub as the channel, this must be the name
    of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format
    documented in https://cloud.google.com/pubsub/docs/overview.
    """

    def __init__(self,
        *,
        requirements : typing.Optional[typing.Iterable[typing.Text]] = ...,
        rules : typing.Optional[typing.Iterable[global___UsageRule]] = ...,
        producer_notification_channel : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["producer_notification_channel",b"producer_notification_channel","requirements",b"requirements","rules",b"rules"]) -> None: ...
global___Usage = Usage

class UsageRule(google.protobuf.message.Message):
    """Usage configuration rules for the service.

    NOTE: Under development.


    Use this rule to configure unregistered calls for the service. Unregistered
    calls are calls that do not contain consumer project identity.
    (Example: calls that do not contain an API key).
    By default, API methods do not allow unregistered calls, and each method call
    must be identified by a consumer project identity. Use this rule to
    allow/disallow unregistered calls.

    Example of an API that wants to allow unregistered calls for entire service.

        usage:
          rules:
          - selector: "*"
            allow_unregistered_calls: true

    Example of a method that wants to allow unregistered calls.

        usage:
          rules:
          - selector: "google.example.library.v1.LibraryService.CreateBook"
            allow_unregistered_calls: true
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SELECTOR_FIELD_NUMBER: builtins.int
    ALLOW_UNREGISTERED_CALLS_FIELD_NUMBER: builtins.int
    SKIP_SERVICE_CONTROL_FIELD_NUMBER: builtins.int
    selector: typing.Text = ...
    """Selects the methods to which this rule applies. Use '*' to indicate all
    methods in all APIs.

    Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
    """

    allow_unregistered_calls: builtins.bool = ...
    """If true, the selected method allows unregistered calls, e.g. calls
    that don't identify any user or application.
    """

    skip_service_control: builtins.bool = ...
    """If true, the selected method should skip service control and the control
    plane features, such as quota and billing, will not be available.
    This flag is used by Google Cloud Endpoints to bypass checks for internal
    methods, such as service health check methods.
    """

    def __init__(self,
        *,
        selector : typing.Text = ...,
        allow_unregistered_calls : builtins.bool = ...,
        skip_service_control : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["allow_unregistered_calls",b"allow_unregistered_calls","selector",b"selector","skip_service_control",b"skip_service_control"]) -> None: ...
global___UsageRule = UsageRule
