"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class ProjectProperties(google.protobuf.message.Message):
    """A descriptor for defining project properties for a service. One service may
    have many consumer projects, and the service may want to behave differently
    depending on some properties on the project. For example, a project may be
    associated with a school, or a business, or a government agency, a business
    type property on the project may affect how a service responds to the client.
    This descriptor defines which properties are allowed to be set on a project.

    Example:

       project_properties:
         properties:
         - name: NO_WATERMARK
           type: BOOL
           description: Allows usage of the API without watermarks.
         - name: EXTENDED_TILE_CACHE_PERIOD
           type: INT64
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROPERTIES_FIELD_NUMBER: builtins.int
    @property
    def properties(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Property]:
        """List of per consumer project-specific properties."""
        pass
    def __init__(self,
        *,
        properties : typing.Optional[typing.Iterable[global___Property]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["properties",b"properties"]) -> None: ...
global___ProjectProperties = ProjectProperties

class Property(google.protobuf.message.Message):
    """Defines project properties.

    API services can define properties that can be assigned to consumer projects
    so that backends can perform response customization without having to make
    additional calls or maintain additional storage. For example, Maps API
    defines properties that controls map tile cache period, or whether to embed a
    watermark in a result.

    These values can be set via API producer console. Only API providers can
    define and set these properties.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _PropertyType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _PropertyTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_PropertyType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        UNSPECIFIED: Property.PropertyType.ValueType = ...  # 0
        """The type is unspecified, and will result in an error."""

        INT64: Property.PropertyType.ValueType = ...  # 1
        """The type is `int64`."""

        BOOL: Property.PropertyType.ValueType = ...  # 2
        """The type is `bool`."""

        STRING: Property.PropertyType.ValueType = ...  # 3
        """The type is `string`."""

        DOUBLE: Property.PropertyType.ValueType = ...  # 4
        """The type is 'double'."""

    class PropertyType(_PropertyType, metaclass=_PropertyTypeEnumTypeWrapper):
        """Supported data type of the property values"""
        pass

    UNSPECIFIED: Property.PropertyType.ValueType = ...  # 0
    """The type is unspecified, and will result in an error."""

    INT64: Property.PropertyType.ValueType = ...  # 1
    """The type is `int64`."""

    BOOL: Property.PropertyType.ValueType = ...  # 2
    """The type is `bool`."""

    STRING: Property.PropertyType.ValueType = ...  # 3
    """The type is `string`."""

    DOUBLE: Property.PropertyType.ValueType = ...  # 4
    """The type is 'double'."""


    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the property (a.k.a key)."""

    type: global___Property.PropertyType.ValueType = ...
    """The type of this property."""

    description: typing.Text = ...
    """The description of the property"""

    def __init__(self,
        *,
        name : typing.Text = ...,
        type : global___Property.PropertyType.ValueType = ...,
        description : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","name",b"name","type",b"type"]) -> None: ...
global___Property = Property
