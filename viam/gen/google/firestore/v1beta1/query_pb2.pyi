"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.firestore.v1beta1.document_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class StructuredQuery(google.protobuf.message.Message):
    """A Firestore query."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Direction:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _DirectionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Direction.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        DIRECTION_UNSPECIFIED: StructuredQuery.Direction.ValueType = ...  # 0
        """Unspecified."""

        ASCENDING: StructuredQuery.Direction.ValueType = ...  # 1
        """Ascending."""

        DESCENDING: StructuredQuery.Direction.ValueType = ...  # 2
        """Descending."""

    class Direction(_Direction, metaclass=_DirectionEnumTypeWrapper):
        """A sort direction."""
        pass

    DIRECTION_UNSPECIFIED: StructuredQuery.Direction.ValueType = ...  # 0
    """Unspecified."""

    ASCENDING: StructuredQuery.Direction.ValueType = ...  # 1
    """Ascending."""

    DESCENDING: StructuredQuery.Direction.ValueType = ...  # 2
    """Descending."""


    class CollectionSelector(google.protobuf.message.Message):
        """A selection of a collection, such as `messages as m1`."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        COLLECTION_ID_FIELD_NUMBER: builtins.int
        ALL_DESCENDANTS_FIELD_NUMBER: builtins.int
        collection_id: typing.Text = ...
        """The collection ID.
        When set, selects only collections with this ID.
        """

        all_descendants: builtins.bool = ...
        """When false, selects only collections that are immediate children of
        the `parent` specified in the containing `RunQueryRequest`.
        When true, selects all descendant collections.
        """

        def __init__(self,
            *,
            collection_id : typing.Text = ...,
            all_descendants : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["all_descendants",b"all_descendants","collection_id",b"collection_id"]) -> None: ...

    class Filter(google.protobuf.message.Message):
        """A filter."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        COMPOSITE_FILTER_FIELD_NUMBER: builtins.int
        FIELD_FILTER_FIELD_NUMBER: builtins.int
        UNARY_FILTER_FIELD_NUMBER: builtins.int
        @property
        def composite_filter(self) -> global___StructuredQuery.CompositeFilter:
            """A composite filter."""
            pass
        @property
        def field_filter(self) -> global___StructuredQuery.FieldFilter:
            """A filter on a document field."""
            pass
        @property
        def unary_filter(self) -> global___StructuredQuery.UnaryFilter:
            """A filter that takes exactly one argument."""
            pass
        def __init__(self,
            *,
            composite_filter : typing.Optional[global___StructuredQuery.CompositeFilter] = ...,
            field_filter : typing.Optional[global___StructuredQuery.FieldFilter] = ...,
            unary_filter : typing.Optional[global___StructuredQuery.UnaryFilter] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["composite_filter",b"composite_filter","field_filter",b"field_filter","filter_type",b"filter_type","unary_filter",b"unary_filter"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["composite_filter",b"composite_filter","field_filter",b"field_filter","filter_type",b"filter_type","unary_filter",b"unary_filter"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["filter_type",b"filter_type"]) -> typing.Optional[typing_extensions.Literal["composite_filter","field_filter","unary_filter"]]: ...

    class CompositeFilter(google.protobuf.message.Message):
        """A filter that merges multiple other filters using the given operator."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _Operator:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _OperatorEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Operator.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            OPERATOR_UNSPECIFIED: StructuredQuery.CompositeFilter.Operator.ValueType = ...  # 0
            """Unspecified. This value must not be used."""

            AND: StructuredQuery.CompositeFilter.Operator.ValueType = ...  # 1
            """The results are required to satisfy each of the combined filters."""

        class Operator(_Operator, metaclass=_OperatorEnumTypeWrapper):
            """A composite filter operator."""
            pass

        OPERATOR_UNSPECIFIED: StructuredQuery.CompositeFilter.Operator.ValueType = ...  # 0
        """Unspecified. This value must not be used."""

        AND: StructuredQuery.CompositeFilter.Operator.ValueType = ...  # 1
        """The results are required to satisfy each of the combined filters."""


        OP_FIELD_NUMBER: builtins.int
        FILTERS_FIELD_NUMBER: builtins.int
        op: global___StructuredQuery.CompositeFilter.Operator.ValueType = ...
        """The operator for combining multiple filters."""

        @property
        def filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StructuredQuery.Filter]:
            """The list of filters to combine.
            Must contain at least one filter.
            """
            pass
        def __init__(self,
            *,
            op : global___StructuredQuery.CompositeFilter.Operator.ValueType = ...,
            filters : typing.Optional[typing.Iterable[global___StructuredQuery.Filter]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["filters",b"filters","op",b"op"]) -> None: ...

    class FieldFilter(google.protobuf.message.Message):
        """A filter on a specific field."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _Operator:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _OperatorEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Operator.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            OPERATOR_UNSPECIFIED: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 0
            """Unspecified. This value must not be used."""

            LESS_THAN: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 1
            """The given `field` is less than the given `value`.

            Requires:

            * That `field` come first in `order_by`.
            """

            LESS_THAN_OR_EQUAL: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 2
            """The given `field` is less than or equal to the given `value`.

            Requires:

            * That `field` come first in `order_by`.
            """

            GREATER_THAN: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 3
            """The given `field` is greater than the given `value`.

            Requires:

            * That `field` come first in `order_by`.
            """

            GREATER_THAN_OR_EQUAL: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 4
            """The given `field` is greater than or equal to the given `value`.

            Requires:

            * That `field` come first in `order_by`.
            """

            EQUAL: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 5
            """The given `field` is equal to the given `value`."""

            NOT_EQUAL: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 6
            """The given `field` is not equal to the given `value`.

            Requires:

            * No other `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
            * That `field` comes first in the `order_by`.
            """

            ARRAY_CONTAINS: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 7
            """The given `field` is an array that contains the given `value`."""

            IN: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 8
            """The given `field` is equal to at least one value in the given array.

            Requires:

            * That `value` is a non-empty `ArrayValue` with at most 10 values.
            * No other `IN` or `ARRAY_CONTAINS_ANY` or `NOT_IN`.
            """

            ARRAY_CONTAINS_ANY: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 9
            """The given `field` is an array that contains any of the values in the
            given array.

            Requires:

            * That `value` is a non-empty `ArrayValue` with at most 10 values.
            * No other `IN` or `ARRAY_CONTAINS_ANY` or `NOT_IN`.
            """

            NOT_IN: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 10
            """The value of the `field` is not in the given array.

            Requires:

            * That `value` is a non-empty `ArrayValue` with at most 10 values.
            * No other `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`, `NOT_EQUAL`,
              `IS_NOT_NULL`, or `IS_NOT_NAN`.
            * That `field` comes first in the `order_by`.
            """

        class Operator(_Operator, metaclass=_OperatorEnumTypeWrapper):
            """A field filter operator."""
            pass

        OPERATOR_UNSPECIFIED: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 0
        """Unspecified. This value must not be used."""

        LESS_THAN: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 1
        """The given `field` is less than the given `value`.

        Requires:

        * That `field` come first in `order_by`.
        """

        LESS_THAN_OR_EQUAL: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 2
        """The given `field` is less than or equal to the given `value`.

        Requires:

        * That `field` come first in `order_by`.
        """

        GREATER_THAN: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 3
        """The given `field` is greater than the given `value`.

        Requires:

        * That `field` come first in `order_by`.
        """

        GREATER_THAN_OR_EQUAL: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 4
        """The given `field` is greater than or equal to the given `value`.

        Requires:

        * That `field` come first in `order_by`.
        """

        EQUAL: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 5
        """The given `field` is equal to the given `value`."""

        NOT_EQUAL: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 6
        """The given `field` is not equal to the given `value`.

        Requires:

        * No other `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
        * That `field` comes first in the `order_by`.
        """

        ARRAY_CONTAINS: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 7
        """The given `field` is an array that contains the given `value`."""

        IN: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 8
        """The given `field` is equal to at least one value in the given array.

        Requires:

        * That `value` is a non-empty `ArrayValue` with at most 10 values.
        * No other `IN` or `ARRAY_CONTAINS_ANY` or `NOT_IN`.
        """

        ARRAY_CONTAINS_ANY: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 9
        """The given `field` is an array that contains any of the values in the
        given array.

        Requires:

        * That `value` is a non-empty `ArrayValue` with at most 10 values.
        * No other `IN` or `ARRAY_CONTAINS_ANY` or `NOT_IN`.
        """

        NOT_IN: StructuredQuery.FieldFilter.Operator.ValueType = ...  # 10
        """The value of the `field` is not in the given array.

        Requires:

        * That `value` is a non-empty `ArrayValue` with at most 10 values.
        * No other `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`, `NOT_EQUAL`,
          `IS_NOT_NULL`, or `IS_NOT_NAN`.
        * That `field` comes first in the `order_by`.
        """


        FIELD_FIELD_NUMBER: builtins.int
        OP_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        @property
        def field(self) -> global___StructuredQuery.FieldReference:
            """The field to filter by."""
            pass
        op: global___StructuredQuery.FieldFilter.Operator.ValueType = ...
        """The operator to filter by."""

        @property
        def value(self) -> google.firestore.v1beta1.document_pb2.Value:
            """The value to compare to."""
            pass
        def __init__(self,
            *,
            field : typing.Optional[global___StructuredQuery.FieldReference] = ...,
            op : global___StructuredQuery.FieldFilter.Operator.ValueType = ...,
            value : typing.Optional[google.firestore.v1beta1.document_pb2.Value] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["field",b"field","value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["field",b"field","op",b"op","value",b"value"]) -> None: ...

    class UnaryFilter(google.protobuf.message.Message):
        """A filter with a single operand."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _Operator:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _OperatorEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Operator.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            OPERATOR_UNSPECIFIED: StructuredQuery.UnaryFilter.Operator.ValueType = ...  # 0
            """Unspecified. This value must not be used."""

            IS_NAN: StructuredQuery.UnaryFilter.Operator.ValueType = ...  # 2
            """The given `field` is equal to `NaN`."""

            IS_NULL: StructuredQuery.UnaryFilter.Operator.ValueType = ...  # 3
            """The given `field` is equal to `NULL`."""

            IS_NOT_NAN: StructuredQuery.UnaryFilter.Operator.ValueType = ...  # 4
            """The given `field` is not equal to `NaN`.

            Requires:

            * No other `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
            * That `field` comes first in the `order_by`.
            """

            IS_NOT_NULL: StructuredQuery.UnaryFilter.Operator.ValueType = ...  # 5
            """The given `field` is not equal to `NULL`.

            Requires:

            * A single `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
            * That `field` comes first in the `order_by`.
            """

        class Operator(_Operator, metaclass=_OperatorEnumTypeWrapper):
            """A unary operator."""
            pass

        OPERATOR_UNSPECIFIED: StructuredQuery.UnaryFilter.Operator.ValueType = ...  # 0
        """Unspecified. This value must not be used."""

        IS_NAN: StructuredQuery.UnaryFilter.Operator.ValueType = ...  # 2
        """The given `field` is equal to `NaN`."""

        IS_NULL: StructuredQuery.UnaryFilter.Operator.ValueType = ...  # 3
        """The given `field` is equal to `NULL`."""

        IS_NOT_NAN: StructuredQuery.UnaryFilter.Operator.ValueType = ...  # 4
        """The given `field` is not equal to `NaN`.

        Requires:

        * No other `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
        * That `field` comes first in the `order_by`.
        """

        IS_NOT_NULL: StructuredQuery.UnaryFilter.Operator.ValueType = ...  # 5
        """The given `field` is not equal to `NULL`.

        Requires:

        * A single `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
        * That `field` comes first in the `order_by`.
        """


        OP_FIELD_NUMBER: builtins.int
        FIELD_FIELD_NUMBER: builtins.int
        op: global___StructuredQuery.UnaryFilter.Operator.ValueType = ...
        """The unary operator to apply."""

        @property
        def field(self) -> global___StructuredQuery.FieldReference:
            """The field to which to apply the operator."""
            pass
        def __init__(self,
            *,
            op : global___StructuredQuery.UnaryFilter.Operator.ValueType = ...,
            field : typing.Optional[global___StructuredQuery.FieldReference] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["field",b"field","operand_type",b"operand_type"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["field",b"field","op",b"op","operand_type",b"operand_type"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["operand_type",b"operand_type"]) -> typing.Optional[typing_extensions.Literal["field"]]: ...

    class FieldReference(google.protobuf.message.Message):
        """A reference to a field, such as `max(messages.time) as max_time`."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        FIELD_PATH_FIELD_NUMBER: builtins.int
        field_path: typing.Text = ...
        def __init__(self,
            *,
            field_path : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["field_path",b"field_path"]) -> None: ...

    class Order(google.protobuf.message.Message):
        """An order on a field."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        FIELD_FIELD_NUMBER: builtins.int
        DIRECTION_FIELD_NUMBER: builtins.int
        @property
        def field(self) -> global___StructuredQuery.FieldReference:
            """The field to order by."""
            pass
        direction: global___StructuredQuery.Direction.ValueType = ...
        """The direction to order by. Defaults to `ASCENDING`."""

        def __init__(self,
            *,
            field : typing.Optional[global___StructuredQuery.FieldReference] = ...,
            direction : global___StructuredQuery.Direction.ValueType = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["field",b"field"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["direction",b"direction","field",b"field"]) -> None: ...

    class Projection(google.protobuf.message.Message):
        """The projection of document's fields to return."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        FIELDS_FIELD_NUMBER: builtins.int
        @property
        def fields(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StructuredQuery.FieldReference]:
            """The fields to return.

            If empty, all fields are returned. To only return the name
            of the document, use `['__name__']`.
            """
            pass
        def __init__(self,
            *,
            fields : typing.Optional[typing.Iterable[global___StructuredQuery.FieldReference]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["fields",b"fields"]) -> None: ...

    SELECT_FIELD_NUMBER: builtins.int
    FROM_FIELD_NUMBER: builtins.int
    WHERE_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    START_AT_FIELD_NUMBER: builtins.int
    END_AT_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    LIMIT_FIELD_NUMBER: builtins.int
    @property
    def select(self) -> global___StructuredQuery.Projection:
        """The projection to return."""
        pass
    @property
    def where(self) -> global___StructuredQuery.Filter:
        """The filter to apply."""
        pass
    @property
    def order_by(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StructuredQuery.Order]:
        """The order to apply to the query results.

        Firestore guarantees a stable ordering through the following rules:

         * Any field required to appear in `order_by`, that is not already
           specified in `order_by`, is appended to the order in field name order
           by default.
         * If an order on `__name__` is not specified, it is appended by default.

        Fields are appended with the same sort direction as the last order
        specified, or 'ASCENDING' if no order was specified. For example:

         * `SELECT * FROM Foo ORDER BY A` becomes
           `SELECT * FROM Foo ORDER BY A, __name__`
         * `SELECT * FROM Foo ORDER BY A DESC` becomes
           `SELECT * FROM Foo ORDER BY A DESC, __name__ DESC`
         * `SELECT * FROM Foo WHERE A > 1` becomes
           `SELECT * FROM Foo WHERE A > 1 ORDER BY A, __name__`
        """
        pass
    @property
    def start_at(self) -> global___Cursor:
        """A starting point for the query results."""
        pass
    @property
    def end_at(self) -> global___Cursor:
        """A end point for the query results."""
        pass
    offset: builtins.int = ...
    """The number of results to skip.

    Applies before limit, but after all other constraints. Must be >= 0 if
    specified.
    """

    @property
    def limit(self) -> google.protobuf.wrappers_pb2.Int32Value:
        """The maximum number of results to return.

        Applies after all other constraints.
        Must be >= 0 if specified.
        """
        pass
    def __init__(self,
        *,
        select : typing.Optional[global___StructuredQuery.Projection] = ...,
        where : typing.Optional[global___StructuredQuery.Filter] = ...,
        order_by : typing.Optional[typing.Iterable[global___StructuredQuery.Order]] = ...,
        start_at : typing.Optional[global___Cursor] = ...,
        end_at : typing.Optional[global___Cursor] = ...,
        offset : builtins.int = ...,
        limit : typing.Optional[google.protobuf.wrappers_pb2.Int32Value] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_at",b"end_at","limit",b"limit","select",b"select","start_at",b"start_at","where",b"where"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_at",b"end_at","from",b"from","limit",b"limit","offset",b"offset","order_by",b"order_by","select",b"select","start_at",b"start_at","where",b"where"]) -> None: ...
global___StructuredQuery = StructuredQuery

class Cursor(google.protobuf.message.Message):
    """A position in a query result set."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VALUES_FIELD_NUMBER: builtins.int
    BEFORE_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.firestore.v1beta1.document_pb2.Value]:
        """The values that represent a position, in the order they appear in
        the order by clause of a query.

        Can contain fewer values than specified in the order by clause.
        """
        pass
    before: builtins.bool = ...
    """If the position is just before or just after the given values, relative
    to the sort order defined by the query.
    """

    def __init__(self,
        *,
        values : typing.Optional[typing.Iterable[google.firestore.v1beta1.document_pb2.Value]] = ...,
        before : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["before",b"before","values",b"values"]) -> None: ...
global___Cursor = Cursor
