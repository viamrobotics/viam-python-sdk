"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.firestore.v1.common_pb2
import google.firestore.v1.document_pb2
import google.firestore.v1.query_pb2
import google.firestore.v1.write_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.rpc.status_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class GetDocumentRequest(google.protobuf.message.Message):
    """The request for [Firestore.GetDocument][google.firestore.v1.Firestore.GetDocument]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    MASK_FIELD_NUMBER: builtins.int
    TRANSACTION_FIELD_NUMBER: builtins.int
    READ_TIME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the Document to get. In the format:
    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    """

    @property
    def mask(self) -> google.firestore.v1.common_pb2.DocumentMask:
        """The fields to return. If not set, returns all fields.

        If the document has a field that is not present in this mask, that field
        will not be returned in the response.
        """
        pass
    transaction: builtins.bytes = ...
    """Reads the document in a transaction."""

    @property
    def read_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Reads the version of the document at the given time.
        This may not be older than 270 seconds.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        mask : typing.Optional[google.firestore.v1.common_pb2.DocumentMask] = ...,
        transaction : builtins.bytes = ...,
        read_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["consistency_selector",b"consistency_selector","mask",b"mask","read_time",b"read_time","transaction",b"transaction"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["consistency_selector",b"consistency_selector","mask",b"mask","name",b"name","read_time",b"read_time","transaction",b"transaction"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["consistency_selector",b"consistency_selector"]) -> typing.Optional[typing_extensions.Literal["transaction","read_time"]]: ...
global___GetDocumentRequest = GetDocumentRequest

class ListDocumentsRequest(google.protobuf.message.Message):
    """The request for [Firestore.ListDocuments][google.firestore.v1.Firestore.ListDocuments]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    COLLECTION_ID_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    MASK_FIELD_NUMBER: builtins.int
    TRANSACTION_FIELD_NUMBER: builtins.int
    READ_TIME_FIELD_NUMBER: builtins.int
    SHOW_MISSING_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The parent resource name. In the format:
    `projects/{project_id}/databases/{database_id}/documents` or
    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    For example:
    `projects/my-project/databases/my-database/documents` or
    `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
    """

    collection_id: typing.Text = ...
    """Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`
    or `messages`.
    """

    page_size: builtins.int = ...
    """The maximum number of documents to return."""

    page_token: typing.Text = ...
    """The `next_page_token` value returned from a previous List request, if any."""

    order_by: typing.Text = ...
    """The order to sort results by. For example: `priority desc, name`."""

    @property
    def mask(self) -> google.firestore.v1.common_pb2.DocumentMask:
        """The fields to return. If not set, returns all fields.

        If a document has a field that is not present in this mask, that field
        will not be returned in the response.
        """
        pass
    transaction: builtins.bytes = ...
    """Reads documents in a transaction."""

    @property
    def read_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Reads documents as they were at the given time.
        This may not be older than 270 seconds.
        """
        pass
    show_missing: builtins.bool = ...
    """If the list should show missing documents. A missing document is a
    document that does not exist but has sub-documents. These documents will
    be returned with a key but will not have fields, [Document.create_time][google.firestore.v1.Document.create_time],
    or [Document.update_time][google.firestore.v1.Document.update_time] set.

    Requests with `show_missing` may not specify `where` or
    `order_by`.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        collection_id : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        order_by : typing.Text = ...,
        mask : typing.Optional[google.firestore.v1.common_pb2.DocumentMask] = ...,
        transaction : builtins.bytes = ...,
        read_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        show_missing : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["consistency_selector",b"consistency_selector","mask",b"mask","read_time",b"read_time","transaction",b"transaction"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["collection_id",b"collection_id","consistency_selector",b"consistency_selector","mask",b"mask","order_by",b"order_by","page_size",b"page_size","page_token",b"page_token","parent",b"parent","read_time",b"read_time","show_missing",b"show_missing","transaction",b"transaction"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["consistency_selector",b"consistency_selector"]) -> typing.Optional[typing_extensions.Literal["transaction","read_time"]]: ...
global___ListDocumentsRequest = ListDocumentsRequest

class ListDocumentsResponse(google.protobuf.message.Message):
    """The response for [Firestore.ListDocuments][google.firestore.v1.Firestore.ListDocuments]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DOCUMENTS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def documents(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.firestore.v1.document_pb2.Document]:
        """The Documents found."""
        pass
    next_page_token: typing.Text = ...
    """The next page token."""

    def __init__(self,
        *,
        documents : typing.Optional[typing.Iterable[google.firestore.v1.document_pb2.Document]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["documents",b"documents","next_page_token",b"next_page_token"]) -> None: ...
global___ListDocumentsResponse = ListDocumentsResponse

class CreateDocumentRequest(google.protobuf.message.Message):
    """The request for [Firestore.CreateDocument][google.firestore.v1.Firestore.CreateDocument]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    COLLECTION_ID_FIELD_NUMBER: builtins.int
    DOCUMENT_ID_FIELD_NUMBER: builtins.int
    DOCUMENT_FIELD_NUMBER: builtins.int
    MASK_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The parent resource. For example:
    `projects/{project_id}/databases/{database_id}/documents` or
    `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
    """

    collection_id: typing.Text = ...
    """Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`."""

    document_id: typing.Text = ...
    """The client-assigned document ID to use for this document.

    Optional. If not specified, an ID will be assigned by the service.
    """

    @property
    def document(self) -> google.firestore.v1.document_pb2.Document:
        """Required. The document to create. `name` must not be set."""
        pass
    @property
    def mask(self) -> google.firestore.v1.common_pb2.DocumentMask:
        """The fields to return. If not set, returns all fields.

        If the document has a field that is not present in this mask, that field
        will not be returned in the response.
        """
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        collection_id : typing.Text = ...,
        document_id : typing.Text = ...,
        document : typing.Optional[google.firestore.v1.document_pb2.Document] = ...,
        mask : typing.Optional[google.firestore.v1.common_pb2.DocumentMask] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["document",b"document","mask",b"mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["collection_id",b"collection_id","document",b"document","document_id",b"document_id","mask",b"mask","parent",b"parent"]) -> None: ...
global___CreateDocumentRequest = CreateDocumentRequest

class UpdateDocumentRequest(google.protobuf.message.Message):
    """The request for [Firestore.UpdateDocument][google.firestore.v1.Firestore.UpdateDocument]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DOCUMENT_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    MASK_FIELD_NUMBER: builtins.int
    CURRENT_DOCUMENT_FIELD_NUMBER: builtins.int
    @property
    def document(self) -> google.firestore.v1.document_pb2.Document:
        """Required. The updated document.
        Creates the document if it does not already exist.
        """
        pass
    @property
    def update_mask(self) -> google.firestore.v1.common_pb2.DocumentMask:
        """The fields to update.
        None of the field paths in the mask may contain a reserved name.

        If the document exists on the server and has fields not referenced in the
        mask, they are left unchanged.
        Fields referenced in the mask, but not present in the input document, are
        deleted from the document on the server.
        """
        pass
    @property
    def mask(self) -> google.firestore.v1.common_pb2.DocumentMask:
        """The fields to return. If not set, returns all fields.

        If the document has a field that is not present in this mask, that field
        will not be returned in the response.
        """
        pass
    @property
    def current_document(self) -> google.firestore.v1.common_pb2.Precondition:
        """An optional precondition on the document.
        The request will fail if this is set and not met by the target document.
        """
        pass
    def __init__(self,
        *,
        document : typing.Optional[google.firestore.v1.document_pb2.Document] = ...,
        update_mask : typing.Optional[google.firestore.v1.common_pb2.DocumentMask] = ...,
        mask : typing.Optional[google.firestore.v1.common_pb2.DocumentMask] = ...,
        current_document : typing.Optional[google.firestore.v1.common_pb2.Precondition] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["current_document",b"current_document","document",b"document","mask",b"mask","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["current_document",b"current_document","document",b"document","mask",b"mask","update_mask",b"update_mask"]) -> None: ...
global___UpdateDocumentRequest = UpdateDocumentRequest

class DeleteDocumentRequest(google.protobuf.message.Message):
    """The request for [Firestore.DeleteDocument][google.firestore.v1.Firestore.DeleteDocument]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    CURRENT_DOCUMENT_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the Document to delete. In the format:
    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    """

    @property
    def current_document(self) -> google.firestore.v1.common_pb2.Precondition:
        """An optional precondition on the document.
        The request will fail if this is set and not met by the target document.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        current_document : typing.Optional[google.firestore.v1.common_pb2.Precondition] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["current_document",b"current_document"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["current_document",b"current_document","name",b"name"]) -> None: ...
global___DeleteDocumentRequest = DeleteDocumentRequest

class BatchGetDocumentsRequest(google.protobuf.message.Message):
    """The request for [Firestore.BatchGetDocuments][google.firestore.v1.Firestore.BatchGetDocuments]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DATABASE_FIELD_NUMBER: builtins.int
    DOCUMENTS_FIELD_NUMBER: builtins.int
    MASK_FIELD_NUMBER: builtins.int
    TRANSACTION_FIELD_NUMBER: builtins.int
    NEW_TRANSACTION_FIELD_NUMBER: builtins.int
    READ_TIME_FIELD_NUMBER: builtins.int
    database: typing.Text = ...
    """Required. The database name. In the format:
    `projects/{project_id}/databases/{database_id}`.
    """

    @property
    def documents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The names of the documents to retrieve. In the format:
        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
        The request will fail if any of the document is not a child resource of the
        given `database`. Duplicate names will be elided.
        """
        pass
    @property
    def mask(self) -> google.firestore.v1.common_pb2.DocumentMask:
        """The fields to return. If not set, returns all fields.

        If a document has a field that is not present in this mask, that field will
        not be returned in the response.
        """
        pass
    transaction: builtins.bytes = ...
    """Reads documents in a transaction."""

    @property
    def new_transaction(self) -> google.firestore.v1.common_pb2.TransactionOptions:
        """Starts a new transaction and reads the documents.
        Defaults to a read-only transaction.
        The new transaction ID will be returned as the first response in the
        stream.
        """
        pass
    @property
    def read_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Reads documents as they were at the given time.
        This may not be older than 270 seconds.
        """
        pass
    def __init__(self,
        *,
        database : typing.Text = ...,
        documents : typing.Optional[typing.Iterable[typing.Text]] = ...,
        mask : typing.Optional[google.firestore.v1.common_pb2.DocumentMask] = ...,
        transaction : builtins.bytes = ...,
        new_transaction : typing.Optional[google.firestore.v1.common_pb2.TransactionOptions] = ...,
        read_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["consistency_selector",b"consistency_selector","mask",b"mask","new_transaction",b"new_transaction","read_time",b"read_time","transaction",b"transaction"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["consistency_selector",b"consistency_selector","database",b"database","documents",b"documents","mask",b"mask","new_transaction",b"new_transaction","read_time",b"read_time","transaction",b"transaction"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["consistency_selector",b"consistency_selector"]) -> typing.Optional[typing_extensions.Literal["transaction","new_transaction","read_time"]]: ...
global___BatchGetDocumentsRequest = BatchGetDocumentsRequest

class BatchGetDocumentsResponse(google.protobuf.message.Message):
    """The streamed response for [Firestore.BatchGetDocuments][google.firestore.v1.Firestore.BatchGetDocuments]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FOUND_FIELD_NUMBER: builtins.int
    MISSING_FIELD_NUMBER: builtins.int
    TRANSACTION_FIELD_NUMBER: builtins.int
    READ_TIME_FIELD_NUMBER: builtins.int
    @property
    def found(self) -> google.firestore.v1.document_pb2.Document:
        """A document that was requested."""
        pass
    missing: typing.Text = ...
    """A document name that was requested but does not exist. In the format:
    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    """

    transaction: builtins.bytes = ...
    """The transaction that was started as part of this request.
    Will only be set in the first response, and only if
    [BatchGetDocumentsRequest.new_transaction][google.firestore.v1.BatchGetDocumentsRequest.new_transaction] was set in the request.
    """

    @property
    def read_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which the document was read.
        This may be monotically increasing, in this case the previous documents in
        the result stream are guaranteed not to have changed between their
        read_time and this one.
        """
        pass
    def __init__(self,
        *,
        found : typing.Optional[google.firestore.v1.document_pb2.Document] = ...,
        missing : typing.Text = ...,
        transaction : builtins.bytes = ...,
        read_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["found",b"found","missing",b"missing","read_time",b"read_time","result",b"result"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["found",b"found","missing",b"missing","read_time",b"read_time","result",b"result","transaction",b"transaction"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["result",b"result"]) -> typing.Optional[typing_extensions.Literal["found","missing"]]: ...
global___BatchGetDocumentsResponse = BatchGetDocumentsResponse

class BeginTransactionRequest(google.protobuf.message.Message):
    """The request for [Firestore.BeginTransaction][google.firestore.v1.Firestore.BeginTransaction]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DATABASE_FIELD_NUMBER: builtins.int
    OPTIONS_FIELD_NUMBER: builtins.int
    database: typing.Text = ...
    """Required. The database name. In the format:
    `projects/{project_id}/databases/{database_id}`.
    """

    @property
    def options(self) -> google.firestore.v1.common_pb2.TransactionOptions:
        """The options for the transaction.
        Defaults to a read-write transaction.
        """
        pass
    def __init__(self,
        *,
        database : typing.Text = ...,
        options : typing.Optional[google.firestore.v1.common_pb2.TransactionOptions] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["options",b"options"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["database",b"database","options",b"options"]) -> None: ...
global___BeginTransactionRequest = BeginTransactionRequest

class BeginTransactionResponse(google.protobuf.message.Message):
    """The response for [Firestore.BeginTransaction][google.firestore.v1.Firestore.BeginTransaction]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TRANSACTION_FIELD_NUMBER: builtins.int
    transaction: builtins.bytes = ...
    """The transaction that was started."""

    def __init__(self,
        *,
        transaction : builtins.bytes = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["transaction",b"transaction"]) -> None: ...
global___BeginTransactionResponse = BeginTransactionResponse

class CommitRequest(google.protobuf.message.Message):
    """The request for [Firestore.Commit][google.firestore.v1.Firestore.Commit]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DATABASE_FIELD_NUMBER: builtins.int
    WRITES_FIELD_NUMBER: builtins.int
    TRANSACTION_FIELD_NUMBER: builtins.int
    database: typing.Text = ...
    """Required. The database name. In the format:
    `projects/{project_id}/databases/{database_id}`.
    """

    @property
    def writes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.firestore.v1.write_pb2.Write]:
        """The writes to apply.

        Always executed atomically and in order.
        """
        pass
    transaction: builtins.bytes = ...
    """If set, applies all writes in this transaction, and commits it."""

    def __init__(self,
        *,
        database : typing.Text = ...,
        writes : typing.Optional[typing.Iterable[google.firestore.v1.write_pb2.Write]] = ...,
        transaction : builtins.bytes = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["database",b"database","transaction",b"transaction","writes",b"writes"]) -> None: ...
global___CommitRequest = CommitRequest

class CommitResponse(google.protobuf.message.Message):
    """The response for [Firestore.Commit][google.firestore.v1.Firestore.Commit]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    WRITE_RESULTS_FIELD_NUMBER: builtins.int
    COMMIT_TIME_FIELD_NUMBER: builtins.int
    @property
    def write_results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.firestore.v1.write_pb2.WriteResult]:
        """The result of applying the writes.

        This i-th write result corresponds to the i-th write in the
        request.
        """
        pass
    @property
    def commit_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which the commit occurred. Any read with an equal or greater
        `read_time` is guaranteed to see the effects of the commit.
        """
        pass
    def __init__(self,
        *,
        write_results : typing.Optional[typing.Iterable[google.firestore.v1.write_pb2.WriteResult]] = ...,
        commit_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["commit_time",b"commit_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["commit_time",b"commit_time","write_results",b"write_results"]) -> None: ...
global___CommitResponse = CommitResponse

class RollbackRequest(google.protobuf.message.Message):
    """The request for [Firestore.Rollback][google.firestore.v1.Firestore.Rollback]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DATABASE_FIELD_NUMBER: builtins.int
    TRANSACTION_FIELD_NUMBER: builtins.int
    database: typing.Text = ...
    """Required. The database name. In the format:
    `projects/{project_id}/databases/{database_id}`.
    """

    transaction: builtins.bytes = ...
    """Required. The transaction to roll back."""

    def __init__(self,
        *,
        database : typing.Text = ...,
        transaction : builtins.bytes = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["database",b"database","transaction",b"transaction"]) -> None: ...
global___RollbackRequest = RollbackRequest

class RunQueryRequest(google.protobuf.message.Message):
    """The request for [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    STRUCTURED_QUERY_FIELD_NUMBER: builtins.int
    TRANSACTION_FIELD_NUMBER: builtins.int
    NEW_TRANSACTION_FIELD_NUMBER: builtins.int
    READ_TIME_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The parent resource name. In the format:
    `projects/{project_id}/databases/{database_id}/documents` or
    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    For example:
    `projects/my-project/databases/my-database/documents` or
    `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
    """

    @property
    def structured_query(self) -> google.firestore.v1.query_pb2.StructuredQuery:
        """A structured query."""
        pass
    transaction: builtins.bytes = ...
    """Reads documents in a transaction."""

    @property
    def new_transaction(self) -> google.firestore.v1.common_pb2.TransactionOptions:
        """Starts a new transaction and reads the documents.
        Defaults to a read-only transaction.
        The new transaction ID will be returned as the first response in the
        stream.
        """
        pass
    @property
    def read_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Reads documents as they were at the given time.
        This may not be older than 270 seconds.
        """
        pass
    def __init__(self,
        *,
        parent : typing.Text = ...,
        structured_query : typing.Optional[google.firestore.v1.query_pb2.StructuredQuery] = ...,
        transaction : builtins.bytes = ...,
        new_transaction : typing.Optional[google.firestore.v1.common_pb2.TransactionOptions] = ...,
        read_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["consistency_selector",b"consistency_selector","new_transaction",b"new_transaction","query_type",b"query_type","read_time",b"read_time","structured_query",b"structured_query","transaction",b"transaction"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["consistency_selector",b"consistency_selector","new_transaction",b"new_transaction","parent",b"parent","query_type",b"query_type","read_time",b"read_time","structured_query",b"structured_query","transaction",b"transaction"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["consistency_selector",b"consistency_selector"]) -> typing.Optional[typing_extensions.Literal["transaction","new_transaction","read_time"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["query_type",b"query_type"]) -> typing.Optional[typing_extensions.Literal["structured_query"]]: ...
global___RunQueryRequest = RunQueryRequest

class RunQueryResponse(google.protobuf.message.Message):
    """The response for [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TRANSACTION_FIELD_NUMBER: builtins.int
    DOCUMENT_FIELD_NUMBER: builtins.int
    READ_TIME_FIELD_NUMBER: builtins.int
    SKIPPED_RESULTS_FIELD_NUMBER: builtins.int
    transaction: builtins.bytes = ...
    """The transaction that was started as part of this request.
    Can only be set in the first response, and only if
    [RunQueryRequest.new_transaction][google.firestore.v1.RunQueryRequest.new_transaction] was set in the request.
    If set, no other fields will be set in this response.
    """

    @property
    def document(self) -> google.firestore.v1.document_pb2.Document:
        """A query result.
        Not set when reporting partial progress.
        """
        pass
    @property
    def read_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which the document was read. This may be monotonically
        increasing; in this case, the previous documents in the result stream are
        guaranteed not to have changed between their `read_time` and this one.

        If the query returns no results, a response with `read_time` and no
        `document` will be sent, and this represents the time at which the query
        was run.
        """
        pass
    skipped_results: builtins.int = ...
    """The number of results that have been skipped due to an offset between
    the last response and the current response.
    """

    def __init__(self,
        *,
        transaction : builtins.bytes = ...,
        document : typing.Optional[google.firestore.v1.document_pb2.Document] = ...,
        read_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        skipped_results : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["document",b"document","read_time",b"read_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["document",b"document","read_time",b"read_time","skipped_results",b"skipped_results","transaction",b"transaction"]) -> None: ...
global___RunQueryResponse = RunQueryResponse

class PartitionQueryRequest(google.protobuf.message.Message):
    """The request for [Firestore.PartitionQuery][google.firestore.v1.Firestore.PartitionQuery]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    STRUCTURED_QUERY_FIELD_NUMBER: builtins.int
    PARTITION_COUNT_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The parent resource name. In the format:
    `projects/{project_id}/databases/{database_id}/documents`.
    Document resource names are not supported; only database resource names
    can be specified.
    """

    @property
    def structured_query(self) -> google.firestore.v1.query_pb2.StructuredQuery:
        """A structured query.
        Query must specify collection with all descendants and be ordered by name
        ascending. Other filters, order bys, limits, offsets, and start/end
        cursors are not supported.
        """
        pass
    partition_count: builtins.int = ...
    """The desired maximum number of partition points.
    The partitions may be returned across multiple pages of results.
    The number must be positive. The actual number of partitions
    returned may be fewer.

    For example, this may be set to one fewer than the number of parallel
    queries to be run, or in running a data pipeline job, one fewer than the
    number of workers or compute instances available.
    """

    page_token: typing.Text = ...
    """The `next_page_token` value returned from a previous call to
    PartitionQuery that may be used to get an additional set of results.
    There are no ordering guarantees between sets of results. Thus, using
    multiple sets of results will require merging the different result sets.

    For example, two subsequent calls using a page_token may return:

     * cursor B, cursor M, cursor Q
     * cursor A, cursor U, cursor W

    To obtain a complete result set ordered with respect to the results of the
    query supplied to PartitionQuery, the results sets should be merged:
    cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W
    """

    page_size: builtins.int = ...
    """The maximum number of partitions to return in this call, subject to
    `partition_count`.

    For example, if `partition_count` = 10 and `page_size` = 8, the first call
    to PartitionQuery will return up to 8 partitions and a `next_page_token`
    if more results exist. A second call to PartitionQuery will return up to
    2 partitions, to complete the total of 10 specified in `partition_count`.
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        structured_query : typing.Optional[google.firestore.v1.query_pb2.StructuredQuery] = ...,
        partition_count : builtins.int = ...,
        page_token : typing.Text = ...,
        page_size : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["query_type",b"query_type","structured_query",b"structured_query"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent","partition_count",b"partition_count","query_type",b"query_type","structured_query",b"structured_query"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["query_type",b"query_type"]) -> typing.Optional[typing_extensions.Literal["structured_query"]]: ...
global___PartitionQueryRequest = PartitionQueryRequest

class PartitionQueryResponse(google.protobuf.message.Message):
    """The response for [Firestore.PartitionQuery][google.firestore.v1.Firestore.PartitionQuery]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARTITIONS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def partitions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.firestore.v1.query_pb2.Cursor]:
        """Partition results.
        Each partition is a split point that can be used by RunQuery as a starting
        or end point for the query results. The RunQuery requests must be made with
        the same query supplied to this PartitionQuery request. The partition
        cursors will be ordered according to same ordering as the results of the
        query supplied to PartitionQuery.

        For example, if a PartitionQuery request returns partition cursors A and B,
        running the following three queries will return the entire result set of
        the original query:

         * query, end_at A
         * query, start_at A, end_at B
         * query, start_at B

        An empty result may indicate that the query has too few results to be
        partitioned.
        """
        pass
    next_page_token: typing.Text = ...
    """A page token that may be used to request an additional set of results, up
    to the number specified by `partition_count` in the PartitionQuery request.
    If blank, there are no more results.
    """

    def __init__(self,
        *,
        partitions : typing.Optional[typing.Iterable[google.firestore.v1.query_pb2.Cursor]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","partitions",b"partitions"]) -> None: ...
global___PartitionQueryResponse = PartitionQueryResponse

class WriteRequest(google.protobuf.message.Message):
    """The request for [Firestore.Write][google.firestore.v1.Firestore.Write].

    The first request creates a stream, or resumes an existing one from a token.

    When creating a new stream, the server replies with a response containing
    only an ID and a token, to use in the next request.

    When resuming a stream, the server first streams any responses later than the
    given token, then a response containing only an up-to-date token, to use in
    the next request.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    DATABASE_FIELD_NUMBER: builtins.int
    STREAM_ID_FIELD_NUMBER: builtins.int
    WRITES_FIELD_NUMBER: builtins.int
    STREAM_TOKEN_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    database: typing.Text = ...
    """Required. The database name. In the format:
    `projects/{project_id}/databases/{database_id}`.
    This is only required in the first message.
    """

    stream_id: typing.Text = ...
    """The ID of the write stream to resume.
    This may only be set in the first message. When left empty, a new write
    stream will be created.
    """

    @property
    def writes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.firestore.v1.write_pb2.Write]:
        """The writes to apply.

        Always executed atomically and in order.
        This must be empty on the first request.
        This may be empty on the last request.
        This must not be empty on all other requests.
        """
        pass
    stream_token: builtins.bytes = ...
    """A stream token that was previously sent by the server.

    The client should set this field to the token from the most recent
    [WriteResponse][google.firestore.v1.WriteResponse] it has received. This acknowledges that the client has
    received responses up to this token. After sending this token, earlier
    tokens may not be used anymore.

    The server may close the stream if there are too many unacknowledged
    responses.

    Leave this field unset when creating a new stream. To resume a stream at
    a specific point, set this field and the `stream_id` field.

    Leave this field unset when creating a new stream.
    """

    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Labels associated with this write request."""
        pass
    def __init__(self,
        *,
        database : typing.Text = ...,
        stream_id : typing.Text = ...,
        writes : typing.Optional[typing.Iterable[google.firestore.v1.write_pb2.Write]] = ...,
        stream_token : builtins.bytes = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["database",b"database","labels",b"labels","stream_id",b"stream_id","stream_token",b"stream_token","writes",b"writes"]) -> None: ...
global___WriteRequest = WriteRequest

class WriteResponse(google.protobuf.message.Message):
    """The response for [Firestore.Write][google.firestore.v1.Firestore.Write]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    STREAM_ID_FIELD_NUMBER: builtins.int
    STREAM_TOKEN_FIELD_NUMBER: builtins.int
    WRITE_RESULTS_FIELD_NUMBER: builtins.int
    COMMIT_TIME_FIELD_NUMBER: builtins.int
    stream_id: typing.Text = ...
    """The ID of the stream.
    Only set on the first message, when a new stream was created.
    """

    stream_token: builtins.bytes = ...
    """A token that represents the position of this response in the stream.
    This can be used by a client to resume the stream at this point.

    This field is always set.
    """

    @property
    def write_results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.firestore.v1.write_pb2.WriteResult]:
        """The result of applying the writes.

        This i-th write result corresponds to the i-th write in the
        request.
        """
        pass
    @property
    def commit_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which the commit occurred. Any read with an equal or greater
        `read_time` is guaranteed to see the effects of the write.
        """
        pass
    def __init__(self,
        *,
        stream_id : typing.Text = ...,
        stream_token : builtins.bytes = ...,
        write_results : typing.Optional[typing.Iterable[google.firestore.v1.write_pb2.WriteResult]] = ...,
        commit_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["commit_time",b"commit_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["commit_time",b"commit_time","stream_id",b"stream_id","stream_token",b"stream_token","write_results",b"write_results"]) -> None: ...
global___WriteResponse = WriteResponse

class ListenRequest(google.protobuf.message.Message):
    """A request for [Firestore.Listen][google.firestore.v1.Firestore.Listen]"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    DATABASE_FIELD_NUMBER: builtins.int
    ADD_TARGET_FIELD_NUMBER: builtins.int
    REMOVE_TARGET_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    database: typing.Text = ...
    """Required. The database name. In the format:
    `projects/{project_id}/databases/{database_id}`.
    """

    @property
    def add_target(self) -> global___Target:
        """A target to add to this stream."""
        pass
    remove_target: builtins.int = ...
    """The ID of a target to remove from this stream."""

    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Labels associated with this target change."""
        pass
    def __init__(self,
        *,
        database : typing.Text = ...,
        add_target : typing.Optional[global___Target] = ...,
        remove_target : builtins.int = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["add_target",b"add_target","remove_target",b"remove_target","target_change",b"target_change"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["add_target",b"add_target","database",b"database","labels",b"labels","remove_target",b"remove_target","target_change",b"target_change"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["target_change",b"target_change"]) -> typing.Optional[typing_extensions.Literal["add_target","remove_target"]]: ...
global___ListenRequest = ListenRequest

class ListenResponse(google.protobuf.message.Message):
    """The response for [Firestore.Listen][google.firestore.v1.Firestore.Listen]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TARGET_CHANGE_FIELD_NUMBER: builtins.int
    DOCUMENT_CHANGE_FIELD_NUMBER: builtins.int
    DOCUMENT_DELETE_FIELD_NUMBER: builtins.int
    DOCUMENT_REMOVE_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    @property
    def target_change(self) -> global___TargetChange:
        """Targets have changed."""
        pass
    @property
    def document_change(self) -> google.firestore.v1.write_pb2.DocumentChange:
        """A [Document][google.firestore.v1.Document] has changed."""
        pass
    @property
    def document_delete(self) -> google.firestore.v1.write_pb2.DocumentDelete:
        """A [Document][google.firestore.v1.Document] has been deleted."""
        pass
    @property
    def document_remove(self) -> google.firestore.v1.write_pb2.DocumentRemove:
        """A [Document][google.firestore.v1.Document] has been removed from a target (because it is no longer
        relevant to that target).
        """
        pass
    @property
    def filter(self) -> google.firestore.v1.write_pb2.ExistenceFilter:
        """A filter to apply to the set of documents previously returned for the
        given target.

        Returned when documents may have been removed from the given target, but
        the exact documents are unknown.
        """
        pass
    def __init__(self,
        *,
        target_change : typing.Optional[global___TargetChange] = ...,
        document_change : typing.Optional[google.firestore.v1.write_pb2.DocumentChange] = ...,
        document_delete : typing.Optional[google.firestore.v1.write_pb2.DocumentDelete] = ...,
        document_remove : typing.Optional[google.firestore.v1.write_pb2.DocumentRemove] = ...,
        filter : typing.Optional[google.firestore.v1.write_pb2.ExistenceFilter] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["document_change",b"document_change","document_delete",b"document_delete","document_remove",b"document_remove","filter",b"filter","response_type",b"response_type","target_change",b"target_change"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["document_change",b"document_change","document_delete",b"document_delete","document_remove",b"document_remove","filter",b"filter","response_type",b"response_type","target_change",b"target_change"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["response_type",b"response_type"]) -> typing.Optional[typing_extensions.Literal["target_change","document_change","document_delete","document_remove","filter"]]: ...
global___ListenResponse = ListenResponse

class Target(google.protobuf.message.Message):
    """A specification of a set of documents to listen to."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class DocumentsTarget(google.protobuf.message.Message):
        """A target specified by a set of documents names."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        DOCUMENTS_FIELD_NUMBER: builtins.int
        @property
        def documents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """The names of the documents to retrieve. In the format:
            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
            The request will fail if any of the document is not a child resource of
            the given `database`. Duplicate names will be elided.
            """
            pass
        def __init__(self,
            *,
            documents : typing.Optional[typing.Iterable[typing.Text]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["documents",b"documents"]) -> None: ...

    class QueryTarget(google.protobuf.message.Message):
        """A target specified by a query."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        PARENT_FIELD_NUMBER: builtins.int
        STRUCTURED_QUERY_FIELD_NUMBER: builtins.int
        parent: typing.Text = ...
        """The parent resource name. In the format:
        `projects/{project_id}/databases/{database_id}/documents` or
        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
        For example:
        `projects/my-project/databases/my-database/documents` or
        `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
        """

        @property
        def structured_query(self) -> google.firestore.v1.query_pb2.StructuredQuery:
            """A structured query."""
            pass
        def __init__(self,
            *,
            parent : typing.Text = ...,
            structured_query : typing.Optional[google.firestore.v1.query_pb2.StructuredQuery] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["query_type",b"query_type","structured_query",b"structured_query"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["parent",b"parent","query_type",b"query_type","structured_query",b"structured_query"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["query_type",b"query_type"]) -> typing.Optional[typing_extensions.Literal["structured_query"]]: ...

    QUERY_FIELD_NUMBER: builtins.int
    DOCUMENTS_FIELD_NUMBER: builtins.int
    RESUME_TOKEN_FIELD_NUMBER: builtins.int
    READ_TIME_FIELD_NUMBER: builtins.int
    TARGET_ID_FIELD_NUMBER: builtins.int
    ONCE_FIELD_NUMBER: builtins.int
    @property
    def query(self) -> global___Target.QueryTarget:
        """A target specified by a query."""
        pass
    @property
    def documents(self) -> global___Target.DocumentsTarget:
        """A target specified by a set of document names."""
        pass
    resume_token: builtins.bytes = ...
    """A resume token from a prior [TargetChange][google.firestore.v1.TargetChange] for an identical target.

    Using a resume token with a different target is unsupported and may fail.
    """

    @property
    def read_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Start listening after a specific `read_time`.

        The client must know the state of matching documents at this time.
        """
        pass
    target_id: builtins.int = ...
    """The target ID that identifies the target on the stream. Must be a positive
    number and non-zero.
    """

    once: builtins.bool = ...
    """If the target should be removed once it is current and consistent."""

    def __init__(self,
        *,
        query : typing.Optional[global___Target.QueryTarget] = ...,
        documents : typing.Optional[global___Target.DocumentsTarget] = ...,
        resume_token : builtins.bytes = ...,
        read_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        target_id : builtins.int = ...,
        once : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["documents",b"documents","query",b"query","read_time",b"read_time","resume_token",b"resume_token","resume_type",b"resume_type","target_type",b"target_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["documents",b"documents","once",b"once","query",b"query","read_time",b"read_time","resume_token",b"resume_token","resume_type",b"resume_type","target_id",b"target_id","target_type",b"target_type"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["resume_type",b"resume_type"]) -> typing.Optional[typing_extensions.Literal["resume_token","read_time"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["target_type",b"target_type"]) -> typing.Optional[typing_extensions.Literal["query","documents"]]: ...
global___Target = Target

class TargetChange(google.protobuf.message.Message):
    """Targets being watched have changed."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _TargetChangeType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TargetChangeTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TargetChangeType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        NO_CHANGE: TargetChange.TargetChangeType.ValueType = ...  # 0
        """No change has occurred. Used only to send an updated `resume_token`."""

        ADD: TargetChange.TargetChangeType.ValueType = ...  # 1
        """The targets have been added."""

        REMOVE: TargetChange.TargetChangeType.ValueType = ...  # 2
        """The targets have been removed."""

        CURRENT: TargetChange.TargetChangeType.ValueType = ...  # 3
        """The targets reflect all changes committed before the targets were added
        to the stream.

        This will be sent after or with a `read_time` that is greater than or
        equal to the time at which the targets were added.

        Listeners can wait for this change if read-after-write semantics
        are desired.
        """

        RESET: TargetChange.TargetChangeType.ValueType = ...  # 4
        """The targets have been reset, and a new initial state for the targets
        will be returned in subsequent changes.

        After the initial state is complete, `CURRENT` will be returned even
        if the target was previously indicated to be `CURRENT`.
        """

    class TargetChangeType(_TargetChangeType, metaclass=_TargetChangeTypeEnumTypeWrapper):
        """The type of change."""
        pass

    NO_CHANGE: TargetChange.TargetChangeType.ValueType = ...  # 0
    """No change has occurred. Used only to send an updated `resume_token`."""

    ADD: TargetChange.TargetChangeType.ValueType = ...  # 1
    """The targets have been added."""

    REMOVE: TargetChange.TargetChangeType.ValueType = ...  # 2
    """The targets have been removed."""

    CURRENT: TargetChange.TargetChangeType.ValueType = ...  # 3
    """The targets reflect all changes committed before the targets were added
    to the stream.

    This will be sent after or with a `read_time` that is greater than or
    equal to the time at which the targets were added.

    Listeners can wait for this change if read-after-write semantics
    are desired.
    """

    RESET: TargetChange.TargetChangeType.ValueType = ...  # 4
    """The targets have been reset, and a new initial state for the targets
    will be returned in subsequent changes.

    After the initial state is complete, `CURRENT` will be returned even
    if the target was previously indicated to be `CURRENT`.
    """


    TARGET_CHANGE_TYPE_FIELD_NUMBER: builtins.int
    TARGET_IDS_FIELD_NUMBER: builtins.int
    CAUSE_FIELD_NUMBER: builtins.int
    RESUME_TOKEN_FIELD_NUMBER: builtins.int
    READ_TIME_FIELD_NUMBER: builtins.int
    target_change_type: global___TargetChange.TargetChangeType.ValueType = ...
    """The type of change that occurred."""

    @property
    def target_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """The target IDs of targets that have changed.

        If empty, the change applies to all targets.

        The order of the target IDs is not defined.
        """
        pass
    @property
    def cause(self) -> google.rpc.status_pb2.Status:
        """The error that resulted in this change, if applicable."""
        pass
    resume_token: builtins.bytes = ...
    """A token that can be used to resume the stream for the given `target_ids`,
    or all targets if `target_ids` is empty.

    Not set on every target change.
    """

    @property
    def read_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The consistent `read_time` for the given `target_ids` (omitted when the
        target_ids are not at a consistent snapshot).

        The stream is guaranteed to send a `read_time` with `target_ids` empty
        whenever the entire stream reaches a new consistent snapshot. ADD,
        CURRENT, and RESET messages are guaranteed to (eventually) result in a
        new consistent snapshot (while NO_CHANGE and REMOVE messages are not).

        For a given stream, `read_time` is guaranteed to be monotonically
        increasing.
        """
        pass
    def __init__(self,
        *,
        target_change_type : global___TargetChange.TargetChangeType.ValueType = ...,
        target_ids : typing.Optional[typing.Iterable[builtins.int]] = ...,
        cause : typing.Optional[google.rpc.status_pb2.Status] = ...,
        resume_token : builtins.bytes = ...,
        read_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cause",b"cause","read_time",b"read_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cause",b"cause","read_time",b"read_time","resume_token",b"resume_token","target_change_type",b"target_change_type","target_ids",b"target_ids"]) -> None: ...
global___TargetChange = TargetChange

class ListCollectionIdsRequest(google.protobuf.message.Message):
    """The request for [Firestore.ListCollectionIds][google.firestore.v1.Firestore.ListCollectionIds]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: typing.Text = ...
    """Required. The parent document. In the format:
    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    For example:
    `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
    """

    page_size: builtins.int = ...
    """The maximum number of results to return."""

    page_token: typing.Text = ...
    """A page token. Must be a value from
    [ListCollectionIdsResponse][google.firestore.v1.ListCollectionIdsResponse].
    """

    def __init__(self,
        *,
        parent : typing.Text = ...,
        page_size : builtins.int = ...,
        page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","parent",b"parent"]) -> None: ...
global___ListCollectionIdsRequest = ListCollectionIdsRequest

class ListCollectionIdsResponse(google.protobuf.message.Message):
    """The response from [Firestore.ListCollectionIds][google.firestore.v1.Firestore.ListCollectionIds]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    COLLECTION_IDS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def collection_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The collection ids."""
        pass
    next_page_token: typing.Text = ...
    """A page token that may be used to continue the list."""

    def __init__(self,
        *,
        collection_ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        next_page_token : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["collection_ids",b"collection_ids","next_page_token",b"next_page_token"]) -> None: ...
global___ListCollectionIdsResponse = ListCollectionIdsResponse

class BatchWriteRequest(google.protobuf.message.Message):
    """The request for [Firestore.BatchWrite][google.firestore.v1.Firestore.BatchWrite]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    DATABASE_FIELD_NUMBER: builtins.int
    WRITES_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    database: typing.Text = ...
    """Required. The database name. In the format:
    `projects/{project_id}/databases/{database_id}`.
    """

    @property
    def writes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.firestore.v1.write_pb2.Write]:
        """The writes to apply.

        Method does not apply writes atomically and does not guarantee ordering.
        Each write succeeds or fails independently. You cannot write to the same
        document more than once per request.
        """
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Labels associated with this batch write."""
        pass
    def __init__(self,
        *,
        database : typing.Text = ...,
        writes : typing.Optional[typing.Iterable[google.firestore.v1.write_pb2.Write]] = ...,
        labels : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["database",b"database","labels",b"labels","writes",b"writes"]) -> None: ...
global___BatchWriteRequest = BatchWriteRequest

class BatchWriteResponse(google.protobuf.message.Message):
    """The response from [Firestore.BatchWrite][google.firestore.v1.Firestore.BatchWrite]."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    WRITE_RESULTS_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    @property
    def write_results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.firestore.v1.write_pb2.WriteResult]:
        """The result of applying the writes.

        This i-th write result corresponds to the i-th write in the
        request.
        """
        pass
    @property
    def status(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.rpc.status_pb2.Status]:
        """The status of applying the writes.

        This i-th write status corresponds to the i-th write in the
        request.
        """
        pass
    def __init__(self,
        *,
        write_results : typing.Optional[typing.Iterable[google.firestore.v1.write_pb2.WriteResult]] = ...,
        status : typing.Optional[typing.Iterable[google.rpc.status_pb2.Status]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["status",b"status","write_results",b"write_results"]) -> None: ...
global___BatchWriteResponse = BatchWriteResponse
