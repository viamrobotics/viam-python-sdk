"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.firestore.v1.common_pb2
import google.firestore.v1.document_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Write(google.protobuf.message.Message):
    """A write on a document."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    UPDATE_FIELD_NUMBER: builtins.int
    DELETE_FIELD_NUMBER: builtins.int
    TRANSFORM_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    UPDATE_TRANSFORMS_FIELD_NUMBER: builtins.int
    CURRENT_DOCUMENT_FIELD_NUMBER: builtins.int
    @property
    def update(self) -> google.firestore.v1.document_pb2.Document:
        """A document to write."""
        pass
    delete: typing.Text = ...
    """A document name to delete. In the format:
    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    """

    @property
    def transform(self) -> global___DocumentTransform:
        """Applies a transformation to a document."""
        pass
    @property
    def update_mask(self) -> google.firestore.v1.common_pb2.DocumentMask:
        """The fields to update in this write.

        This field can be set only when the operation is `update`.
        If the mask is not set for an `update` and the document exists, any
        existing data will be overwritten.
        If the mask is set and the document on the server has fields not covered by
        the mask, they are left unchanged.
        Fields referenced in the mask, but not present in the input document, are
        deleted from the document on the server.
        The field paths in this mask must not contain a reserved field name.
        """
        pass
    @property
    def update_transforms(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DocumentTransform.FieldTransform]:
        """The transforms to perform after update.

        This field can be set only when the operation is `update`. If present, this
        write is equivalent to performing `update` and `transform` to the same
        document atomically and in order.
        """
        pass
    @property
    def current_document(self) -> google.firestore.v1.common_pb2.Precondition:
        """An optional precondition on the document.

        The write will fail if this is set and not met by the target document.
        """
        pass
    def __init__(self,
        *,
        update : typing.Optional[google.firestore.v1.document_pb2.Document] = ...,
        delete : typing.Text = ...,
        transform : typing.Optional[global___DocumentTransform] = ...,
        update_mask : typing.Optional[google.firestore.v1.common_pb2.DocumentMask] = ...,
        update_transforms : typing.Optional[typing.Iterable[global___DocumentTransform.FieldTransform]] = ...,
        current_document : typing.Optional[google.firestore.v1.common_pb2.Precondition] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["current_document",b"current_document","delete",b"delete","operation",b"operation","transform",b"transform","update",b"update","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["current_document",b"current_document","delete",b"delete","operation",b"operation","transform",b"transform","update",b"update","update_mask",b"update_mask","update_transforms",b"update_transforms"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["operation",b"operation"]) -> typing.Optional[typing_extensions.Literal["update","delete","transform"]]: ...
global___Write = Write

class DocumentTransform(google.protobuf.message.Message):
    """A transformation of a document."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class FieldTransform(google.protobuf.message.Message):
        """A transformation of a field of the document."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _ServerValue:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _ServerValueEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ServerValue.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            SERVER_VALUE_UNSPECIFIED: DocumentTransform.FieldTransform.ServerValue.ValueType = ...  # 0
            """Unspecified. This value must not be used."""

            REQUEST_TIME: DocumentTransform.FieldTransform.ServerValue.ValueType = ...  # 1
            """The time at which the server processed the request, with millisecond
            precision. If used on multiple fields (same or different documents) in
            a transaction, all the fields will get the same server timestamp.
            """

        class ServerValue(_ServerValue, metaclass=_ServerValueEnumTypeWrapper):
            """A value that is calculated by the server."""
            pass

        SERVER_VALUE_UNSPECIFIED: DocumentTransform.FieldTransform.ServerValue.ValueType = ...  # 0
        """Unspecified. This value must not be used."""

        REQUEST_TIME: DocumentTransform.FieldTransform.ServerValue.ValueType = ...  # 1
        """The time at which the server processed the request, with millisecond
        precision. If used on multiple fields (same or different documents) in
        a transaction, all the fields will get the same server timestamp.
        """


        FIELD_PATH_FIELD_NUMBER: builtins.int
        SET_TO_SERVER_VALUE_FIELD_NUMBER: builtins.int
        INCREMENT_FIELD_NUMBER: builtins.int
        MAXIMUM_FIELD_NUMBER: builtins.int
        MINIMUM_FIELD_NUMBER: builtins.int
        APPEND_MISSING_ELEMENTS_FIELD_NUMBER: builtins.int
        REMOVE_ALL_FROM_ARRAY_FIELD_NUMBER: builtins.int
        field_path: typing.Text = ...
        """The path of the field. See [Document.fields][google.firestore.v1.Document.fields] for the field path syntax
        reference.
        """

        set_to_server_value: global___DocumentTransform.FieldTransform.ServerValue.ValueType = ...
        """Sets the field to the given server value."""

        @property
        def increment(self) -> google.firestore.v1.document_pb2.Value:
            """Adds the given value to the field's current value.

            This must be an integer or a double value.
            If the field is not an integer or double, or if the field does not yet
            exist, the transformation will set the field to the given value.
            If either of the given value or the current field value are doubles,
            both values will be interpreted as doubles. Double arithmetic and
            representation of double values follow IEEE 754 semantics.
            If there is positive/negative integer overflow, the field is resolved
            to the largest magnitude positive/negative integer.
            """
            pass
        @property
        def maximum(self) -> google.firestore.v1.document_pb2.Value:
            """Sets the field to the maximum of its current value and the given value.

            This must be an integer or a double value.
            If the field is not an integer or double, or if the field does not yet
            exist, the transformation will set the field to the given value.
            If a maximum operation is applied where the field and the input value
            are of mixed types (that is - one is an integer and one is a double)
            the field takes on the type of the larger operand. If the operands are
            equivalent (e.g. 3 and 3.0), the field does not change.
            0, 0.0, and -0.0 are all zero. The maximum of a zero stored value and
            zero input value is always the stored value.
            The maximum of any numeric value x and NaN is NaN.
            """
            pass
        @property
        def minimum(self) -> google.firestore.v1.document_pb2.Value:
            """Sets the field to the minimum of its current value and the given value.

            This must be an integer or a double value.
            If the field is not an integer or double, or if the field does not yet
            exist, the transformation will set the field to the input value.
            If a minimum operation is applied where the field and the input value
            are of mixed types (that is - one is an integer and one is a double)
            the field takes on the type of the smaller operand. If the operands are
            equivalent (e.g. 3 and 3.0), the field does not change.
            0, 0.0, and -0.0 are all zero. The minimum of a zero stored value and
            zero input value is always the stored value.
            The minimum of any numeric value x and NaN is NaN.
            """
            pass
        @property
        def append_missing_elements(self) -> google.firestore.v1.document_pb2.ArrayValue:
            """Append the given elements in order if they are not already present in
            the current field value.
            If the field is not an array, or if the field does not yet exist, it is
            first set to the empty array.

            Equivalent numbers of different types (e.g. 3L and 3.0) are
            considered equal when checking if a value is missing.
            NaN is equal to NaN, and Null is equal to Null.
            If the input contains multiple equivalent values, only the first will
            be considered.

            The corresponding transform_result will be the null value.
            """
            pass
        @property
        def remove_all_from_array(self) -> google.firestore.v1.document_pb2.ArrayValue:
            """Remove all of the given elements from the array in the field.
            If the field is not an array, or if the field does not yet exist, it is
            set to the empty array.

            Equivalent numbers of the different types (e.g. 3L and 3.0) are
            considered equal when deciding whether an element should be removed.
            NaN is equal to NaN, and Null is equal to Null.
            This will remove all equivalent values if there are duplicates.

            The corresponding transform_result will be the null value.
            """
            pass
        def __init__(self,
            *,
            field_path : typing.Text = ...,
            set_to_server_value : global___DocumentTransform.FieldTransform.ServerValue.ValueType = ...,
            increment : typing.Optional[google.firestore.v1.document_pb2.Value] = ...,
            maximum : typing.Optional[google.firestore.v1.document_pb2.Value] = ...,
            minimum : typing.Optional[google.firestore.v1.document_pb2.Value] = ...,
            append_missing_elements : typing.Optional[google.firestore.v1.document_pb2.ArrayValue] = ...,
            remove_all_from_array : typing.Optional[google.firestore.v1.document_pb2.ArrayValue] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["append_missing_elements",b"append_missing_elements","increment",b"increment","maximum",b"maximum","minimum",b"minimum","remove_all_from_array",b"remove_all_from_array","set_to_server_value",b"set_to_server_value","transform_type",b"transform_type"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["append_missing_elements",b"append_missing_elements","field_path",b"field_path","increment",b"increment","maximum",b"maximum","minimum",b"minimum","remove_all_from_array",b"remove_all_from_array","set_to_server_value",b"set_to_server_value","transform_type",b"transform_type"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["transform_type",b"transform_type"]) -> typing.Optional[typing_extensions.Literal["set_to_server_value","increment","maximum","minimum","append_missing_elements","remove_all_from_array"]]: ...

    DOCUMENT_FIELD_NUMBER: builtins.int
    FIELD_TRANSFORMS_FIELD_NUMBER: builtins.int
    document: typing.Text = ...
    """The name of the document to transform."""

    @property
    def field_transforms(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DocumentTransform.FieldTransform]:
        """The list of transformations to apply to the fields of the document, in
        order.
        This must not be empty.
        """
        pass
    def __init__(self,
        *,
        document : typing.Text = ...,
        field_transforms : typing.Optional[typing.Iterable[global___DocumentTransform.FieldTransform]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["document",b"document","field_transforms",b"field_transforms"]) -> None: ...
global___DocumentTransform = DocumentTransform

class WriteResult(google.protobuf.message.Message):
    """The result of applying a write."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    TRANSFORM_RESULTS_FIELD_NUMBER: builtins.int
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The last update time of the document after applying the write. Not set
        after a `delete`.

        If the write did not actually change the document, this will be the
        previous update_time.
        """
        pass
    @property
    def transform_results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.firestore.v1.document_pb2.Value]:
        """The results of applying each [DocumentTransform.FieldTransform][google.firestore.v1.DocumentTransform.FieldTransform], in the
        same order.
        """
        pass
    def __init__(self,
        *,
        update_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        transform_results : typing.Optional[typing.Iterable[google.firestore.v1.document_pb2.Value]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["update_time",b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["transform_results",b"transform_results","update_time",b"update_time"]) -> None: ...
global___WriteResult = WriteResult

class DocumentChange(google.protobuf.message.Message):
    """A [Document][google.firestore.v1.Document] has changed.

    May be the result of multiple [writes][google.firestore.v1.Write], including deletes, that
    ultimately resulted in a new value for the [Document][google.firestore.v1.Document].

    Multiple [DocumentChange][google.firestore.v1.DocumentChange] messages may be returned for the same logical
    change, if multiple targets are affected.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DOCUMENT_FIELD_NUMBER: builtins.int
    TARGET_IDS_FIELD_NUMBER: builtins.int
    REMOVED_TARGET_IDS_FIELD_NUMBER: builtins.int
    @property
    def document(self) -> google.firestore.v1.document_pb2.Document:
        """The new state of the [Document][google.firestore.v1.Document].

        If `mask` is set, contains only fields that were updated or added.
        """
        pass
    @property
    def target_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """A set of target IDs of targets that match this document."""
        pass
    @property
    def removed_target_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """A set of target IDs for targets that no longer match this document."""
        pass
    def __init__(self,
        *,
        document : typing.Optional[google.firestore.v1.document_pb2.Document] = ...,
        target_ids : typing.Optional[typing.Iterable[builtins.int]] = ...,
        removed_target_ids : typing.Optional[typing.Iterable[builtins.int]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["document",b"document"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["document",b"document","removed_target_ids",b"removed_target_ids","target_ids",b"target_ids"]) -> None: ...
global___DocumentChange = DocumentChange

class DocumentDelete(google.protobuf.message.Message):
    """A [Document][google.firestore.v1.Document] has been deleted.

    May be the result of multiple [writes][google.firestore.v1.Write], including updates, the
    last of which deleted the [Document][google.firestore.v1.Document].

    Multiple [DocumentDelete][google.firestore.v1.DocumentDelete] messages may be returned for the same logical
    delete, if multiple targets are affected.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DOCUMENT_FIELD_NUMBER: builtins.int
    REMOVED_TARGET_IDS_FIELD_NUMBER: builtins.int
    READ_TIME_FIELD_NUMBER: builtins.int
    document: typing.Text = ...
    """The resource name of the [Document][google.firestore.v1.Document] that was deleted."""

    @property
    def removed_target_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """A set of target IDs for targets that previously matched this entity."""
        pass
    @property
    def read_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The read timestamp at which the delete was observed.

        Greater or equal to the `commit_time` of the delete.
        """
        pass
    def __init__(self,
        *,
        document : typing.Text = ...,
        removed_target_ids : typing.Optional[typing.Iterable[builtins.int]] = ...,
        read_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["read_time",b"read_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["document",b"document","read_time",b"read_time","removed_target_ids",b"removed_target_ids"]) -> None: ...
global___DocumentDelete = DocumentDelete

class DocumentRemove(google.protobuf.message.Message):
    """A [Document][google.firestore.v1.Document] has been removed from the view of the targets.

    Sent if the document is no longer relevant to a target and is out of view.
    Can be sent instead of a DocumentDelete or a DocumentChange if the server
    can not send the new value of the document.

    Multiple [DocumentRemove][google.firestore.v1.DocumentRemove] messages may be returned for the same logical
    write or delete, if multiple targets are affected.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DOCUMENT_FIELD_NUMBER: builtins.int
    REMOVED_TARGET_IDS_FIELD_NUMBER: builtins.int
    READ_TIME_FIELD_NUMBER: builtins.int
    document: typing.Text = ...
    """The resource name of the [Document][google.firestore.v1.Document] that has gone out of view."""

    @property
    def removed_target_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """A set of target IDs for targets that previously matched this document."""
        pass
    @property
    def read_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The read timestamp at which the remove was observed.

        Greater or equal to the `commit_time` of the change/delete/remove.
        """
        pass
    def __init__(self,
        *,
        document : typing.Text = ...,
        removed_target_ids : typing.Optional[typing.Iterable[builtins.int]] = ...,
        read_time : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["read_time",b"read_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["document",b"document","read_time",b"read_time","removed_target_ids",b"removed_target_ids"]) -> None: ...
global___DocumentRemove = DocumentRemove

class ExistenceFilter(google.protobuf.message.Message):
    """A digest of all the documents that match a given target."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TARGET_ID_FIELD_NUMBER: builtins.int
    COUNT_FIELD_NUMBER: builtins.int
    target_id: builtins.int = ...
    """The target ID to which this filter applies."""

    count: builtins.int = ...
    """The total count of documents that match [target_id][google.firestore.v1.ExistenceFilter.target_id].

    If different from the count of documents in the client that match, the
    client must manually determine which documents no longer match the target.
    """

    def __init__(self,
        *,
        target_id : builtins.int = ...,
        count : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["count",b"count","target_id",b"target_id"]) -> None: ...
global___ExistenceFilter = ExistenceFilter
