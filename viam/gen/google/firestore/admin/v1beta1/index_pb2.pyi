"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class IndexField(google.protobuf.message.Message):
    """A field of an index."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Mode:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Mode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        MODE_UNSPECIFIED: IndexField.Mode.ValueType = ...  # 0
        """The mode is unspecified."""

        ASCENDING: IndexField.Mode.ValueType = ...  # 2
        """The field's values are indexed so as to support sequencing in
        ascending order and also query by <, >, <=, >=, and =.
        """

        DESCENDING: IndexField.Mode.ValueType = ...  # 3
        """The field's values are indexed so as to support sequencing in
        descending order and also query by <, >, <=, >=, and =.
        """

        ARRAY_CONTAINS: IndexField.Mode.ValueType = ...  # 4
        """The field's array values are indexed so as to support membership using
        ARRAY_CONTAINS queries.
        """

    class Mode(_Mode, metaclass=_ModeEnumTypeWrapper):
        """The mode determines how a field is indexed."""
        pass

    MODE_UNSPECIFIED: IndexField.Mode.ValueType = ...  # 0
    """The mode is unspecified."""

    ASCENDING: IndexField.Mode.ValueType = ...  # 2
    """The field's values are indexed so as to support sequencing in
    ascending order and also query by <, >, <=, >=, and =.
    """

    DESCENDING: IndexField.Mode.ValueType = ...  # 3
    """The field's values are indexed so as to support sequencing in
    descending order and also query by <, >, <=, >=, and =.
    """

    ARRAY_CONTAINS: IndexField.Mode.ValueType = ...  # 4
    """The field's array values are indexed so as to support membership using
    ARRAY_CONTAINS queries.
    """


    FIELD_PATH_FIELD_NUMBER: builtins.int
    MODE_FIELD_NUMBER: builtins.int
    field_path: typing.Text = ...
    """The path of the field. Must match the field path specification described
    by [google.firestore.v1beta1.Document.fields][fields].
    Special field path `__name__` may be used by itself or at the end of a
    path. `__type__` may be used only at the end of path.
    """

    mode: global___IndexField.Mode.ValueType = ...
    """The field's mode."""

    def __init__(self,
        *,
        field_path : typing.Text = ...,
        mode : global___IndexField.Mode.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["field_path",b"field_path","mode",b"mode"]) -> None: ...
global___IndexField = IndexField

class Index(google.protobuf.message.Message):
    """An index definition."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _State:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_State.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        STATE_UNSPECIFIED: Index.State.ValueType = ...  # 0
        """The state is unspecified."""

        CREATING: Index.State.ValueType = ...  # 3
        """The index is being created.
        There is an active long-running operation for the index.
        The index is updated when writing a document.
        Some index data may exist.
        """

        READY: Index.State.ValueType = ...  # 2
        """The index is ready to be used.
        The index is updated when writing a document.
        The index is fully populated from all stored documents it applies to.
        """

        ERROR: Index.State.ValueType = ...  # 5
        """The index was being created, but something went wrong.
        There is no active long-running operation for the index,
        and the most recently finished long-running operation failed.
        The index is not updated when writing a document.
        Some index data may exist.
        """

    class State(_State, metaclass=_StateEnumTypeWrapper):
        """The state of an index. During index creation, an index will be in the
        `CREATING` state. If the index is created successfully, it will transition
        to the `READY` state. If the index is not able to be created, it will
        transition to the `ERROR` state.
        """
        pass

    STATE_UNSPECIFIED: Index.State.ValueType = ...  # 0
    """The state is unspecified."""

    CREATING: Index.State.ValueType = ...  # 3
    """The index is being created.
    There is an active long-running operation for the index.
    The index is updated when writing a document.
    Some index data may exist.
    """

    READY: Index.State.ValueType = ...  # 2
    """The index is ready to be used.
    The index is updated when writing a document.
    The index is fully populated from all stored documents it applies to.
    """

    ERROR: Index.State.ValueType = ...  # 5
    """The index was being created, but something went wrong.
    There is no active long-running operation for the index,
    and the most recently finished long-running operation failed.
    The index is not updated when writing a document.
    Some index data may exist.
    """


    NAME_FIELD_NUMBER: builtins.int
    COLLECTION_ID_FIELD_NUMBER: builtins.int
    FIELDS_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The resource name of the index.
    Output only.
    """

    collection_id: typing.Text = ...
    """The collection ID to which this index applies. Required."""

    @property
    def fields(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IndexField]:
        """The fields to index."""
        pass
    state: global___Index.State.ValueType = ...
    """The state of the index.
    Output only.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        collection_id : typing.Text = ...,
        fields : typing.Optional[typing.Iterable[global___IndexField]] = ...,
        state : global___Index.State.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["collection_id",b"collection_id","fields",b"fields","name",b"name","state",b"state"]) -> None: ...
global___Index = Index
