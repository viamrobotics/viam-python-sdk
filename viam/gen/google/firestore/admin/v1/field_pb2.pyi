"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.firestore.admin.v1.index_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Field(google.protobuf.message.Message):
    """Represents a single field in the database.

    Fields are grouped by their "Collection Group", which represent all
    collections in the database with the same id.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class IndexConfig(google.protobuf.message.Message):
        """The index configuration for this field."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        INDEXES_FIELD_NUMBER: builtins.int
        USES_ANCESTOR_CONFIG_FIELD_NUMBER: builtins.int
        ANCESTOR_FIELD_FIELD_NUMBER: builtins.int
        REVERTING_FIELD_NUMBER: builtins.int
        @property
        def indexes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.firestore.admin.v1.index_pb2.Index]:
            """The indexes supported for this field."""
            pass
        uses_ancestor_config: builtins.bool = ...
        """Output only. When true, the `Field`'s index configuration is set from the
        configuration specified by the `ancestor_field`.
        When false, the `Field`'s index configuration is defined explicitly.
        """

        ancestor_field: typing.Text = ...
        """Output only. Specifies the resource name of the `Field` from which this field's
        index configuration is set (when `uses_ancestor_config` is true),
        or from which it *would* be set if this field had no index configuration
        (when `uses_ancestor_config` is false).
        """

        reverting: builtins.bool = ...
        """Output only
        When true, the `Field`'s index configuration is in the process of being
        reverted. Once complete, the index config will transition to the same
        state as the field specified by `ancestor_field`, at which point
        `uses_ancestor_config` will be `true` and `reverting` will be `false`.
        """

        def __init__(self,
            *,
            indexes : typing.Optional[typing.Iterable[google.firestore.admin.v1.index_pb2.Index]] = ...,
            uses_ancestor_config : builtins.bool = ...,
            ancestor_field : typing.Text = ...,
            reverting : builtins.bool = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["ancestor_field",b"ancestor_field","indexes",b"indexes","reverting",b"reverting","uses_ancestor_config",b"uses_ancestor_config"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    INDEX_CONFIG_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. A field name of the form
    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`

    A field path may be a simple field name, e.g. `address` or a path to fields
    within map_value , e.g. `address.city`,
    or a special field path. The only valid special field is `*`, which
    represents any field.

    Field paths may be quoted using ` (backtick). The only character that needs
    to be escaped within a quoted field path is the backtick character itself,
    escaped using a backslash. Special characters in field paths that
    must be quoted include: `*`, `.`,
    ``` (backtick), `[`, `]`, as well as any ascii symbolic characters.

    Examples:
    (Note: Comments here are written in markdown syntax, so there is an
     additional layer of backticks to represent a code block)
    `\\`address.city\\`` represents a field named `address.city`, not the map key
    `city` in the field `address`.
    `\\`*\\`` represents a field named `*`, not any field.

    A special `Field` contains the default indexing settings for all fields.
    This field's resource name is:
    `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`
    Indexes defined on this `Field` will be applied to all fields which do not
    have their own `Field` index configuration.
    """

    @property
    def index_config(self) -> global___Field.IndexConfig:
        """The index configuration for this field. If unset, field indexing will
        revert to the configuration defined by the `ancestor_field`. To
        explicitly remove all indexes for this field, specify an index config
        with an empty list of indexes.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        index_config : typing.Optional[global___Field.IndexConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["index_config",b"index_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["index_config",b"index_config","name",b"name"]) -> None: ...
global___Field = Field
