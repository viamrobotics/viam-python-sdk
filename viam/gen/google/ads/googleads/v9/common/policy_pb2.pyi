"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.ads.googleads.v9.enums.policy_topic_entry_type_pb2
import google.ads.googleads.v9.enums.policy_topic_evidence_destination_mismatch_url_type_pb2
import google.ads.googleads.v9.enums.policy_topic_evidence_destination_not_working_device_pb2
import google.ads.googleads.v9.enums.policy_topic_evidence_destination_not_working_dns_error_type_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class PolicyViolationKey(google.protobuf.message.Message):
    """Proto file describing policy information.

    Key of the violation. The key is used for referring to a violation
    when filing an exemption request.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    POLICY_NAME_FIELD_NUMBER: builtins.int
    VIOLATING_TEXT_FIELD_NUMBER: builtins.int
    policy_name: typing.Text = ...
    """Unique ID of the violated policy."""

    violating_text: typing.Text = ...
    """The text that violates the policy if specified.
    Otherwise, refers to the policy in general
    (e.g., when requesting to be exempt from the whole policy).
    If not specified for criterion exemptions, the whole policy is implied.
    Must be specified for ad exemptions.
    """

    def __init__(self,
        *,
        policy_name : typing.Optional[typing.Text] = ...,
        violating_text : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_policy_name",b"_policy_name","_violating_text",b"_violating_text","policy_name",b"policy_name","violating_text",b"violating_text"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_policy_name",b"_policy_name","_violating_text",b"_violating_text","policy_name",b"policy_name","violating_text",b"violating_text"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_policy_name",b"_policy_name"]) -> typing.Optional[typing_extensions.Literal["policy_name"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_violating_text",b"_violating_text"]) -> typing.Optional[typing_extensions.Literal["violating_text"]]: ...
global___PolicyViolationKey = PolicyViolationKey

class PolicyValidationParameter(google.protobuf.message.Message):
    """Parameter for controlling how policy exemption is done."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    IGNORABLE_POLICY_TOPICS_FIELD_NUMBER: builtins.int
    EXEMPT_POLICY_VIOLATION_KEYS_FIELD_NUMBER: builtins.int
    @property
    def ignorable_policy_topics(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The list of policy topics that should not cause a PolicyFindingError to
        be reported. This field is currently only compatible with Enhanced Text Ad.
        It corresponds to the PolicyTopicEntry.topic field.

        Resources violating these policies will be saved, but will not be eligible
        to serve. They may begin serving at a later time due to a change in
        policies, re-review of the resource, or a change in advertiser
        certificates.
        """
        pass
    @property
    def exempt_policy_violation_keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PolicyViolationKey]:
        """The list of policy violation keys that should not cause a
        PolicyViolationError to be reported. Not all policy violations are
        exemptable, please refer to the is_exemptible field in the returned
        PolicyViolationError.

        Resources violating these polices will be saved, but will not be eligible
        to serve. They may begin serving at a later time due to a change in
        policies, re-review of the resource, or a change in advertiser
        certificates.
        """
        pass
    def __init__(self,
        *,
        ignorable_policy_topics : typing.Optional[typing.Iterable[typing.Text]] = ...,
        exempt_policy_violation_keys : typing.Optional[typing.Iterable[global___PolicyViolationKey]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["exempt_policy_violation_keys",b"exempt_policy_violation_keys","ignorable_policy_topics",b"ignorable_policy_topics"]) -> None: ...
global___PolicyValidationParameter = PolicyValidationParameter

class PolicyTopicEntry(google.protobuf.message.Message):
    """Policy finding attached to a resource (e.g. alcohol policy associated with
    a site that sells alcohol).

    Each PolicyTopicEntry has a topic that indicates the specific ads policy
    the entry is about and a type to indicate the effect that the entry will have
    on serving. It may optionally have one or more evidences that indicate the
    reason for the finding. It may also optionally have one or more constraints
    that provide details about how serving may be restricted.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TOPIC_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    EVIDENCES_FIELD_NUMBER: builtins.int
    CONSTRAINTS_FIELD_NUMBER: builtins.int
    topic: typing.Text = ...
    """Policy topic this finding refers to. For example, "ALCOHOL",
    "TRADEMARKS_IN_AD_TEXT", or "DESTINATION_NOT_WORKING". The set of possible
    policy topics is not fixed for a particular API version and may change
    at any time.
    """

    type: google.ads.googleads.v9.enums.policy_topic_entry_type_pb2.PolicyTopicEntryTypeEnum.PolicyTopicEntryType.ValueType = ...
    """Describes the negative or positive effect this policy will have on serving."""

    @property
    def evidences(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PolicyTopicEvidence]:
        """Additional information that explains policy finding
        (e.g. the brand name for a trademark finding).
        """
        pass
    @property
    def constraints(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PolicyTopicConstraint]:
        """Indicates how serving of this resource may be affected (e.g. not serving
        in a country).
        """
        pass
    def __init__(self,
        *,
        topic : typing.Optional[typing.Text] = ...,
        type : google.ads.googleads.v9.enums.policy_topic_entry_type_pb2.PolicyTopicEntryTypeEnum.PolicyTopicEntryType.ValueType = ...,
        evidences : typing.Optional[typing.Iterable[global___PolicyTopicEvidence]] = ...,
        constraints : typing.Optional[typing.Iterable[global___PolicyTopicConstraint]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_topic",b"_topic","topic",b"topic"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_topic",b"_topic","constraints",b"constraints","evidences",b"evidences","topic",b"topic","type",b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_topic",b"_topic"]) -> typing.Optional[typing_extensions.Literal["topic"]]: ...
global___PolicyTopicEntry = PolicyTopicEntry

class PolicyTopicEvidence(google.protobuf.message.Message):
    """Additional information that explains a policy finding."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class TextList(google.protobuf.message.Message):
        """A list of fragments of text that violated a policy."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        TEXTS_FIELD_NUMBER: builtins.int
        @property
        def texts(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """The fragments of text from the resource that caused the policy finding."""
            pass
        def __init__(self,
            *,
            texts : typing.Optional[typing.Iterable[typing.Text]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["texts",b"texts"]) -> None: ...

    class WebsiteList(google.protobuf.message.Message):
        """A list of websites that caused a policy finding. Used for
        ONE_WEBSITE_PER_AD_GROUP policy topic, for example. In case there are more
        than five websites, only the top five (those that appear in resources the
        most) will be listed here.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        WEBSITES_FIELD_NUMBER: builtins.int
        @property
        def websites(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """Websites that caused the policy finding."""
            pass
        def __init__(self,
            *,
            websites : typing.Optional[typing.Iterable[typing.Text]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["websites",b"websites"]) -> None: ...

    class DestinationTextList(google.protobuf.message.Message):
        """A list of strings found in a destination page that caused a policy
        finding.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        DESTINATION_TEXTS_FIELD_NUMBER: builtins.int
        @property
        def destination_texts(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """List of text found in the resource's destination page."""
            pass
        def __init__(self,
            *,
            destination_texts : typing.Optional[typing.Iterable[typing.Text]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["destination_texts",b"destination_texts"]) -> None: ...

    class DestinationMismatch(google.protobuf.message.Message):
        """Evidence of mismatches between the URLs of a resource."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        URL_TYPES_FIELD_NUMBER: builtins.int
        @property
        def url_types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[google.ads.googleads.v9.enums.policy_topic_evidence_destination_mismatch_url_type_pb2.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum.PolicyTopicEvidenceDestinationMismatchUrlType.ValueType]:
            """The set of URLs that did not match each other."""
            pass
        def __init__(self,
            *,
            url_types : typing.Optional[typing.Iterable[google.ads.googleads.v9.enums.policy_topic_evidence_destination_mismatch_url_type_pb2.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum.PolicyTopicEvidenceDestinationMismatchUrlType.ValueType]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["url_types",b"url_types"]) -> None: ...

    class DestinationNotWorking(google.protobuf.message.Message):
        """Evidence details when the destination is returning an HTTP error
        code or isn't functional in all locations for commonly used devices.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        EXPANDED_URL_FIELD_NUMBER: builtins.int
        DEVICE_FIELD_NUMBER: builtins.int
        LAST_CHECKED_DATE_TIME_FIELD_NUMBER: builtins.int
        DNS_ERROR_TYPE_FIELD_NUMBER: builtins.int
        HTTP_ERROR_CODE_FIELD_NUMBER: builtins.int
        expanded_url: typing.Text = ...
        """The full URL that didn't work."""

        device: google.ads.googleads.v9.enums.policy_topic_evidence_destination_not_working_device_pb2.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.PolicyTopicEvidenceDestinationNotWorkingDevice.ValueType = ...
        """The type of device that failed to load the URL."""

        last_checked_date_time: typing.Text = ...
        """The time the URL was last checked.
        The format is "YYYY-MM-DD HH:MM:SS".
        Examples: "2018-03-05 09:15:00" or "2018-02-01 14:34:30"
        """

        dns_error_type: google.ads.googleads.v9.enums.policy_topic_evidence_destination_not_working_dns_error_type_pb2.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum.PolicyTopicEvidenceDestinationNotWorkingDnsErrorType.ValueType = ...
        """The type of DNS error."""

        http_error_code: builtins.int = ...
        """The HTTP error code."""

        def __init__(self,
            *,
            expanded_url : typing.Optional[typing.Text] = ...,
            device : google.ads.googleads.v9.enums.policy_topic_evidence_destination_not_working_device_pb2.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.PolicyTopicEvidenceDestinationNotWorkingDevice.ValueType = ...,
            last_checked_date_time : typing.Optional[typing.Text] = ...,
            dns_error_type : google.ads.googleads.v9.enums.policy_topic_evidence_destination_not_working_dns_error_type_pb2.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum.PolicyTopicEvidenceDestinationNotWorkingDnsErrorType.ValueType = ...,
            http_error_code : builtins.int = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["_expanded_url",b"_expanded_url","_last_checked_date_time",b"_last_checked_date_time","dns_error_type",b"dns_error_type","expanded_url",b"expanded_url","http_error_code",b"http_error_code","last_checked_date_time",b"last_checked_date_time","reason",b"reason"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["_expanded_url",b"_expanded_url","_last_checked_date_time",b"_last_checked_date_time","device",b"device","dns_error_type",b"dns_error_type","expanded_url",b"expanded_url","http_error_code",b"http_error_code","last_checked_date_time",b"last_checked_date_time","reason",b"reason"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_expanded_url",b"_expanded_url"]) -> typing.Optional[typing_extensions.Literal["expanded_url"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_last_checked_date_time",b"_last_checked_date_time"]) -> typing.Optional[typing_extensions.Literal["last_checked_date_time"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["reason",b"reason"]) -> typing.Optional[typing_extensions.Literal["dns_error_type","http_error_code"]]: ...

    WEBSITE_LIST_FIELD_NUMBER: builtins.int
    TEXT_LIST_FIELD_NUMBER: builtins.int
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    DESTINATION_TEXT_LIST_FIELD_NUMBER: builtins.int
    DESTINATION_MISMATCH_FIELD_NUMBER: builtins.int
    DESTINATION_NOT_WORKING_FIELD_NUMBER: builtins.int
    @property
    def website_list(self) -> global___PolicyTopicEvidence.WebsiteList:
        """List of websites linked with this resource."""
        pass
    @property
    def text_list(self) -> global___PolicyTopicEvidence.TextList:
        """List of evidence found in the text of a resource."""
        pass
    language_code: typing.Text = ...
    """The language the resource was detected to be written in.
    This is an IETF language tag such as "en-US".
    """

    @property
    def destination_text_list(self) -> global___PolicyTopicEvidence.DestinationTextList:
        """The text in the destination of the resource that is causing a policy
        finding.
        """
        pass
    @property
    def destination_mismatch(self) -> global___PolicyTopicEvidence.DestinationMismatch:
        """Mismatch between the destinations of a resource's URLs."""
        pass
    @property
    def destination_not_working(self) -> global___PolicyTopicEvidence.DestinationNotWorking:
        """Details when the destination is returning an HTTP error code or isn't
        functional in all locations for commonly used devices.
        """
        pass
    def __init__(self,
        *,
        website_list : typing.Optional[global___PolicyTopicEvidence.WebsiteList] = ...,
        text_list : typing.Optional[global___PolicyTopicEvidence.TextList] = ...,
        language_code : typing.Text = ...,
        destination_text_list : typing.Optional[global___PolicyTopicEvidence.DestinationTextList] = ...,
        destination_mismatch : typing.Optional[global___PolicyTopicEvidence.DestinationMismatch] = ...,
        destination_not_working : typing.Optional[global___PolicyTopicEvidence.DestinationNotWorking] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["destination_mismatch",b"destination_mismatch","destination_not_working",b"destination_not_working","destination_text_list",b"destination_text_list","language_code",b"language_code","text_list",b"text_list","value",b"value","website_list",b"website_list"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["destination_mismatch",b"destination_mismatch","destination_not_working",b"destination_not_working","destination_text_list",b"destination_text_list","language_code",b"language_code","text_list",b"text_list","value",b"value","website_list",b"website_list"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["value",b"value"]) -> typing.Optional[typing_extensions.Literal["website_list","text_list","language_code","destination_text_list","destination_mismatch","destination_not_working"]]: ...
global___PolicyTopicEvidence = PolicyTopicEvidence

class PolicyTopicConstraint(google.protobuf.message.Message):
    """Describes the effect on serving that a policy topic entry will have."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class CountryConstraintList(google.protobuf.message.Message):
        """A list of countries where a resource's serving is constrained."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        TOTAL_TARGETED_COUNTRIES_FIELD_NUMBER: builtins.int
        COUNTRIES_FIELD_NUMBER: builtins.int
        total_targeted_countries: builtins.int = ...
        """Total number of countries targeted by the resource."""

        @property
        def countries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PolicyTopicConstraint.CountryConstraint]:
            """Countries in which serving is restricted."""
            pass
        def __init__(self,
            *,
            total_targeted_countries : typing.Optional[builtins.int] = ...,
            countries : typing.Optional[typing.Iterable[global___PolicyTopicConstraint.CountryConstraint]] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["_total_targeted_countries",b"_total_targeted_countries","total_targeted_countries",b"total_targeted_countries"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["_total_targeted_countries",b"_total_targeted_countries","countries",b"countries","total_targeted_countries",b"total_targeted_countries"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_total_targeted_countries",b"_total_targeted_countries"]) -> typing.Optional[typing_extensions.Literal["total_targeted_countries"]]: ...

    class ResellerConstraint(google.protobuf.message.Message):
        """Indicates that a policy topic was constrained due to disapproval of the
        website for reseller purposes.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    class CountryConstraint(google.protobuf.message.Message):
        """Indicates that a resource's ability to serve in a particular country is
        constrained.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        COUNTRY_CRITERION_FIELD_NUMBER: builtins.int
        country_criterion: typing.Text = ...
        """Geo target constant resource name of the country in which serving is
        constrained.
        """

        def __init__(self,
            *,
            country_criterion : typing.Optional[typing.Text] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["_country_criterion",b"_country_criterion","country_criterion",b"country_criterion"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["_country_criterion",b"_country_criterion","country_criterion",b"country_criterion"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_country_criterion",b"_country_criterion"]) -> typing.Optional[typing_extensions.Literal["country_criterion"]]: ...

    COUNTRY_CONSTRAINT_LIST_FIELD_NUMBER: builtins.int
    RESELLER_CONSTRAINT_FIELD_NUMBER: builtins.int
    CERTIFICATE_MISSING_IN_COUNTRY_LIST_FIELD_NUMBER: builtins.int
    CERTIFICATE_DOMAIN_MISMATCH_IN_COUNTRY_LIST_FIELD_NUMBER: builtins.int
    @property
    def country_constraint_list(self) -> global___PolicyTopicConstraint.CountryConstraintList:
        """Countries where the resource cannot serve."""
        pass
    @property
    def reseller_constraint(self) -> global___PolicyTopicConstraint.ResellerConstraint:
        """Reseller constraint."""
        pass
    @property
    def certificate_missing_in_country_list(self) -> global___PolicyTopicConstraint.CountryConstraintList:
        """Countries where a certificate is required for serving."""
        pass
    @property
    def certificate_domain_mismatch_in_country_list(self) -> global___PolicyTopicConstraint.CountryConstraintList:
        """Countries where the resource's domain is not covered by the
        certificates associated with it.
        """
        pass
    def __init__(self,
        *,
        country_constraint_list : typing.Optional[global___PolicyTopicConstraint.CountryConstraintList] = ...,
        reseller_constraint : typing.Optional[global___PolicyTopicConstraint.ResellerConstraint] = ...,
        certificate_missing_in_country_list : typing.Optional[global___PolicyTopicConstraint.CountryConstraintList] = ...,
        certificate_domain_mismatch_in_country_list : typing.Optional[global___PolicyTopicConstraint.CountryConstraintList] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["certificate_domain_mismatch_in_country_list",b"certificate_domain_mismatch_in_country_list","certificate_missing_in_country_list",b"certificate_missing_in_country_list","country_constraint_list",b"country_constraint_list","reseller_constraint",b"reseller_constraint","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["certificate_domain_mismatch_in_country_list",b"certificate_domain_mismatch_in_country_list","certificate_missing_in_country_list",b"certificate_missing_in_country_list","country_constraint_list",b"country_constraint_list","reseller_constraint",b"reseller_constraint","value",b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["value",b"value"]) -> typing.Optional[typing_extensions.Literal["country_constraint_list","reseller_constraint","certificate_missing_in_country_list","certificate_domain_mismatch_in_country_list"]]: ...
global___PolicyTopicConstraint = PolicyTopicConstraint
