"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class CustomerLabel(google.protobuf.message.Message):
    """Proto file describing the customer label resource.

    Represents a relationship between a customer and a label. This customer may
    not have access to all the labels attached to it. Additional CustomerLabels
    may be returned by increasing permissions with login-customer-id.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESOURCE_NAME_FIELD_NUMBER: builtins.int
    CUSTOMER_FIELD_NUMBER: builtins.int
    LABEL_FIELD_NUMBER: builtins.int
    resource_name: typing.Text = ...
    """Immutable. Name of the resource.
    Customer label resource names have the form:
    `customers/{customer_id}/customerLabels/{label_id}`
    """

    customer: typing.Text = ...
    """Output only. The resource name of the customer to which the label is attached.
    Read only.
    """

    label: typing.Text = ...
    """Output only. The resource name of the label assigned to the customer.

    Note: the Customer ID portion of the label resource name is not
    validated when creating a new CustomerLabel.
    """

    def __init__(self,
        *,
        resource_name : typing.Text = ...,
        customer : typing.Optional[typing.Text] = ...,
        label : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_customer",b"_customer","_label",b"_label","customer",b"customer","label",b"label"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_customer",b"_customer","_label",b"_label","customer",b"customer","label",b"label","resource_name",b"resource_name"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_customer",b"_customer"]) -> typing.Optional[typing_extensions.Literal["customer"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_label",b"_label"]) -> typing.Optional[typing_extensions.Literal["label"]]: ...
global___CustomerLabel = CustomerLabel
