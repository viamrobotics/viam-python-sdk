"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class UserLocationView(google.protobuf.message.Message):
    """Proto file describing the user location view resource.

    A user location view.

    User Location View includes all metrics aggregated at the country level,
    one row per country. It reports metrics at the actual physical location of
    the user by targeted or not targeted location. If other segment fields are
    used, you may get more than one row per country.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESOURCE_NAME_FIELD_NUMBER: builtins.int
    COUNTRY_CRITERION_ID_FIELD_NUMBER: builtins.int
    TARGETING_LOCATION_FIELD_NUMBER: builtins.int
    resource_name: typing.Text = ...
    """Output only. The resource name of the user location view.
    UserLocation view resource names have the form:

    `customers/{customer_id}/userLocationViews/{country_criterion_id}~{targeting_location}`
    """

    country_criterion_id: builtins.int = ...
    """Output only. Criterion Id for the country."""

    targeting_location: builtins.bool = ...
    """Output only. Indicates whether location was targeted or not."""

    def __init__(self,
        *,
        resource_name : typing.Text = ...,
        country_criterion_id : typing.Optional[builtins.int] = ...,
        targeting_location : typing.Optional[builtins.bool] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_country_criterion_id",b"_country_criterion_id","_targeting_location",b"_targeting_location","country_criterion_id",b"country_criterion_id","targeting_location",b"targeting_location"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_country_criterion_id",b"_country_criterion_id","_targeting_location",b"_targeting_location","country_criterion_id",b"country_criterion_id","resource_name",b"resource_name","targeting_location",b"targeting_location"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_country_criterion_id",b"_country_criterion_id"]) -> typing.Optional[typing_extensions.Literal["country_criterion_id"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_targeting_location",b"_targeting_location"]) -> typing.Optional[typing_extensions.Literal["targeting_location"]]: ...
global___UserLocationView = UserLocationView
