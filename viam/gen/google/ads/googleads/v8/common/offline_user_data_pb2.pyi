"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.ads.googleads.v8.enums.user_identifier_source_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class OfflineUserAddressInfo(google.protobuf.message.Message):
    """Proto file describing offline user data.

    Address identifier of offline data.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    HASHED_FIRST_NAME_FIELD_NUMBER: builtins.int
    HASHED_LAST_NAME_FIELD_NUMBER: builtins.int
    CITY_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    COUNTRY_CODE_FIELD_NUMBER: builtins.int
    POSTAL_CODE_FIELD_NUMBER: builtins.int
    HASHED_STREET_ADDRESS_FIELD_NUMBER: builtins.int
    hashed_first_name: typing.Text = ...
    """First name of the user, which is hashed as SHA-256 after normalized
    (Lowercase all characters; Remove any extra spaces before, after, and in
    between).
    """

    hashed_last_name: typing.Text = ...
    """Last name of the user, which is hashed as SHA-256 after normalized (lower
    case only and no punctuation).
    """

    city: typing.Text = ...
    """City of the address. Only accepted for Store Sales and
    ConversionAdjustmentUploadService.
    """

    state: typing.Text = ...
    """State code of the address. Only accepted for Store Sales and
    ConversionAdjustmentUploadService.
    """

    country_code: typing.Text = ...
    """2-letter country code in ISO-3166-1 alpha-2 of the user's address."""

    postal_code: typing.Text = ...
    """Postal code of the user's address."""

    hashed_street_address: typing.Text = ...
    """The street address of the user hashed using SHA-256 hash function after
    normalization (lower case only). Only accepted for
    ConversionAdjustmentUploadService.
    """

    def __init__(self,
        *,
        hashed_first_name : typing.Optional[typing.Text] = ...,
        hashed_last_name : typing.Optional[typing.Text] = ...,
        city : typing.Optional[typing.Text] = ...,
        state : typing.Optional[typing.Text] = ...,
        country_code : typing.Optional[typing.Text] = ...,
        postal_code : typing.Optional[typing.Text] = ...,
        hashed_street_address : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_city",b"_city","_country_code",b"_country_code","_hashed_first_name",b"_hashed_first_name","_hashed_last_name",b"_hashed_last_name","_hashed_street_address",b"_hashed_street_address","_postal_code",b"_postal_code","_state",b"_state","city",b"city","country_code",b"country_code","hashed_first_name",b"hashed_first_name","hashed_last_name",b"hashed_last_name","hashed_street_address",b"hashed_street_address","postal_code",b"postal_code","state",b"state"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_city",b"_city","_country_code",b"_country_code","_hashed_first_name",b"_hashed_first_name","_hashed_last_name",b"_hashed_last_name","_hashed_street_address",b"_hashed_street_address","_postal_code",b"_postal_code","_state",b"_state","city",b"city","country_code",b"country_code","hashed_first_name",b"hashed_first_name","hashed_last_name",b"hashed_last_name","hashed_street_address",b"hashed_street_address","postal_code",b"postal_code","state",b"state"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_city",b"_city"]) -> typing.Optional[typing_extensions.Literal["city"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_country_code",b"_country_code"]) -> typing.Optional[typing_extensions.Literal["country_code"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_hashed_first_name",b"_hashed_first_name"]) -> typing.Optional[typing_extensions.Literal["hashed_first_name"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_hashed_last_name",b"_hashed_last_name"]) -> typing.Optional[typing_extensions.Literal["hashed_last_name"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_hashed_street_address",b"_hashed_street_address"]) -> typing.Optional[typing_extensions.Literal["hashed_street_address"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_postal_code",b"_postal_code"]) -> typing.Optional[typing_extensions.Literal["postal_code"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_state",b"_state"]) -> typing.Optional[typing_extensions.Literal["state"]]: ...
global___OfflineUserAddressInfo = OfflineUserAddressInfo

class UserIdentifier(google.protobuf.message.Message):
    """User identifying information."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    USER_IDENTIFIER_SOURCE_FIELD_NUMBER: builtins.int
    HASHED_EMAIL_FIELD_NUMBER: builtins.int
    HASHED_PHONE_NUMBER_FIELD_NUMBER: builtins.int
    MOBILE_ID_FIELD_NUMBER: builtins.int
    THIRD_PARTY_USER_ID_FIELD_NUMBER: builtins.int
    ADDRESS_INFO_FIELD_NUMBER: builtins.int
    user_identifier_source: google.ads.googleads.v8.enums.user_identifier_source_pb2.UserIdentifierSourceEnum.UserIdentifierSource.ValueType = ...
    """Source of the user identifier when the upload is from Store Sales,
    ConversionUploadService, or ConversionAdjustmentUploadService. For
    ConversionUploadService and ConversionAdjustmentUploadService, the source
    of the user identifier must be specified as FIRST_PARTY, otherwise an error
    will be returned.
    """

    hashed_email: typing.Text = ...
    """Hashed email address using SHA-256 hash function after normalization.
    Accepted for Customer Match, Store Sales, ConversionUploadService, and
    ConversionAdjustmentUploadService.
    """

    hashed_phone_number: typing.Text = ...
    """Hashed phone number using SHA-256 hash function after normalization
    (E164 standard). Accepted for Customer Match, Store Sales,
    ConversionUploadService, and ConversionAdjustmentUploadService.
    """

    mobile_id: typing.Text = ...
    """Mobile device ID (advertising ID/IDFA). Accepted only for Customer Match."""

    third_party_user_id: typing.Text = ...
    """Advertiser-assigned user ID for Customer Match upload, or
    third-party-assigned user ID for Store Sales. Accepted only for Customer
    Match and Store Sales.
    """

    @property
    def address_info(self) -> global___OfflineUserAddressInfo:
        """Address information. Accepted only for Customer Match, Store Sales, and
        ConversionAdjustmentUploadService.
        """
        pass
    def __init__(self,
        *,
        user_identifier_source : google.ads.googleads.v8.enums.user_identifier_source_pb2.UserIdentifierSourceEnum.UserIdentifierSource.ValueType = ...,
        hashed_email : typing.Text = ...,
        hashed_phone_number : typing.Text = ...,
        mobile_id : typing.Text = ...,
        third_party_user_id : typing.Text = ...,
        address_info : typing.Optional[global___OfflineUserAddressInfo] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["address_info",b"address_info","hashed_email",b"hashed_email","hashed_phone_number",b"hashed_phone_number","identifier",b"identifier","mobile_id",b"mobile_id","third_party_user_id",b"third_party_user_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["address_info",b"address_info","hashed_email",b"hashed_email","hashed_phone_number",b"hashed_phone_number","identifier",b"identifier","mobile_id",b"mobile_id","third_party_user_id",b"third_party_user_id","user_identifier_source",b"user_identifier_source"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["identifier",b"identifier"]) -> typing.Optional[typing_extensions.Literal["hashed_email","hashed_phone_number","mobile_id","third_party_user_id","address_info"]]: ...
global___UserIdentifier = UserIdentifier

class TransactionAttribute(google.protobuf.message.Message):
    """Attribute of the store sales transaction."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TRANSACTION_DATE_TIME_FIELD_NUMBER: builtins.int
    TRANSACTION_AMOUNT_MICROS_FIELD_NUMBER: builtins.int
    CURRENCY_CODE_FIELD_NUMBER: builtins.int
    CONVERSION_ACTION_FIELD_NUMBER: builtins.int
    ORDER_ID_FIELD_NUMBER: builtins.int
    STORE_ATTRIBUTE_FIELD_NUMBER: builtins.int
    CUSTOM_VALUE_FIELD_NUMBER: builtins.int
    ITEM_ATTRIBUTE_FIELD_NUMBER: builtins.int
    transaction_date_time: typing.Text = ...
    """Timestamp when transaction occurred. Required.
    The format is "YYYY-MM-DD HH:MM:SS[+/-HH:MM]", where [+/-HH:MM] is an
    optional timezone offset from UTC. If the offset is absent, the API will
    use the account's timezone as default.
    Examples: "2018-03-05 09:15:00" or "2018-02-01 14:34:30+03:00"
    """

    transaction_amount_micros: builtins.float = ...
    """Transaction amount in micros. Required.
    Transaction amount in micros needs to be greater than 1000.
    If item Attributes are provided, it represents the total value of the
    items, after multiplying the unit price per item by the quantity provided
    in the ItemAttributes.
    """

    currency_code: typing.Text = ...
    """Transaction currency code. ISO 4217 three-letter code is used. Required."""

    conversion_action: typing.Text = ...
    """The resource name of conversion action to report conversions to.
    Required.
    """

    order_id: typing.Text = ...
    """Transaction order id.
    Accessible only to customers on the allow-list.
    """

    @property
    def store_attribute(self) -> global___StoreAttribute:
        """Store attributes of the transaction.
        Accessible only to customers on the allow-list.
        """
        pass
    custom_value: typing.Text = ...
    """Value of the custom variable for each transaction.
    Accessible only to customers on the allow-list.
    """

    @property
    def item_attribute(self) -> global___ItemAttribute:
        """Item attributes of the transaction."""
        pass
    def __init__(self,
        *,
        transaction_date_time : typing.Optional[typing.Text] = ...,
        transaction_amount_micros : typing.Optional[builtins.float] = ...,
        currency_code : typing.Optional[typing.Text] = ...,
        conversion_action : typing.Optional[typing.Text] = ...,
        order_id : typing.Optional[typing.Text] = ...,
        store_attribute : typing.Optional[global___StoreAttribute] = ...,
        custom_value : typing.Optional[typing.Text] = ...,
        item_attribute : typing.Optional[global___ItemAttribute] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_conversion_action",b"_conversion_action","_currency_code",b"_currency_code","_custom_value",b"_custom_value","_order_id",b"_order_id","_transaction_amount_micros",b"_transaction_amount_micros","_transaction_date_time",b"_transaction_date_time","conversion_action",b"conversion_action","currency_code",b"currency_code","custom_value",b"custom_value","item_attribute",b"item_attribute","order_id",b"order_id","store_attribute",b"store_attribute","transaction_amount_micros",b"transaction_amount_micros","transaction_date_time",b"transaction_date_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_conversion_action",b"_conversion_action","_currency_code",b"_currency_code","_custom_value",b"_custom_value","_order_id",b"_order_id","_transaction_amount_micros",b"_transaction_amount_micros","_transaction_date_time",b"_transaction_date_time","conversion_action",b"conversion_action","currency_code",b"currency_code","custom_value",b"custom_value","item_attribute",b"item_attribute","order_id",b"order_id","store_attribute",b"store_attribute","transaction_amount_micros",b"transaction_amount_micros","transaction_date_time",b"transaction_date_time"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_conversion_action",b"_conversion_action"]) -> typing.Optional[typing_extensions.Literal["conversion_action"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_currency_code",b"_currency_code"]) -> typing.Optional[typing_extensions.Literal["currency_code"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_value",b"_custom_value"]) -> typing.Optional[typing_extensions.Literal["custom_value"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_order_id",b"_order_id"]) -> typing.Optional[typing_extensions.Literal["order_id"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_transaction_amount_micros",b"_transaction_amount_micros"]) -> typing.Optional[typing_extensions.Literal["transaction_amount_micros"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_transaction_date_time",b"_transaction_date_time"]) -> typing.Optional[typing_extensions.Literal["transaction_date_time"]]: ...
global___TransactionAttribute = TransactionAttribute

class StoreAttribute(google.protobuf.message.Message):
    """Store attributes of the transaction."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    STORE_CODE_FIELD_NUMBER: builtins.int
    store_code: typing.Text = ...
    """Store code from
    https://support.google.com/business/answer/3370250#storecode
    """

    def __init__(self,
        *,
        store_code : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_store_code",b"_store_code","store_code",b"store_code"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_store_code",b"_store_code","store_code",b"store_code"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_store_code",b"_store_code"]) -> typing.Optional[typing_extensions.Literal["store_code"]]: ...
global___StoreAttribute = StoreAttribute

class ItemAttribute(google.protobuf.message.Message):
    """Item attributes of the transaction."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ITEM_ID_FIELD_NUMBER: builtins.int
    MERCHANT_ID_FIELD_NUMBER: builtins.int
    COUNTRY_CODE_FIELD_NUMBER: builtins.int
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    QUANTITY_FIELD_NUMBER: builtins.int
    item_id: typing.Text = ...
    """A unique identifier of a product. It can be either the Merchant Center Item
    ID or GTIN (Global Trade Item Number).
    """

    merchant_id: builtins.int = ...
    """ID of the Merchant Center Account."""

    country_code: typing.Text = ...
    """Common Locale Data Repository (CLDR) territory code of the country
    associated with the feed where your items are uploaded. See
    https://developers.google.com/google-ads/api/reference/data/codes-formats#country-codes
    for more information.
    """

    language_code: typing.Text = ...
    """ISO 639-1 code of the language associated with the feed where your items
    are uploaded
    """

    quantity: builtins.int = ...
    """The number of items sold. Defaults to 1 if not set."""

    def __init__(self,
        *,
        item_id : typing.Text = ...,
        merchant_id : typing.Optional[builtins.int] = ...,
        country_code : typing.Text = ...,
        language_code : typing.Text = ...,
        quantity : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_merchant_id",b"_merchant_id","merchant_id",b"merchant_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_merchant_id",b"_merchant_id","country_code",b"country_code","item_id",b"item_id","language_code",b"language_code","merchant_id",b"merchant_id","quantity",b"quantity"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_merchant_id",b"_merchant_id"]) -> typing.Optional[typing_extensions.Literal["merchant_id"]]: ...
global___ItemAttribute = ItemAttribute

class UserData(google.protobuf.message.Message):
    """User data holding user identifiers and attributes."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    USER_IDENTIFIERS_FIELD_NUMBER: builtins.int
    TRANSACTION_ATTRIBUTE_FIELD_NUMBER: builtins.int
    USER_ATTRIBUTE_FIELD_NUMBER: builtins.int
    @property
    def user_identifiers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___UserIdentifier]:
        """User identification info. Required."""
        pass
    @property
    def transaction_attribute(self) -> global___TransactionAttribute:
        """Additional transactions/attributes associated with the user.
        Required when updating store sales data.
        """
        pass
    @property
    def user_attribute(self) -> global___UserAttribute:
        """Additional attributes associated with the user. Required when updating
        customer match attributes. These have an expiration of 540 days.
        """
        pass
    def __init__(self,
        *,
        user_identifiers : typing.Optional[typing.Iterable[global___UserIdentifier]] = ...,
        transaction_attribute : typing.Optional[global___TransactionAttribute] = ...,
        user_attribute : typing.Optional[global___UserAttribute] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["transaction_attribute",b"transaction_attribute","user_attribute",b"user_attribute"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["transaction_attribute",b"transaction_attribute","user_attribute",b"user_attribute","user_identifiers",b"user_identifiers"]) -> None: ...
global___UserData = UserData

class UserAttribute(google.protobuf.message.Message):
    """User attribute, can only be used with CUSTOMER_MATCH_WITH_ATTRIBUTES job
    type.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    LIFETIME_VALUE_MICROS_FIELD_NUMBER: builtins.int
    LIFETIME_VALUE_BUCKET_FIELD_NUMBER: builtins.int
    LAST_PURCHASE_DATE_TIME_FIELD_NUMBER: builtins.int
    AVERAGE_PURCHASE_COUNT_FIELD_NUMBER: builtins.int
    AVERAGE_PURCHASE_VALUE_MICROS_FIELD_NUMBER: builtins.int
    ACQUISITION_DATE_TIME_FIELD_NUMBER: builtins.int
    lifetime_value_micros: builtins.int = ...
    """Advertiser defined lifetime value for the user."""

    lifetime_value_bucket: builtins.int = ...
    """Advertiser defined lifetime value bucket for the user. The valid range for
    a lifetime value bucket is from 1 (low) to 10 (high), except for remove
    operation where 0 will also be accepted.
    """

    last_purchase_date_time: typing.Text = ...
    """Timestamp of the last purchase made by the user.
    The format is YYYY-MM-DD HH:MM:SS[+/-HH:MM], where [+/-HH:MM] is an
    optional timezone offset from UTC. If the offset is absent, the API will
    use the account's timezone as default.
    """

    average_purchase_count: builtins.int = ...
    """Advertiser defined average number of purchases that are made by the user in
    a 30 day period.
    """

    average_purchase_value_micros: builtins.int = ...
    """Advertiser defined average purchase value in micros for the user."""

    acquisition_date_time: typing.Text = ...
    """Timestamp when the user was acquired.
    The format is YYYY-MM-DD HH:MM:SS[+/-HH:MM], where [+/-HH:MM] is an
    optional timezone offset from UTC. If the offset is absent, the API will
    use the account's timezone as default.
    """

    def __init__(self,
        *,
        lifetime_value_micros : typing.Optional[builtins.int] = ...,
        lifetime_value_bucket : typing.Optional[builtins.int] = ...,
        last_purchase_date_time : typing.Text = ...,
        average_purchase_count : builtins.int = ...,
        average_purchase_value_micros : builtins.int = ...,
        acquisition_date_time : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_lifetime_value_bucket",b"_lifetime_value_bucket","_lifetime_value_micros",b"_lifetime_value_micros","lifetime_value_bucket",b"lifetime_value_bucket","lifetime_value_micros",b"lifetime_value_micros"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_lifetime_value_bucket",b"_lifetime_value_bucket","_lifetime_value_micros",b"_lifetime_value_micros","acquisition_date_time",b"acquisition_date_time","average_purchase_count",b"average_purchase_count","average_purchase_value_micros",b"average_purchase_value_micros","last_purchase_date_time",b"last_purchase_date_time","lifetime_value_bucket",b"lifetime_value_bucket","lifetime_value_micros",b"lifetime_value_micros"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_lifetime_value_bucket",b"_lifetime_value_bucket"]) -> typing.Optional[typing_extensions.Literal["lifetime_value_bucket"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_lifetime_value_micros",b"_lifetime_value_micros"]) -> typing.Optional[typing_extensions.Literal["lifetime_value_micros"]]: ...
global___UserAttribute = UserAttribute

class CustomerMatchUserListMetadata(google.protobuf.message.Message):
    """Metadata for customer match user list."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    USER_LIST_FIELD_NUMBER: builtins.int
    user_list: typing.Text = ...
    """The resource name of remarketing list to update data.
    Required for job of CUSTOMER_MATCH_USER_LIST type.
    """

    def __init__(self,
        *,
        user_list : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_user_list",b"_user_list","user_list",b"user_list"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_user_list",b"_user_list","user_list",b"user_list"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_user_list",b"_user_list"]) -> typing.Optional[typing_extensions.Literal["user_list"]]: ...
global___CustomerMatchUserListMetadata = CustomerMatchUserListMetadata

class StoreSalesMetadata(google.protobuf.message.Message):
    """Metadata for Store Sales Direct."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    LOYALTY_FRACTION_FIELD_NUMBER: builtins.int
    TRANSACTION_UPLOAD_FRACTION_FIELD_NUMBER: builtins.int
    CUSTOM_KEY_FIELD_NUMBER: builtins.int
    THIRD_PARTY_METADATA_FIELD_NUMBER: builtins.int
    loyalty_fraction: builtins.float = ...
    """This is the fraction of all transactions that are identifiable (i.e.,
    associated with any form of customer information).
    Required.
    The fraction needs to be between 0 and 1 (excluding 0).
    """

    transaction_upload_fraction: builtins.float = ...
    """This is the ratio of sales being uploaded compared to the overall sales
    that can be associated with a customer. Required.
    The fraction needs to be between 0 and 1 (excluding 0). For example, if you
    upload half the sales that you are able to associate with a customer, this
    would be 0.5.
    """

    custom_key: typing.Text = ...
    """Name of the store sales custom variable key. A predefined key that
    can be applied to the transaction and then later used for custom
    segmentation in reporting.
    Accessible only to customers on the allow-list.
    """

    @property
    def third_party_metadata(self) -> global___StoreSalesThirdPartyMetadata:
        """Metadata for a third party Store Sales upload."""
        pass
    def __init__(self,
        *,
        loyalty_fraction : typing.Optional[builtins.float] = ...,
        transaction_upload_fraction : typing.Optional[builtins.float] = ...,
        custom_key : typing.Optional[typing.Text] = ...,
        third_party_metadata : typing.Optional[global___StoreSalesThirdPartyMetadata] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_custom_key",b"_custom_key","_loyalty_fraction",b"_loyalty_fraction","_transaction_upload_fraction",b"_transaction_upload_fraction","custom_key",b"custom_key","loyalty_fraction",b"loyalty_fraction","third_party_metadata",b"third_party_metadata","transaction_upload_fraction",b"transaction_upload_fraction"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_custom_key",b"_custom_key","_loyalty_fraction",b"_loyalty_fraction","_transaction_upload_fraction",b"_transaction_upload_fraction","custom_key",b"custom_key","loyalty_fraction",b"loyalty_fraction","third_party_metadata",b"third_party_metadata","transaction_upload_fraction",b"transaction_upload_fraction"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_key",b"_custom_key"]) -> typing.Optional[typing_extensions.Literal["custom_key"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_loyalty_fraction",b"_loyalty_fraction"]) -> typing.Optional[typing_extensions.Literal["loyalty_fraction"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_transaction_upload_fraction",b"_transaction_upload_fraction"]) -> typing.Optional[typing_extensions.Literal["transaction_upload_fraction"]]: ...
global___StoreSalesMetadata = StoreSalesMetadata

class StoreSalesThirdPartyMetadata(google.protobuf.message.Message):
    """Metadata for a third party Store Sales.
    This product is only for customers on the allow-list. Please contact your
    Google business development representative for details on the upload
    configuration.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADVERTISER_UPLOAD_DATE_TIME_FIELD_NUMBER: builtins.int
    VALID_TRANSACTION_FRACTION_FIELD_NUMBER: builtins.int
    PARTNER_MATCH_FRACTION_FIELD_NUMBER: builtins.int
    PARTNER_UPLOAD_FRACTION_FIELD_NUMBER: builtins.int
    BRIDGE_MAP_VERSION_ID_FIELD_NUMBER: builtins.int
    PARTNER_ID_FIELD_NUMBER: builtins.int
    advertiser_upload_date_time: typing.Text = ...
    """Time the advertiser uploaded the data to the partner. Required.
    The format is "YYYY-MM-DD HH:MM:SS".
    Examples: "2018-03-05 09:15:00" or "2018-02-01 14:34:30"
    """

    valid_transaction_fraction: builtins.float = ...
    """The fraction of transactions that are valid. Invalid transactions may
    include invalid formats or values.
    Required.
    The fraction needs to be between 0 and 1 (excluding 0).
    """

    partner_match_fraction: builtins.float = ...
    """The fraction of valid transactions that are matched to a third party
    assigned user ID on the partner side.
    Required.
    The fraction needs to be between 0 and 1 (excluding 0).
    """

    partner_upload_fraction: builtins.float = ...
    """The fraction of valid transactions that are uploaded by the partner to
    Google.
    Required.
    The fraction needs to be between 0 and 1 (excluding 0).
    """

    bridge_map_version_id: typing.Text = ...
    """Version of partner IDs to be used for uploads. Required."""

    partner_id: builtins.int = ...
    """ID of the third party partner updating the transaction feed."""

    def __init__(self,
        *,
        advertiser_upload_date_time : typing.Optional[typing.Text] = ...,
        valid_transaction_fraction : typing.Optional[builtins.float] = ...,
        partner_match_fraction : typing.Optional[builtins.float] = ...,
        partner_upload_fraction : typing.Optional[builtins.float] = ...,
        bridge_map_version_id : typing.Optional[typing.Text] = ...,
        partner_id : typing.Optional[builtins.int] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_advertiser_upload_date_time",b"_advertiser_upload_date_time","_bridge_map_version_id",b"_bridge_map_version_id","_partner_id",b"_partner_id","_partner_match_fraction",b"_partner_match_fraction","_partner_upload_fraction",b"_partner_upload_fraction","_valid_transaction_fraction",b"_valid_transaction_fraction","advertiser_upload_date_time",b"advertiser_upload_date_time","bridge_map_version_id",b"bridge_map_version_id","partner_id",b"partner_id","partner_match_fraction",b"partner_match_fraction","partner_upload_fraction",b"partner_upload_fraction","valid_transaction_fraction",b"valid_transaction_fraction"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_advertiser_upload_date_time",b"_advertiser_upload_date_time","_bridge_map_version_id",b"_bridge_map_version_id","_partner_id",b"_partner_id","_partner_match_fraction",b"_partner_match_fraction","_partner_upload_fraction",b"_partner_upload_fraction","_valid_transaction_fraction",b"_valid_transaction_fraction","advertiser_upload_date_time",b"advertiser_upload_date_time","bridge_map_version_id",b"bridge_map_version_id","partner_id",b"partner_id","partner_match_fraction",b"partner_match_fraction","partner_upload_fraction",b"partner_upload_fraction","valid_transaction_fraction",b"valid_transaction_fraction"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_advertiser_upload_date_time",b"_advertiser_upload_date_time"]) -> typing.Optional[typing_extensions.Literal["advertiser_upload_date_time"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_bridge_map_version_id",b"_bridge_map_version_id"]) -> typing.Optional[typing_extensions.Literal["bridge_map_version_id"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_partner_id",b"_partner_id"]) -> typing.Optional[typing_extensions.Literal["partner_id"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_partner_match_fraction",b"_partner_match_fraction"]) -> typing.Optional[typing_extensions.Literal["partner_match_fraction"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_partner_upload_fraction",b"_partner_upload_fraction"]) -> typing.Optional[typing_extensions.Literal["partner_upload_fraction"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_valid_transaction_fraction",b"_valid_transaction_fraction"]) -> typing.Optional[typing_extensions.Literal["valid_transaction_fraction"]]: ...
global___StoreSalesThirdPartyMetadata = StoreSalesThirdPartyMetadata
