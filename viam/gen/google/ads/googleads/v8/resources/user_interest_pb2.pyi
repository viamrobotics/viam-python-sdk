"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.ads.googleads.v8.common.criterion_category_availability_pb2
import google.ads.googleads.v8.enums.user_interest_taxonomy_type_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class UserInterest(google.protobuf.message.Message):
    """Proto file describing the User Interest resource.

    A user interest: a particular interest-based vertical to be targeted.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESOURCE_NAME_FIELD_NUMBER: builtins.int
    TAXONOMY_TYPE_FIELD_NUMBER: builtins.int
    USER_INTEREST_ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    USER_INTEREST_PARENT_FIELD_NUMBER: builtins.int
    LAUNCHED_TO_ALL_FIELD_NUMBER: builtins.int
    AVAILABILITIES_FIELD_NUMBER: builtins.int
    resource_name: typing.Text = ...
    """Output only. The resource name of the user interest.
    User interest resource names have the form:

    `customers/{customer_id}/userInterests/{user_interest_id}`
    """

    taxonomy_type: google.ads.googleads.v8.enums.user_interest_taxonomy_type_pb2.UserInterestTaxonomyTypeEnum.UserInterestTaxonomyType.ValueType = ...
    """Output only. Taxonomy type of the user interest."""

    user_interest_id: builtins.int = ...
    """Output only. The ID of the user interest."""

    name: typing.Text = ...
    """Output only. The name of the user interest."""

    user_interest_parent: typing.Text = ...
    """Output only. The parent of the user interest."""

    launched_to_all: builtins.bool = ...
    """Output only. True if the user interest is launched to all channels and locales."""

    @property
    def availabilities(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.ads.googleads.v8.common.criterion_category_availability_pb2.CriterionCategoryAvailability]:
        """Output only. Availability information of the user interest."""
        pass
    def __init__(self,
        *,
        resource_name : typing.Text = ...,
        taxonomy_type : google.ads.googleads.v8.enums.user_interest_taxonomy_type_pb2.UserInterestTaxonomyTypeEnum.UserInterestTaxonomyType.ValueType = ...,
        user_interest_id : typing.Optional[builtins.int] = ...,
        name : typing.Optional[typing.Text] = ...,
        user_interest_parent : typing.Optional[typing.Text] = ...,
        launched_to_all : typing.Optional[builtins.bool] = ...,
        availabilities : typing.Optional[typing.Iterable[google.ads.googleads.v8.common.criterion_category_availability_pb2.CriterionCategoryAvailability]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_launched_to_all",b"_launched_to_all","_name",b"_name","_user_interest_id",b"_user_interest_id","_user_interest_parent",b"_user_interest_parent","launched_to_all",b"launched_to_all","name",b"name","user_interest_id",b"user_interest_id","user_interest_parent",b"user_interest_parent"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_launched_to_all",b"_launched_to_all","_name",b"_name","_user_interest_id",b"_user_interest_id","_user_interest_parent",b"_user_interest_parent","availabilities",b"availabilities","launched_to_all",b"launched_to_all","name",b"name","resource_name",b"resource_name","taxonomy_type",b"taxonomy_type","user_interest_id",b"user_interest_id","user_interest_parent",b"user_interest_parent"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_launched_to_all",b"_launched_to_all"]) -> typing.Optional[typing_extensions.Literal["launched_to_all"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_name",b"_name"]) -> typing.Optional[typing_extensions.Literal["name"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_user_interest_id",b"_user_interest_id"]) -> typing.Optional[typing_extensions.Literal["user_interest_id"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_user_interest_parent",b"_user_interest_parent"]) -> typing.Optional[typing_extensions.Literal["user_interest_parent"]]: ...
global___UserInterest = UserInterest
