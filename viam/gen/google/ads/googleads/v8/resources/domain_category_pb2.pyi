"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class DomainCategory(google.protobuf.message.Message):
    """Proto file describing the Domain Category resource.

    A category generated automatically by crawling a domain. If a campaign uses
    the DynamicSearchAdsSetting, then domain categories will be generated for
    the domain. The categories can be targeted using WebpageConditionInfo.
    See: https://support.google.com/google-ads/answer/2471185
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESOURCE_NAME_FIELD_NUMBER: builtins.int
    CAMPAIGN_FIELD_NUMBER: builtins.int
    CATEGORY_FIELD_NUMBER: builtins.int
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    DOMAIN_FIELD_NUMBER: builtins.int
    COVERAGE_FRACTION_FIELD_NUMBER: builtins.int
    CATEGORY_RANK_FIELD_NUMBER: builtins.int
    HAS_CHILDREN_FIELD_NUMBER: builtins.int
    RECOMMENDED_CPC_BID_MICROS_FIELD_NUMBER: builtins.int
    resource_name: typing.Text = ...
    """Output only. The resource name of the domain category.
    Domain category resource names have the form:

    `customers/{customer_id}/domainCategories/{campaign_id}~{category_base64}~{language_code}`
    """

    campaign: typing.Text = ...
    """Output only. The campaign this category is recommended for."""

    category: typing.Text = ...
    """Output only. Recommended category for the website domain. e.g. if you have a website
    about electronics, the categories could be "cameras", "televisions", etc.
    """

    language_code: typing.Text = ...
    """Output only. The language code specifying the language of the website. e.g. "en" for
    English. The language can be specified in the DynamicSearchAdsSetting
    required for dynamic search ads. This is the language of the pages from
    your website that you want Google Ads to find, create ads for,
    and match searches with.
    """

    domain: typing.Text = ...
    """Output only. The domain for the website. The domain can be specified in the
    DynamicSearchAdsSetting required for dynamic search ads.
    """

    coverage_fraction: builtins.float = ...
    """Output only. Fraction of pages on your site that this category matches."""

    category_rank: builtins.int = ...
    """Output only. The position of this category in the set of categories. Lower numbers
    indicate a better match for the domain. null indicates not recommended.
    """

    has_children: builtins.bool = ...
    """Output only. Indicates whether this category has sub-categories."""

    recommended_cpc_bid_micros: builtins.int = ...
    """Output only. The recommended cost per click for the category."""

    def __init__(self,
        *,
        resource_name : typing.Text = ...,
        campaign : typing.Optional[typing.Text] = ...,
        category : typing.Optional[typing.Text] = ...,
        language_code : typing.Optional[typing.Text] = ...,
        domain : typing.Optional[typing.Text] = ...,
        coverage_fraction : typing.Optional[builtins.float] = ...,
        category_rank : typing.Optional[builtins.int] = ...,
        has_children : typing.Optional[builtins.bool] = ...,
        recommended_cpc_bid_micros : typing.Optional[builtins.int] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_campaign",b"_campaign","_category",b"_category","_category_rank",b"_category_rank","_coverage_fraction",b"_coverage_fraction","_domain",b"_domain","_has_children",b"_has_children","_language_code",b"_language_code","_recommended_cpc_bid_micros",b"_recommended_cpc_bid_micros","campaign",b"campaign","category",b"category","category_rank",b"category_rank","coverage_fraction",b"coverage_fraction","domain",b"domain","has_children",b"has_children","language_code",b"language_code","recommended_cpc_bid_micros",b"recommended_cpc_bid_micros"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_campaign",b"_campaign","_category",b"_category","_category_rank",b"_category_rank","_coverage_fraction",b"_coverage_fraction","_domain",b"_domain","_has_children",b"_has_children","_language_code",b"_language_code","_recommended_cpc_bid_micros",b"_recommended_cpc_bid_micros","campaign",b"campaign","category",b"category","category_rank",b"category_rank","coverage_fraction",b"coverage_fraction","domain",b"domain","has_children",b"has_children","language_code",b"language_code","recommended_cpc_bid_micros",b"recommended_cpc_bid_micros","resource_name",b"resource_name"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_campaign",b"_campaign"]) -> typing.Optional[typing_extensions.Literal["campaign"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_category",b"_category"]) -> typing.Optional[typing_extensions.Literal["category"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_category_rank",b"_category_rank"]) -> typing.Optional[typing_extensions.Literal["category_rank"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_coverage_fraction",b"_coverage_fraction"]) -> typing.Optional[typing_extensions.Literal["coverage_fraction"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_domain",b"_domain"]) -> typing.Optional[typing_extensions.Literal["domain"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_has_children",b"_has_children"]) -> typing.Optional[typing_extensions.Literal["has_children"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_language_code",b"_language_code"]) -> typing.Optional[typing_extensions.Literal["language_code"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_recommended_cpc_bid_micros",b"_recommended_cpc_bid_micros"]) -> typing.Optional[typing_extensions.Literal["recommended_cpc_bid_micros"]]: ...
global___DomainCategory = DomainCategory
