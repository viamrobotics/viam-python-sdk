"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.ads.googleads.v8.enums.keyword_match_type_pb2
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class KeywordPlanAdGroupKeyword(google.protobuf.message.Message):
    """Proto file describing the keyword plan ad group keyword resource.

    A Keyword Plan ad group keyword.
    Max number of keyword plan keywords per plan: 10000.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESOURCE_NAME_FIELD_NUMBER: builtins.int
    KEYWORD_PLAN_AD_GROUP_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    TEXT_FIELD_NUMBER: builtins.int
    MATCH_TYPE_FIELD_NUMBER: builtins.int
    CPC_BID_MICROS_FIELD_NUMBER: builtins.int
    NEGATIVE_FIELD_NUMBER: builtins.int
    resource_name: typing.Text = ...
    """Immutable. The resource name of the Keyword Plan ad group keyword.
    KeywordPlanAdGroupKeyword resource names have the form:

    `customers/{customer_id}/keywordPlanAdGroupKeywords/{kp_ad_group_keyword_id}`
    """

    keyword_plan_ad_group: typing.Text = ...
    """The Keyword Plan ad group to which this keyword belongs."""

    id: builtins.int = ...
    """Output only. The ID of the Keyword Plan keyword."""

    text: typing.Text = ...
    """The keyword text."""

    match_type: google.ads.googleads.v8.enums.keyword_match_type_pb2.KeywordMatchTypeEnum.KeywordMatchType.ValueType = ...
    """The keyword match type."""

    cpc_bid_micros: builtins.int = ...
    """A keyword level max cpc bid in micros (e.g. $1 = 1mm). The currency is the
    same as the account currency code. This will override any CPC bid set at
    the keyword plan ad group level.
    Not applicable for negative keywords. (negative = true)
    This field is Optional.
    """

    negative: builtins.bool = ...
    """Immutable. If true, the keyword is negative."""

    def __init__(self,
        *,
        resource_name : typing.Text = ...,
        keyword_plan_ad_group : typing.Optional[typing.Text] = ...,
        id : typing.Optional[builtins.int] = ...,
        text : typing.Optional[typing.Text] = ...,
        match_type : google.ads.googleads.v8.enums.keyword_match_type_pb2.KeywordMatchTypeEnum.KeywordMatchType.ValueType = ...,
        cpc_bid_micros : typing.Optional[builtins.int] = ...,
        negative : typing.Optional[builtins.bool] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_cpc_bid_micros",b"_cpc_bid_micros","_id",b"_id","_keyword_plan_ad_group",b"_keyword_plan_ad_group","_negative",b"_negative","_text",b"_text","cpc_bid_micros",b"cpc_bid_micros","id",b"id","keyword_plan_ad_group",b"keyword_plan_ad_group","negative",b"negative","text",b"text"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_cpc_bid_micros",b"_cpc_bid_micros","_id",b"_id","_keyword_plan_ad_group",b"_keyword_plan_ad_group","_negative",b"_negative","_text",b"_text","cpc_bid_micros",b"cpc_bid_micros","id",b"id","keyword_plan_ad_group",b"keyword_plan_ad_group","match_type",b"match_type","negative",b"negative","resource_name",b"resource_name","text",b"text"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_cpc_bid_micros",b"_cpc_bid_micros"]) -> typing.Optional[typing_extensions.Literal["cpc_bid_micros"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_id",b"_id"]) -> typing.Optional[typing_extensions.Literal["id"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_keyword_plan_ad_group",b"_keyword_plan_ad_group"]) -> typing.Optional[typing_extensions.Literal["keyword_plan_ad_group"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_negative",b"_negative"]) -> typing.Optional[typing_extensions.Literal["negative"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_text",b"_text"]) -> typing.Optional[typing_extensions.Literal["text"]]: ...
global___KeywordPlanAdGroupKeyword = KeywordPlanAdGroupKeyword
