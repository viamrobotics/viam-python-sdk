"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.ads.googleads.v7.enums.conversion_adjustment_type_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.rpc.status_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class UploadConversionAdjustmentsRequest(google.protobuf.message.Message):
    """Request message for
    [ConversionAdjustmentUploadService.UploadConversionAdjustments][google.ads.googleads.v7.services.ConversionAdjustmentUploadService.UploadConversionAdjustments].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CUSTOMER_ID_FIELD_NUMBER: builtins.int
    CONVERSION_ADJUSTMENTS_FIELD_NUMBER: builtins.int
    PARTIAL_FAILURE_FIELD_NUMBER: builtins.int
    VALIDATE_ONLY_FIELD_NUMBER: builtins.int
    customer_id: typing.Text = ...
    """Required. The ID of the customer performing the upload."""

    @property
    def conversion_adjustments(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ConversionAdjustment]:
        """Required. The conversion adjustments that are being uploaded."""
        pass
    partial_failure: builtins.bool = ...
    """Required. If true, successful operations will be carried out and invalid
    operations will return errors. If false, all operations will be carried out
    in one transaction if and only if they are all valid. This should always be
    set to true.
    See
    https://developers.google.com/google-ads/api/docs/best-practices/partial-failures
    for more information about partial failure.
    """

    validate_only: builtins.bool = ...
    """If true, the request is validated but not executed. Only errors are
    returned, not results.
    """

    def __init__(self,
        *,
        customer_id : typing.Text = ...,
        conversion_adjustments : typing.Optional[typing.Iterable[global___ConversionAdjustment]] = ...,
        partial_failure : builtins.bool = ...,
        validate_only : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["conversion_adjustments",b"conversion_adjustments","customer_id",b"customer_id","partial_failure",b"partial_failure","validate_only",b"validate_only"]) -> None: ...
global___UploadConversionAdjustmentsRequest = UploadConversionAdjustmentsRequest

class UploadConversionAdjustmentsResponse(google.protobuf.message.Message):
    """Response message for
    [ConversionAdjustmentUploadService.UploadConversionAdjustments][google.ads.googleads.v7.services.ConversionAdjustmentUploadService.UploadConversionAdjustments].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARTIAL_FAILURE_ERROR_FIELD_NUMBER: builtins.int
    RESULTS_FIELD_NUMBER: builtins.int
    @property
    def partial_failure_error(self) -> google.rpc.status_pb2.Status:
        """Errors that pertain to conversion adjustment failures in the partial
        failure mode. Returned when all errors occur inside the adjustments. If any
        errors occur outside the adjustments (e.g. auth errors), we return an RPC
        level error.
        See
        https://developers.google.com/google-ads/api/docs/best-practices/partial-failures
        for more information about partial failure.
        """
        pass
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ConversionAdjustmentResult]:
        """Returned for successfully processed conversion adjustments. Proto will be
        empty for rows that received an error. Results are not returned when
        validate_only is true.
        """
        pass
    def __init__(self,
        *,
        partial_failure_error : typing.Optional[google.rpc.status_pb2.Status] = ...,
        results : typing.Optional[typing.Iterable[global___ConversionAdjustmentResult]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["partial_failure_error",b"partial_failure_error"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["partial_failure_error",b"partial_failure_error","results",b"results"]) -> None: ...
global___UploadConversionAdjustmentsResponse = UploadConversionAdjustmentsResponse

class ConversionAdjustment(google.protobuf.message.Message):
    """A conversion adjustment."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONVERSION_ACTION_FIELD_NUMBER: builtins.int
    ADJUSTMENT_DATE_TIME_FIELD_NUMBER: builtins.int
    ADJUSTMENT_TYPE_FIELD_NUMBER: builtins.int
    RESTATEMENT_VALUE_FIELD_NUMBER: builtins.int
    GCLID_DATE_TIME_PAIR_FIELD_NUMBER: builtins.int
    ORDER_ID_FIELD_NUMBER: builtins.int
    conversion_action: typing.Text = ...
    """Resource name of the conversion action associated with this conversion
    adjustment. Note: Although this resource name consists of a customer id and
    a conversion action id, validation will ignore the customer id and use the
    conversion action id as the sole identifier of the conversion action.
    """

    adjustment_date_time: typing.Text = ...
    """The date time at which the adjustment occurred. Must be after the
    conversion_date_time. The timezone must be specified. The format is
    "yyyy-mm-dd hh:mm:ss+|-hh:mm", e.g. "2019-01-01 12:32:45-08:00".
    """

    adjustment_type: google.ads.googleads.v7.enums.conversion_adjustment_type_pb2.ConversionAdjustmentTypeEnum.ConversionAdjustmentType.ValueType = ...
    """The adjustment type."""

    @property
    def restatement_value(self) -> global___RestatementValue:
        """Information needed to restate the conversion's value.
        Required for restatements. Should not be supplied for retractions. An error
        will be returned if provided for a retraction.
        NOTE: If you want to upload a second restatement with a different adjusted
        value, it must have a new, more recent, adjustment occurrence time.
        Otherwise, it will be treated as a duplicate of the previous restatement
        and ignored.
        """
        pass
    @property
    def gclid_date_time_pair(self) -> global___GclidDateTimePair:
        """Uniquely identifies a conversion that was reported without an order ID
        specified.
        """
        pass
    order_id: typing.Text = ...
    """The order ID of the conversion to be adjusted. If the conversion was
    reported with an order ID specified, that order ID must be used as the
    identifier here.
    """

    def __init__(self,
        *,
        conversion_action : typing.Optional[typing.Text] = ...,
        adjustment_date_time : typing.Optional[typing.Text] = ...,
        adjustment_type : google.ads.googleads.v7.enums.conversion_adjustment_type_pb2.ConversionAdjustmentTypeEnum.ConversionAdjustmentType.ValueType = ...,
        restatement_value : typing.Optional[global___RestatementValue] = ...,
        gclid_date_time_pair : typing.Optional[global___GclidDateTimePair] = ...,
        order_id : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_adjustment_date_time",b"_adjustment_date_time","_conversion_action",b"_conversion_action","adjustment_date_time",b"adjustment_date_time","conversion_action",b"conversion_action","conversion_identifier",b"conversion_identifier","gclid_date_time_pair",b"gclid_date_time_pair","order_id",b"order_id","restatement_value",b"restatement_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_adjustment_date_time",b"_adjustment_date_time","_conversion_action",b"_conversion_action","adjustment_date_time",b"adjustment_date_time","adjustment_type",b"adjustment_type","conversion_action",b"conversion_action","conversion_identifier",b"conversion_identifier","gclid_date_time_pair",b"gclid_date_time_pair","order_id",b"order_id","restatement_value",b"restatement_value"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_adjustment_date_time",b"_adjustment_date_time"]) -> typing.Optional[typing_extensions.Literal["adjustment_date_time"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_conversion_action",b"_conversion_action"]) -> typing.Optional[typing_extensions.Literal["conversion_action"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["conversion_identifier",b"conversion_identifier"]) -> typing.Optional[typing_extensions.Literal["gclid_date_time_pair","order_id"]]: ...
global___ConversionAdjustment = ConversionAdjustment

class RestatementValue(google.protobuf.message.Message):
    """Contains information needed to restate a conversion's value."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADJUSTED_VALUE_FIELD_NUMBER: builtins.int
    CURRENCY_CODE_FIELD_NUMBER: builtins.int
    adjusted_value: builtins.float = ...
    """The restated conversion value. This is the value of the conversion after
    restatement. For example, to change the value of a conversion from 100 to
    70, an adjusted value of 70 should be reported.
    NOTE: If you want to upload a second restatement with a different adjusted
    value, it must have a new, more recent, adjustment occurrence time.
    Otherwise, it will be treated as a duplicate of the previous restatement
    and ignored.
    """

    currency_code: typing.Text = ...
    """The currency of the restated value. If not provided, then the default
    currency from the conversion action is used, and if that is not set then
    the account currency is used. This is the ISO 4217 3-character currency
    code e.g. USD or EUR.
    """

    def __init__(self,
        *,
        adjusted_value : typing.Optional[builtins.float] = ...,
        currency_code : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_adjusted_value",b"_adjusted_value","_currency_code",b"_currency_code","adjusted_value",b"adjusted_value","currency_code",b"currency_code"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_adjusted_value",b"_adjusted_value","_currency_code",b"_currency_code","adjusted_value",b"adjusted_value","currency_code",b"currency_code"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_adjusted_value",b"_adjusted_value"]) -> typing.Optional[typing_extensions.Literal["adjusted_value"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_currency_code",b"_currency_code"]) -> typing.Optional[typing_extensions.Literal["currency_code"]]: ...
global___RestatementValue = RestatementValue

class GclidDateTimePair(google.protobuf.message.Message):
    """Uniquely identifies a conversion that was reported without an order ID
    specified.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GCLID_FIELD_NUMBER: builtins.int
    CONVERSION_DATE_TIME_FIELD_NUMBER: builtins.int
    gclid: typing.Text = ...
    """Google click ID (gclid) associated with the original conversion for this
    adjustment.
    """

    conversion_date_time: typing.Text = ...
    """The date time at which the original conversion for this adjustment
    occurred. The timezone must be specified. The format is "yyyy-mm-dd
    hh:mm:ss+|-hh:mm", e.g. "2019-01-01 12:32:45-08:00".
    """

    def __init__(self,
        *,
        gclid : typing.Optional[typing.Text] = ...,
        conversion_date_time : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_conversion_date_time",b"_conversion_date_time","_gclid",b"_gclid","conversion_date_time",b"conversion_date_time","gclid",b"gclid"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_conversion_date_time",b"_conversion_date_time","_gclid",b"_gclid","conversion_date_time",b"conversion_date_time","gclid",b"gclid"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_conversion_date_time",b"_conversion_date_time"]) -> typing.Optional[typing_extensions.Literal["conversion_date_time"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gclid",b"_gclid"]) -> typing.Optional[typing_extensions.Literal["gclid"]]: ...
global___GclidDateTimePair = GclidDateTimePair

class ConversionAdjustmentResult(google.protobuf.message.Message):
    """Information identifying a successfully processed ConversionAdjustment."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONVERSION_ACTION_FIELD_NUMBER: builtins.int
    ADJUSTMENT_DATE_TIME_FIELD_NUMBER: builtins.int
    ADJUSTMENT_TYPE_FIELD_NUMBER: builtins.int
    GCLID_DATE_TIME_PAIR_FIELD_NUMBER: builtins.int
    ORDER_ID_FIELD_NUMBER: builtins.int
    conversion_action: typing.Text = ...
    """Resource name of the conversion action associated with this conversion
    adjustment.
    """

    adjustment_date_time: typing.Text = ...
    """The date time at which the adjustment occurred. The format is
    "yyyy-mm-dd hh:mm:ss+|-hh:mm", e.g. "2019-01-01 12:32:45-08:00".
    """

    adjustment_type: google.ads.googleads.v7.enums.conversion_adjustment_type_pb2.ConversionAdjustmentTypeEnum.ConversionAdjustmentType.ValueType = ...
    """The adjustment type."""

    @property
    def gclid_date_time_pair(self) -> global___GclidDateTimePair:
        """Uniquely identifies a conversion that was reported without an order ID
        specified.
        """
        pass
    order_id: typing.Text = ...
    """The order ID of the conversion that was adjusted."""

    def __init__(self,
        *,
        conversion_action : typing.Optional[typing.Text] = ...,
        adjustment_date_time : typing.Optional[typing.Text] = ...,
        adjustment_type : google.ads.googleads.v7.enums.conversion_adjustment_type_pb2.ConversionAdjustmentTypeEnum.ConversionAdjustmentType.ValueType = ...,
        gclid_date_time_pair : typing.Optional[global___GclidDateTimePair] = ...,
        order_id : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_adjustment_date_time",b"_adjustment_date_time","_conversion_action",b"_conversion_action","adjustment_date_time",b"adjustment_date_time","conversion_action",b"conversion_action","conversion_identifier",b"conversion_identifier","gclid_date_time_pair",b"gclid_date_time_pair","order_id",b"order_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_adjustment_date_time",b"_adjustment_date_time","_conversion_action",b"_conversion_action","adjustment_date_time",b"adjustment_date_time","adjustment_type",b"adjustment_type","conversion_action",b"conversion_action","conversion_identifier",b"conversion_identifier","gclid_date_time_pair",b"gclid_date_time_pair","order_id",b"order_id"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_adjustment_date_time",b"_adjustment_date_time"]) -> typing.Optional[typing_extensions.Literal["adjustment_date_time"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_conversion_action",b"_conversion_action"]) -> typing.Optional[typing_extensions.Literal["conversion_action"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["conversion_identifier",b"conversion_identifier"]) -> typing.Optional[typing_extensions.Literal["gclid_date_time_pair","order_id"]]: ...
global___ConversionAdjustmentResult = ConversionAdjustmentResult
