"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Request(google.protobuf.message.Message):
    """The message used by the client to register interest in an entity."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TARGET_FIELD_NUMBER: builtins.int
    RESUME_MARKER_FIELD_NUMBER: builtins.int
    target: typing.Text = ...
    """The `target` value **must** be a valid URL path pointing to an entity
    to watch. Note that the service name **must** be
    removed from the target field (e.g., the target field must say
    "/foo/bar", not "myservice.googleapis.com/foo/bar"). A client is
    also allowed to pass system-specific parameters in the URL that
    are only obeyed by some implementations. Some parameters will be
    implementation-specific. However, some have predefined meaning
    and are listed here:

     * recursive = true|false [default=false]
       If set to true, indicates that the client wants to watch all elements
       of entities in the subtree rooted at the entity's name in `target`. For
       descendants that are not the immediate children of the target, the
       `Change.element` will contain slashes.

       Note that some namespaces and entities will not support recursive
       watching. When watching such an entity, a client must not set recursive
       to true. Otherwise, it will receive an `UNIMPLEMENTED` error.

    Normal URL encoding must be used inside `target`.  For example, if a query
    parameter name or value, or the non-query parameter portion of `target`
    contains a special character, it must be %-encoded.  We recommend that
    clients and servers use their runtime's URL library to produce and consume
    target values.
    """

    resume_marker: builtins.bytes = ...
    """The `resume_marker` specifies how much of the existing underlying state is
    delivered to the client when the watch request is received by the
    system. The client can set this marker in one of the following ways to get
    different semantics:

    *   Parameter is not specified or has the value "".
        Semantics: Fetch initial state.
        The client wants the entity's initial state to be delivered. See the
        description in "Initial State".

    *   Parameter is set to the string "now" (UTF-8 encoding).
        Semantics: Fetch new changes only.
        The client just wants to get the changes received by the system after
        the watch point. The system may deliver changes from before the watch
        point as well.

    *   Parameter is set to a value received in an earlier
        `Change.resume_marker` field while watching the same entity.
        Semantics: Resume from a specific point.
        The client wants to receive the changes from a specific point; this
        value must correspond to a value received in the `Change.resume_marker`
        field. The system may deliver changes from before the `resume_marker`
        as well. If the system cannot resume the stream from this point (e.g.,
        if it is too far behind in the stream), it can raise the
        `FAILED_PRECONDITION` error.

    An implementation MUST support an unspecified parameter and the
    empty string "" marker (initial state fetching) and the "now" marker.
    It need not support resuming from a specific point.
    """

    def __init__(self,
        *,
        target : typing.Text = ...,
        resume_marker : builtins.bytes = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["resume_marker",b"resume_marker","target",b"target"]) -> None: ...
global___Request = Request

class ChangeBatch(google.protobuf.message.Message):
    """A batch of Change messages."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CHANGES_FIELD_NUMBER: builtins.int
    @property
    def changes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Change]:
        """A list of Change messages."""
        pass
    def __init__(self,
        *,
        changes : typing.Optional[typing.Iterable[global___Change]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["changes",b"changes"]) -> None: ...
global___ChangeBatch = ChangeBatch

class Change(google.protobuf.message.Message):
    """A Change indicates the most recent state of an element."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _State:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_State.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        EXISTS: Change.State.ValueType = ...  # 0
        """The element exists and its full value is included in data."""

        DOES_NOT_EXIST: Change.State.ValueType = ...  # 1
        """The element does not exist."""

        INITIAL_STATE_SKIPPED: Change.State.ValueType = ...  # 2
        """Element may or may not exist. Used only for initial state delivery when
        the client is not interested in fetching the initial state. See the
        "Initial State" section above.
        """

        ERROR: Change.State.ValueType = ...  # 3
        """The element may exist, but some error has occurred. More information is
        available in the data field - the value is a serialized Status
        proto (from [google.rpc.Status][])
        """

    class State(_State, metaclass=_StateEnumTypeWrapper):
        """A reported value can be in one of the following states:"""
        pass

    EXISTS: Change.State.ValueType = ...  # 0
    """The element exists and its full value is included in data."""

    DOES_NOT_EXIST: Change.State.ValueType = ...  # 1
    """The element does not exist."""

    INITIAL_STATE_SKIPPED: Change.State.ValueType = ...  # 2
    """Element may or may not exist. Used only for initial state delivery when
    the client is not interested in fetching the initial state. See the
    "Initial State" section above.
    """

    ERROR: Change.State.ValueType = ...  # 3
    """The element may exist, but some error has occurred. More information is
    available in the data field - the value is a serialized Status
    proto (from [google.rpc.Status][])
    """


    ELEMENT_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    RESUME_MARKER_FIELD_NUMBER: builtins.int
    CONTINUED_FIELD_NUMBER: builtins.int
    element: typing.Text = ...
    """Name of the element, interpreted relative to the entity's actual
    name. "" refers to the entity itself. The element name is a valid
    UTF-8 string.
    """

    state: global___Change.State.ValueType = ...
    """The state of the `element`."""

    @property
    def data(self) -> google.protobuf.any_pb2.Any:
        """The actual change data. This field is present only when `state() == EXISTS`
        or `state() == ERROR`. Please see
        [google.protobuf.Any][google.protobuf.Any] about how to use the Any type.
        """
        pass
    resume_marker: builtins.bytes = ...
    """If present, provides a compact representation of all the messages that have
    been received by the caller for the given entity, e.g., it could be a
    sequence number or a multi-part timestamp/version vector. This marker can
    be provided in the Request message, allowing the caller to resume the
    stream watching at a specific point without fetching the initial state.
    """

    continued: builtins.bool = ...
    """If true, this Change is followed by more Changes that are in the same group
    as this Change.
    """

    def __init__(self,
        *,
        element : typing.Text = ...,
        state : global___Change.State.ValueType = ...,
        data : typing.Optional[google.protobuf.any_pb2.Any] = ...,
        resume_marker : builtins.bytes = ...,
        continued : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["data",b"data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["continued",b"continued","data",b"data","element",b"element","resume_marker",b"resume_marker","state",b"state"]) -> None: ...
global___Change = Change
