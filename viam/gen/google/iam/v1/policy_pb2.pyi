"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.type.expr_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Policy(google.protobuf.message.Message):
    """Defines an Identity and Access Management (IAM) policy. It is used to
    specify access control policies for Cloud Platform resources.


    A `Policy` is a collection of `bindings`. A `binding` binds one or more
    `members` to a single `role`. Members can be user accounts, service accounts,
    Google groups, and domains (such as G Suite). A `role` is a named list of
    permissions (defined by IAM or configured by users). A `binding` can
    optionally specify a `condition`, which is a logic expression that further
    constrains the role binding based on attributes about the request and/or
    target resource.

    **JSON Example**

        {
          "bindings": [
            {
              "role": "roles/resourcemanager.organizationAdmin",
              "members": [
                "user:mike@example.com",
                "group:admins@example.com",
                "domain:google.com",
                "serviceAccount:my-project-id@appspot.gserviceaccount.com"
              ]
            },
            {
              "role": "roles/resourcemanager.organizationViewer",
              "members": ["user:eve@example.com"],
              "condition": {
                "title": "expirable access",
                "description": "Does not grant access after Sep 2020",
                "expression": "request.time <
                timestamp('2020-10-01T00:00:00.000Z')",
              }
            }
          ]
        }

    **YAML Example**

        bindings:
        - members:
          - user:mike@example.com
          - group:admins@example.com
          - domain:google.com
          - serviceAccount:my-project-id@appspot.gserviceaccount.com
          role: roles/resourcemanager.organizationAdmin
        - members:
          - user:eve@example.com
          role: roles/resourcemanager.organizationViewer
          condition:
            title: expirable access
            description: Does not grant access after Sep 2020
            expression: request.time < timestamp('2020-10-01T00:00:00.000Z')

    For a description of IAM and its features, see the
    [IAM developer's guide](https://cloud.google.com/iam/docs).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VERSION_FIELD_NUMBER: builtins.int
    BINDINGS_FIELD_NUMBER: builtins.int
    ETAG_FIELD_NUMBER: builtins.int
    version: builtins.int = ...
    """Specifies the format of the policy.

    Valid values are 0, 1, and 3. Requests specifying an invalid value will be
    rejected.

    Operations affecting conditional bindings must specify version 3. This can
    be either setting a conditional policy, modifying a conditional binding,
    or removing a binding (conditional or unconditional) from the stored
    conditional policy.
    Operations on non-conditional policies may specify any valid value or
    leave the field unset.

    If no etag is provided in the call to `setIamPolicy`, version compliance
    checks against the stored policy is skipped.
    """

    @property
    def bindings(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Binding]:
        """Associates a list of `members` to a `role`. Optionally may specify a
        `condition` that determines when binding is in effect.
        `bindings` with no members will result in an error.
        """
        pass
    etag: builtins.bytes = ...
    """`etag` is used for optimistic concurrency control as a way to help
    prevent simultaneous updates of a policy from overwriting each other.
    It is strongly suggested that systems make use of the `etag` in the
    read-modify-write cycle to perform policy updates in order to avoid race
    conditions: An `etag` is returned in the response to `getIamPolicy`, and
    systems are expected to put that etag in the request to `setIamPolicy` to
    ensure that their change will be applied to the same version of the policy.

    If no `etag` is provided in the call to `setIamPolicy`, then the existing
    policy is overwritten. Due to blind-set semantics of an etag-less policy,
    'setIamPolicy' will not fail even if the incoming policy version does not
    meet the requirements for modifying the stored policy.
    """

    def __init__(self,
        *,
        version : builtins.int = ...,
        bindings : typing.Optional[typing.Iterable[global___Binding]] = ...,
        etag : builtins.bytes = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["bindings",b"bindings","etag",b"etag","version",b"version"]) -> None: ...
global___Policy = Policy

class Binding(google.protobuf.message.Message):
    """Associates `members` with a `role`."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ROLE_FIELD_NUMBER: builtins.int
    MEMBERS_FIELD_NUMBER: builtins.int
    CONDITION_FIELD_NUMBER: builtins.int
    role: typing.Text = ...
    """Role that is assigned to `members`.
    For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
    """

    @property
    def members(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Specifies the identities requesting access for a Cloud Platform resource.
        `members` can have the following values:

        * `allUsers`: A special identifier that represents anyone who is
           on the internet; with or without a Google account.

        * `allAuthenticatedUsers`: A special identifier that represents anyone
           who is authenticated with a Google account or a service account.

        * `user:{emailid}`: An email address that represents a specific Google
           account. For example, `alice@example.com` .


        * `serviceAccount:{emailid}`: An email address that represents a service
           account. For example, `my-other-app@appspot.gserviceaccount.com`.

        * `group:{emailid}`: An email address that represents a Google group.
           For example, `admins@example.com`.


        * `domain:{domain}`: The G Suite domain (primary) that represents all the
           users of that domain. For example, `google.com` or `example.com`.
        """
        pass
    @property
    def condition(self) -> google.type.expr_pb2.Expr:
        """The condition that is associated with this binding.
        NOTE: An unsatisfied condition will not allow user access via current
        binding. Different bindings, including their conditions, are examined
        independently.
        """
        pass
    def __init__(self,
        *,
        role : typing.Text = ...,
        members : typing.Optional[typing.Iterable[typing.Text]] = ...,
        condition : typing.Optional[google.type.expr_pb2.Expr] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["condition",b"condition"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["condition",b"condition","members",b"members","role",b"role"]) -> None: ...
global___Binding = Binding

class PolicyDelta(google.protobuf.message.Message):
    """The difference delta between two policies."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BINDING_DELTAS_FIELD_NUMBER: builtins.int
    AUDIT_CONFIG_DELTAS_FIELD_NUMBER: builtins.int
    @property
    def binding_deltas(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___BindingDelta]:
        """The delta for Bindings between two policies."""
        pass
    @property
    def audit_config_deltas(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AuditConfigDelta]:
        """The delta for AuditConfigs between two policies."""
        pass
    def __init__(self,
        *,
        binding_deltas : typing.Optional[typing.Iterable[global___BindingDelta]] = ...,
        audit_config_deltas : typing.Optional[typing.Iterable[global___AuditConfigDelta]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["audit_config_deltas",b"audit_config_deltas","binding_deltas",b"binding_deltas"]) -> None: ...
global___PolicyDelta = PolicyDelta

class BindingDelta(google.protobuf.message.Message):
    """One delta entry for Binding. Each individual change (only one member in each
    entry) to a binding will be a separate entry.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Action:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ActionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Action.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        ACTION_UNSPECIFIED: BindingDelta.Action.ValueType = ...  # 0
        """Unspecified."""

        ADD: BindingDelta.Action.ValueType = ...  # 1
        """Addition of a Binding."""

        REMOVE: BindingDelta.Action.ValueType = ...  # 2
        """Removal of a Binding."""

    class Action(_Action, metaclass=_ActionEnumTypeWrapper):
        """The type of action performed on a Binding in a policy."""
        pass

    ACTION_UNSPECIFIED: BindingDelta.Action.ValueType = ...  # 0
    """Unspecified."""

    ADD: BindingDelta.Action.ValueType = ...  # 1
    """Addition of a Binding."""

    REMOVE: BindingDelta.Action.ValueType = ...  # 2
    """Removal of a Binding."""


    ACTION_FIELD_NUMBER: builtins.int
    ROLE_FIELD_NUMBER: builtins.int
    MEMBER_FIELD_NUMBER: builtins.int
    CONDITION_FIELD_NUMBER: builtins.int
    action: global___BindingDelta.Action.ValueType = ...
    """The action that was performed on a Binding.
    Required
    """

    role: typing.Text = ...
    """Role that is assigned to `members`.
    For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
    Required
    """

    member: typing.Text = ...
    """A single identity requesting access for a Cloud Platform resource.
    Follows the same format of Binding.members.
    Required
    """

    @property
    def condition(self) -> google.type.expr_pb2.Expr:
        """The condition that is associated with this binding."""
        pass
    def __init__(self,
        *,
        action : global___BindingDelta.Action.ValueType = ...,
        role : typing.Text = ...,
        member : typing.Text = ...,
        condition : typing.Optional[google.type.expr_pb2.Expr] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["condition",b"condition"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["action",b"action","condition",b"condition","member",b"member","role",b"role"]) -> None: ...
global___BindingDelta = BindingDelta

class AuditConfigDelta(google.protobuf.message.Message):
    """One delta entry for AuditConfig. Each individual change (only one
    exempted_member in each entry) to a AuditConfig will be a separate entry.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Action:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ActionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Action.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        ACTION_UNSPECIFIED: AuditConfigDelta.Action.ValueType = ...  # 0
        """Unspecified."""

        ADD: AuditConfigDelta.Action.ValueType = ...  # 1
        """Addition of an audit configuration."""

        REMOVE: AuditConfigDelta.Action.ValueType = ...  # 2
        """Removal of an audit configuration."""

    class Action(_Action, metaclass=_ActionEnumTypeWrapper):
        """The type of action performed on an audit configuration in a policy."""
        pass

    ACTION_UNSPECIFIED: AuditConfigDelta.Action.ValueType = ...  # 0
    """Unspecified."""

    ADD: AuditConfigDelta.Action.ValueType = ...  # 1
    """Addition of an audit configuration."""

    REMOVE: AuditConfigDelta.Action.ValueType = ...  # 2
    """Removal of an audit configuration."""


    ACTION_FIELD_NUMBER: builtins.int
    SERVICE_FIELD_NUMBER: builtins.int
    EXEMPTED_MEMBER_FIELD_NUMBER: builtins.int
    LOG_TYPE_FIELD_NUMBER: builtins.int
    action: global___AuditConfigDelta.Action.ValueType = ...
    """The action that was performed on an audit configuration in a policy.
    Required
    """

    service: typing.Text = ...
    """Specifies a service that was configured for Cloud Audit Logging.
    For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
    `allServices` is a special value that covers all services.
    Required
    """

    exempted_member: typing.Text = ...
    """A single identity that is exempted from "data access" audit
    logging for the `service` specified above.
    Follows the same format of Binding.members.
    """

    log_type: typing.Text = ...
    """Specifies the log_type that was be enabled. ADMIN_ACTIVITY is always
    enabled, and cannot be configured.
    Required
    """

    def __init__(self,
        *,
        action : global___AuditConfigDelta.Action.ValueType = ...,
        service : typing.Text = ...,
        exempted_member : typing.Text = ...,
        log_type : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["action",b"action","exempted_member",b"exempted_member","log_type",b"log_type","service",b"service"]) -> None: ...
global___AuditConfigDelta = AuditConfigDelta
