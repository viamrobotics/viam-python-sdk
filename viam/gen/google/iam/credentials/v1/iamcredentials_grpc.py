# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: google/iam/credentials/v1/iamcredentials.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.api.client_pb2
import google.iam.credentials.v1.common_pb2
import google.iam.credentials.v1.iamcredentials_pb2


class IAMCredentialsBase(abc.ABC):

    @abc.abstractmethod
    async def GenerateAccessToken(self, stream: 'grpclib.server.Stream[google.iam.credentials.v1.common_pb2.GenerateAccessTokenRequest, google.iam.credentials.v1.common_pb2.GenerateAccessTokenResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GenerateIdToken(self, stream: 'grpclib.server.Stream[google.iam.credentials.v1.common_pb2.GenerateIdTokenRequest, google.iam.credentials.v1.common_pb2.GenerateIdTokenResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SignBlob(self, stream: 'grpclib.server.Stream[google.iam.credentials.v1.common_pb2.SignBlobRequest, google.iam.credentials.v1.common_pb2.SignBlobResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SignJwt(self, stream: 'grpclib.server.Stream[google.iam.credentials.v1.common_pb2.SignJwtRequest, google.iam.credentials.v1.common_pb2.SignJwtResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/google.iam.credentials.v1.IAMCredentials/GenerateAccessToken': grpclib.const.Handler(
                self.GenerateAccessToken,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.iam.credentials.v1.common_pb2.GenerateAccessTokenRequest,
                google.iam.credentials.v1.common_pb2.GenerateAccessTokenResponse,
            ),
            '/google.iam.credentials.v1.IAMCredentials/GenerateIdToken': grpclib.const.Handler(
                self.GenerateIdToken,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.iam.credentials.v1.common_pb2.GenerateIdTokenRequest,
                google.iam.credentials.v1.common_pb2.GenerateIdTokenResponse,
            ),
            '/google.iam.credentials.v1.IAMCredentials/SignBlob': grpclib.const.Handler(
                self.SignBlob,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.iam.credentials.v1.common_pb2.SignBlobRequest,
                google.iam.credentials.v1.common_pb2.SignBlobResponse,
            ),
            '/google.iam.credentials.v1.IAMCredentials/SignJwt': grpclib.const.Handler(
                self.SignJwt,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.iam.credentials.v1.common_pb2.SignJwtRequest,
                google.iam.credentials.v1.common_pb2.SignJwtResponse,
            ),
        }


class IAMCredentialsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GenerateAccessToken = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.iam.credentials.v1.IAMCredentials/GenerateAccessToken',
            google.iam.credentials.v1.common_pb2.GenerateAccessTokenRequest,
            google.iam.credentials.v1.common_pb2.GenerateAccessTokenResponse,
        )
        self.GenerateIdToken = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.iam.credentials.v1.IAMCredentials/GenerateIdToken',
            google.iam.credentials.v1.common_pb2.GenerateIdTokenRequest,
            google.iam.credentials.v1.common_pb2.GenerateIdTokenResponse,
        )
        self.SignBlob = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.iam.credentials.v1.IAMCredentials/SignBlob',
            google.iam.credentials.v1.common_pb2.SignBlobRequest,
            google.iam.credentials.v1.common_pb2.SignBlobResponse,
        )
        self.SignJwt = grpclib.client.UnaryUnaryMethod(
            channel,
            '/google.iam.credentials.v1.IAMCredentials/SignJwt',
            google.iam.credentials.v1.common_pb2.SignJwtRequest,
            google.iam.credentials.v1.common_pb2.SignJwtResponse,
        )
