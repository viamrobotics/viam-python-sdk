"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.analytics.data.v1beta.data_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class CheckCompatibilityRequest(google.protobuf.message.Message):
    """The request for compatibility information for a report's dimensions and
    metrics. Check compatibility provides a preview of the compatibility of a
    report; fields shared with the `runReport` request should be the same values
    as in your `runReport` request.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROPERTY_FIELD_NUMBER: builtins.int
    DIMENSIONS_FIELD_NUMBER: builtins.int
    METRICS_FIELD_NUMBER: builtins.int
    DIMENSION_FILTER_FIELD_NUMBER: builtins.int
    METRIC_FILTER_FIELD_NUMBER: builtins.int
    COMPATIBILITY_FILTER_FIELD_NUMBER: builtins.int
    property: typing.Text = ...
    """A Google Analytics GA4 property identifier whose events are tracked. To
    learn more, see [where to find your Property
    ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
    `property` should be the same value as in your `runReport` request.

    Example: properties/1234

    Set the Property ID to 0 for compatibility checking on dimensions and
    metrics common to all properties. In this special mode, this method will
    not return custom dimensions and metrics.
    """

    @property
    def dimensions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Dimension]:
        """The dimensions in this report. `dimensions` should be the same value as in
        your `runReport` request.
        """
        pass
    @property
    def metrics(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Metric]:
        """The metrics in this report. `metrics` should be the same value as in your
        `runReport` request.
        """
        pass
    @property
    def dimension_filter(self) -> google.analytics.data.v1beta.data_pb2.FilterExpression:
        """The filter clause of dimensions. `dimensionFilter` should be the same value
        as in your `runReport` request.
        """
        pass
    @property
    def metric_filter(self) -> google.analytics.data.v1beta.data_pb2.FilterExpression:
        """The filter clause of metrics. `metricFilter` should be the same value as in
        your `runReport` request
        """
        pass
    compatibility_filter: google.analytics.data.v1beta.data_pb2.Compatibility.ValueType = ...
    """Filters the dimensions and metrics in the response to just this
    compatibility. Commonly used as `”compatibilityFilter”: “COMPATIBLE”`
    to only return compatible dimensions & metrics.
    """

    def __init__(self,
        *,
        property : typing.Text = ...,
        dimensions : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Dimension]] = ...,
        metrics : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Metric]] = ...,
        dimension_filter : typing.Optional[google.analytics.data.v1beta.data_pb2.FilterExpression] = ...,
        metric_filter : typing.Optional[google.analytics.data.v1beta.data_pb2.FilterExpression] = ...,
        compatibility_filter : google.analytics.data.v1beta.data_pb2.Compatibility.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dimension_filter",b"dimension_filter","metric_filter",b"metric_filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["compatibility_filter",b"compatibility_filter","dimension_filter",b"dimension_filter","dimensions",b"dimensions","metric_filter",b"metric_filter","metrics",b"metrics","property",b"property"]) -> None: ...
global___CheckCompatibilityRequest = CheckCompatibilityRequest

class CheckCompatibilityResponse(google.protobuf.message.Message):
    """The compatibility response with the compatibility of each dimension & metric."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DIMENSION_COMPATIBILITIES_FIELD_NUMBER: builtins.int
    METRIC_COMPATIBILITIES_FIELD_NUMBER: builtins.int
    @property
    def dimension_compatibilities(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.DimensionCompatibility]:
        """The compatibility of each dimension."""
        pass
    @property
    def metric_compatibilities(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.MetricCompatibility]:
        """The compatibility of each metric."""
        pass
    def __init__(self,
        *,
        dimension_compatibilities : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.DimensionCompatibility]] = ...,
        metric_compatibilities : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.MetricCompatibility]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dimension_compatibilities",b"dimension_compatibilities","metric_compatibilities",b"metric_compatibilities"]) -> None: ...
global___CheckCompatibilityResponse = CheckCompatibilityResponse

class Metadata(google.protobuf.message.Message):
    """The dimensions and metrics currently accepted in reporting methods."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    DIMENSIONS_FIELD_NUMBER: builtins.int
    METRICS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Resource name of this metadata."""

    @property
    def dimensions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.DimensionMetadata]:
        """The dimension descriptions."""
        pass
    @property
    def metrics(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.MetricMetadata]:
        """The metric descriptions."""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        dimensions : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.DimensionMetadata]] = ...,
        metrics : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.MetricMetadata]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dimensions",b"dimensions","metrics",b"metrics","name",b"name"]) -> None: ...
global___Metadata = Metadata

class RunReportRequest(google.protobuf.message.Message):
    """The request to generate a report."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROPERTY_FIELD_NUMBER: builtins.int
    DIMENSIONS_FIELD_NUMBER: builtins.int
    METRICS_FIELD_NUMBER: builtins.int
    DATE_RANGES_FIELD_NUMBER: builtins.int
    DIMENSION_FILTER_FIELD_NUMBER: builtins.int
    METRIC_FILTER_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    LIMIT_FIELD_NUMBER: builtins.int
    METRIC_AGGREGATIONS_FIELD_NUMBER: builtins.int
    ORDER_BYS_FIELD_NUMBER: builtins.int
    CURRENCY_CODE_FIELD_NUMBER: builtins.int
    COHORT_SPEC_FIELD_NUMBER: builtins.int
    KEEP_EMPTY_ROWS_FIELD_NUMBER: builtins.int
    RETURN_PROPERTY_QUOTA_FIELD_NUMBER: builtins.int
    property: typing.Text = ...
    """A Google Analytics GA4 property identifier whose events are tracked.
    Specified in the URL path and not the body. To learn more, see [where to
    find your Property
    ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
    Within a batch request, this property should either be unspecified or
    consistent with the batch-level property.

    Example: properties/1234
    """

    @property
    def dimensions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Dimension]:
        """The dimensions requested and displayed."""
        pass
    @property
    def metrics(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Metric]:
        """The metrics requested and displayed."""
        pass
    @property
    def date_ranges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.DateRange]:
        """Date ranges of data to read. If multiple date ranges are requested, each
        response row will contain a zero based date range index. If two date
        ranges overlap, the event data for the overlapping days is included in the
        response rows for both date ranges. In a cohort request, this `dateRanges`
        must be unspecified.
        """
        pass
    @property
    def dimension_filter(self) -> google.analytics.data.v1beta.data_pb2.FilterExpression:
        """Dimension filters allow you to ask for only specific dimension values in
        the report. To learn more, see [Fundamentals of Dimension
        Filters](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#dimension_filters)
        for examples. Metrics cannot be used in this filter.
        """
        pass
    @property
    def metric_filter(self) -> google.analytics.data.v1beta.data_pb2.FilterExpression:
        """The filter clause of metrics. Applied at post aggregation phase, similar to
        SQL having-clause. Dimensions cannot be used in this filter.
        """
        pass
    offset: builtins.int = ...
    """The row count of the start row. The first row is counted as row 0.

    When paging, the first request does not specify offset; or equivalently,
    sets offset to 0; the first request returns the first `limit` of rows. The
    second request sets offset to the `limit` of the first request; the second
    request returns the second `limit` of rows.

    To learn more about this pagination parameter, see
    [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
    """

    limit: builtins.int = ...
    """The number of rows to return. If unspecified, 10,000 rows are returned. The
    API returns a maximum of 100,000 rows per request, no matter how many you
    ask for. `limit` must be positive.

    The API can also return fewer rows than the requested `limit`, if there
    aren't as many dimension values as the `limit`. For instance, there are
    fewer than 300 possible values for the dimension `country`, so when
    reporting on only `country`, you can't get more than 300 rows, even if you
    set `limit` to a higher value.

    To learn more about this pagination parameter, see
    [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
    """

    @property
    def metric_aggregations(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[google.analytics.data.v1beta.data_pb2.MetricAggregation.ValueType]:
        """Aggregation of metrics. Aggregated metric values will be shown in rows
        where the dimension_values are set to "RESERVED_(MetricAggregation)".
        """
        pass
    @property
    def order_bys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.OrderBy]:
        """Specifies how rows are ordered in the response."""
        pass
    currency_code: typing.Text = ...
    """A currency code in ISO4217 format, such as "AED", "USD", "JPY".
    If the field is empty, the report uses the property's default currency.
    """

    @property
    def cohort_spec(self) -> google.analytics.data.v1beta.data_pb2.CohortSpec:
        """Cohort group associated with this request. If there is a cohort group
        in the request the 'cohort' dimension must be present.
        """
        pass
    keep_empty_rows: builtins.bool = ...
    """If false or unspecified, each row with all metrics equal to 0 will not be
    returned. If true, these rows will be returned if they are not separately
    removed by a filter.
    """

    return_property_quota: builtins.bool = ...
    """Toggles whether to return the current state of this Analytics Property's
    quota. Quota is returned in [PropertyQuota](#PropertyQuota).
    """

    def __init__(self,
        *,
        property : typing.Text = ...,
        dimensions : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Dimension]] = ...,
        metrics : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Metric]] = ...,
        date_ranges : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.DateRange]] = ...,
        dimension_filter : typing.Optional[google.analytics.data.v1beta.data_pb2.FilterExpression] = ...,
        metric_filter : typing.Optional[google.analytics.data.v1beta.data_pb2.FilterExpression] = ...,
        offset : builtins.int = ...,
        limit : builtins.int = ...,
        metric_aggregations : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.MetricAggregation.ValueType]] = ...,
        order_bys : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.OrderBy]] = ...,
        currency_code : typing.Text = ...,
        cohort_spec : typing.Optional[google.analytics.data.v1beta.data_pb2.CohortSpec] = ...,
        keep_empty_rows : builtins.bool = ...,
        return_property_quota : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cohort_spec",b"cohort_spec","dimension_filter",b"dimension_filter","metric_filter",b"metric_filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cohort_spec",b"cohort_spec","currency_code",b"currency_code","date_ranges",b"date_ranges","dimension_filter",b"dimension_filter","dimensions",b"dimensions","keep_empty_rows",b"keep_empty_rows","limit",b"limit","metric_aggregations",b"metric_aggregations","metric_filter",b"metric_filter","metrics",b"metrics","offset",b"offset","order_bys",b"order_bys","property",b"property","return_property_quota",b"return_property_quota"]) -> None: ...
global___RunReportRequest = RunReportRequest

class RunReportResponse(google.protobuf.message.Message):
    """The response report table corresponding to a request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DIMENSION_HEADERS_FIELD_NUMBER: builtins.int
    METRIC_HEADERS_FIELD_NUMBER: builtins.int
    ROWS_FIELD_NUMBER: builtins.int
    TOTALS_FIELD_NUMBER: builtins.int
    MAXIMUMS_FIELD_NUMBER: builtins.int
    MINIMUMS_FIELD_NUMBER: builtins.int
    ROW_COUNT_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    PROPERTY_QUOTA_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    @property
    def dimension_headers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.DimensionHeader]:
        """Describes dimension columns. The number of DimensionHeaders and ordering of
        DimensionHeaders matches the dimensions present in rows.
        """
        pass
    @property
    def metric_headers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.MetricHeader]:
        """Describes metric columns. The number of MetricHeaders and ordering of
        MetricHeaders matches the metrics present in rows.
        """
        pass
    @property
    def rows(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Row]:
        """Rows of dimension value combinations and metric values in the report."""
        pass
    @property
    def totals(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Row]:
        """If requested, the totaled values of metrics."""
        pass
    @property
    def maximums(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Row]:
        """If requested, the maximum values of metrics."""
        pass
    @property
    def minimums(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Row]:
        """If requested, the minimum values of metrics."""
        pass
    row_count: builtins.int = ...
    """The total number of rows in the query result. `rowCount` is independent of
    the number of rows returned in the response, the `limit` request
    parameter, and the `offset` request parameter. For example if a query
    returns 175 rows and includes `limit` of 50 in the API request, the
    response will contain `rowCount` of 175 but only 50 rows.

    To learn more about this pagination parameter, see
    [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
    """

    @property
    def metadata(self) -> google.analytics.data.v1beta.data_pb2.ResponseMetaData:
        """Metadata for the report."""
        pass
    @property
    def property_quota(self) -> google.analytics.data.v1beta.data_pb2.PropertyQuota:
        """This Analytics Property's quota state including this request."""
        pass
    kind: typing.Text = ...
    """Identifies what kind of resource this message is. This `kind` is always the
    fixed string "analyticsData#runReport". Useful to distinguish between
    response types in JSON.
    """

    def __init__(self,
        *,
        dimension_headers : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.DimensionHeader]] = ...,
        metric_headers : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.MetricHeader]] = ...,
        rows : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Row]] = ...,
        totals : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Row]] = ...,
        maximums : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Row]] = ...,
        minimums : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Row]] = ...,
        row_count : builtins.int = ...,
        metadata : typing.Optional[google.analytics.data.v1beta.data_pb2.ResponseMetaData] = ...,
        property_quota : typing.Optional[google.analytics.data.v1beta.data_pb2.PropertyQuota] = ...,
        kind : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["metadata",b"metadata","property_quota",b"property_quota"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dimension_headers",b"dimension_headers","kind",b"kind","maximums",b"maximums","metadata",b"metadata","metric_headers",b"metric_headers","minimums",b"minimums","property_quota",b"property_quota","row_count",b"row_count","rows",b"rows","totals",b"totals"]) -> None: ...
global___RunReportResponse = RunReportResponse

class RunPivotReportRequest(google.protobuf.message.Message):
    """The request to generate a pivot report."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROPERTY_FIELD_NUMBER: builtins.int
    DIMENSIONS_FIELD_NUMBER: builtins.int
    METRICS_FIELD_NUMBER: builtins.int
    DATE_RANGES_FIELD_NUMBER: builtins.int
    PIVOTS_FIELD_NUMBER: builtins.int
    DIMENSION_FILTER_FIELD_NUMBER: builtins.int
    METRIC_FILTER_FIELD_NUMBER: builtins.int
    CURRENCY_CODE_FIELD_NUMBER: builtins.int
    COHORT_SPEC_FIELD_NUMBER: builtins.int
    KEEP_EMPTY_ROWS_FIELD_NUMBER: builtins.int
    RETURN_PROPERTY_QUOTA_FIELD_NUMBER: builtins.int
    property: typing.Text = ...
    """A Google Analytics GA4 property identifier whose events are tracked.
    Specified in the URL path and not the body. To learn more, see [where to
    find your Property
    ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
    Within a batch request, this property should either be unspecified or
    consistent with the batch-level property.

    Example: properties/1234
    """

    @property
    def dimensions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Dimension]:
        """The dimensions requested. All defined dimensions must be used by one of the
        following: dimension_expression, dimension_filter, pivots, order_bys.
        """
        pass
    @property
    def metrics(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Metric]:
        """The metrics requested, at least one metric needs to be specified. All
        defined metrics must be used by one of the following: metric_expression,
        metric_filter, order_bys.
        """
        pass
    @property
    def date_ranges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.DateRange]:
        """The date range to retrieve event data for the report. If multiple date
        ranges are specified, event data from each date range is used in the
        report. A special dimension with field name "dateRange" can be included in
        a Pivot's field names; if included, the report compares between date
        ranges. In a cohort request, this `dateRanges` must be unspecified.
        """
        pass
    @property
    def pivots(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Pivot]:
        """Describes the visual format of the report's dimensions in columns or rows.
        The union of the fieldNames (dimension names) in all pivots must be a
        subset of dimension names defined in Dimensions. No two pivots can share a
        dimension. A dimension is only visible if it appears in a pivot.
        """
        pass
    @property
    def dimension_filter(self) -> google.analytics.data.v1beta.data_pb2.FilterExpression:
        """The filter clause of dimensions. Dimensions must be requested to be used in
        this filter. Metrics cannot be used in this filter.
        """
        pass
    @property
    def metric_filter(self) -> google.analytics.data.v1beta.data_pb2.FilterExpression:
        """The filter clause of metrics. Applied at post aggregation phase, similar to
        SQL having-clause. Metrics must be requested to be used in this filter.
        Dimensions cannot be used in this filter.
        """
        pass
    currency_code: typing.Text = ...
    """A currency code in ISO4217 format, such as "AED", "USD", "JPY".
    If the field is empty, the report uses the property's default currency.
    """

    @property
    def cohort_spec(self) -> google.analytics.data.v1beta.data_pb2.CohortSpec:
        """Cohort group associated with this request. If there is a cohort group
        in the request the 'cohort' dimension must be present.
        """
        pass
    keep_empty_rows: builtins.bool = ...
    """If false or unspecified, each row with all metrics equal to 0 will not be
    returned. If true, these rows will be returned if they are not separately
    removed by a filter.
    """

    return_property_quota: builtins.bool = ...
    """Toggles whether to return the current state of this Analytics Property's
    quota. Quota is returned in [PropertyQuota](#PropertyQuota).
    """

    def __init__(self,
        *,
        property : typing.Text = ...,
        dimensions : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Dimension]] = ...,
        metrics : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Metric]] = ...,
        date_ranges : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.DateRange]] = ...,
        pivots : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Pivot]] = ...,
        dimension_filter : typing.Optional[google.analytics.data.v1beta.data_pb2.FilterExpression] = ...,
        metric_filter : typing.Optional[google.analytics.data.v1beta.data_pb2.FilterExpression] = ...,
        currency_code : typing.Text = ...,
        cohort_spec : typing.Optional[google.analytics.data.v1beta.data_pb2.CohortSpec] = ...,
        keep_empty_rows : builtins.bool = ...,
        return_property_quota : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cohort_spec",b"cohort_spec","dimension_filter",b"dimension_filter","metric_filter",b"metric_filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cohort_spec",b"cohort_spec","currency_code",b"currency_code","date_ranges",b"date_ranges","dimension_filter",b"dimension_filter","dimensions",b"dimensions","keep_empty_rows",b"keep_empty_rows","metric_filter",b"metric_filter","metrics",b"metrics","pivots",b"pivots","property",b"property","return_property_quota",b"return_property_quota"]) -> None: ...
global___RunPivotReportRequest = RunPivotReportRequest

class RunPivotReportResponse(google.protobuf.message.Message):
    """The response pivot report table corresponding to a pivot request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PIVOT_HEADERS_FIELD_NUMBER: builtins.int
    DIMENSION_HEADERS_FIELD_NUMBER: builtins.int
    METRIC_HEADERS_FIELD_NUMBER: builtins.int
    ROWS_FIELD_NUMBER: builtins.int
    AGGREGATES_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    PROPERTY_QUOTA_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    @property
    def pivot_headers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.PivotHeader]:
        """Summarizes the columns and rows created by a pivot. Each pivot in the
        request produces one header in the response. If we have a request like
        this:

            "pivots": [{
              "fieldNames": ["country",
                "city"]
            },
            {
              "fieldNames": "eventName"
            }]

        We will have the following `pivotHeaders` in the response:

            "pivotHeaders" : [{
              "dimensionHeaders": [{
                "dimensionValues": [
                   { "value": "United Kingdom" },
                   { "value": "London" }
                 ]
              },
              {
                "dimensionValues": [
                { "value": "Japan" },
                { "value": "Osaka" }
                ]
              }]
            },
            {
              "dimensionHeaders": [{
                "dimensionValues": [{ "value": "session_start" }]
              },
              {
                "dimensionValues": [{ "value": "scroll" }]
              }]
            }]
        """
        pass
    @property
    def dimension_headers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.DimensionHeader]:
        """Describes dimension columns. The number of DimensionHeaders and ordering of
        DimensionHeaders matches the dimensions present in rows.
        """
        pass
    @property
    def metric_headers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.MetricHeader]:
        """Describes metric columns. The number of MetricHeaders and ordering of
        MetricHeaders matches the metrics present in rows.
        """
        pass
    @property
    def rows(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Row]:
        """Rows of dimension value combinations and metric values in the report."""
        pass
    @property
    def aggregates(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Row]:
        """Aggregation of metric values. Can be totals, minimums, or maximums. The
        returned aggregations are controlled by the metric_aggregations in the
        pivot. The type of aggregation returned in each row is shown by the
        dimension_values which are set to "RESERVED_<MetricAggregation>".
        """
        pass
    @property
    def metadata(self) -> google.analytics.data.v1beta.data_pb2.ResponseMetaData:
        """Metadata for the report."""
        pass
    @property
    def property_quota(self) -> google.analytics.data.v1beta.data_pb2.PropertyQuota:
        """This Analytics Property's quota state including this request."""
        pass
    kind: typing.Text = ...
    """Identifies what kind of resource this message is. This `kind` is always the
    fixed string "analyticsData#runPivotReport". Useful to distinguish between
    response types in JSON.
    """

    def __init__(self,
        *,
        pivot_headers : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.PivotHeader]] = ...,
        dimension_headers : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.DimensionHeader]] = ...,
        metric_headers : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.MetricHeader]] = ...,
        rows : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Row]] = ...,
        aggregates : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Row]] = ...,
        metadata : typing.Optional[google.analytics.data.v1beta.data_pb2.ResponseMetaData] = ...,
        property_quota : typing.Optional[google.analytics.data.v1beta.data_pb2.PropertyQuota] = ...,
        kind : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["metadata",b"metadata","property_quota",b"property_quota"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["aggregates",b"aggregates","dimension_headers",b"dimension_headers","kind",b"kind","metadata",b"metadata","metric_headers",b"metric_headers","pivot_headers",b"pivot_headers","property_quota",b"property_quota","rows",b"rows"]) -> None: ...
global___RunPivotReportResponse = RunPivotReportResponse

class BatchRunReportsRequest(google.protobuf.message.Message):
    """The batch request containing multiple report requests."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROPERTY_FIELD_NUMBER: builtins.int
    REQUESTS_FIELD_NUMBER: builtins.int
    property: typing.Text = ...
    """A Google Analytics GA4 property identifier whose events are tracked.
    Specified in the URL path and not the body. To learn more, see [where to
    find your Property
    ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
    This property must be specified for the batch. The property within
    RunReportRequest may either be unspecified or consistent with this
    property.

    Example: properties/1234
    """

    @property
    def requests(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RunReportRequest]:
        """Individual requests. Each request has a separate report response. Each
        batch request is allowed up to 5 requests.
        """
        pass
    def __init__(self,
        *,
        property : typing.Text = ...,
        requests : typing.Optional[typing.Iterable[global___RunReportRequest]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["property",b"property","requests",b"requests"]) -> None: ...
global___BatchRunReportsRequest = BatchRunReportsRequest

class BatchRunReportsResponse(google.protobuf.message.Message):
    """The batch response containing multiple reports."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    REPORTS_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    @property
    def reports(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RunReportResponse]:
        """Individual responses. Each response has a separate report request."""
        pass
    kind: typing.Text = ...
    """Identifies what kind of resource this message is. This `kind` is always the
    fixed string "analyticsData#batchRunReports". Useful to distinguish between
    response types in JSON.
    """

    def __init__(self,
        *,
        reports : typing.Optional[typing.Iterable[global___RunReportResponse]] = ...,
        kind : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["kind",b"kind","reports",b"reports"]) -> None: ...
global___BatchRunReportsResponse = BatchRunReportsResponse

class BatchRunPivotReportsRequest(google.protobuf.message.Message):
    """The batch request containing multiple pivot report requests."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROPERTY_FIELD_NUMBER: builtins.int
    REQUESTS_FIELD_NUMBER: builtins.int
    property: typing.Text = ...
    """A Google Analytics GA4 property identifier whose events are tracked.
    Specified in the URL path and not the body. To learn more, see [where to
    find your Property
    ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
    This property must be specified for the batch. The property within
    RunPivotReportRequest may either be unspecified or consistent with this
    property.

    Example: properties/1234
    """

    @property
    def requests(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RunPivotReportRequest]:
        """Individual requests. Each request has a separate pivot report response.
        Each batch request is allowed up to 5 requests.
        """
        pass
    def __init__(self,
        *,
        property : typing.Text = ...,
        requests : typing.Optional[typing.Iterable[global___RunPivotReportRequest]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["property",b"property","requests",b"requests"]) -> None: ...
global___BatchRunPivotReportsRequest = BatchRunPivotReportsRequest

class BatchRunPivotReportsResponse(google.protobuf.message.Message):
    """The batch response containing multiple pivot reports."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PIVOT_REPORTS_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    @property
    def pivot_reports(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RunPivotReportResponse]:
        """Individual responses. Each response has a separate pivot report request."""
        pass
    kind: typing.Text = ...
    """Identifies what kind of resource this message is. This `kind` is always the
    fixed string "analyticsData#batchRunPivotReports". Useful to distinguish
    between response types in JSON.
    """

    def __init__(self,
        *,
        pivot_reports : typing.Optional[typing.Iterable[global___RunPivotReportResponse]] = ...,
        kind : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["kind",b"kind","pivot_reports",b"pivot_reports"]) -> None: ...
global___BatchRunPivotReportsResponse = BatchRunPivotReportsResponse

class GetMetadataRequest(google.protobuf.message.Message):
    """Request for a property's dimension and metric metadata."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Required. The resource name of the metadata to retrieve. This name field is
    specified in the URL path and not URL parameters. Property is a numeric
    Google Analytics GA4 Property identifier. To learn more, see [where to find
    your Property
    ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).

    Example: properties/1234/metadata

    Set the Property ID to 0 for dimensions and metrics common to all
    properties. In this special mode, this method will not return custom
    dimensions and metrics.
    """

    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___GetMetadataRequest = GetMetadataRequest

class RunRealtimeReportRequest(google.protobuf.message.Message):
    """The request to generate a realtime report."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PROPERTY_FIELD_NUMBER: builtins.int
    DIMENSIONS_FIELD_NUMBER: builtins.int
    METRICS_FIELD_NUMBER: builtins.int
    DIMENSION_FILTER_FIELD_NUMBER: builtins.int
    METRIC_FILTER_FIELD_NUMBER: builtins.int
    LIMIT_FIELD_NUMBER: builtins.int
    METRIC_AGGREGATIONS_FIELD_NUMBER: builtins.int
    ORDER_BYS_FIELD_NUMBER: builtins.int
    RETURN_PROPERTY_QUOTA_FIELD_NUMBER: builtins.int
    MINUTE_RANGES_FIELD_NUMBER: builtins.int
    property: typing.Text = ...
    """A Google Analytics GA4 property identifier whose events are tracked.
    Specified in the URL path and not the body. To learn more, see [where to
    find your Property
    ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).

    Example: properties/1234
    """

    @property
    def dimensions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Dimension]:
        """The dimensions requested and displayed."""
        pass
    @property
    def metrics(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Metric]:
        """The metrics requested and displayed."""
        pass
    @property
    def dimension_filter(self) -> google.analytics.data.v1beta.data_pb2.FilterExpression:
        """The filter clause of dimensions. Dimensions must be requested to be used in
        this filter. Metrics cannot be used in this filter.
        """
        pass
    @property
    def metric_filter(self) -> google.analytics.data.v1beta.data_pb2.FilterExpression:
        """The filter clause of metrics. Applied at post aggregation phase, similar to
        SQL having-clause. Metrics must be requested to be used in this filter.
        Dimensions cannot be used in this filter.
        """
        pass
    limit: builtins.int = ...
    """The number of rows to return. If unspecified, 10,000 rows are returned. The
    API returns a maximum of 100,000 rows per request, no matter how many you
    ask for. `limit` must be positive.

    The API can also return fewer rows than the requested `limit`, if there
    aren't as many dimension values as the `limit`. For instance, there are
    fewer than 300 possible values for the dimension `country`, so when
    reporting on only `country`, you can't get more than 300 rows, even if you
    set `limit` to a higher value.
    """

    @property
    def metric_aggregations(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[google.analytics.data.v1beta.data_pb2.MetricAggregation.ValueType]:
        """Aggregation of metrics. Aggregated metric values will be shown in rows
        where the dimension_values are set to "RESERVED_(MetricAggregation)".
        """
        pass
    @property
    def order_bys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.OrderBy]:
        """Specifies how rows are ordered in the response."""
        pass
    return_property_quota: builtins.bool = ...
    """Toggles whether to return the current state of this Analytics Property's
    Realtime quota. Quota is returned in [PropertyQuota](#PropertyQuota).
    """

    @property
    def minute_ranges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.MinuteRange]:
        """The minute ranges of event data to read. If unspecified, one minute range
        for the last 30 minutes will be used. If multiple minute ranges are
        requested, each response row will contain a zero based minute range index.
        If two minute ranges overlap, the event data for the overlapping minutes is
        included in the response rows for both minute ranges.
        """
        pass
    def __init__(self,
        *,
        property : typing.Text = ...,
        dimensions : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Dimension]] = ...,
        metrics : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Metric]] = ...,
        dimension_filter : typing.Optional[google.analytics.data.v1beta.data_pb2.FilterExpression] = ...,
        metric_filter : typing.Optional[google.analytics.data.v1beta.data_pb2.FilterExpression] = ...,
        limit : builtins.int = ...,
        metric_aggregations : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.MetricAggregation.ValueType]] = ...,
        order_bys : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.OrderBy]] = ...,
        return_property_quota : builtins.bool = ...,
        minute_ranges : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.MinuteRange]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dimension_filter",b"dimension_filter","metric_filter",b"metric_filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dimension_filter",b"dimension_filter","dimensions",b"dimensions","limit",b"limit","metric_aggregations",b"metric_aggregations","metric_filter",b"metric_filter","metrics",b"metrics","minute_ranges",b"minute_ranges","order_bys",b"order_bys","property",b"property","return_property_quota",b"return_property_quota"]) -> None: ...
global___RunRealtimeReportRequest = RunRealtimeReportRequest

class RunRealtimeReportResponse(google.protobuf.message.Message):
    """The response realtime report table corresponding to a request."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DIMENSION_HEADERS_FIELD_NUMBER: builtins.int
    METRIC_HEADERS_FIELD_NUMBER: builtins.int
    ROWS_FIELD_NUMBER: builtins.int
    TOTALS_FIELD_NUMBER: builtins.int
    MAXIMUMS_FIELD_NUMBER: builtins.int
    MINIMUMS_FIELD_NUMBER: builtins.int
    ROW_COUNT_FIELD_NUMBER: builtins.int
    PROPERTY_QUOTA_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    @property
    def dimension_headers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.DimensionHeader]:
        """Describes dimension columns. The number of DimensionHeaders and ordering of
        DimensionHeaders matches the dimensions present in rows.
        """
        pass
    @property
    def metric_headers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.MetricHeader]:
        """Describes metric columns. The number of MetricHeaders and ordering of
        MetricHeaders matches the metrics present in rows.
        """
        pass
    @property
    def rows(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Row]:
        """Rows of dimension value combinations and metric values in the report."""
        pass
    @property
    def totals(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Row]:
        """If requested, the totaled values of metrics."""
        pass
    @property
    def maximums(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Row]:
        """If requested, the maximum values of metrics."""
        pass
    @property
    def minimums(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.analytics.data.v1beta.data_pb2.Row]:
        """If requested, the minimum values of metrics."""
        pass
    row_count: builtins.int = ...
    """The total number of rows in the query result. `rowCount` is independent of
    the number of rows returned in the response and the `limit` request
    parameter. For example if a query returns 175 rows and includes `limit`
    of 50 in the API request, the response will contain `rowCount` of 175 but
    only 50 rows.
    """

    @property
    def property_quota(self) -> google.analytics.data.v1beta.data_pb2.PropertyQuota:
        """This Analytics Property's Realtime quota state including this request."""
        pass
    kind: typing.Text = ...
    """Identifies what kind of resource this message is. This `kind` is always the
    fixed string "analyticsData#runRealtimeReport". Useful to distinguish
    between response types in JSON.
    """

    def __init__(self,
        *,
        dimension_headers : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.DimensionHeader]] = ...,
        metric_headers : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.MetricHeader]] = ...,
        rows : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Row]] = ...,
        totals : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Row]] = ...,
        maximums : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Row]] = ...,
        minimums : typing.Optional[typing.Iterable[google.analytics.data.v1beta.data_pb2.Row]] = ...,
        row_count : builtins.int = ...,
        property_quota : typing.Optional[google.analytics.data.v1beta.data_pb2.PropertyQuota] = ...,
        kind : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["property_quota",b"property_quota"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dimension_headers",b"dimension_headers","kind",b"kind","maximums",b"maximums","metric_headers",b"metric_headers","minimums",b"minimums","property_quota",b"property_quota","row_count",b"row_count","rows",b"rows","totals",b"totals"]) -> None: ...
global___RunRealtimeReportResponse = RunRealtimeReportResponse
