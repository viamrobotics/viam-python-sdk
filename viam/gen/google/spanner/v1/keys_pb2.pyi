"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.struct_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class KeyRange(google.protobuf.message.Message):
    """KeyRange represents a range of rows in a table or index.

    A range has a start key and an end key. These keys can be open or
    closed, indicating if the range includes rows with that key.

    Keys are represented by lists, where the ith value in the list
    corresponds to the ith component of the table or index primary key.
    Individual values are encoded as described
    [here][google.spanner.v1.TypeCode].

    For example, consider the following table definition:

        CREATE TABLE UserEvents (
          UserName STRING(MAX),
          EventDate STRING(10)
        ) PRIMARY KEY(UserName, EventDate);

    The following keys name rows in this table:

        ["Bob", "2014-09-23"]
        ["Alfred", "2015-06-12"]

    Since the `UserEvents` table's `PRIMARY KEY` clause names two
    columns, each `UserEvents` key has two elements; the first is the
    `UserName`, and the second is the `EventDate`.

    Key ranges with multiple components are interpreted
    lexicographically by component using the table or index key's declared
    sort order. For example, the following range returns all events for
    user `"Bob"` that occurred in the year 2015:

        "start_closed": ["Bob", "2015-01-01"]
        "end_closed": ["Bob", "2015-12-31"]

    Start and end keys can omit trailing key components. This affects the
    inclusion and exclusion of rows that exactly match the provided key
    components: if the key is closed, then rows that exactly match the
    provided components are included; if the key is open, then rows
    that exactly match are not included.

    For example, the following range includes all events for `"Bob"` that
    occurred during and after the year 2000:

        "start_closed": ["Bob", "2000-01-01"]
        "end_closed": ["Bob"]

    The next example retrieves all events for `"Bob"`:

        "start_closed": ["Bob"]
        "end_closed": ["Bob"]

    To retrieve events before the year 2000:

        "start_closed": ["Bob"]
        "end_open": ["Bob", "2000-01-01"]

    The following range includes all rows in the table:

        "start_closed": []
        "end_closed": []

    This range returns all users whose `UserName` begins with any
    character from A to C:

        "start_closed": ["A"]
        "end_open": ["D"]

    This range returns all users whose `UserName` begins with B:

        "start_closed": ["B"]
        "end_open": ["C"]

    Key ranges honor column sort order. For example, suppose a table is
    defined as follows:

        CREATE TABLE DescendingSortedTable {
          Key INT64,
          ...
        ) PRIMARY KEY(Key DESC);

    The following range retrieves all rows with key values between 1
    and 100 inclusive:

        "start_closed": ["100"]
        "end_closed": ["1"]

    Note that 100 is passed as the start, and 1 is passed as the end,
    because `Key` is a descending column in the schema.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    START_CLOSED_FIELD_NUMBER: builtins.int
    START_OPEN_FIELD_NUMBER: builtins.int
    END_CLOSED_FIELD_NUMBER: builtins.int
    END_OPEN_FIELD_NUMBER: builtins.int
    @property
    def start_closed(self) -> google.protobuf.struct_pb2.ListValue:
        """If the start is closed, then the range includes all rows whose
        first `len(start_closed)` key columns exactly match `start_closed`.
        """
        pass
    @property
    def start_open(self) -> google.protobuf.struct_pb2.ListValue:
        """If the start is open, then the range excludes rows whose first
        `len(start_open)` key columns exactly match `start_open`.
        """
        pass
    @property
    def end_closed(self) -> google.protobuf.struct_pb2.ListValue:
        """If the end is closed, then the range includes all rows whose
        first `len(end_closed)` key columns exactly match `end_closed`.
        """
        pass
    @property
    def end_open(self) -> google.protobuf.struct_pb2.ListValue:
        """If the end is open, then the range excludes rows whose first
        `len(end_open)` key columns exactly match `end_open`.
        """
        pass
    def __init__(self,
        *,
        start_closed : typing.Optional[google.protobuf.struct_pb2.ListValue] = ...,
        start_open : typing.Optional[google.protobuf.struct_pb2.ListValue] = ...,
        end_closed : typing.Optional[google.protobuf.struct_pb2.ListValue] = ...,
        end_open : typing.Optional[google.protobuf.struct_pb2.ListValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_closed",b"end_closed","end_key_type",b"end_key_type","end_open",b"end_open","start_closed",b"start_closed","start_key_type",b"start_key_type","start_open",b"start_open"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_closed",b"end_closed","end_key_type",b"end_key_type","end_open",b"end_open","start_closed",b"start_closed","start_key_type",b"start_key_type","start_open",b"start_open"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["end_key_type",b"end_key_type"]) -> typing.Optional[typing_extensions.Literal["end_closed","end_open"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["start_key_type",b"start_key_type"]) -> typing.Optional[typing_extensions.Literal["start_closed","start_open"]]: ...
global___KeyRange = KeyRange

class KeySet(google.protobuf.message.Message):
    """`KeySet` defines a collection of Cloud Spanner keys and/or key ranges. All
    the keys are expected to be in the same table or index. The keys need
    not be sorted in any particular way.

    If the same key is specified multiple times in the set (for example
    if two ranges, two keys, or a key and a range overlap), Cloud Spanner
    behaves as if the key were only specified once.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    KEYS_FIELD_NUMBER: builtins.int
    RANGES_FIELD_NUMBER: builtins.int
    ALL_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.protobuf.struct_pb2.ListValue]:
        """A list of specific keys. Entries in `keys` should have exactly as
        many elements as there are columns in the primary or index key
        with which this `KeySet` is used.  Individual key values are
        encoded as described [here][google.spanner.v1.TypeCode].
        """
        pass
    @property
    def ranges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___KeyRange]:
        """A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
        key range specifications.
        """
        pass
    all: builtins.bool = ...
    """For convenience `all` can be set to `true` to indicate that this
    `KeySet` matches all keys in the table or index. Note that any keys
    specified in `keys` or `ranges` are only yielded once.
    """

    def __init__(self,
        *,
        keys : typing.Optional[typing.Iterable[google.protobuf.struct_pb2.ListValue]] = ...,
        ranges : typing.Optional[typing.Iterable[global___KeyRange]] = ...,
        all : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["all",b"all","keys",b"keys","ranges",b"ranges"]) -> None: ...
global___KeySet = KeySet
