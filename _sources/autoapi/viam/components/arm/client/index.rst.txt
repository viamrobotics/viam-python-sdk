:py:mod:`viam.components.arm.client`
====================================

.. py:module:: viam.components.arm.client


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.arm.client.ArmClient




.. py:class:: ArmClient(name: str, channel: grpclib.client.Channel)



   gRPC client for an Arm component.

   Used to communicate with an existing ``Arm`` implementation over gRPC.

   .. py:method:: get_end_position(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> viam.proto.common.Pose
      :async:

      Get the current position of the end of the arm expressed as a Pose.

      Returns: The location and orientation of the arm described as a Pose.


   .. py:method:: move_to_position(pose: viam.proto.common.Pose, world_state: Optional[viam.proto.common.WorldState] = None, *, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None)
      :async:

      Move the end of the arm to the Pose specified in ``pose``.

      :param pose: The destination Pose for the arm.
      :type pose: Pose


   .. py:method:: get_joint_positions(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> viam.proto.component.arm.JointPositions
      :async:

      Get the JointPositions representing the current position of the arm.

      :returns: The current JointPositions for the arm.
      :rtype: JointPositions


   .. py:method:: move_to_joint_positions(positions: viam.proto.component.arm.JointPositions, *, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None)
      :async:

      Move each joint on the arm to the corresponding angle specified in ``positions``.

      :param positions: The destination ``JointPositions`` for the arm.
      :type positions: JointPositions


   .. py:method:: stop(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None)
      :async:

      Stop all motion of the arm. It is assumed that the arm stops immediately.


   .. py:method:: is_moving(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> bool
      :async:

      Get if the arm is currently moving.

      :returns: Whether the arm is moving.
      :rtype: bool


   .. py:method:: do_command(command: Mapping[str, Any], *, timeout: Optional[float] = None) -> Mapping[str, viam.utils.ValueTypes]
      :async:

      Send/Receive arbitrary commands to the Resource

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]



