viam.components.base.service
============================

.. py:module:: viam.components.base.service


Classes
-------

.. autoapisummary::

   viam.components.base.service.DoCommandRequest
   viam.components.base.service.DoCommandResponse
   viam.components.base.service.GetGeometriesRequest
   viam.components.base.service.GetGeometriesResponse
   viam.components.base.service.BaseServiceBase
   viam.components.base.service.GetPropertiesRequest
   viam.components.base.service.GetPropertiesResponse
   viam.components.base.service.IsMovingRequest
   viam.components.base.service.IsMovingResponse
   viam.components.base.service.MoveStraightRequest
   viam.components.base.service.MoveStraightResponse
   viam.components.base.service.SetPowerRequest
   viam.components.base.service.SetPowerResponse
   viam.components.base.service.SetVelocityRequest
   viam.components.base.service.SetVelocityResponse
   viam.components.base.service.SpinRequest
   viam.components.base.service.SpinResponse
   viam.components.base.service.StopRequest
   viam.components.base.service.StopResponse
   viam.components.base.service.ResourceRPCServiceBase
   viam.components.base.service.Base
   viam.components.base.service.BaseRPCService


Functions
---------

.. autoapisummary::

   viam.components.base.service.dict_to_struct
   viam.components.base.service.struct_to_dict


Module Contents
---------------

.. py:class:: DoCommandRequest(*, name: str = ..., command: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   DoCommandRequest represents a generic DoCommand input


   .. py:attribute:: name
      :type:  str


   .. py:property:: command
      :type: google.protobuf.struct_pb2.Struct



   .. py:method:: HasField(field_name: Literal['command', b'command']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: DoCommandResponse(*, result: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   DoCommandResponse represents a generic DoCommand output


   .. py:property:: result
      :type: google.protobuf.struct_pb2.Struct



   .. py:method:: HasField(field_name: Literal['result', b'result']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: GetGeometriesRequest(*, name: str = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str

      The component name


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['extra', b'extra']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: GetGeometriesResponse(*, geometries: collections.abc.Iterable[global___Geometry] | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:property:: geometries
      :type: google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Geometry]

      All geometries associated with the component, in their current configuration, in the frame of that component.


.. py:class:: BaseServiceBase

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: MoveStraight(stream: grpclib.server.Stream[component.base.v1.base_pb2.MoveStraightRequest, component.base.v1.base_pb2.MoveStraightResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: Spin(stream: grpclib.server.Stream[component.base.v1.base_pb2.SpinRequest, component.base.v1.base_pb2.SpinResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: SetPower(stream: grpclib.server.Stream[component.base.v1.base_pb2.SetPowerRequest, component.base.v1.base_pb2.SetPowerResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: SetVelocity(stream: grpclib.server.Stream[component.base.v1.base_pb2.SetVelocityRequest, component.base.v1.base_pb2.SetVelocityResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: Stop(stream: grpclib.server.Stream[component.base.v1.base_pb2.StopRequest, component.base.v1.base_pb2.StopResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: IsMoving(stream: grpclib.server.Stream[component.base.v1.base_pb2.IsMovingRequest, component.base.v1.base_pb2.IsMovingResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: DoCommand(stream: grpclib.server.Stream[common.v1.common_pb2.DoCommandRequest, common.v1.common_pb2.DoCommandResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: GetGeometries(stream: grpclib.server.Stream[common.v1.common_pb2.GetGeometriesRequest, common.v1.common_pb2.GetGeometriesResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: GetProperties(stream: grpclib.server.Stream[component.base.v1.base_pb2.GetPropertiesRequest, component.base.v1.base_pb2.GetPropertiesResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: __mapping__() -> Dict[str, grpclib.const.Handler]


.. py:class:: GetPropertiesRequest(*, name: str = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str

      Name of the base


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct



   .. py:method:: HasField(field_name: Literal['extra', b'extra']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: GetPropertiesResponse(*, width_meters: float = ..., turning_radius_meters: float = ..., wheel_circumference_meters: float = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: width_meters
      :type:  float


   .. py:attribute:: turning_radius_meters
      :type:  float


   .. py:attribute:: wheel_circumference_meters
      :type:  float


.. py:class:: IsMovingRequest(*, name: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str


.. py:class:: IsMovingResponse(*, is_moving: bool = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: is_moving
      :type:  bool


.. py:class:: MoveStraightRequest(*, name: str = ..., distance_mm: int = ..., mm_per_sec: float = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str

      Name of a base


   .. py:attribute:: distance_mm
      :type:  int

      Desired travel distance in millimeters


   .. py:attribute:: mm_per_sec
      :type:  float

      Desired travel velocity in millimeters/second


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['extra', b'extra']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: MoveStraightResponse

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


.. py:class:: SetPowerRequest(*, name: str = ..., linear: viam.gen.common.v1.common_pb2.Vector3 | None = ..., angular: viam.gen.common.v1.common_pb2.Vector3 | None = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str

      Name of a base


   .. py:property:: linear
      :type: viam.gen.common.v1.common_pb2.Vector3

      Desired linear power percentage as -1 -> 1


   .. py:property:: angular
      :type: viam.gen.common.v1.common_pb2.Vector3

      Desired angular power percentage % as -1 -> 1


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['angular', b'angular', 'extra', b'extra', 'linear', b'linear']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: SetPowerResponse

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


.. py:class:: SetVelocityRequest(*, name: str = ..., linear: viam.gen.common.v1.common_pb2.Vector3 | None = ..., angular: viam.gen.common.v1.common_pb2.Vector3 | None = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str

      Name of a base


   .. py:property:: linear
      :type: viam.gen.common.v1.common_pb2.Vector3

      Desired linear velocity in mm per second


   .. py:property:: angular
      :type: viam.gen.common.v1.common_pb2.Vector3

      Desired angular velocity in degrees per second


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['angular', b'angular', 'extra', b'extra', 'linear', b'linear']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: SetVelocityResponse

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


.. py:class:: SpinRequest(*, name: str = ..., angle_deg: float = ..., degs_per_sec: float = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str

      Name of a base


   .. py:attribute:: angle_deg
      :type:  float

      Desired angle


   .. py:attribute:: degs_per_sec
      :type:  float

      Desired angular velocity


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['extra', b'extra']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: SpinResponse

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


.. py:class:: StopRequest(*, name: str = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str

      Name of a base


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['extra', b'extra']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: StopResponse

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


.. py:class:: ResourceRPCServiceBase(manager: viam.resource.manager.ResourceManager)

   Bases: :py:obj:`abc.ABC`, :py:obj:`viam.rpc.types.RPCServiceBase`, :py:obj:`Generic`\ [\ :py:obj:`viam.resource.manager.ResourceType`\ ]


   Base RPC service for a resource.
   All resource RPC services must inherit from this class.


   .. py:attribute:: RESOURCE_TYPE


   .. py:attribute:: manager
      :type:  viam.resource.manager.ResourceManager


   .. py:method:: get_resource(name: str) -> viam.resource.manager.ResourceType

      Return the resource with the given name if it exists in the registry.
      If the resource does not exist in the registry,
      this function will raise an error

      :param name: Name of the resource
      :type name: str

      :raises GRPCError with the status code Status.NOT_FOUND:

      :returns: The resource
      :rtype: ResourceType



.. py:function:: dict_to_struct(obj: Mapping[str, ValueTypes]) -> google.protobuf.struct_pb2.Struct

.. py:function:: struct_to_dict(struct: google.protobuf.struct_pb2.Struct) -> Dict[str, ValueTypes]

.. py:class:: Base(name: str)

   Bases: :py:obj:`viam.components.component_base.ComponentBase`


   Base represents a physical base of a robot.

   This acts as an abstract base class for any drivers representing specific
   base implementations. This cannot be used on its own. If the ``__init__()`` function is
   overridden, it must call the ``super().__init__()`` function.

   ::

       from viam.components.base import Base


   .. py:attribute:: SUBTYPE
      :type:  Final


   .. py:class:: Properties

      .. py:attribute:: width_meters
         :type:  float


      .. py:attribute:: turning_radius_meters
         :type:  float


      .. py:attribute:: wheel_circumference_meters
         :type:  float



   .. py:method:: move_straight(distance: int, velocity: float, *, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs)
      :abstractmethod:

      :async:


      Move the base in a straight line the given ``distance``, expressed in millimeters,
      at the given ``velocity``, expressed in millimeters per second.
      When ``distance`` or ``velocity`` is 0, the base will stop.
      This method blocks until completed or cancelled.

      ::

          my_base = Base.from_robot(robot=robot, name="my_base")

          # Move the base 40 mm at a velocity of 90 mm/s, forward.
          await my_base.move_straight(distance=40, velocity=90)

          # Move the base 40 mm at a velocity of -90 mm/s, backward.
          await my_base.move_straight(distance=40, velocity=-90)

      :param distance: The distance (in millimeters) to move.
                       Negative implies backwards.
      :type distance: int
      :param velocity: The velocity (in millimeters per second) to move.
                       Negative implies backwards.
      :type velocity: float



   .. py:method:: spin(angle: float, velocity: float, *, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs)
      :abstractmethod:

      :async:


      Spin the base in place ``angle`` degrees, at the given angular ``velocity``,
      expressed in degrees per second.
      When ``velocity`` is 0, the base will stop.
      This method blocks until completed or cancelled.

      ::

          my_base = Base.from_robot(robot=robot, name="my_base")

          # Spin the base 10 degrees at an angular velocity of 15 deg/sec.
          await my_base.spin(angle=10, velocity=15)

      :param angle: The angle (in degrees) to spin.
      :type angle: float
      :param velocity: The angular velocity (in degrees per second)
                       to spin.
                       Given a positive angle and a positive velocity, the base will turn to the left.
      :type velocity: float



   .. py:method:: set_power(linear: viam.components.base.Vector3, angular: viam.components.base.Vector3, *, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs)
      :abstractmethod:

      :async:


      Set the linear and angular velocity of the Base
      When ``linear`` is 0, the the base will spin.
      When ``angular`` is 0, the the base will move in a straight line.
      When both ``linear`` and ``angular`` are 0, the base will stop.
      When ``linear`` and ``angular`` are both nonzero, the base will move in an arc,
      with a tighter radius if angular power is greater than linear power.

      ::

          my_base = Base.from_robot(robot=robot, name="my_base")

          # Make your wheeled base move forward. Set linear power to 75%.
          print("move forward")
          await my_base.set_power(
              linear=Vector3(x=0, y=-.75, z=0),
              angular=Vector3(x=0, y=0, z=0))

          # Make your wheeled base move backward. Set linear power to -100%.
          print("move backward")
          await my_base.set_power(
              linear=Vector3(x=0, y=-1.0, z=0),
              angular=Vector3(x=0, y=0, z=0))

          # Make your wheeled base spin left. Set angular power to 100%.
          print("spin left")
          await my_base.set_power(
              linear=Vector3(x=0, y=0, z=0),
              angular=Vector3(x=0, y=0, z=1))

          # Make your wheeled base spin right. Set angular power to -75%.
          print("spin right")
          await my_base.set_power(
              linear=Vector3(x=0, y=0, z=0),
              angular=Vector3(x=0, y=0, z=-.75))

      :param linear: The linear component. Only the Y component is used
                     for wheeled base. Positive implies forwards.
      :type linear: Vector3
      :param angular: The angular component. Only the Z component is used
                      for wheeled base. Positive turns left; negative turns right.
      :type angular: Vector3



   .. py:method:: set_velocity(linear: viam.components.base.Vector3, angular: viam.components.base.Vector3, *, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs)
      :abstractmethod:

      :async:


      Set the linear and angular velocities of the base.

      ::

          my_base = Base.from_robot(robot=robot, name="my_base")

          # Set the linear velocity to 50 mm/sec and the angular velocity to
          # 15 degree/sec.
          await my_base.set_velocity(
              linear=Vector3(x=0, y=50, z=0), angular=Vector3(x=0, y=0, z=15))

      :param linear: Velocity in mm/sec
      :type linear: Vector3
      :param angular: Velocity in deg/sec
      :type angular: Vector3



   .. py:method:: stop(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs)
      :abstractmethod:

      :async:


      Stop the base.

      ::

          my_base = Base.from_robot(robot=robot, name="my_base")

          # Move the base forward 10 mm at a velocity of 50 mm/s.
          await my_base.move_straight(distance=10, velocity=50)

          # Stop the base.
          await my_base.stop()



   .. py:method:: is_moving() -> bool
      :abstractmethod:

      :async:


      Get if the base is currently moving.

      ::

          my_base = Base.from_robot(robot=robot, name="my_base")

          # Check whether the base is currently moving.
          moving = await my_base.is_moving()
          print('Moving: ', moving)

      :returns: Whether the base is moving.
      :rtype: bool



   .. py:method:: get_properties(*, timeout: Optional[float] = None, **kwargs) -> Properties
      :abstractmethod:

      :async:


      Get the base width and turning radius

      ::

          my_base = Base.from_robot(robot=robot, name="my_base")

          # Get the width and turning radius of the base
          properties = await my_base.get_properties()

          # Get the width
          print(f"Width of base: {properties.width_meters}")

          # Get the turning radius
          print(f"Turning radius of base: {properties.turning_radius_meters}")

          # Get the wheel circumference
          print(f"Wheel circumference of base: {properties.wheel_circumference_meters}")

      :returns: The properties of the base
      :rtype: Properties



   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:


      Get the component named ``name`` from the provided robot.

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the component
      :type name: str

      :returns: The component, if it exists on the robot
      :rtype: Self



   .. py:method:: do_command(command: Mapping[str, ValueTypes], *, timeout: Optional[float] = None, **kwargs) -> Mapping[str, ValueTypes]
      :abstractmethod:

      :async:


      Send/Receive arbitrary commands to the Resource

      ::

          command = {"cmd": "test", "data1": 500}
          result = component.do(command)

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]



   .. py:method:: get_geometries(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> List[viam.proto.common.Geometry]
      :async:


      Get all geometries associated with the component, in their current configuration, in the
      `frame <https://docs.viam.com/services/frame-system/>`__ of the component.

      ::

          geometries = await component.get_geometries()

          if geometries:
              # Get the center of the first geometry
              print(f"Pose of the first geometry's centerpoint: {geometries[0].center}")

      :returns: The geometries associated with the Component.
      :rtype: List[Geometry]



   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:


      Get the ResourceName for this Resource with the given name

      ::

          # Can be used with any resource, using an arm as an example
          my_arm_name = my_arm.get_resource_name("my_arm")

      :param name: The name of the Resource
      :type name: str

      :returns: The ResourceName of this Resource
      :rtype: ResourceName



   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation



   .. py:method:: close()
      :async:


      Safely shut down the resource and prevent further use.

      Close must be idempotent. Later configuration may allow a resource to be "open" again.
      If a resource does not want or need a close function, it is assumed that the resource does not need to return errors when future
      non-Close methods are called.

      ::

          await component.close()




.. py:class:: BaseRPCService(manager: viam.resource.manager.ResourceManager)

   Bases: :py:obj:`viam.proto.component.base.BaseServiceBase`, :py:obj:`viam.resource.rpc_service_base.ResourceRPCServiceBase`\ [\ :py:obj:`viam.components.base.base.Base`\ ]


   gRPC service for a robotic Base


   .. py:attribute:: RESOURCE_TYPE


   .. py:method:: MoveStraight(stream: grpclib.server.Stream[viam.proto.component.base.MoveStraightRequest, viam.proto.component.base.MoveStraightResponse]) -> None
      :async:



   .. py:method:: Spin(stream: grpclib.server.Stream[viam.proto.component.base.SpinRequest, viam.proto.component.base.SpinResponse]) -> None
      :async:



   .. py:method:: SetPower(stream: grpclib.server.Stream[viam.proto.component.base.SetPowerRequest, viam.proto.component.base.SetPowerResponse]) -> None
      :async:



   .. py:method:: SetVelocity(stream: grpclib.server.Stream[viam.proto.component.base.SetVelocityRequest, viam.proto.component.base.SetVelocityResponse]) -> None
      :async:



   .. py:method:: Stop(stream: grpclib.server.Stream[viam.proto.component.base.StopRequest, viam.proto.component.base.StopResponse]) -> None
      :async:



   .. py:method:: IsMoving(stream: grpclib.server.Stream[viam.proto.component.base.IsMovingRequest, viam.proto.component.base.IsMovingResponse]) -> None
      :async:



   .. py:method:: GetProperties(stream: grpclib.server.Stream[viam.proto.component.base.GetPropertiesRequest, viam.proto.component.base.GetPropertiesResponse]) -> None
      :async:



   .. py:method:: DoCommand(stream: grpclib.server.Stream[viam.proto.common.DoCommandRequest, viam.proto.common.DoCommandResponse]) -> None
      :async:



   .. py:method:: GetGeometries(stream: grpclib.server.Stream[viam.proto.common.GetGeometriesRequest, viam.proto.common.GetGeometriesResponse]) -> None
      :async:



