:py:mod:`viam.components.camera.client`
=======================================

.. py:module:: viam.components.camera.client


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.camera.client.CameraClient



Functions
~~~~~~~~~

.. autoapisummary::

   viam.components.camera.client.get_image_from_response



.. py:function:: get_image_from_response(data: bytes, response_mime_type: str, request_mime_type: Optional[str] = None) -> Union[PIL.Image.Image, viam.components.camera.RawImage]


.. py:class:: CameraClient(name: str, channel: grpclib.client.Channel)


   Bases: :py:obj:`viam.components.camera.Camera`, :py:obj:`viam.resource.rpc_client_base.ReconfigurableResourceRPCClientBase`

   gRPC client for the Camera component

   .. py:method:: get_image(mime_type: str = '', *, timeout: Optional[float] = None) -> Union[PIL.Image.Image, viam.components.camera.RawImage]
      :async:

      Get the next image from the camera as an Image or RawImage.
      Be sure to close the image when finished.

      NOTE: If the mime type is ``image/vnd.viam.dep`` you can use :func:`viam.media.video.RawImage.bytes_to_depth_array`
      to convert the data to a standard representation.

      :param mime_type: The desired mime type of the image. This does not guarantee output type
      :type mime_type: str

      :returns: The frame
      :rtype: Image | RawImage


   .. py:method:: get_images(*, timeout: Optional[float] = None) -> Tuple[List[viam.media.video.NamedImage], viam.proto.common.ResponseMetadata]
      :async:

      Get simultaneous images from different sensors, along with associated metadata.
      This should not be used for getting a time series of images from the same sensor.

      :returns:

                    - List[NamedImage]:
                      The list of images returned from the camera system.

                    - ResponseMetadata:
                      The metadata associated with this response
      :rtype: Tuple[List[NamedImage], ResponseMetadata]


   .. py:method:: get_point_cloud(*, timeout: Optional[float] = None) -> Tuple[bytes, str]
      :async:

      Get the next point cloud from the camera. This will be
      returned as bytes with a mimetype describing
      the structure of the data. The consumer of this call
      should encode the bytes into the formatted suggested
      by the mimetype.

      To deserialize the returned information into a numpy array, use the Open3D library.
      ::

          import numpy as np
          import open3d as o3d

          data, _ = await camera.get_point_cloud()

          # write the point cloud into a temporary file
          with open("/tmp/pointcloud_data.pcd", "wb") as f:
              f.write(data)
          pcd = o3d.io.read_point_cloud("/tmp/pointcloud_data.pcd")
          points = np.asarray(pcd.points)

      :returns: The pointcloud data.
                str: The mimetype of the pointcloud (e.g. PCD).
      :rtype: bytes


   .. py:method:: get_properties(*, timeout: Optional[float] = None) -> viam.components.camera.Camera.Properties
      :async:

      Get the camera intrinsic parameters and camera distortion parameters

      :returns: The properties of the camera
      :rtype: Properties


   .. py:method:: do_command(command: Mapping[str, viam.utils.ValueTypes], *, timeout: Optional[float] = None) -> Mapping[str, viam.utils.ValueTypes]
      :async:

      Send/Receive arbitrary commands to the Resource

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]


   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:

      Get the component named ``name`` from the provided robot.

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the component
      :type name: str

      :returns: The component, if it exists on the robot
      :rtype: Self


   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:

      Get the ResourceName for this Resource with the given name

      :param name: The name of the Resource
      :type name: str


   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation



