:py:mod:`viam.components.camera`
================================

.. py:module:: viam.components.camera


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   camera/index.rst
   client/index.rst
   service/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.camera.RawImage
   viam.components.camera.Geometry
   viam.components.camera.DistortionParameters
   viam.components.camera.IntrinsicParameters
   viam.components.camera.Camera




.. py:class:: RawImage


   Bases: :py:obj:`NamedTuple`

   A raw bytes representation of an image.

   A RawImage should be returned instead of a PIL Image instance under one of
   the following conditions

   1) The requested mime type has the LAZY_SUFFIX string appended to it
   2) The requested mime type is not supported for decoding/encoding by Viam's
   Python SDK

   .. py:attribute:: data
      :type: bytes

      The raw data of the image

   .. py:attribute:: mime_type
      :type: str

      The mimetype of the image

   .. py:method:: close()

      Close the image and release resources. For RawImage, this is a noop.


   .. py:method:: bytes_to_depth_array() -> List[List[int]]

      Decode the data of an image that has the custom depth MIME type ``image/vnd.viam.dep`` into
      a standard representation.

      :raises NotSupportedError: Raised if given an image that is not of MIME type `image/vnd.viam.dep`.

      :returns: The standard representation of the image.
      :rtype: List[List[int]]



.. py:class:: Geometry(*, center: global___Pose | None = ..., sphere: global___Sphere | None = ..., box: global___RectangularPrism | None = ..., capsule: global___Capsule | None = ..., label: str = ...)


   Bases: :py:obj:`google.protobuf.message.Message`

   Geometry contains the dimensions of a given geometry and the pose of its center. The geometry is one of either a sphere or a box.

   .. py:property:: center
      :type: global___Pose

      Pose of a geometries center point

   .. py:property:: sphere
      :type: global___Sphere


   .. py:property:: box
      :type: global___RectangularPrism


   .. py:property:: capsule
      :type: global___Capsule


   .. py:attribute:: label
      :type: str

      Label of the geometry. If none supplied, will be an empty string.

   .. py:method:: HasField(field_name: Literal[box, b'box', capsule, b'capsule', center, b'center', geometry_type, b'geometry_type', sphere, b'sphere']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.


   .. py:method:: WhichOneof(oneof_group: Literal[geometry_type, b'geometry_type']) -> Literal[sphere, box, capsule] | None

      Returns the name of the field that is set inside a oneof group.

      If no field is set, returns None.

      :param oneof_group: the name of the oneof group to check.
      :type oneof_group: str

      :returns: The name of the group that is set, or None.
      :rtype: str or None

      :raises ValueError: no group with the given name exists



.. py:class:: DistortionParameters(*, model: str = ..., parameters: collections.abc.Iterable[float] | None = ...)


   Bases: :py:obj:`google.protobuf.message.Message`

   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.

   .. py:property:: parameters
      :type: google.protobuf.internal.containers.RepeatedScalarFieldContainer[float]


   .. py:attribute:: model
      :type: str

      


.. py:class:: IntrinsicParameters(*, width_px: int = ..., height_px: int = ..., focal_x_px: float = ..., focal_y_px: float = ..., center_x_px: float = ..., center_y_px: float = ...)


   Bases: :py:obj:`google.protobuf.message.Message`

   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.

   .. py:attribute:: width_px
      :type: int

      

   .. py:attribute:: height_px
      :type: int

      

   .. py:attribute:: focal_x_px
      :type: float

      

   .. py:attribute:: focal_y_px
      :type: float

      

   .. py:attribute:: center_x_px
      :type: float

      

   .. py:attribute:: center_y_px
      :type: float

      


.. py:class:: Camera(name: str)


   Bases: :py:obj:`viam.components.component_base.ComponentBase`

   Camera represents any physical hardware that can capture frames.

   This acts as an abstract base class for any drivers representing specific
   camera implementations. This cannot be used on its own. If the ``__init__()`` function is
   overridden, it must call the ``super().__init__()`` function.

   .. py:class:: Properties


      Bases: :py:obj:`NamedTuple`

      The camera's supported features and settings

      .. py:attribute:: supports_pcd
         :type: bool

         Whether the camera has a valid implementation of ``get_point_cloud``

      .. py:attribute:: intrinsic_parameters
         :type: viam.components.camera.IntrinsicParameters

         The properties of the camera

      .. py:attribute:: distortion_parameters
         :type: viam.components.camera.DistortionParameters

         The distortion parameters of the camera


   .. py:attribute:: SUBTYPE
      :type: Final

      

   .. py:method:: get_image(mime_type: str = '', *, timeout: Optional[float] = None, **kwargs) -> Union[PIL.Image.Image, viam.components.camera.RawImage]
      :abstractmethod:
      :async:

      Get the next image from the camera as an Image or RawImage.
      Be sure to close the image when finished.

      NOTE: If the mime type is ``image/vnd.viam.dep`` you can use :func:`viam.media.video.RawImage.bytes_to_depth_array`
      to convert the data to a standard representation.

      :param mime_type: The desired mime type of the image. This does not guarantee output type
      :type mime_type: str

      :returns: The frame
      :rtype: Image | RawImage


   .. py:method:: get_images(*, timeout: Optional[float] = None, **kwargs) -> Tuple[List[viam.media.video.NamedImage], viam.proto.common.ResponseMetadata]
      :abstractmethod:
      :async:

      Get simultaneous images from different sensors, along with associated metadata.
      This should not be used for getting a time series of images from the same sensor.

      :returns:

                    - List[NamedImage]:
                      The list of images returned from the camera system.

                    - ResponseMetadata:
                      The metadata associated with this response
      :rtype: Tuple[List[NamedImage], ResponseMetadata]


   .. py:method:: get_point_cloud(*, timeout: Optional[float] = None, **kwargs) -> Tuple[bytes, str]
      :abstractmethod:
      :async:

      Get the next point cloud from the camera. This will be
      returned as bytes with a mimetype describing
      the structure of the data. The consumer of this call
      should encode the bytes into the formatted suggested
      by the mimetype.

      To deserialize the returned information into a numpy array, use the Open3D library.
      ::

          import numpy as np
          import open3d as o3d

          data, _ = await camera.get_point_cloud()

          # write the point cloud into a temporary file
          with open("/tmp/pointcloud_data.pcd", "wb") as f:
              f.write(data)
          pcd = o3d.io.read_point_cloud("/tmp/pointcloud_data.pcd")
          points = np.asarray(pcd.points)

      :returns: The pointcloud data.
                str: The mimetype of the pointcloud (e.g. PCD).
      :rtype: bytes


   .. py:method:: get_properties(*, timeout: Optional[float] = None, **kwargs) -> Properties
      :abstractmethod:
      :async:

      Get the camera intrinsic parameters and camera distortion parameters

      :returns: The properties of the camera
      :rtype: Properties


   .. py:method:: get_geometries() -> List[viam.components.camera.Geometry]
      :abstractmethod:
      :async:

      Get all geometries associated with the camera, in their current configuration, in the frame of the camera.

      :returns: The geometries associated with the camera.
      :rtype: List[Geometry]


   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:

      Get the component named ``name`` from the provided robot.

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the component
      :type name: str

      :returns: The component, if it exists on the robot
      :rtype: Self


   .. py:method:: do_command(command: Mapping[str, ValueTypes], *, timeout: Optional[float] = None, **kwargs) -> Mapping[str, ValueTypes]
      :abstractmethod:
      :async:

      Send/Receive arbitrary commands to the Resource

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]


   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:

      Get the ResourceName for this Resource with the given name

      :param name: The name of the Resource
      :type name: str


   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation



