viam.components.camera.camera
=============================

.. py:module:: viam.components.camera.camera


Attributes
----------

.. autoapisummary::

   viam.components.camera.camera.RESOURCE_NAMESPACE_RDK
   viam.components.camera.camera.RESOURCE_TYPE_COMPONENT


Classes
-------

.. autoapisummary::

   viam.components.camera.camera.NamedImage
   viam.components.camera.camera.ViamImage
   viam.components.camera.camera.ResponseMetadata
   viam.components.camera.camera.GetPropertiesResponse
   viam.components.camera.camera.Subtype
   viam.components.camera.camera.ComponentBase
   viam.components.camera.camera.Camera


Module Contents
---------------

.. py:class:: NamedImage(name: str, data: bytes, mime_type: CameraMimeType)

   Bases: :py:obj:`ViamImage`


   An implementation of ViamImage that contains a name attribute.


   .. py:attribute:: name
      :type:  str

      The name of the image


.. py:class:: ViamImage(data: bytes, mime_type: CameraMimeType)

   A native implementation of an image.

   Provides the raw data and the mime type.


   .. py:property:: data
      :type: bytes

      The raw bytes of the image


   .. py:property:: mime_type
      :type: CameraMimeType

      The mime type of the image


   .. py:property:: width
      :type: Optional[int]

      The width of the image


   .. py:property:: height
      :type: Optional[int]

      The height of the image


   .. py:method:: bytes_to_depth_array() -> List[List[int]]

      Decode the data of an image that has the custom depth MIME type ``image/vnd.viam.dep`` into a standard representation.

      :raises NotSupportedError: Raised if the image is not of MIME type `image/vnd.viam.dep`.

      :returns: The standard representation of the image.
      :rtype: List[List[int]]



.. py:class:: ResponseMetadata(*, captured_at: google.protobuf.timestamp_pb2.Timestamp | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:property:: captured_at
      :type: google.protobuf.timestamp_pb2.Timestamp

      captured_at is the time at which the resource as close as physically possible, captured
      the data in the response.
      Note: If correlating between other resources, be sure that the means
      of measuring the capture are similar enough such that comparison can be made between them.


   .. py:method:: HasField(field_name: Literal['_captured_at', b'_captured_at', 'captured_at', b'captured_at']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



   .. py:method:: WhichOneof(oneof_group: Literal['_captured_at', b'_captured_at']) -> Literal['captured_at'] | None

      Returns the name of the field that is set inside a oneof group.

      If no field is set, returns None.

      :param oneof_group: the name of the oneof group to check.
      :type oneof_group: str

      :returns: The name of the group that is set, or None.
      :rtype: str or None

      :raises ValueError: no group with the given name exists



.. py:class:: GetPropertiesResponse(*, supports_pcd: bool = ..., intrinsic_parameters: global___IntrinsicParameters | None = ..., distortion_parameters: global___DistortionParameters | None = ..., mime_types: collections.abc.Iterable[str] | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: supports_pcd
      :type:  bool

      A boolean property determining whether the camera supports the return of pointcloud data


   .. py:property:: intrinsic_parameters
      :type: global___IntrinsicParameters

      Parameters for doing a perspective of a 3D scene to a 2D plane
      If camera does not provide intrinsic parameters, leave the field empty
      Initializing the parameters with 0-values is considered an error


   .. py:property:: distortion_parameters
      :type: global___DistortionParameters

      Parameters for modeling lens distortion in cameras
      If camera does not provide distortion parameters, leave the field empty
      Initializing the parameters with 0-values is considered an error


   .. py:property:: mime_types
      :type: google.protobuf.internal.containers.RepeatedScalarFieldContainer[str]

      Supported MIME types by the camera


   .. py:method:: HasField(field_name: Literal['distortion_parameters', b'distortion_parameters', 'intrinsic_parameters', b'intrinsic_parameters']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:data:: RESOURCE_NAMESPACE_RDK
   :value: 'rdk'


.. py:data:: RESOURCE_TYPE_COMPONENT
   :value: 'component'


.. py:class:: Subtype(namespace: str, resource_type: str, resource_subtype: str)

   Represents a known component/service (resource) API


   .. py:attribute:: namespace
      :type:  str

      The namespace of the resource


   .. py:attribute:: resource_type
      :type:  str

      The type of the resource, for example `component` or `service`


   .. py:attribute:: resource_subtype
      :type:  str

      The subtype of the resource for example `servo`, `arm`, `vision`


   .. py:method:: __str__() -> str

      Return str(self).



   .. py:method:: __repr__() -> str

      Return repr(self).



   .. py:method:: __hash__() -> int

      Return hash(self).



   .. py:method:: __eq__(other: object) -> bool

      Return self==value.



   .. py:method:: from_resource_name(resource_name: viam.proto.common.ResourceName) -> typing_extensions.Self
      :classmethod:


      Convert a ```ResourceName``` into a ```Subtype```

      :param resource_name: The ResourceName to convert
      :type resource_name: viam.proto.common.ResourceName

      :returns: A new Subtype
      :rtype: Self



   .. py:method:: from_string(string: str) -> typing_extensions.Self
      :classmethod:


      Create a ```Subtype``` from its string representation (namespace:resource_type:resource_subtype)

      :param string: The Subtype as a string
      :type string: str

      :raises ValueError: Raised if the string does not represent a valid Subtype

      :returns: A new Subtype
      :rtype: Self



.. py:class:: ComponentBase(name: str)

   Bases: :py:obj:`abc.ABC`, :py:obj:`viam.resource.base.ResourceBase`


   Base component.
   All components must inherit from this class.


   .. py:attribute:: SUBTYPE
      :type:  ClassVar[viam.resource.types.Subtype]


   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:


      Get the component named ``name`` from the provided robot.

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the component
      :type name: str

      :returns: The component, if it exists on the robot
      :rtype: Self



   .. py:method:: do_command(command: Mapping[str, ValueTypes], *, timeout: Optional[float] = None, **kwargs) -> Mapping[str, ValueTypes]
      :abstractmethod:

      :async:


      Send/Receive arbitrary commands to the Resource

      ::

          command = {"cmd": "test", "data1": 500}
          result = component.do(command)

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]



   .. py:method:: get_geometries(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> List[viam.proto.common.Geometry]
      :async:


      Get all geometries associated with the component, in their current configuration, in the
      `frame <https://docs.viam.com/services/frame-system/>`__ of the component.

      ::

          geometries = await component.get_geometries()

          if geometries:
              # Get the center of the first geometry
              print(f"Pose of the first geometry's centerpoint: {geometries[0].center}")

      :returns: The geometries associated with the Component.
      :rtype: List[Geometry]



   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:


      Get the ResourceName for this Resource with the given name

      ::

          # Can be used with any resource, using an arm as an example
          my_arm_name = my_arm.get_resource_name("my_arm")

      :param name: The name of the Resource
      :type name: str

      :returns: The ResourceName of this Resource
      :rtype: ResourceName



   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation



   .. py:method:: close()
      :async:


      Safely shut down the resource and prevent further use.

      Close must be idempotent. Later configuration may allow a resource to be "open" again.
      If a resource does not want or need a close function, it is assumed that the resource does not need to return errors when future
      non-Close methods are called.

      ::

          await component.close()




.. py:class:: Camera(name: str)

   Bases: :py:obj:`viam.components.component_base.ComponentBase`


   Camera represents any physical hardware that can capture frames.

   This acts as an abstract base class for any drivers representing specific
   camera implementations. This cannot be used on its own. If the ``__init__()`` function is
   overridden, it must call the ``super().__init__()`` function.

   ::

       from viam.components.camera import Camera

   For more information, see `Camera component <https://docs.viam.com/components/camera/>`_.


   .. py:attribute:: SUBTYPE
      :type:  Final


   .. py:attribute:: Properties
      :type:  TypeAlias
      :value: GetPropertiesResponse



   .. py:method:: get_image(mime_type: str = '', *, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> viam.media.video.ViamImage
      :abstractmethod:

      :async:


      Get the next image from the camera as a ViamImage.
      Be sure to close the image when finished.

      NOTE: If the mime type is ``image/vnd.viam.dep`` you can use :func:`viam.media.video.ViamImage.bytes_to_depth_array`
      to convert the data to a standard representation.

      ::

          my_camera = Camera.from_robot(robot=robot, name="my_camera")

          # Assume "frame" has a mime_type of "image/vnd.viam.dep"
          frame = await my_camera.get_image(mime_type = CameraMimeType.VIAM_RAW_DEPTH)

          # Convert "frame" to a standard 2D image representation.
          # Remove the 1st 3x8 bytes and reshape the raw bytes to List[List[Int]].
          standard_frame = frame.bytes_to_depth_array()

      :param mime_type: The desired mime type of the image. This does not guarantee output type
      :type mime_type: str

      :returns: The frame.
      :rtype: ViamImage

      For more information, see `Camera component <https://docs.viam.com/components/camera/>`_.



   .. py:method:: get_images(*, timeout: Optional[float] = None, **kwargs) -> Tuple[List[viam.media.video.NamedImage], viam.proto.common.ResponseMetadata]
      :abstractmethod:

      :async:


      Get simultaneous images from different imagers, along with associated metadata.
      This should not be used for getting a time series of images from the same imager.

      ::

          my_camera = Camera.from_robot(robot=robot, name="my_camera")

          images, metadata = await my_camera.get_images()
          img0 = images[0].image
          timestamp = metadata.captured_at

      :returns: A tuple containing two values; the first [0] a list of images
                returned from the camera system, and the second [1] the metadata associated with this response.
      :rtype: Tuple[List[NamedImage], ResponseMetadata]

      For more information, see `Camera component <https://docs.viam.com/components/camera/>`_.



   .. py:method:: get_point_cloud(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> Tuple[bytes, str]
      :abstractmethod:

      :async:


      Get the next point cloud from the camera. This will be
      returned as bytes with a mimetype describing
      the structure of the data. The consumer of this call
      should encode the bytes into the formatted suggested
      by the mimetype.

      To deserialize the returned information into a numpy array, use the Open3D library.
      ::

          import numpy as np
          import open3d as o3d

          data, _ = await camera.get_point_cloud()

          # write the point cloud into a temporary file
          with open("/tmp/pointcloud_data.pcd", "wb") as f:
              f.write(data)
          pcd = o3d.io.read_point_cloud("/tmp/pointcloud_data.pcd")
          points = np.asarray(pcd.points)

      :returns: A tuple containing two values; the first [0] the pointcloud data,
                and the second [1] the mimetype of the pointcloud (for example, PCD).
      :rtype: Tuple[bytes, str]

      For more information, see `Camera component <https://docs.viam.com/components/camera/>`_.



   .. py:method:: get_properties(*, timeout: Optional[float] = None, **kwargs) -> Properties
      :abstractmethod:

      :async:


      Get the camera intrinsic parameters and camera distortion parameters

      ::

          my_camera = Camera.from_robot(robot=robot, name="my_camera")

          properties = await my_camera.get_properties()

      :returns: The properties of the camera.
      :rtype: Properties

      For more information, see `Camera component <https://docs.viam.com/components/camera/>`_.



   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:


      Get the component named ``name`` from the provided robot.

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the component
      :type name: str

      :returns: The component, if it exists on the robot
      :rtype: Self



   .. py:method:: do_command(command: Mapping[str, ValueTypes], *, timeout: Optional[float] = None, **kwargs) -> Mapping[str, ValueTypes]
      :abstractmethod:

      :async:


      Send/Receive arbitrary commands to the Resource

      ::

          command = {"cmd": "test", "data1": 500}
          result = component.do(command)

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]



   .. py:method:: get_geometries(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> List[viam.proto.common.Geometry]
      :async:


      Get all geometries associated with the component, in their current configuration, in the
      `frame <https://docs.viam.com/services/frame-system/>`__ of the component.

      ::

          geometries = await component.get_geometries()

          if geometries:
              # Get the center of the first geometry
              print(f"Pose of the first geometry's centerpoint: {geometries[0].center}")

      :returns: The geometries associated with the Component.
      :rtype: List[Geometry]



   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:


      Get the ResourceName for this Resource with the given name

      ::

          # Can be used with any resource, using an arm as an example
          my_arm_name = my_arm.get_resource_name("my_arm")

      :param name: The name of the Resource
      :type name: str

      :returns: The ResourceName of this Resource
      :rtype: ResourceName



   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation



   .. py:method:: close()
      :async:


      Safely shut down the resource and prevent further use.

      Close must be idempotent. Later configuration may allow a resource to be "open" again.
      If a resource does not want or need a close function, it is assumed that the resource does not need to return errors when future
      non-Close methods are called.

      ::

          await component.close()




