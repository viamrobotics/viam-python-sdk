viam.components.power_sensor.service
====================================

.. py:module:: viam.components.power_sensor.service


Classes
-------

.. autoapisummary::

   viam.components.power_sensor.service.PowerSensor
   viam.components.power_sensor.service.DoCommandRequest
   viam.components.power_sensor.service.DoCommandResponse
   viam.components.power_sensor.service.GetReadingsRequest
   viam.components.power_sensor.service.GetReadingsResponse
   viam.components.power_sensor.service.GetCurrentRequest
   viam.components.power_sensor.service.GetCurrentResponse
   viam.components.power_sensor.service.GetPowerRequest
   viam.components.power_sensor.service.GetPowerResponse
   viam.components.power_sensor.service.GetVoltageRequest
   viam.components.power_sensor.service.GetVoltageResponse
   viam.components.power_sensor.service.PowerSensorServiceBase
   viam.components.power_sensor.service.ResourceRPCServiceBase
   viam.components.power_sensor.service.PowerSensorRPCService


Functions
---------

.. autoapisummary::

   viam.components.power_sensor.service.dict_to_struct
   viam.components.power_sensor.service.sensor_readings_native_to_value
   viam.components.power_sensor.service.struct_to_dict


Module Contents
---------------

.. py:class:: PowerSensor(name: str)

   Bases: :py:obj:`viam.components.component_base.ComponentBase`


   PowerSensor reports information about voltage, current and power.

   This acts as an abstract base class for any sensors that can provide data regarding voltage, current and/or power.
   This cannot be used on its own. If the ``__init__()`` function is overridden, it must call the ``super().__init__()`` function.

   ::

       from viam.components.power_sensor import PowerSensor


   .. py:attribute:: SUBTYPE
      :type:  Final


   .. py:method:: get_voltage(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> Tuple[float, bool]
      :abstractmethod:

      :async:


      Return the voltage reading of a specified device and whether it is AC or DC.

      ::

          my_power_sensor = PowerSensor.from_robot(robot=robot, name='my_power_sensor')

          # Get the voltage reading from the power sensor
          voltage, is_ac = await my_power_sensor.get_voltage()
          print("The voltage is", voltage, "V, Is AC:", is_ac)

      :returns: A float representing the voltage reading in V. A bool indicating whether the voltage is AC (`true`) or DC
                (`false`).
      :rtype: Tuple[float, bool]



   .. py:method:: get_current(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> Tuple[float, bool]
      :abstractmethod:

      :async:


      Return the current of a specified device and whether it is AC or DC.

      ::

          my_power_sensor = PowerSensor.from_robot(robot=robot, name='my_power_sensor')

          # Get the current reading from the power sensor
          current, is_ac = await my_power_sensor.get_current()
          print("The current is ", current, " A, Is AC: ", is_ac)

      :returns: A tuple which includes a float representing the current reading in amps, and a bool indicating whether the
                current is AC (`true`) or DC (`false`).
      :rtype: Tuple[float, bool]



   .. py:method:: get_power(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> float
      :abstractmethod:

      :async:


      Return the power reading in watts.

      ::

          my_power_sensor = PowerSensor.from_robot(robot=robot, name='my_power_sensor')

          # Get the power reading from the power sensor
          power = await my_power_sensor.get_power()
          print("The power is", power, "Watts")

      :returns: The power reading in watts.
      :rtype: float



   .. py:method:: get_readings(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> Mapping[str, viam.utils.SensorReading]
      :async:


      Get the measurements or readings that this power sensor provides. If a sensor is not configured correctly or fails to read a
      piece of data, it will not appear in the readings dictionary.

      ::

          my_power_sensor = PowerSensor.from_robot(robot=robot, name='my_power_sensor')

          # Get the readings provided by the sensor.
          readings = await my_power_sensor.get_readings()

      :returns:

                The readings for the PowerSensor. Can be of any type. Includes voltage in volts (float), current in
                    amperes (float), is_ac (bool), and power in watts (float).
      :rtype: Mapping[str, Any]



   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:


      Get the component named ``name`` from the provided robot.

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the component
      :type name: str

      :returns: The component, if it exists on the robot
      :rtype: Self



   .. py:method:: do_command(command: Mapping[str, ValueTypes], *, timeout: Optional[float] = None, **kwargs) -> Mapping[str, ValueTypes]
      :abstractmethod:

      :async:


      Send/Receive arbitrary commands to the Resource

      ::

          command = {"cmd": "test", "data1": 500}
          result = component.do(command)

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]



   .. py:method:: get_geometries(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> List[viam.proto.common.Geometry]
      :async:


      Get all geometries associated with the component, in their current configuration, in the
      `frame <https://docs.viam.com/services/frame-system/>`__ of the component.

      ::

          geometries = await component.get_geometries()

          if geometries:
              # Get the center of the first geometry
              print(f"Pose of the first geometry's centerpoint: {geometries[0].center}")

      :returns: The geometries associated with the Component.
      :rtype: List[Geometry]



   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:


      Get the ResourceName for this Resource with the given name

      ::

          # Can be used with any resource, using an arm as an example
          my_arm_name = my_arm.get_resource_name("my_arm")

      :param name: The name of the Resource
      :type name: str

      :returns: The ResourceName of this Resource
      :rtype: ResourceName



   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation



   .. py:method:: close()
      :async:


      Safely shut down the resource and prevent further use.

      Close must be idempotent. Later configuration may allow a resource to be "open" again.
      If a resource does not want or need a close function, it is assumed that the resource does not need to return errors when future
      non-Close methods are called.

      ::

          await component.close()




.. py:class:: DoCommandRequest(*, name: str = ..., command: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   DoCommandRequest represents a generic DoCommand input


   .. py:attribute:: name
      :type:  str


   .. py:property:: command
      :type: google.protobuf.struct_pb2.Struct



   .. py:method:: HasField(field_name: Literal['command', b'command']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: DoCommandResponse(*, result: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   DoCommandResponse represents a generic DoCommand output


   .. py:property:: result
      :type: google.protobuf.struct_pb2.Struct



   .. py:method:: HasField(field_name: Literal['result', b'result']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: GetReadingsRequest(*, name: str = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str

      Name of a sensor


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['extra', b'extra']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: GetReadingsResponse(*, readings: collections.abc.Mapping[str, google.protobuf.struct_pb2.Value] | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:class:: ReadingsEntry(*, key: str = ..., value: google.protobuf.struct_pb2.Value | None = ...)

      Bases: :py:obj:`google.protobuf.message.Message`


      Abstract base class for protocol messages.

      Protocol message classes are almost always generated by the protocol
      compiler.  These generated types subclass Message and implement the methods
      shown below.


      .. py:attribute:: key
         :type:  str


      .. py:property:: value
         :type: google.protobuf.struct_pb2.Value



      .. py:method:: HasField(field_name: Literal['value', b'value']) -> bool

         Checks if a certain field is set for the message.

         For a oneof group, checks if any field inside is set. Note that if the
         field_name is not defined in the message descriptor, :exc:`ValueError` will
         be raised.

         :param field_name: The name of the field to check for presence.
         :type field_name: str

         :returns: Whether a value has been set for the named field.
         :rtype: bool

         :raises ValueError: if the `field_name` is not a member of this message.




   .. py:property:: readings
      :type: google.protobuf.internal.containers.MessageMap[str, google.protobuf.struct_pb2.Value]



.. py:class:: GetCurrentRequest(*, name: str = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str

      Name of a power sensor


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['extra', b'extra']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: GetCurrentResponse(*, amperes: float = ..., is_ac: bool = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: amperes
      :type:  float

      Current in amperes


   .. py:attribute:: is_ac
      :type:  bool

      Bool descibing whether the current is DC or AC


.. py:class:: GetPowerRequest(*, name: str = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str

      Name of a power sensor


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['extra', b'extra']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: GetPowerResponse(*, watts: float = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: watts
      :type:  float

      Power in watts


.. py:class:: GetVoltageRequest(*, name: str = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str

      Name of a power sensor


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['extra', b'extra']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: GetVoltageResponse(*, volts: float = ..., is_ac: bool = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: volts
      :type:  float

      Voltage in volts


   .. py:attribute:: is_ac
      :type:  bool

      Bool describing whether the voltage is DC or AC


.. py:class:: PowerSensorServiceBase

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: GetVoltage(stream: grpclib.server.Stream[component.powersensor.v1.powersensor_pb2.GetVoltageRequest, component.powersensor.v1.powersensor_pb2.GetVoltageResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: GetCurrent(stream: grpclib.server.Stream[component.powersensor.v1.powersensor_pb2.GetCurrentRequest, component.powersensor.v1.powersensor_pb2.GetCurrentResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: GetPower(stream: grpclib.server.Stream[component.powersensor.v1.powersensor_pb2.GetPowerRequest, component.powersensor.v1.powersensor_pb2.GetPowerResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: GetReadings(stream: grpclib.server.Stream[common.v1.common_pb2.GetReadingsRequest, common.v1.common_pb2.GetReadingsResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: DoCommand(stream: grpclib.server.Stream[common.v1.common_pb2.DoCommandRequest, common.v1.common_pb2.DoCommandResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: __mapping__() -> Dict[str, grpclib.const.Handler]


.. py:class:: ResourceRPCServiceBase(manager: viam.resource.manager.ResourceManager)

   Bases: :py:obj:`abc.ABC`, :py:obj:`viam.rpc.types.RPCServiceBase`, :py:obj:`Generic`\ [\ :py:obj:`viam.resource.manager.ResourceType`\ ]


   Base RPC service for a resource.
   All resource RPC services must inherit from this class.


   .. py:attribute:: RESOURCE_TYPE


   .. py:attribute:: manager
      :type:  viam.resource.manager.ResourceManager


   .. py:method:: get_resource(name: str) -> viam.resource.manager.ResourceType

      Return the resource with the given name if it exists in the registry.
      If the resource does not exist in the registry,
      this function will raise an error

      :param name: Name of the resource
      :type name: str

      :raises GRPCError with the status code Status.NOT_FOUND:

      :returns: The resource
      :rtype: ResourceType



.. py:function:: dict_to_struct(obj: Mapping[str, ValueTypes]) -> google.protobuf.struct_pb2.Struct

.. py:function:: sensor_readings_native_to_value(readings: Mapping[str, Any]) -> Mapping[str, google.protobuf.struct_pb2.Value]

.. py:function:: struct_to_dict(struct: google.protobuf.struct_pb2.Struct) -> Dict[str, ValueTypes]

.. py:class:: PowerSensorRPCService(manager: viam.resource.manager.ResourceManager)

   Bases: :py:obj:`viam.proto.component.powersensor.PowerSensorServiceBase`, :py:obj:`viam.resource.rpc_service_base.ResourceRPCServiceBase`\ [\ :py:obj:`viam.components.power_sensor.power_sensor.PowerSensor`\ ]


   gRPC Service for a PowerSensor


   .. py:attribute:: RESOURCE_TYPE


   .. py:method:: GetReadings(stream: grpclib.server.Stream[viam.proto.common.GetReadingsRequest, viam.proto.common.GetReadingsResponse]) -> None
      :async:



   .. py:method:: GetVoltage(stream: grpclib.server.Stream[viam.proto.component.powersensor.GetVoltageRequest, viam.proto.component.powersensor.GetVoltageResponse]) -> None
      :async:



   .. py:method:: GetCurrent(stream: grpclib.server.Stream[viam.proto.component.powersensor.GetCurrentRequest, viam.proto.component.powersensor.GetCurrentResponse]) -> None
      :async:



   .. py:method:: GetPower(stream: grpclib.server.Stream[viam.proto.component.powersensor.GetPowerRequest, viam.proto.component.powersensor.GetPowerResponse]) -> None
      :async:



   .. py:method:: DoCommand(stream: grpclib.server.Stream[viam.proto.common.DoCommandRequest, viam.proto.common.DoCommandResponse]) -> None
      :async:



