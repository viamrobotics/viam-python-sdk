:py:mod:`viam.components.generic`
=================================

.. py:module:: viam.components.generic


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   client/index.rst
   generic/index.rst
   service/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.generic.Geometry
   viam.components.generic.Generic




.. py:class:: Geometry(*, center: global___Pose | None = ..., sphere: global___Sphere | None = ..., box: global___RectangularPrism | None = ..., capsule: global___Capsule | None = ..., label: str = ...)


   Bases: :py:obj:`google.protobuf.message.Message`

   Geometry contains the dimensions of a given geometry and the pose of its center. The geometry is one of either a sphere or a box.

   .. py:property:: center
      :type: global___Pose

      Pose of a geometries center point

   .. py:property:: sphere
      :type: global___Sphere


   .. py:property:: box
      :type: global___RectangularPrism


   .. py:property:: capsule
      :type: global___Capsule


   .. py:attribute:: label
      :type: str

      Label of the geometry. If none supplied, will be an empty string.

   .. py:method:: HasField(field_name: Literal[box, b'box', capsule, b'capsule', center, b'center', geometry_type, b'geometry_type', sphere, b'sphere']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.


   .. py:method:: WhichOneof(oneof_group: Literal[geometry_type, b'geometry_type']) -> Literal[sphere, box, capsule] | None

      Returns the name of the field that is set inside a oneof group.

      If no field is set, returns None.

      :param oneof_group: the name of the oneof group to check.
      :type oneof_group: str

      :returns: The name of the group that is set, or None.
      :rtype: str or None

      :raises ValueError: no group with the given name exists



.. py:class:: Generic(name: str)


   Bases: :py:obj:`viam.components.component_base.ComponentBase`

   Generic component, which represents any type of component that can executes arbitrary commands

   This acts as an abstract base class for any drivers representing generic components.
   This cannot be used on its own. If the ``__init__()`` function is overridden, it must call the ``super().__init__()`` function.

   To create a Generic component (an arbitrary component that can process commands), this ``Generic`` component should be subclassed
   and the ``do_command`` function implemented.

   Example::

       class ComplexComponent(Generic):

           async def do_command(
               self,
               command: Mapping[str, ValueTypes],
               *,
               timeout: Optional[float] = None,
               **kwargs
           ) -> Mapping[str, ValueTypes]:
               result = {key: False for key in command.keys()}
               for (name, args) in command.items():
                   if name == 'on':
                       self.on(*args)
                       result[name] = True
                   if name == 'set_frequency':
                       self.set_frequency(*args)
                       result[name] = True
                   if name == 'get_frequency':
                       result[name] = self.frequency
                   if name == 'complex_command':
                       self.complex_command(*args)
                       result[name] = True
               return result

           def set_frequency(self, frequency: int):
               self.frequency = frequency

           def on(self, frequency: int, duration: int):
               self.frequency = frequency
               self.power = 1
               task = threading.Timer(duration, self.off)
               task.start()

           def off(self):
               self.power = 0

           def complex_command(self, arg1, arg2, arg3):
               ...

   To execute commands, simply call the ``do_command`` function with the appropriate parameters.
   ::

       await component.do_command({'on': [300, 10]})
       component.power  # 1
       await asyncio.sleep(10)
       component.power  # 0

   .. py:attribute:: SUBTYPE
      :type: Final

      

   .. py:method:: get_geometries() -> List[viam.components.generic.Geometry]
      :abstractmethod:
      :async:

      Get all geometries associated with the generic component, in their current configuration, in the frame of the generic component.

      :returns: The geometries associated with the generic component.
      :rtype: List[Geometry]


   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:

      Get the component named ``name`` from the provided robot.

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the component
      :type name: str

      :returns: The component, if it exists on the robot
      :rtype: Self


   .. py:method:: do_command(command: Mapping[str, ValueTypes], *, timeout: Optional[float] = None, **kwargs) -> Mapping[str, ValueTypes]
      :abstractmethod:
      :async:

      Send/Receive arbitrary commands to the Resource

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]


   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:

      Get the ResourceName for this Resource with the given name

      :param name: The name of the Resource
      :type name: str


   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation



