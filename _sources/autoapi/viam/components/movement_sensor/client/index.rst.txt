:py:mod:`viam.components.movement_sensor.client`
================================================

.. py:module:: viam.components.movement_sensor.client


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.movement_sensor.client.MovementSensorClient




.. py:class:: MovementSensorClient(name: str, channel: grpclib.client.Channel)



   gRPC client for the MovementSensor component.

   .. py:method:: get_position(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> Tuple[viam.proto.common.GeoPoint, float]
      :async:

      Get the current GeoPoint (latitude, longitude) and altitude (mm)

      :returns: The current lat/long, along with the altitude in mm
      :rtype: Tuple[GeoPoint, float]


   .. py:method:: get_linear_velocity(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> viam.proto.common.Vector3
      :async:

      Get the current linear velocity as a ``Vector3`` with x, y, and z axes represented in mm/sec

      :returns: The linear velocity in mm/sec
      :rtype: Vector3


   .. py:method:: get_angular_velocity(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> viam.proto.common.Vector3
      :async:

      Get the current angular velocity as a ``Vector3`` with x, y, and z axes represented in radians/sec

      :returns: The angular velocity in rad/sec
      :rtype: Vector3


   .. py:method:: get_linear_acceleration(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> viam.proto.common.Vector3
      :async:

      Get the current linear acceleration as a ``Vector3`` with x, y, and z axes represented in mm/sec^2

      :returns: The linear acceleration in mm/sec^2
      :rtype: Vector3


   .. py:method:: get_compass_heading(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> float
      :async:

      Get the current compass heading in degrees

      :returns: The compass heading in degrees
      :rtype: float


   .. py:method:: get_orientation(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> viam.proto.common.Orientation
      :async:

      Get the current orientation

      :returns: The orientation
      :rtype: Orientation


   .. py:method:: get_properties(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> viam.components.movement_sensor.movement_sensor.MovementSensor.Properties
      :async:

      Get the supported properties of this sensor

      :returns: The properties
      :rtype: Properties


   .. py:method:: get_accuracy(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> Mapping[str, float]
      :async:

      Get the accuracy of the various sensors

      :returns: The accuracy in mm
      :rtype: Dict[str, float]


   .. py:method:: get_readings(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> Mapping[str, Any]
      :async:

      Obtain the measurements/data specific to this sensor.

      :returns: The readings for the MovementSensor:
                {
                    position: GeoPoint,
                    altitude: float,
                    linear_velocity: Vector3,
                    angular_velocity: Vector3,
                    compass: float,
                    orientation: Orientation
                }
      :rtype: Mapping[str, Any]


   .. py:method:: do_command(command: Mapping[str, viam.utils.ValueTypes], *, timeout: Optional[float] = None) -> Mapping[str, viam.utils.ValueTypes]
      :async:

      Send/Receive arbitrary commands

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the component does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]



