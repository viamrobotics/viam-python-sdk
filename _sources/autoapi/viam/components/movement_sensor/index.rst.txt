:py:mod:`viam.components.movement_sensor`
=========================================

.. py:module:: viam.components.movement_sensor


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   client/index.rst
   movement_sensor/index.rst
   service/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.movement_sensor.GeoPoint
   viam.components.movement_sensor.MovementSensor
   viam.components.movement_sensor.Orientation
   viam.components.movement_sensor.Vector3




.. py:class:: GeoPoint(*, latitude: float = ..., longitude: float = ...)



   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.

   .. py:attribute:: latitude
      :type: float

      

   .. py:attribute:: longitude
      :type: float

      


.. py:class:: MovementSensor(name: str)



   MovementSensor reports information about the robot's direction, position and speed.

   This acts as an abstract base class for any sensors that can provide data regarding the robot's direction, position, and speed.
   This cannot be used on its own. If the ``__init__()`` function is overridden, it must call the ``super().__init__()`` function.

   .. py:attribute:: SUBTYPE
      :type: Final

      

   .. py:attribute:: Properties

      

   .. py:method:: get_position(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> Tuple[viam.proto.common.GeoPoint, float]
      :abstractmethod:
      :async:

      Get the current GeoPoint (latitude, longitude) and altitude (mm)

      :returns: The current lat/long, along with the altitude in mm
      :rtype: Tuple[GeoPoint, float]


   .. py:method:: get_linear_velocity(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> viam.proto.common.Vector3
      :abstractmethod:
      :async:

      Get the current linear velocity as a ``Vector3`` with x, y, and z axes represented in mm/sec

      :returns: The linear velocity in mm/sec
      :rtype: Vector3


   .. py:method:: get_angular_velocity(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> viam.proto.common.Vector3
      :abstractmethod:
      :async:

      Get the current angular velocity as a ``Vector3`` with x, y, and z axes represented in radians/sec

      :returns: The angular velocity in rad/sec
      :rtype: Vector3


   .. py:method:: get_linear_acceleration(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> viam.proto.common.Vector3
      :abstractmethod:
      :async:

      Get the current linear acceleration as a ``Vector3`` with x, y, and z axes represented in mm/sec^2

      :returns: The linear acceleration in mm/sec^2
      :rtype: Vector3


   .. py:method:: get_compass_heading(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> float
      :abstractmethod:
      :async:

      Get the current compass heading in degrees

      :returns: The compass heading in degrees
      :rtype: float


   .. py:method:: get_orientation(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> viam.proto.common.Orientation
      :abstractmethod:
      :async:

      Get the current orientation

      :returns: The orientation
      :rtype: Orientation


   .. py:method:: get_properties(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> Properties
      :abstractmethod:
      :async:

      Get the supported properties of this sensor

      :returns: The properties
      :rtype: Properties


   .. py:method:: get_accuracy(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> Mapping[str, float]
      :abstractmethod:
      :async:

      Get the accuracy of the various sensors

      :returns: The accuracy in mm
      :rtype: Dict[str, float]


   .. py:method:: get_readings(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> Mapping[str, Any]
      :async:

      Obtain the measurements/data specific to this sensor.
      If a sensor is not configured to have a measurement or fails to read a piece of data, it will not appear in the readings dictionary.

      :returns: The readings for the MovementSensor:
                {
                    position: GeoPoint,
                    altitude: float,
                    linear_velocity: Vector3,
                    angular_velocity: Vector3,
                    linear_acceleration: Vector3
                    compass: float,
                    orientation: Orientation
                }
      :rtype: Mapping[str, Any]



.. py:class:: Orientation(*, o_x: float = ..., o_y: float = ..., o_z: float = ..., theta: float = ...)



   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.

   .. py:attribute:: o_x
      :type: float

      x component of a vector defining axis of rotation

   .. py:attribute:: o_y
      :type: float

      y component of a vector defining axis of rotation

   .. py:attribute:: o_z
      :type: float

      z component of a vector defining axis of rotation

   .. py:attribute:: theta
      :type: float

      degrees


.. py:class:: Vector3(*, x: float = ..., y: float = ..., z: float = ...)



   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.

   .. py:attribute:: x
      :type: float

      

   .. py:attribute:: y
      :type: float

      

   .. py:attribute:: z
      :type: float

      


