viam.components.servo.servo
===========================

.. py:module:: viam.components.servo.servo


Classes
-------

.. autoapisummary::

   viam.components.servo.servo.Servo


Module Contents
---------------

.. py:class:: Servo(name: str)

   Bases: :py:obj:`viam.components.component_base.ComponentBase`


   Servo represents a physical servo.

   This acts as an abstract base class for any drivers representing specific
   servo implementations. This cannot be used on its own. If the ``__init__()`` function is
   overridden, it must call the ``super().__init__()`` function.

   ::

       from viam.components.servo import Servo

   For more information, see `Servo component <https://docs.viam.com/components/servo/>`_.


   .. py:attribute:: SUBTYPE
      :type:  Final

      The Subtype of the Resource


   .. py:method:: move(angle: int, *, extra: Optional[Mapping[str, Any]] = None, timeout: Optional[float] = None, **kwargs)
      :abstractmethod:

      :async:


      Move the servo to the provided angle.

      ::

          my_servo = Servo.from_robot(robot=robot, name="my_servo")

          # Move the servo from its origin to the desired angle of 10 degrees.
          await my_servo.move(10)

          # Move the servo from its origin to the desired angle of 90 degrees.
          await my_servo.move(90)

      :param angle: The desired angle of the servo in degrees.
      :type angle: int

      For more information, see `Servo component <https://docs.viam.com/components/servo/>`_.



   .. py:method:: get_position(*, extra: Optional[Mapping[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> int
      :abstractmethod:

      :async:


      Get the current angle (degrees) of the servo.

      ::

          my_servo = Servo.from_robot(robot=robot, name="my_servo")

          # Move the servo from its origin to the desired angle of 10 degrees.
          await my_servo.move(10)

          # Get the current set angle of the servo.
          pos1 = await my_servo.get_position()

          # Move the servo from its origin to the desired angle of 20 degrees.
          await my_servo.move(20)

          # Get the current set angle of the servo.
          pos2 = await my_servo.get_position()

      :returns: The current angle of the servo in degrees.
      :rtype: int

      For more information, see `Servo component <https://docs.viam.com/components/servo/>`_.



   .. py:method:: stop(*, extra: Optional[Mapping[str, Any]] = None, timeout: Optional[float] = None, **kwargs)
      :abstractmethod:

      :async:


      Stop the servo. It is assumed that the servo stops immediately.

      ::

          my_servo = Servo.from_robot(robot=robot, name="my_servo")

          # Move the servo from its origin to the desired angle of 10 degrees.
          await my_servo.move(10)

          # Stop the servo. It is assumed that the servo stops moving immediately.
          await my_servo.stop()

      For more information, see `Servo component <https://docs.viam.com/components/servo/>`_.



   .. py:method:: is_moving() -> bool
      :abstractmethod:

      :async:


      Get if the servo is currently moving.

      ::

          my_servo = Servo.from_robot(robot=robot, name="my_servo")

          print(my_servo.is_moving())


      :returns: Whether the servo is moving.
      :rtype: bool

      For more information, see `Servo component <https://docs.viam.com/components/servo/>`_.



   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:


      Get the component named ``name`` from the provided robot.

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the component
      :type name: str

      :returns: The component, if it exists on the robot
      :rtype: Self



   .. py:method:: do_command(command: Mapping[str, ValueTypes], *, timeout: Optional[float] = None, **kwargs) -> Mapping[str, ValueTypes]
      :abstractmethod:

      :async:


      Send/Receive arbitrary commands to the Resource

      ::

          command = {"cmd": "test", "data1": 500}
          result = component.do(command)

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]



   .. py:method:: get_geometries(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> List[viam.proto.common.Geometry]
      :async:


      Get all geometries associated with the component, in their current configuration, in the
      `frame <https://docs.viam.com/services/frame-system/>`__ of the component.

      ::

          geometries = await component.get_geometries()

          if geometries:
              # Get the center of the first geometry
              print(f"Pose of the first geometry's centerpoint: {geometries[0].center}")

      :returns: The geometries associated with the Component.
      :rtype: List[Geometry]



   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:


      Get the ResourceName for this Resource with the given name

      ::

          # Can be used with any resource, using an arm as an example
          my_arm_name = my_arm.get_resource_name("my_arm")

      :param name: The name of the Resource
      :type name: str

      :returns: The ResourceName of this Resource
      :rtype: ResourceName



   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation



   .. py:method:: close()
      :async:


      Safely shut down the resource and prevent further use.

      Close must be idempotent. Later configuration may allow a resource to be "open" again.
      If a resource does not want or need a close function, it is assumed that the resource does not need to return errors when future
      non-Close methods are called.

      ::

          await component.close()




