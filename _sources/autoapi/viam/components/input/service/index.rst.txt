viam.components.input.service
=============================

.. py:module:: viam.components.input.service


Attributes
----------

.. autoapisummary::

   viam.components.input.service.LOGGER


Exceptions
----------

.. autoapisummary::

   viam.components.input.service.NotSupportedError


Classes
-------

.. autoapisummary::

   viam.components.input.service.DoCommandRequest
   viam.components.input.service.DoCommandResponse
   viam.components.input.service.GetGeometriesRequest
   viam.components.input.service.GetGeometriesResponse
   viam.components.input.service.GetControlsRequest
   viam.components.input.service.GetControlsResponse
   viam.components.input.service.GetEventsRequest
   viam.components.input.service.GetEventsResponse
   viam.components.input.service.InputControllerServiceBase
   viam.components.input.service.StreamEventsRequest
   viam.components.input.service.StreamEventsResponse
   viam.components.input.service.TriggerEventRequest
   viam.components.input.service.TriggerEventResponse
   viam.components.input.service.ResourceRPCServiceBase
   viam.components.input.service.Control
   viam.components.input.service.Controller
   viam.components.input.service.Event
   viam.components.input.service.EventType
   viam.components.input.service.InputControllerRPCService


Functions
---------

.. autoapisummary::

   viam.components.input.service.dict_to_struct
   viam.components.input.service.struct_to_dict


Module Contents
---------------

.. py:exception:: NotSupportedError(message: str)

   Bases: :py:obj:`ViamGRPCError`


   Exception raised when specific component functionality is not supported


.. py:class:: DoCommandRequest(*, name: str = ..., command: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   DoCommandRequest represents a generic DoCommand input


   .. py:attribute:: name
      :type:  str


   .. py:property:: command
      :type: google.protobuf.struct_pb2.Struct



   .. py:method:: HasField(field_name: Literal['command', b'command']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: DoCommandResponse(*, result: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   DoCommandResponse represents a generic DoCommand output


   .. py:property:: result
      :type: google.protobuf.struct_pb2.Struct



   .. py:method:: HasField(field_name: Literal['result', b'result']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: GetGeometriesRequest(*, name: str = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str

      The component name


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['extra', b'extra']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: GetGeometriesResponse(*, geometries: collections.abc.Iterable[global___Geometry] | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:property:: geometries
      :type: google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Geometry]

      All geometries associated with the component, in their current configuration, in the frame of that component.


.. py:class:: GetControlsRequest(*, controller: str = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: controller
      :type:  str

      Name of an input controller


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['extra', b'extra']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: GetControlsResponse(*, controls: collections.abc.Iterable[str] | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:property:: controls
      :type: google.protobuf.internal.containers.RepeatedScalarFieldContainer[str]

      Returns a list of all the controls (buttons and axes) that are
      available to a given Input Controller


.. py:class:: GetEventsRequest(*, controller: str = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: controller
      :type:  str

      Name of an input controller


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['extra', b'extra']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: GetEventsResponse(*, events: collections.abc.Iterable[global___Event] | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:property:: events
      :type: google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Event]

      Returns a list of the most recent event for each control on a given InputController. Effectively provides the current "state" of all
      buttons/axes on a given input controller


.. py:class:: InputControllerServiceBase

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: GetControls(stream: grpclib.server.Stream[component.inputcontroller.v1.input_controller_pb2.GetControlsRequest, component.inputcontroller.v1.input_controller_pb2.GetControlsResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: GetEvents(stream: grpclib.server.Stream[component.inputcontroller.v1.input_controller_pb2.GetEventsRequest, component.inputcontroller.v1.input_controller_pb2.GetEventsResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: StreamEvents(stream: grpclib.server.Stream[component.inputcontroller.v1.input_controller_pb2.StreamEventsRequest, component.inputcontroller.v1.input_controller_pb2.StreamEventsResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: TriggerEvent(stream: grpclib.server.Stream[component.inputcontroller.v1.input_controller_pb2.TriggerEventRequest, component.inputcontroller.v1.input_controller_pb2.TriggerEventResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: DoCommand(stream: grpclib.server.Stream[common.v1.common_pb2.DoCommandRequest, common.v1.common_pb2.DoCommandResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: GetGeometries(stream: grpclib.server.Stream[common.v1.common_pb2.GetGeometriesRequest, common.v1.common_pb2.GetGeometriesResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: __mapping__() -> Dict[str, grpclib.const.Handler]


.. py:class:: StreamEventsRequest(*, controller: str = ..., events: collections.abc.Iterable[global___StreamEventsRequest] | None = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:class:: Events(*, control: str = ..., events: collections.abc.Iterable[str] | None = ..., cancelled_events: collections.abc.Iterable[str] | None = ...)

      Bases: :py:obj:`google.protobuf.message.Message`


      Abstract base class for protocol messages.

      Protocol message classes are almost always generated by the protocol
      compiler.  These generated types subclass Message and implement the methods
      shown below.


      .. py:attribute:: control
         :type:  str

         Name of a control (button or axis)


      .. py:property:: events
         :type: google.protobuf.internal.containers.RepeatedScalarFieldContainer[str]

         Specify which event types to recieve events for


      .. py:property:: cancelled_events
         :type: google.protobuf.internal.containers.RepeatedScalarFieldContainer[str]

         Specify which event types to stop recieving events for
         This can be an empty list



   .. py:attribute:: controller
      :type:  str

      Name of an input controller


   .. py:property:: events
      :type: google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StreamEventsRequest]

      A list of Events


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['extra', b'extra']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: StreamEventsResponse(*, event: global___Event | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:property:: event
      :type: global___Event

      Event for a controller


   .. py:method:: HasField(field_name: Literal['event', b'event']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: TriggerEventRequest(*, controller: str = ..., event: global___Event | None = ..., extra: google.protobuf.struct_pb2.Struct | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: controller
      :type:  str

      Name of an input controller


   .. py:property:: event
      :type: global___Event

      Digitally assert a given event


   .. py:property:: extra
      :type: google.protobuf.struct_pb2.Struct

      Additional arguments to the method


   .. py:method:: HasField(field_name: Literal['event', b'event', 'extra', b'extra']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: TriggerEventResponse

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


.. py:class:: ResourceRPCServiceBase(manager: viam.resource.manager.ResourceManager)

   Bases: :py:obj:`abc.ABC`, :py:obj:`viam.rpc.types.RPCServiceBase`, :py:obj:`Generic`\ [\ :py:obj:`viam.resource.manager.ResourceType`\ ]


   Base RPC service for a resource.
   All resource RPC services must inherit from this class.


   .. py:attribute:: RESOURCE_TYPE


   .. py:attribute:: manager
      :type:  viam.resource.manager.ResourceManager


   .. py:method:: get_resource(name: str) -> viam.resource.manager.ResourceType

      Return the resource with the given name if it exists in the registry.
      If the resource does not exist in the registry,
      this function will raise an error

      :param name: Name of the resource
      :type name: str

      :raises GRPCError with the status code Status.NOT_FOUND:

      :returns: The resource
      :rtype: ResourceType



.. py:function:: dict_to_struct(obj: Mapping[str, ValueTypes]) -> google.protobuf.struct_pb2.Struct

.. py:function:: struct_to_dict(struct: google.protobuf.struct_pb2.Struct) -> Dict[str, ValueTypes]

.. py:class:: Control

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Control identifies the input (specific Axis or Button) of a controller.


   .. py:attribute:: ABSOLUTE_X
      :value: 'AbsoluteX'



   .. py:attribute:: ABSOLUTE_Y
      :value: 'AbsoluteY'



   .. py:attribute:: ABSOLUTE_Z
      :value: 'AbsoluteZ'



   .. py:attribute:: ABSOLUTE_RX
      :value: 'AbsoluteRX'



   .. py:attribute:: ABSOLUTE_RY
      :value: 'AbsoluteRY'



   .. py:attribute:: ABSOLUTE_RZ
      :value: 'AbsoluteRZ'



   .. py:attribute:: ABSOLUTE_HAT0_X
      :value: 'AbsoluteHat0X'



   .. py:attribute:: ABSOLUTE_HAT0_Y
      :value: 'AbsoluteHat0Y'



   .. py:attribute:: BUTTON_SOUTH
      :value: 'ButtonSouth'



   .. py:attribute:: BUTTON_EAST
      :value: 'ButtonEast'



   .. py:attribute:: BUTTON_WEST
      :value: 'ButtonWest'



   .. py:attribute:: BUTTON_NORTH
      :value: 'ButtonNorth'



   .. py:attribute:: BUTTON_LT
      :value: 'ButtonLT'



   .. py:attribute:: BUTTON_RT
      :value: 'ButtonRT'



   .. py:attribute:: BUTTON_LT2
      :value: 'ButtonLT2'



   .. py:attribute:: BUTTON_RT2
      :value: 'ButtonRT2'



   .. py:attribute:: BUTTON_L_THUMB
      :value: 'ButtonLThumb'



   .. py:attribute:: BUTTON_R_THUMB
      :value: 'ButtonRThumb'



   .. py:attribute:: BUTTON_SELECT
      :value: 'ButtonSelect'



   .. py:attribute:: BUTTON_START
      :value: 'ButtonStart'



   .. py:attribute:: BUTTON_MENU
      :value: 'ButtonMenu'



   .. py:attribute:: BUTTON_RECORD
      :value: 'ButtonRecord'



   .. py:attribute:: BUTTON_E_STOP
      :value: 'ButtonEStop'



   .. py:attribute:: ABSOLUTE_PEDAL_ACCELERATOR
      :value: 'AbsolutePedalAccelerator'



   .. py:attribute:: ABSOLUTE_PEDAL_BRAKE
      :value: 'AbsolutePedalBrake'



   .. py:attribute:: ABSOLUTE_PEDAL_CLUTCH
      :value: 'AbsolutePedalClutch'



.. py:class:: Controller(name: str)

   Bases: :py:obj:`viam.components.component_base.ComponentBase`


   Controller is a logical "container" more than an actual device
   Could be a single gamepad, or a collection of digitalInterrupts
   and analogReaders, a keyboard, etc.

   ::

       from viam.components.input import Control, Controller, EventType


   .. py:attribute:: SUBTYPE
      :type:  Final


   .. py:method:: get_controls(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> List[Control]
      :abstractmethod:

      :async:


      Returns a list of Controls provided by the Controller

      ::

          # Get the controller from the machine.
          my_controller = Controller.from_robot(
              robot=myRobotWithController, name="my_controller")

          # Get the list of Controls provided by the controller.
          controls = await my_controller.get_controls()

          # Print the list of Controls provided by the controller.
          print(f"Controls: {controls}")

      :returns: List of controls provided by the Controller
      :rtype: List[Control]



   .. py:method:: get_events(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> Dict[Control, Event]
      :abstractmethod:

      :async:


      Returns the most recent Event for each input
      (which should be the current state)

      ::

          # Get the controller from the machine.
          my_controller = Controller.from_robot(
              robot=myRobotWithController, name="my_controller")

          # Get the most recent Event for each Control.
          recent_events = await my_controller.get_events()

          # Print out the most recent Event for each Control.
          print(f"Recent Events: {recent_events}")

      :returns: The most recent event for each input
      :rtype: Dict[Control, Event]



   .. py:method:: register_control_callback(control: Control, triggers: List[EventType], function: Optional[ControlFunction], *, extra: Optional[Dict[str, Any]] = None, **kwargs)
      :abstractmethod:


      Register a function that will fire on given EventTypes for a given
      Control

      ::

          # Define a function to handle pressing the Start Menu Button "BUTTON_START" on
          # your controller, printing out the start time.
          def print_start_time(event):
              print(f"Start Menu Button was pressed at this time: {event.time}")


          # Define a function that handles the controller.
          async def handle_controller(controller):
              # Get the list of Controls on the controller.
              controls = await controller.get_controls()

              # If the "BUTTON_START" Control is found, register the function
              # print_start_time to fire when "BUTTON_START" has the event "ButtonPress"
              # occur.
              if Control.BUTTON_START in controls:
                  controller.register_control_callback(
                      Control.BUTTON_START, [EventType.BUTTON_PRESS], print_start_time)
              else:
                  print("Oops! Couldn't find the start button control! Is your "
                      "controller connected?")
                  exit()

              while True:
                  await asyncio.sleep(1.0)


          async def main():
              # ... < INSERT CONNECTION CODE FROM MACHINE'S CODE SAMPLE TAB >

              # Get your controller from the machine.
              my_controller = Controller.from_robot(
                  robot=myRobotWithController, name="my_controller")

              # Run the handleController function.
              await handleController(my_controller)

              # ... < INSERT ANY OTHER CODE FOR MAIN FUNCTION >

      :param control: The control to register the function for
      :type control: Control
      :param triggers: The events that will
                       trigger the function
      :type triggers: List[EventType]
      :param function: The function to run on
                       specific triggers
      :type function: ControlFunction



   .. py:method:: trigger_event(event: Event, *, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> None
      :async:


      Directly send an Event (such as a button press) from external code

      ::

          # Define a "Button is Pressed" event for the control BUTTON_START.
          button_is_pressed_event = Event(
              time(), EventType.BUTTON_PRESS, Control.BUTTON_START, 1.0)

          # Trigger the event on your controller. Set this trigger to timeout if it has
          # not completed in 7 seconds.
          await myController.trigger_event(event=my_event, timeout=7.0)

      :param event: The event to trigger
      :type event: Event



   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:


      Get the component named ``name`` from the provided robot.

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the component
      :type name: str

      :returns: The component, if it exists on the robot
      :rtype: Self



   .. py:method:: do_command(command: Mapping[str, ValueTypes], *, timeout: Optional[float] = None, **kwargs) -> Mapping[str, ValueTypes]
      :abstractmethod:

      :async:


      Send/Receive arbitrary commands to the Resource

      ::

          command = {"cmd": "test", "data1": 500}
          result = component.do(command)

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]



   .. py:method:: get_geometries(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> List[viam.proto.common.Geometry]
      :async:


      Get all geometries associated with the component, in their current configuration, in the
      `frame <https://docs.viam.com/services/frame-system/>`__ of the component.

      ::

          geometries = await component.get_geometries()

          if geometries:
              # Get the center of the first geometry
              print(f"Pose of the first geometry's centerpoint: {geometries[0].center}")

      :returns: The geometries associated with the Component.
      :rtype: List[Geometry]



   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:


      Get the ResourceName for this Resource with the given name

      ::

          # Can be used with any resource, using an arm as an example
          my_arm_name = my_arm.get_resource_name("my_arm")

      :param name: The name of the Resource
      :type name: str

      :returns: The ResourceName of this Resource
      :rtype: ResourceName



   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation



   .. py:method:: close()
      :async:


      Safely shut down the resource and prevent further use.

      Close must be idempotent. Later configuration may allow a resource to be "open" again.
      If a resource does not want or need a close function, it is assumed that the resource does not need to return errors when future
      non-Close methods are called.

      ::

          await component.close()




.. py:class:: Event

   .. py:attribute:: time
      :type:  float

      seconds since epoch


   .. py:attribute:: event
      :type:  EventType


   .. py:attribute:: control
      :type:  Control


   .. py:attribute:: value
      :type:  float

      0 or 1 for buttons, -1.0 to +1.0 for axes


   .. py:property:: proto


   .. py:method:: from_proto(proto: viam.proto.component.inputcontroller.Event) -> typing_extensions.Self
      :classmethod:



.. py:class:: EventType

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Represents the type of input event.


   .. py:attribute:: ALL_EVENTS
      :value: 'AllEvents'


      Callbacks registered for this event will be called in ADDITION to other registered event callbacks.


   .. py:attribute:: CONNECT
      :value: 'Connect'


      Sent at controller initialization, and on reconnects.


   .. py:attribute:: DISCONNECT
      :value: 'Disconnect'


      If unplugged, or wireless/network times out.


   .. py:attribute:: BUTTON_PRESS
      :value: 'ButtonPress'


      Typical key press.


   .. py:attribute:: BUTTON_RELEASE
      :value: 'ButtonRelease'


      Key release.


   .. py:attribute:: BUTTON_HOLD
      :value: 'ButtonHold'


      Key is held down. This wil likely be a repeated event.


   .. py:attribute:: BUTTON_CHANGE
      :value: 'ButtonChange'


      Both up and down for convenience during registration, not typically emitted.


   .. py:attribute:: POSITION_CHANGE_ABSOLUTE
      :value: 'PositionChangeAbs'


      Absolute position is reported via Value, a la joysticks.


   .. py:attribute:: POSITION_CHANGE_RELATIVE
      :value: 'PositionChangeRel'


      Relative position is reported via Value, a la mice, or simulating axes with up/down buttons.


.. py:data:: LOGGER

.. py:class:: InputControllerRPCService(manager: viam.resource.manager.ResourceManager)

   Bases: :py:obj:`viam.proto.component.inputcontroller.InputControllerServiceBase`, :py:obj:`viam.resource.rpc_service_base.ResourceRPCServiceBase`\ [\ :py:obj:`viam.components.input.input.Controller`\ ]


   gRPC Service for an input controller


   .. py:attribute:: RESOURCE_TYPE


   .. py:method:: GetControls(stream: grpclib.server.Stream[viam.proto.component.inputcontroller.GetControlsRequest, viam.proto.component.inputcontroller.GetControlsResponse]) -> None
      :async:



   .. py:method:: GetEvents(stream: grpclib.server.Stream[viam.proto.component.inputcontroller.GetEventsRequest, viam.proto.component.inputcontroller.GetEventsResponse]) -> None
      :async:



   .. py:method:: StreamEvents(stream: grpclib.server.Stream[viam.proto.component.inputcontroller.StreamEventsRequest, viam.proto.component.inputcontroller.StreamEventsResponse]) -> None
      :async:



   .. py:method:: TriggerEvent(stream: grpclib.server.Stream[viam.proto.component.inputcontroller.TriggerEventRequest, viam.proto.component.inputcontroller.TriggerEventResponse]) -> None
      :async:



   .. py:method:: DoCommand(stream: grpclib.server.Stream[viam.proto.common.DoCommandRequest, viam.proto.common.DoCommandResponse]) -> None
      :async:



   .. py:method:: GetGeometries(stream: grpclib.server.Stream[viam.proto.common.GetGeometriesRequest, viam.proto.common.GetGeometriesResponse]) -> None
      :async:



