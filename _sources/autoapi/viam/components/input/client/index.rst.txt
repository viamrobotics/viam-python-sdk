:py:mod:`viam.components.input.client`
======================================

.. py:module:: viam.components.input.client


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.input.client.ControllerClient




Attributes
~~~~~~~~~~

.. autoapisummary::

   viam.components.input.client.LOGGER


.. py:data:: LOGGER

   

.. py:class:: ControllerClient(name: str, channel: grpclib.client.Channel)



   gRPC client for an Input Controller

   .. py:method:: get_controls(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> List[viam.components.input.input.Control]
      :async:

      Returns a list of Controls provided by the Controller

      :returns: List of controls provided by the Controller
      :rtype: List[Control]


   .. py:method:: get_events(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> Dict[viam.components.input.input.Control, viam.components.input.input.Event]
      :async:

      Returns the most recent Event for each input
      (which should be the current state)

      :returns: The most recent event for each input
      :rtype: Dict[Control, Event]


   .. py:method:: register_control_callback(control: viam.components.input.input.Control, triggers: List[viam.components.input.input.EventType], function: Optional[viam.components.input.input.ControlFunction], extra: Optional[Dict[str, Any]] = None)

      Register a function that will fire on given EventTypes for a given
      Control

      :param control: The control to register the function for
      :type control: Control
      :param triggers: The events that will
                       trigger the function
      :type triggers: List[EventType]
      :param function: The function to run on
                       specific triggers
      :type function: ControlFunction


   .. py:method:: reset_channel(channel: grpclib.client.Channel)

      Called when the RPC channel was reset. Passes in the new channel.

      :param channel: The new RPC Channel
      :type channel: Channel


   .. py:method:: trigger_event(event: viam.components.input.input.Event, *, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None)
      :async:

      Directly send an Event (such as a button press) from external code

      :param event: The event to trigger
      :type event: Event


   .. py:method:: do_command(command: Mapping[str, viam.utils.ValueTypes], *, timeout: Optional[float] = None) -> Mapping[str, viam.utils.ValueTypes]
      :async:

      Send/Receive arbitrary commands to the Resource

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]



