:py:mod:`viam.components.encoder.client`
========================================

.. py:module:: viam.components.encoder.client


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.encoder.client.EncoderClient




.. py:class:: EncoderClient(name: str, channel: grpclib.client.Channel)



   gRPC client for the Ecoder component.

   .. py:method:: reset_position(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None)
      :async:

      Set the current position to be the new zero (home) position.


   .. py:method:: get_position(position_type: Optional[viam.proto.component.encoder.PositionType.ValueType] = None, *, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> Tuple[float, viam.proto.component.encoder.PositionType.ValueType]
      :async:

      Report the position of the encoder.
      The value returned is the current position in terms of it's ``position_type``.
      The position will be either in relative units (ticks away from a zero position) for
      ``PositionType.TICKS`` or absolute units (degrees along a circle) for ``PositionType.DEGREES``.

      :param position_type: The desired output type of the position
      :type position_type: PositionType.ValueType

      :returns:

                Position of the encoder which can either be ticks since last zeroing
                       for a relative encoder or degrees for an absolute encoder.
                PositionType: The type of position the encoder returns (ticks or degrees)
      :rtype: float


   .. py:method:: get_properties(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> viam.components.encoder.encoder.Encoder.Properties
      :async:

      Report a dictionary mapping optional properties to
      whether it is supported by this encoder.

      :returns: Map of position types to supported status.
      :rtype: Properties


   .. py:method:: do_command(command: Mapping[str, viam.utils.ValueTypes], *, timeout: Optional[float] = None) -> Mapping[str, viam.utils.ValueTypes]
      :async:

      Send/Receive arbitrary commands to the Resource

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]



