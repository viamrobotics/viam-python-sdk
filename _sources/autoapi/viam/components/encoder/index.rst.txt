:py:mod:`viam.components.encoder`
=================================

.. py:module:: viam.components.encoder


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   client/index.rst
   encoder/index.rst
   service/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.encoder.Encoder




.. py:class:: Encoder(name: str)



   Base component.
   All components must inherit from this class.

   .. py:class:: Properties

      .. py:attribute:: ticks_count_supported
         :type: bool

         

      .. py:attribute:: angle_degrees_supported
         :type: bool

         


   .. py:attribute:: SUBTYPE
      :type: Final

      

   .. py:method:: reset_position(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs)
      :abstractmethod:
      :async:

      Set the current position to be the new zero (home) position.


   .. py:method:: get_position(position_type: Optional[viam.proto.component.encoder.PositionType.ValueType] = None, *, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> Tuple[float, viam.proto.component.encoder.PositionType.ValueType]
      :abstractmethod:
      :async:

      Report the position of the encoder.
      The value returned is the current position in terms of it's ``position_type``.
      The position will be either in relative units (ticks away from a zero position) for
      ``PositionType.TICKS`` or absolute units (degrees along a circle) for ``PositionType.DEGREES``.

      :param position_type: The desired output type of the position
      :type position_type: PositionType.ValueType

      :returns:

                Position of the encoder which can either be ticks since last zeroing
                       for a relative encoder or degrees for an absolute encoder.
                PositionType: The type of position the encoder returns (ticks or degrees)
      :rtype: float


   .. py:method:: get_properties(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> Properties
      :abstractmethod:
      :async:

      Report a dictionary mapping optional properties to
      whether it is supported by this encoder.

      :returns: Map of position types to supported status.
      :rtype: Properties



