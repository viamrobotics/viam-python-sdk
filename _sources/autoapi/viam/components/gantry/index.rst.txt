:py:mod:`viam.components.gantry`
================================

.. py:module:: viam.components.gantry


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   client/index.rst
   gantry/index.rst
   service/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.gantry.Gantry




.. py:class:: Gantry(name: str)



   Gantry represents a physical Gantry and can be used for controlling gantries of N axes.

   This acts as an abstract base class for any drivers representing specific
   gantry implementations. This cannot be used on its own. If the ``__init__()`` function is
   overridden, it must call the ``super().__init__()`` function.

   .. py:attribute:: SUBTYPE
      :type: Final

      

   .. py:method:: get_position(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> List[float]
      :abstractmethod:
      :async:

      Get the position in millimeters.

      :returns: The position of the axes.
      :rtype: List[float]


   .. py:method:: move_to_position(positions: List[float], *, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs)
      :abstractmethod:
      :async:

      Move the gantry to a new position.

      :param positions: List of positions for the axes to move to,
                        in millimeters.
      :type positions: List[float]
      :param world_state: Object describing
                          obstacles for the gantry to avoid on its way to ``positions``.
      :type world_state: Optional[WorldState]


   .. py:method:: get_lengths(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> List[float]
      :abstractmethod:
      :async:

      Get the lengths of the axes of the gantry in millimeters.

      :returns: The lengths of the axes.
      :rtype: List[float]


   .. py:method:: stop(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs)
      :abstractmethod:
      :async:

      Stop all motion of the gantry. It is assumed that the gantry stops immediately.


   .. py:method:: is_moving() -> bool
      :abstractmethod:
      :async:

      Get if the gantry is currently moving.

      :returns: Whether the gantry is moving.
      :rtype: bool



