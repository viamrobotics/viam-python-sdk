:py:mod:`viam.components.gantry.service`
========================================

.. py:module:: viam.components.gantry.service


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.gantry.service.GantryRPCService




.. py:class:: GantryRPCService(manager: viam.resource.manager.ResourceManager)

   Bases: :py:obj:`viam.proto.component.gantry.GantryServiceBase`, :py:obj:`viam.resource.rpc_service_base.ResourceRPCServiceBase`

   gRPC Service for a Gantry

   .. py:attribute:: RESOURCE_TYPE

      

   .. py:method:: GetPosition(stream: grpclib.server.Stream[viam.proto.component.gantry.GetPositionRequest, viam.proto.component.gantry.GetPositionResponse]) -> None
      :async:


   .. py:method:: MoveToPosition(stream: grpclib.server.Stream[viam.proto.component.gantry.MoveToPositionRequest, viam.proto.component.gantry.MoveToPositionResponse]) -> None
      :async:


   .. py:method:: GetLengths(stream: grpclib.server.Stream[viam.proto.component.gantry.GetLengthsRequest, viam.proto.component.gantry.GetLengthsResponse]) -> None
      :async:


   .. py:method:: Stop(stream: grpclib.server.Stream[viam.proto.component.gantry.StopRequest, viam.proto.component.gantry.StopResponse]) -> None
      :async:


   .. py:method:: IsMoving(stream: grpclib.server.Stream[viam.proto.component.gantry.IsMovingRequest, viam.proto.component.gantry.IsMovingResponse]) -> None
      :async:


   .. py:method:: DoCommand(stream: grpclib.server.Stream[viam.proto.common.DoCommandRequest, viam.proto.common.DoCommandResponse]) -> None
      :async:



