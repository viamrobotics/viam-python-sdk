viam.components.audio_input.audio_input
=======================================

.. py:module:: viam.components.audio_input.audio_input


Attributes
----------

.. autoapisummary::

   viam.components.audio_input.audio_input.AudioStream
   viam.components.audio_input.audio_input.RESOURCE_NAMESPACE_RDK
   viam.components.audio_input.audio_input.RESOURCE_TYPE_COMPONENT


Classes
-------

.. autoapisummary::

   viam.components.audio_input.audio_input.Audio
   viam.components.audio_input.audio_input.PropertiesResponse
   viam.components.audio_input.audio_input.Subtype
   viam.components.audio_input.audio_input.StreamSource
   viam.components.audio_input.audio_input.ComponentBase
   viam.components.audio_input.audio_input.AudioInput


Module Contents
---------------

.. py:class:: Audio

   A block of audio data containing information about the block and the audio data


   .. py:attribute:: info
      :type:  viam.proto.component.audioinput.AudioChunkInfo


   .. py:attribute:: chunk
      :type:  viam.proto.component.audioinput.AudioChunk


.. py:data:: AudioStream

.. py:class:: PropertiesResponse(*, channel_count: int = ..., latency: google.protobuf.duration_pb2.Duration | None = ..., sample_rate: int = ..., sample_size: int = ..., is_big_endian: bool = ..., is_float: bool = ..., is_interleaved: bool = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: channel_count
      :type:  int


   .. py:attribute:: sample_rate
      :type:  int


   .. py:attribute:: sample_size
      :type:  int


   .. py:attribute:: is_big_endian
      :type:  bool


   .. py:attribute:: is_float
      :type:  bool


   .. py:attribute:: is_interleaved
      :type:  bool


   .. py:property:: latency
      :type: google.protobuf.duration_pb2.Duration



   .. py:method:: HasField(field_name: Literal['latency', b'latency']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:data:: RESOURCE_NAMESPACE_RDK
   :value: 'rdk'


.. py:data:: RESOURCE_TYPE_COMPONENT
   :value: 'component'


.. py:class:: Subtype(namespace: str, resource_type: str, resource_subtype: str)

   Represents a known component/service (resource) API


   .. py:attribute:: namespace
      :type:  str

      The namespace of the resource


   .. py:attribute:: resource_type
      :type:  str

      The type of the resource, e.g. `component` or `service`


   .. py:attribute:: resource_subtype
      :type:  str

      The subtype of the resource e.g. `servo`, `arm`, `vision`


   .. py:method:: __str__() -> str

      Return str(self).



   .. py:method:: __repr__() -> str

      Return repr(self).



   .. py:method:: __hash__() -> int

      Return hash(self).



   .. py:method:: __eq__(other: object) -> bool

      Return self==value.



   .. py:method:: from_resource_name(resource_name: viam.proto.common.ResourceName) -> typing_extensions.Self
      :classmethod:


      Convert a ```ResourceName``` into a ```Subtype```

      :param resource_name: The ResourceName to convert
      :type resource_name: viam.proto.common.ResourceName

      :returns: A new Subtype
      :rtype: Self



   .. py:method:: from_string(string: str) -> typing_extensions.Self
      :classmethod:


      Create a ```Subtype``` from its string representation (namespace:resource_type:resource_subtype)

      :param string: The Subtype as a string
      :type string: str

      :raises ValueError: Raised if the string does not represent a valid Subtype

      :returns: A new Subtype
      :rtype: Self



.. py:class:: StreamSource

   Bases: :py:obj:`Protocol`\ [\ :py:obj:`StreamType`\ ]


   .. py:method:: stream() -> Stream[StreamType]
      :async:



.. py:class:: ComponentBase(name: str)

   Bases: :py:obj:`abc.ABC`, :py:obj:`viam.resource.base.ResourceBase`


   Base component.
   All components must inherit from this class.


   .. py:attribute:: SUBTYPE
      :type:  ClassVar[viam.resource.types.Subtype]


   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:


      Get the component named ``name`` from the provided robot.

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the component
      :type name: str

      :returns: The component, if it exists on the robot
      :rtype: Self



   .. py:method:: do_command(command: Mapping[str, ValueTypes], *, timeout: Optional[float] = None, **kwargs) -> Mapping[str, ValueTypes]
      :abstractmethod:

      :async:


      Send/Receive arbitrary commands to the Resource

      ::

          command = {"cmd": "test", "data1": 500}
          result = component.do(command)

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]



   .. py:method:: get_geometries(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> List[viam.proto.common.Geometry]
      :async:


      Get all geometries associated with the component, in their current configuration, in the
      `frame <https://docs.viam.com/services/frame-system/>`__ of the component.

      ::

          geometries = await component.get_geometries()

          if geometries:
              # Get the center of the first geometry
              print(f"Pose of the first geometry's centerpoint: {geometries[0].center}")

      :returns: The geometries associated with the Component.
      :rtype: List[Geometry]



   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:


      Get the ResourceName for this Resource with the given name

      ::

          # Can be used with any resource, using an arm as an example
          my_arm_name = my_arm.get_resource_name("my_arm")

      :param name: The name of the Resource
      :type name: str

      :returns: The ResourceName of this Resource
      :rtype: ResourceName



   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation



   .. py:method:: close()
      :async:


      Safely shut down the resource and prevent further use.

      Close must be idempotent. Later configuration may allow a resource to be "open" again.
      If a resource does not want or need a close function, it is assumed that the resource does not need to return errors when future
      non-Close methods are called.

      ::

          await component.close()




.. py:class:: AudioInput(name: str)

   Bases: :py:obj:`viam.components.component_base.ComponentBase`, :py:obj:`viam.streams.StreamSource`\ [\ :py:obj:`viam.media.audio.Audio`\ ]


   AudioInput represents a component that can capture audio.

   This acts as an abstract base class for any drivers representing specific
   audio input implementations. This cannot be used on its own. If the ``__init__()`` function is
   overridden, it must call the ``super().__init__()`` function.


   .. py:attribute:: SUBTYPE
      :type:  Final


   .. py:class:: Properties

      .. py:attribute:: channel_count
         :type:  int


      .. py:attribute:: latency
         :type:  datetime.timedelta


      .. py:attribute:: sample_rate
         :type:  int


      .. py:attribute:: sample_size
         :type:  int


      .. py:attribute:: is_big_endian
         :type:  bool


      .. py:attribute:: is_float
         :type:  bool


      .. py:attribute:: is_interleaved
         :type:  bool


      .. py:property:: proto
         :type: viam.proto.component.audioinput.PropertiesResponse



      .. py:method:: from_proto(proto: viam.proto.component.audioinput.PropertiesResponse) -> typing_extensions.Self
         :classmethod:




   .. py:method:: stream(*, timeout: Optional[float] = None, **kwargs) -> viam.media.audio.AudioStream
      :abstractmethod:

      :async:


      Stream audio samples from the audio input of the underlying robot

      :returns: The stream of audio chunks
      :rtype: Stream[Audio]



   .. py:method:: get_properties(*, timeout: Optional[float] = None, **kwargs) -> Properties
      :abstractmethod:

      :async:


      Get the properties of the audio input of the underlying robot

      :returns: The audio input properties
      :rtype: Properties



   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:


      Get the component named ``name`` from the provided robot.

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the component
      :type name: str

      :returns: The component, if it exists on the robot
      :rtype: Self



   .. py:method:: do_command(command: Mapping[str, ValueTypes], *, timeout: Optional[float] = None, **kwargs) -> Mapping[str, ValueTypes]
      :abstractmethod:

      :async:


      Send/Receive arbitrary commands to the Resource

      ::

          command = {"cmd": "test", "data1": 500}
          result = component.do(command)

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]



   .. py:method:: get_geometries(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> List[viam.proto.common.Geometry]
      :async:


      Get all geometries associated with the component, in their current configuration, in the
      `frame <https://docs.viam.com/services/frame-system/>`__ of the component.

      ::

          geometries = await component.get_geometries()

          if geometries:
              # Get the center of the first geometry
              print(f"Pose of the first geometry's centerpoint: {geometries[0].center}")

      :returns: The geometries associated with the Component.
      :rtype: List[Geometry]



   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:


      Get the ResourceName for this Resource with the given name

      ::

          # Can be used with any resource, using an arm as an example
          my_arm_name = my_arm.get_resource_name("my_arm")

      :param name: The name of the Resource
      :type name: str

      :returns: The ResourceName of this Resource
      :rtype: ResourceName



   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation



   .. py:method:: close()
      :async:


      Safely shut down the resource and prevent further use.

      Close must be idempotent. Later configuration may allow a resource to be "open" again.
      If a resource does not want or need a close function, it is assumed that the resource does not need to return errors when future
      non-Close methods are called.

      ::

          await component.close()




