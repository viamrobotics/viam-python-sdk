:py:mod:`viam.components.audio_input`
=====================================

.. py:module:: viam.components.audio_input


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   audio_input/index.rst
   client/index.rst
   service/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.audio_input.AudioInput




.. py:class:: AudioInput(name: str)


   Bases: :py:obj:`viam.components.component_base.ComponentBase`, :py:obj:`viam.media.MediaSource`\ [\ :py:obj:`viam.media.audio.Audio`\ ]

   AudioInput represents a component that can capture audio.

   This acts as an abstract base class for any drivers representing specific
   audio input implementations. This cannot be used on its own. If the ``__init__()`` function is
   overridden, it must call the ``super().__init__()`` function.

   .. py:class:: Properties


      .. py:property:: proto
         :type: viam.proto.component.audioinput.PropertiesResponse


      .. py:attribute:: channel_count
         :type: int

         

      .. py:attribute:: latency
         :type: datetime.timedelta

         

      .. py:attribute:: sample_rate
         :type: int

         

      .. py:attribute:: sample_size
         :type: int

         

      .. py:attribute:: is_big_endian
         :type: bool

         

      .. py:attribute:: is_float
         :type: bool

         

      .. py:attribute:: is_interleaved
         :type: bool

         

      .. py:method:: from_proto(proto: viam.proto.component.audioinput.PropertiesResponse) -> typing_extensions.Self
         :classmethod:



   .. py:attribute:: SUBTYPE
      :type: Final

      

   .. py:method:: stream(*, timeout: Optional[float] = None, **kwargs) -> viam.media.audio.AudioStream
      :abstractmethod:
      :async:

      Stream audio samples from the audio input of the underlying robot

      :returns: The stream of audio chunks
      :rtype: MediaStream[Audio]


   .. py:method:: get_properties(*, timeout: Optional[float] = None, **kwargs) -> Properties
      :abstractmethod:
      :async:

      Get the properties of the audio input of the underlying robot

      :returns: The audio input properties
      :rtype: Properties


   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:

      Get the component named ``name`` from the provided robot.

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the component
      :type name: str

      :returns: The component, if it exists on the robot
      :rtype: Self


   .. py:method:: do_command(command: Mapping[str, ValueTypes], *, timeout: Optional[float] = None, **kwargs) -> Mapping[str, ValueTypes]
      :abstractmethod:
      :async:

      Send/Receive arbitrary commands to the Resource

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]


   .. py:method:: get_geometries(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None) -> List[viam.proto.common.Geometry]
      :async:

      Get all geometries associated with the Component, in their current configuration, in the frame of the Component.

      :returns: The geometries associated with the Component.
      :rtype: List[Geometry]


   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:

      Get the ResourceName for this Resource with the given name

      :param name: The name of the Resource
      :type name: str


   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation


   .. py:method:: close()
      :async:

      Safely shut down the resource and prevent further use.

      Close must be idempotent. Later configuration may allow a resource to be "open" again.
      If a resource does not want or need a close function, it is assumed that the resource does not need to retun errors when future
      non-Close methods are called.



