:py:mod:`viam.utils`
====================

.. py:module:: viam.utils


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.utils.PointerCounter



Functions
~~~~~~~~~

.. autoapisummary::

   viam.utils.primitive_to_value
   viam.utils.value_to_primitive
   viam.utils.resource_names_for_resource
   viam.utils.message_to_struct
   viam.utils.struct_to_message
   viam.utils.dict_to_struct
   viam.utils.struct_to_dict
   viam.utils.sensor_readings_native_to_value
   viam.utils.sensor_readings_value_to_native
   viam.utils.to_thread



Attributes
~~~~~~~~~~

.. autoapisummary::

   viam.utils.ValueTypes


.. py:data:: ValueTypes

   Types that can be encoded into a protobuf `Value`

.. py:function:: primitive_to_value(v: ValueTypes) -> google.protobuf.struct_pb2.Value

   Create a new google.protobuf.struct_pb2.Value
   Supports primitive types of
   - None
   - Number
   - Bool
   - String
   - Dict
   - List
   - Bytes

   :param v: object to convert to a Value
   :type v: ValueTypes

   :raises TypeError: If the object cannot be converted

   :returns: a protobuf Value instance of the object
   :rtype: Value


.. py:function:: value_to_primitive(value: google.protobuf.struct_pb2.Value) -> ValueTypes


.. py:function:: resource_names_for_resource(resource: viam.resource.types.ResourceBase) -> List[viam.proto.common.ResourceName]


.. py:function:: message_to_struct(message: google.protobuf.message.Message) -> google.protobuf.struct_pb2.Struct


.. py:function:: struct_to_message(struct: google.protobuf.struct_pb2.Struct, message_type: Type[_T]) -> _T


.. py:function:: dict_to_struct(obj: Mapping[str, ValueTypes]) -> google.protobuf.struct_pb2.Struct


.. py:function:: struct_to_dict(struct: google.protobuf.struct_pb2.Struct) -> Dict[str, ValueTypes]


.. py:function:: sensor_readings_native_to_value(readings: Mapping[str, Any]) -> Mapping[str, Any]


.. py:function:: sensor_readings_value_to_native(readings: Mapping[str, google.protobuf.struct_pb2.Value]) -> Mapping[str, Any]


.. py:class:: PointerCounter

   .. py:property:: count
      :type: int


   .. py:method:: increment() -> int


   .. py:method:: decrement() -> int


   .. py:method:: wait() -> None
      :async:



.. py:function:: to_thread(func: collections.abc.Callable[_P, _R], *args: _P, **kwargs: _P) -> _R
   :async:

   Asynchronously run a function in a separate thread.

   This is a copy of the function defined in the python source,
   which is only available in python >= 3.9.

   See: https://github.com/python/cpython/blob/main/Lib/asyncio/threads.py


