viam.resource.registry
======================

.. py:module:: viam.resource.registry


Attributes
----------

.. autoapisummary::

   viam.resource.registry.Resource


Exceptions
----------

.. autoapisummary::

   viam.resource.registry.DuplicateResourceError
   viam.resource.registry.ResourceNotFoundError
   viam.resource.registry.ValidationError


Classes
-------

.. autoapisummary::

   viam.resource.registry.Status
   viam.resource.registry.ResourceBase
   viam.resource.registry.ResourceCreatorRegistration
   viam.resource.registry.ResourceRegistration
   viam.resource.registry.Registry


Functions
---------

.. autoapisummary::

   viam.resource.registry.default_create_status


Module Contents
---------------

.. py:exception:: DuplicateResourceError(name: str)

   Bases: :py:obj:`ViamError`


   Exception raised when attempting to register a resource
   with the same name as an existing resource already in
   the registry


.. py:exception:: ResourceNotFoundError(resource: str, name: str)

   Bases: :py:obj:`ViamGRPCError`


   Exception raised when a resource is not found in the registry


.. py:exception:: ValidationError(message: str)

   Bases: :py:obj:`ViamGRPCError`


   Exception raised when there is an error during module validation


.. py:class:: Status(*, name: viam.gen.common.v1.common_pb2.ResourceName | None = ..., status: google.protobuf.struct_pb2.Struct | None = ..., last_reconfigured: google.protobuf.timestamp_pb2.Timestamp | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:property:: name
      :type: viam.gen.common.v1.common_pb2.ResourceName



   .. py:property:: status
      :type: google.protobuf.struct_pb2.Struct



   .. py:property:: last_reconfigured
      :type: google.protobuf.timestamp_pb2.Timestamp



   .. py:method:: HasField(field_name: Literal['last_reconfigured', b'last_reconfigured', 'name', b'name', 'status', b'status']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: ResourceBase

   Bases: :py:obj:`Protocol`


   The base requirements for a Resource.


   .. py:attribute:: SUBTYPE
      :type:  ClassVar[viam.resource.types.Subtype]

      The Subtype of the Resource


   .. py:attribute:: name
      :type:  str

      The name of the Resource


   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:


      Get the ResourceName for this Resource with the given name

      ::

          # Can be used with any resource, using an arm as an example
          my_arm_name = my_arm.get_resource_name("my_arm")

      :param name: The name of the Resource
      :type name: str

      :returns: The ResourceName of this Resource
      :rtype: ResourceName



   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:

      :abstractmethod:


      Get the Resource named ``name`` from the provided robot.

      ::

          # Can be used with any resource, using an arm as an example
          my_arm = Arm.from_robot(robot, "my_arm")

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the Resource
      :type name: str

      :returns: The Resource, if it exists on the robot
      :rtype: Self



   .. py:method:: do_command(command: Mapping[str, viam.utils.ValueTypes], *, timeout: Optional[float] = None, **kwargs) -> Mapping[str, viam.utils.ValueTypes]
      :abstractmethod:

      :async:


      Send/Receive arbitrary commands to the Resource

      ::

          command = {"cmd": "test", "data1": 500}
          result = component.do(command)

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]



   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation



   .. py:method:: close()
      :async:


      Safely shut down the resource and prevent further use.

      Close must be idempotent. Later configuration may allow a resource to be "open" again.
      If a resource does not want or need a close function, it is assumed that the resource does not need to return errors when future
      non-Close methods are called.

      ::

          await component.close()




.. py:data:: Resource

.. py:function:: default_create_status(resource: viam.resource.base.ResourceBase) -> viam.proto.robot.Status
   :async:


.. py:class:: ResourceCreatorRegistration

   An object representing a resource creator to be registered.

   If creating a custom Resource creator, you should register the creator by creating a ``ResourceCreatorRegistration`` object and
   registering it to the ``Registry``.


   .. py:attribute:: creator
      :type:  viam.resource.types.ResourceCreator

      A function that can create a resource given a mapping of dependencies (``ResourceName`` to ``ResourceBase``


   .. py:attribute:: validator
      :type:  viam.resource.types.Validator

      A function that can validate a resource and return implicit dependencies.

      If called without a validator function, default to a function returning an empty Sequence


.. py:class:: ResourceRegistration

   Bases: :py:obj:`Generic`\ [\ :py:obj:`Resource`\ ]


   An object representing a resource to be registered.

   This object is generic over the ``ResourceBase``, and it includes various functionality for the resource,
   such as creating its RPC client or status.

   If creating a custom Resource type, you should register the resource by creating a ``ResourceRegistration`` object and registering it
   to the ``Registry``.


   .. py:attribute:: resource_type
      :type:  Type[Resource]

      The type of the Resource to be registered


   .. py:attribute:: rpc_service
      :type:  Type[viam.resource.rpc_service_base.ResourceRPCServiceBase]

      The type of the RPC service of the resource. This must extend from ``RPCServiceBase``


   .. py:attribute:: create_rpc_client
      :type:  Callable[[str, grpclib.client.Channel], Resource]

      A function that will create the RPC client for this resource


   .. py:attribute:: create_status
      :type:  Callable[[Resource], Coroutine[Any, Any, viam.proto.robot.Status]]

      A function to create a Status object for this resource.

      If the resource does not provide a custom status type, the default implementation can be used.


.. py:class:: Registry

   The global registry of robotic parts.

   **NB** The Registry should almost never be used directly

   The Registry keeps track of the types of Resources that are available on robots using this SDK. All the base resource types are
   pre-registered (for example Arm, Motor).

   If you create a new resource type that is not an extension of any of the existing base resource types, then you must register said
   resource using ``Registry.register(...)``.


   .. py:method:: register_subtype(registration: ResourceRegistration[Resource])
      :classmethod:


      Register a Subtype with the Registry

      :param registration: Object containing registration data for the subtype
      :type registration: ResourceRegistration

      :raises DuplicateResourceError: Raised if the Subtype to register is already in the registry
      :raises ValidationError: Raised if registration is missing any necessary parameters



   .. py:method:: register_resource_creator(subtype: viam.resource.types.Subtype, model: viam.resource.types.Model, registration: ResourceCreatorRegistration)
      :classmethod:


      Register a specific ``Model`` and validator function for the specific resource ``Subtype`` with the Registry

      :param subtype: The Subtype of the resource
      :type subtype: Subtype
      :param model: The Model of the resource
      :type model: Model
      :param registration: The registration functions of the model
      :type registration: ResourceCreatorRegistration

      :raises DuplicateResourceError: Raised if the Subtype and Model pairing is already registered
      :raises ValidationError: Raised if registration does not have creator



   .. py:method:: lookup_subtype(subtype: viam.resource.types.Subtype) -> ResourceRegistration
      :classmethod:


      Lookup and retrieve a registered Subtype by its name

      :param subtype: The subtype of the resource
      :type subtype: str

      :raises ResourceNotFoundError: Raised if the Subtype is not registered

      :returns: The registration object of the resource
      :rtype: ResourceRegistration



   .. py:method:: lookup_resource_creator(subtype: viam.resource.types.Subtype, model: viam.resource.types.Model) -> viam.resource.types.ResourceCreator
      :classmethod:


      Lookup and retrieve a registered resource creator by its subtype and model

      :param subtype: The Subtype of the resource
      :type subtype: Subtype
      :param model: The Model of the resource
      :type model: Model

      :raises ResourceNotFoundError: Raised if the Subtype Model pairing is not registered

      :returns: The function to create the resource
      :rtype: ResourceCreator



   .. py:method:: lookup_validator(subtype: viam.resource.types.Subtype, model: viam.resource.types.Model) -> viam.resource.types.Validator
      :classmethod:


      Lookup and retrieve a registered validator function by its subtype and model. If there is none, return None

      :param subtype: The Subtype of the resource
      :type subtype: Subtype
      :param model: The Model of the resource
      :type model: Model

      :returns: The function to validate the resource
      :rtype: Validator



   .. py:method:: REGISTERED_SUBTYPES() -> Mapping[viam.resource.types.Subtype, ResourceRegistration]
      :classmethod:


      The dictionary of all registered resources
      - Key: Subtype of the resource
      - Value: The registration object for the resource

      :returns: All registered resources
      :rtype: Mapping[Subtype, ResourceRegistration]



   .. py:method:: REGISTERED_RESOURCE_CREATORS() -> Mapping[str, ResourceCreatorRegistration]
      :classmethod:


      The dictionary of all registered resources
      - Key: subtype/model
      - Value: The ResourceCreatorRegistration for the resource

      :returns: All registered resources
      :rtype: Mapping[str, ResourceCreatorRegistration]



