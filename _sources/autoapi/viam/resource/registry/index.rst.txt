:py:mod:`viam.resource.registry`
================================

.. py:module:: viam.resource.registry


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.resource.registry.ComponentRegistration
   viam.resource.registry.Registry



Functions
~~~~~~~~~

.. autoapisummary::

   viam.resource.registry.default_create_status



Attributes
~~~~~~~~~~

.. autoapisummary::

   viam.resource.registry.Component


.. py:data:: Component

   

.. py:function:: default_create_status(component: viam.components.component_base.ComponentBase) -> viam.proto.robot.Status
   :async:


.. py:class:: ComponentRegistration



   An object representing a component to be registered.

   This object is generic over the component, and it includes various functionality for the component, such as creating its RPC client
   or status.

   If creating a custom Component type, you should register the component by creating a ``ComponentRegistration`` object and registering it
   to the ``Registry``.

   .. py:attribute:: component_type
      :type: Type[Component]

      The type of the Component to be registered

   .. py:attribute:: rpc_service
      :type: Type[viam.components.service_base.ComponentServiceBase]

      The RPC service of the component. This must extend from ``ComponentServiceBase``

   .. py:attribute:: create_rpc_client
      :type: Callable[[str, grpclib.client.Channel], Component]

      A function that will create the RPC client for this component

   .. py:attribute:: create_status
      :type: Callable[[Component], Coroutine[Any, Any, viam.proto.robot.Status]]

      A function to create a Status object for this component.

      If the Component does not provide a custom status type, the default implementation can be used.


.. py:class:: Registry

   The global registry of robotic parts.

   **NB** The Registry should almost never be used directly

   The Registry keeps track of the types of Components that are available on robots using this SDK. All the base component types are
   pre-registered (e.g. Arm, Motor).

   If you create a new component type that is not an extension of any of the existing base component types, then you must register said
   component using ``Registry.register(...)``.

   .. py:method:: register_subtype(registration: ComponentRegistration[Component])
      :classmethod:

      Register a Subtype with the Registry

      :param registration: Object containing registration data for the subtype
      :type registration: ComponentRegistration

      :raises DuplicateResourceError: Raised if the Subtype to register is already in the registry


   .. py:method:: register_component_model(subtype: viam.resource.types.Subtype, model: viam.resource.types.Model, component: viam.resource.types.ComponentCreator)
      :classmethod:

      Register a specific ```Model``` for the specific ```Subtype``` with the Registry

      :param subtype: The Subtype of the component
      :type subtype: Subtype
      :param model: The Model of the component
      :type model: Model
      :param component: A function that can create a component given a mapping of dependencies (```ResourceName``` to
                        ```ComponentBase```)
      :type component: ComponentCreator

      :raises DuplicateResourceError: Raised if the Subtype and Model pairing is already registered


   .. py:method:: lookup_subtype(subtype: viam.resource.types.Subtype) -> ComponentRegistration
      :classmethod:

      Lookup and retrieve a registered Subtype by its name

      :param subtype: The subtype of the resource
      :type subtype: str

      :raises ResourceNotFoundError: Raised if the Subtype is not registered

      :returns: The registration object of the component
      :rtype: ComponentRegistration


   .. py:method:: lookup_component(subtype: viam.resource.types.Subtype, model: viam.resource.types.Model) -> viam.resource.types.ComponentCreator
      :classmethod:

      Lookup and retrieve a registered component by its name

      :param subtype: The Subtype of the component
      :type subtype: Subtype
      :param model: The Model of the component
      :type model: Model

      :raises ResourceNotFoundError: Raised if the Subtype Model pairing is not registered

      :returns: The function to create the component
      :rtype: ComponentCreator


   .. py:method:: REGISTERED_RESOURCES() -> Mapping[viam.resource.types.Subtype, ComponentRegistration]
      :classmethod:

      The dictionary of all registered resources
      - Key: Subtype of the resource
      - Value: The registration object for the resource

      :returns: All registered resources
      :rtype: Mapping[Subtype, ComponentRegistration]


   .. py:method:: REGISTERED_COMPONENTS() -> Mapping[str, viam.resource.types.ComponentCreator]
      :classmethod:



