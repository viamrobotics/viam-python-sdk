viam.sessions_client
====================

.. py:module:: viam.sessions_client


Attributes
----------

.. autoapisummary::

   viam.sessions_client.LOGGER
   viam.sessions_client.SESSION_METADATA_KEY
   viam.sessions_client.EXEMPT_METADATA_METHODS


Classes
-------

.. autoapisummary::

   viam.sessions_client.RobotServiceStub
   viam.sessions_client.SendSessionHeartbeatRequest
   viam.sessions_client.StartSessionRequest
   viam.sessions_client.StartSessionResponse
   viam.sessions_client.DialOptions
   viam.sessions_client.SessionsClient


Functions
---------

.. autoapisummary::

   viam.sessions_client.dial


Module Contents
---------------

.. py:class:: RobotServiceStub(channel: grpclib.client.Channel)

.. py:class:: SendSessionHeartbeatRequest(*, id: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: id
      :type:  str


.. py:class:: StartSessionRequest(*, resume: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: resume
      :type:  str

      resume can be used to attempt to continue a stream after a disconnection event. If
      a session is not found, a new one will be created and returned.


.. py:class:: StartSessionResponse(*, id: str = ..., heartbeat_window: google.protobuf.duration_pb2.Duration | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: id
      :type:  str


   .. py:property:: heartbeat_window
      :type: google.protobuf.duration_pb2.Duration



   .. py:method:: HasField(field_name: Literal['heartbeat_window', b'heartbeat_window']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: DialOptions(*, disable_webrtc: bool = False, auth_entity: Optional[str] = None, credentials: Optional[Credentials] = None, insecure: bool = False, allow_insecure_downgrade: bool = False, allow_insecure_with_creds_downgrade: bool = False, max_reconnect_attempts: int = 3, timeout: float = 20)

   .. py:attribute:: disable_webrtc
      :type:  bool

      Bypass Web RTC and connect directly to the robot.


   .. py:attribute:: auth_entity
      :type:  Optional[str]

      The URL to authenticate against. Should be used if the address passed in and FQDN of the server do not match.


   .. py:attribute:: credentials
      :type:  Optional[Credentials]

      Credentials for connecting to the robot


   .. py:attribute:: insecure
      :type:  bool
      :value: False


      Determine if the RPC connection is TLS based. Must be provided to
      establish an insecure connection. Otherwise, a TLS based connection
      will be assumed.


   .. py:attribute:: allow_insecure_downgrade
      :type:  bool
      :value: False


      Allow the RPC connection to be downgraded to an insecure connection
      if detected. This is only used when credentials are not present.


   .. py:attribute:: allow_insecure_with_creds_downgrade
      :type:  bool
      :value: False


      Allow the RPC connection to be downgraded to an insecure connection
      if detected, even with credentials present. This is generally
      unsafe to use, but can be requested.


   .. py:attribute:: max_reconnect_attempts
      :type:  int
      :value: 3


      Max number of times the client attempts to reconnect when connection is lost


   .. py:attribute:: timeout
      :type:  float
      :value: 20


      Number of seconds before the dial connection times out
      Set to 20sec to match _defaultOfferDeadline in goutils/rpc/wrtc_call_queue.go


   .. py:method:: with_api_key(api_key: str, api_key_id: str) -> typing_extensions.Self
      :classmethod:


      Create DialOptions with an API key for credentials and default values for other arguments.

      :param api_key: your API key
      :type api_key: str
      :param api_key_id: your API key ID. Must be a valid UUID
      :type api_key_id: str

      :raises ValueError: Raised if the api_key_id is not a valid UUID

      :returns: the DialOptions
      :rtype: Self



.. py:function:: dial(address: str, options: Optional[DialOptions] = None) -> ViamChannel
   :async:


.. py:data:: LOGGER

.. py:data:: SESSION_METADATA_KEY
   :value: 'viam-sid'


.. py:data:: EXEMPT_METADATA_METHODS

.. py:class:: SessionsClient(channel: grpclib.client.Channel, direct_dial_address: str, dial_options: Optional[viam.rpc.dial.DialOptions], *, disabled: bool = False)

   A Session allows a client to express that it is actively connected and
   supports stopping actuating components when it's not.


   .. py:attribute:: channel
      :type:  grpclib.client.Channel


   .. py:attribute:: client
      :type:  viam.proto.robot.RobotServiceStub


   .. py:method:: reset()


   .. py:property:: metadata
      :type: grpclib.metadata._MetadataLike



