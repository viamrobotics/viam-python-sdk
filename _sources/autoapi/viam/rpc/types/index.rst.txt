viam.rpc.types
==============

.. py:module:: viam.rpc.types


Classes
-------

.. autoapisummary::

   viam.rpc.types.RPCServiceBase
   viam.rpc.types.RPCServiceStubBase


Module Contents
---------------

.. py:class:: RPCServiceBase

   Bases: :py:obj:`grpclib._typing.IServable`


   The base requirements for an RPC Service.

   An RPC Service is a service that can handle incoming RPC requests.
   Services that implement the service bases generated by grpclib will automatically conform to this protocol.


   .. py:method:: __mapping__() -> Mapping[str, grpclib.const.Handler]
      :abstractmethod:



.. py:class:: RPCServiceStubBase(channel: grpclib.client.Channel)

   Bases: :py:obj:`Protocol`


   Base class for protocol classes.

   Protocol classes are defined as::

       class Proto(Protocol):
           def meth(self) -> int:
               ...

   Such classes are primarily used with static type checkers that recognize
   structural subtyping (static duck-typing).

   For example::

       class C:
           def meth(self) -> int:
               return 0

       def func(x: Proto) -> int:
           return x.meth()

       func(C())  # Passes static type check

   See PEP 544 for details. Protocol classes decorated with
   @typing.runtime_checkable act as simple-minded runtime protocols that check
   only the presence of given attributes, ignoring their type signatures.
   Protocol classes can be generic, they are defined as::

       class GenProto[T](Protocol):
           def meth(self) -> T:
               ...


