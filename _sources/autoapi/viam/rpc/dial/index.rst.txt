:py:mod:`viam.rpc.dial`
=======================

.. py:module:: viam.rpc.dial


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.rpc.dial.Credentials
   viam.rpc.dial.DialOptions
   viam.rpc.dial.AuthenticatedChannel
   viam.rpc.dial.ViamChannel



Functions
~~~~~~~~~

.. autoapisummary::

   viam.rpc.dial.dial
   viam.rpc.dial.dial_direct



Attributes
~~~~~~~~~~

.. autoapisummary::

   viam.rpc.dial.LOGGER


.. py:data:: LOGGER

   

.. py:class:: Credentials

   Credentials to connect to the robot.

   Currently only supports robot location secret.

   .. py:attribute:: type
      :type: Literal[robot-location-secret]

      The type of credential

   .. py:attribute:: payload
      :type: str

      The credential


.. py:class:: DialOptions(disable_webrtc: bool = False, auth_entity: Optional[str] = None, credentials: Optional[Credentials] = None, insecure: bool = False, allow_insecure_downgrade: bool = False, allow_insecure_with_creds_downgrade: bool = False)

   .. py:attribute:: disable_webrtc
      :type: bool

      Bypass Web RTC and connect directly to the robot.

   .. py:attribute:: auth_entity
      :type: Optional[str]

      The URL to authenticate against. Should be used if the address passed in and FQDN of the server do not match.

   .. py:attribute:: credentials
      :type: Optional[Credentials]

      Credentials for connecting to the robot

   .. py:attribute:: insecure
      :type: bool
      :value: False

      Determine if the RPC connection is TLS based. Must be provided to
      establish an insecure connection. Otherwise, a TLS based connection
      will be assumed.

   .. py:attribute:: allow_insecure_downgrade
      :type: bool
      :value: False

      Allow the RPC connection to be downgraded to an insecure connection
      if detected. This is only used when credentials are not present.

   .. py:attribute:: allow_insecure_with_creds_downgrade
      :type: bool
      :value: False

      Allow the RPC connection to be downgraded to an insecure connection
      if detected, even with credentials present. This is generally
      unsafe to use, but can be requested.


.. py:class:: AuthenticatedChannel(host: Optional[str] = None, port: Optional[int] = None, *, ssl: Union[None, bool, AuthenticatedChannel.__init__.ssl] = None, server_hostname: Optional[str] = None)

   Bases: :py:obj:`grpclib.client.Channel`

   Represents a connection to the server, which can be used with generated
   stub classes to perform gRPC calls.

   .. code-block:: python3

       channel = Channel()
       client = cafe_grpc.CoffeeMachineStub(channel)

       ...

       request = cafe_pb2.LatteOrder(
           size=cafe_pb2.SMALL,
           temperature=70,
           sugar=3,
       )
       reply: empty_pb2.Empty = await client.MakeLatte(request)

       ...

       channel.close()

   .. py:method:: request(name: str, cardinality: grpclib.const.Cardinality, request_type: Type[grpclib.stream._SendType], reply_type: Type[grpclib.stream._RecvType], *, timeout: Optional[float] = None, deadline: Optional[grpclib.metadata.Deadline] = None, metadata: Optional[grpclib.metadata._MetadataLike] = None) -> grpclib.client.Stream[grpclib.stream._SendType, grpclib.stream._RecvType]



.. py:class:: ViamChannel

   .. py:attribute:: channel
      :type: grpclib.client.Channel

      

   .. py:attribute:: release
      :type: Callable[[], None]

      

   .. py:method:: close()


   .. py:method:: __del__()


   .. py:method:: __aenter__()
      :async:


   .. py:method:: __aexit__(exc_type, exc_value, traceback)
      :async:



.. py:function:: dial(address: str, options: Optional[DialOptions] = None) -> ViamChannel
   :async:


.. py:function:: dial_direct(address: str, options: Optional[DialOptions] = None) -> grpclib.client.Channel
   :async:


