viam.proto.rpc.examples.fileupload
==================================

.. py:module:: viam.proto.rpc.examples.fileupload

.. autoapi-nested-parse::

   @generated by Viam.
   Do not edit manually!



Classes
-------

.. autoapisummary::

   viam.proto.rpc.examples.fileupload.FileUploadServiceBase
   viam.proto.rpc.examples.fileupload.FileUploadServiceStub
   viam.proto.rpc.examples.fileupload.UnimplementedFileUploadServiceBase
   viam.proto.rpc.examples.fileupload.UploadFileRequest
   viam.proto.rpc.examples.fileupload.UploadFileResponse


Package Contents
----------------

.. py:class:: FileUploadServiceBase

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: UploadFile(stream: grpclib.server.Stream[proto.rpc.examples.fileupload.v1.fileupload_pb2.UploadFileRequest, proto.rpc.examples.fileupload.v1.fileupload_pb2.UploadFileResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: __mapping__() -> Dict[str, grpclib.const.Handler]


.. py:class:: FileUploadServiceStub(channel: grpclib.client.Channel)

.. py:class:: UnimplementedFileUploadServiceBase

   Bases: :py:obj:`FileUploadServiceBase`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: UploadFile(stream: grpclib.server.Stream[proto.rpc.examples.fileupload.v1.fileupload_pb2.UploadFileRequest, proto.rpc.examples.fileupload.v1.fileupload_pb2.UploadFileResponse]) -> None
      :async:



.. py:class:: UploadFileRequest(*, name: str = ..., chunk_data: bytes = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: chunk_data
      :type:  bytes


   .. py:method:: HasField(field_name: Literal['chunk_data', b'chunk_data', 'data', b'data', 'name', b'name']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



   .. py:method:: WhichOneof(oneof_group: Literal['data', b'data']) -> Literal['name', 'chunk_data'] | None

      Returns the name of the field that is set inside a oneof group.

      If no field is set, returns None.

      :param oneof_group: the name of the oneof group to check.
      :type oneof_group: str

      :returns: The name of the group that is set, or None.
      :rtype: str or None

      :raises ValueError: no group with the given name exists



.. py:class:: UploadFileResponse(*, name: str = ..., size: int = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: size
      :type:  int


