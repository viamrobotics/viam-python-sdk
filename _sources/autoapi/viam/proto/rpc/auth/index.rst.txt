viam.proto.rpc.auth
===================

.. py:module:: viam.proto.rpc.auth

.. autoapi-nested-parse::

   @generated by Viam.
   Do not edit manually!



Classes
-------

.. autoapisummary::

   viam.proto.rpc.auth.AuthServiceBase
   viam.proto.rpc.auth.AuthServiceStub
   viam.proto.rpc.auth.ExternalAuthServiceBase
   viam.proto.rpc.auth.ExternalAuthServiceStub
   viam.proto.rpc.auth.UnimplementedAuthServiceBase
   viam.proto.rpc.auth.UnimplementedExternalAuthServiceBase
   viam.proto.rpc.auth.AuthenticateRequest
   viam.proto.rpc.auth.AuthenticateResponse
   viam.proto.rpc.auth.AuthenticateToRequest
   viam.proto.rpc.auth.AuthenticateToResponse
   viam.proto.rpc.auth.Credentials


Module Contents
---------------

.. py:class:: AuthServiceBase

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: Authenticate(stream: grpclib.server.Stream[proto.rpc.v1.auth_pb2.AuthenticateRequest, proto.rpc.v1.auth_pb2.AuthenticateResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: __mapping__() -> Dict[str, grpclib.const.Handler]


.. py:class:: AuthServiceStub(channel: grpclib.client.Channel)

.. py:class:: ExternalAuthServiceBase

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: AuthenticateTo(stream: grpclib.server.Stream[proto.rpc.v1.auth_pb2.AuthenticateToRequest, proto.rpc.v1.auth_pb2.AuthenticateToResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: __mapping__() -> Dict[str, grpclib.const.Handler]


.. py:class:: ExternalAuthServiceStub(channel: grpclib.client.Channel)

.. py:class:: UnimplementedAuthServiceBase

   Bases: :py:obj:`AuthServiceBase`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: Authenticate(stream: grpclib.server.Stream[proto.rpc.v1.auth_pb2.AuthenticateRequest, proto.rpc.v1.auth_pb2.AuthenticateResponse]) -> None
      :async:



.. py:class:: UnimplementedExternalAuthServiceBase

   Bases: :py:obj:`ExternalAuthServiceBase`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: AuthenticateTo(stream: grpclib.server.Stream[proto.rpc.v1.auth_pb2.AuthenticateToRequest, proto.rpc.v1.auth_pb2.AuthenticateToResponse]) -> None
      :async:



.. py:class:: AuthenticateRequest(*, entity: str = ..., credentials: global___Credentials | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   An AuthenticateRequest contains the credentials used to authenticate.


   .. py:attribute:: entity
      :type:  str


   .. py:property:: credentials
      :type: global___Credentials



   .. py:method:: HasField(field_name: Literal['credentials', b'credentials']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: AuthenticateResponse(*, access_token: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   An AuthenticateResponse is returned after successful authentication.


   .. py:attribute:: access_token
      :type:  str

      access_token is a JWT where only the expiration should be deemed
      important.
      Future(erd): maybe a refresh_token


.. py:class:: AuthenticateToRequest(*, entity: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   An AuthenticateToRequest contains the entity to authenticate to.


   .. py:attribute:: entity
      :type:  str


.. py:class:: AuthenticateToResponse(*, access_token: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   An AuthenticateResponse is returned after successful authentication.


   .. py:attribute:: access_token
      :type:  str

      access_token is a JWT where only the expiration should be deemed
      important.
      Future(erd): maybe a refresh_token


.. py:class:: Credentials(*, type: str = ..., payload: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: type
      :type:  str

      type is the type of credentials being used.


   .. py:attribute:: payload
      :type:  str

      payload is an opaque string used that are of the given type above.


