viam.proto.app.dataset
======================

.. py:module:: viam.proto.app.dataset

.. autoapi-nested-parse::

   @generated by Viam.
   Do not edit manually!



Classes
-------

.. autoapisummary::

   viam.proto.app.dataset.DatasetServiceBase
   viam.proto.app.dataset.DatasetServiceStub
   viam.proto.app.dataset.UnimplementedDatasetServiceBase
   viam.proto.app.dataset.CreateDatasetRequest
   viam.proto.app.dataset.CreateDatasetResponse
   viam.proto.app.dataset.Dataset
   viam.proto.app.dataset.DeleteDatasetRequest
   viam.proto.app.dataset.DeleteDatasetResponse
   viam.proto.app.dataset.ListDatasetsByIDsRequest
   viam.proto.app.dataset.ListDatasetsByIDsResponse
   viam.proto.app.dataset.ListDatasetsByOrganizationIDRequest
   viam.proto.app.dataset.ListDatasetsByOrganizationIDResponse
   viam.proto.app.dataset.MergeDatasetsRequest
   viam.proto.app.dataset.MergeDatasetsResponse
   viam.proto.app.dataset.RenameDatasetRequest
   viam.proto.app.dataset.RenameDatasetResponse


Package Contents
----------------

.. py:class:: DatasetServiceBase

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: CreateDataset(stream: grpclib.server.Stream[app.dataset.v1.dataset_pb2.CreateDatasetRequest, app.dataset.v1.dataset_pb2.CreateDatasetResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: DeleteDataset(stream: grpclib.server.Stream[app.dataset.v1.dataset_pb2.DeleteDatasetRequest, app.dataset.v1.dataset_pb2.DeleteDatasetResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: RenameDataset(stream: grpclib.server.Stream[app.dataset.v1.dataset_pb2.RenameDatasetRequest, app.dataset.v1.dataset_pb2.RenameDatasetResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: ListDatasetsByOrganizationID(stream: grpclib.server.Stream[app.dataset.v1.dataset_pb2.ListDatasetsByOrganizationIDRequest, app.dataset.v1.dataset_pb2.ListDatasetsByOrganizationIDResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: ListDatasetsByIDs(stream: grpclib.server.Stream[app.dataset.v1.dataset_pb2.ListDatasetsByIDsRequest, app.dataset.v1.dataset_pb2.ListDatasetsByIDsResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: MergeDatasets(stream: grpclib.server.Stream[app.dataset.v1.dataset_pb2.MergeDatasetsRequest, app.dataset.v1.dataset_pb2.MergeDatasetsResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: __mapping__() -> Dict[str, grpclib.const.Handler]


.. py:class:: DatasetServiceStub(channel: grpclib.client.Channel)

   .. py:attribute:: CreateDataset


   .. py:attribute:: DeleteDataset


   .. py:attribute:: RenameDataset


   .. py:attribute:: ListDatasetsByOrganizationID


   .. py:attribute:: ListDatasetsByIDs


   .. py:attribute:: MergeDatasets


.. py:class:: UnimplementedDatasetServiceBase

   Bases: :py:obj:`DatasetServiceBase`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: CreateDataset(stream: grpclib.server.Stream[app.dataset.v1.dataset_pb2.CreateDatasetRequest, app.dataset.v1.dataset_pb2.CreateDatasetResponse]) -> None
      :async:



   .. py:method:: DeleteDataset(stream: grpclib.server.Stream[app.dataset.v1.dataset_pb2.DeleteDatasetRequest, app.dataset.v1.dataset_pb2.DeleteDatasetResponse]) -> None
      :async:



   .. py:method:: RenameDataset(stream: grpclib.server.Stream[app.dataset.v1.dataset_pb2.RenameDatasetRequest, app.dataset.v1.dataset_pb2.RenameDatasetResponse]) -> None
      :async:



   .. py:method:: ListDatasetsByOrganizationID(stream: grpclib.server.Stream[app.dataset.v1.dataset_pb2.ListDatasetsByOrganizationIDRequest, app.dataset.v1.dataset_pb2.ListDatasetsByOrganizationIDResponse]) -> None
      :async:



   .. py:method:: ListDatasetsByIDs(stream: grpclib.server.Stream[app.dataset.v1.dataset_pb2.ListDatasetsByIDsRequest, app.dataset.v1.dataset_pb2.ListDatasetsByIDsResponse]) -> None
      :async:



   .. py:method:: MergeDatasets(stream: grpclib.server.Stream[app.dataset.v1.dataset_pb2.MergeDatasetsRequest, app.dataset.v1.dataset_pb2.MergeDatasetsResponse]) -> None
      :async:



.. py:class:: CreateDatasetRequest(*, name: str = ..., organization_id: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   CreateDatasetRequest defines the name and organization ID of a dataset.


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: organization_id
      :type:  str


.. py:class:: CreateDatasetResponse(*, id: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   CreateDatasetResponse returns the dataset ID of the created dataset.


   .. py:attribute:: id
      :type:  str


.. py:class:: Dataset(*, id: str = ..., name: str = ..., organization_id: str = ..., time_created: google.protobuf.timestamp_pb2.Timestamp | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Dataset stores the metadata of a dataset.


   .. py:attribute:: id
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: organization_id
      :type:  str


   .. py:property:: time_created
      :type: google.protobuf.timestamp_pb2.Timestamp



   .. py:method:: HasField(field_name: Literal['time_created', b'time_created']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: DeleteDatasetRequest(*, id: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   DeleteDatasetRequest deletes the dataset specified by the dataset ID.


   .. py:attribute:: id
      :type:  str


.. py:class:: DeleteDatasetResponse

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


.. py:class:: ListDatasetsByIDsRequest(*, ids: collections.abc.Iterable[str] | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   ListDatasetsByIDsRequest requests all of the datasets by their dataset IDs.


   .. py:property:: ids
      :type: google.protobuf.internal.containers.RepeatedScalarFieldContainer[str]



.. py:class:: ListDatasetsByIDsResponse(*, datasets: collections.abc.Iterable[global___Dataset] | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   ListDatasetsByIDsResponse returns all the dataset metadata for the associated dataset IDs.


   .. py:property:: datasets
      :type: google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Dataset]



.. py:class:: ListDatasetsByOrganizationIDRequest(*, organization_id: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   ListDatasetsByOrganizationIDRequest requests all of the datasets for an organization.


   .. py:attribute:: organization_id
      :type:  str


.. py:class:: ListDatasetsByOrganizationIDResponse(*, datasets: collections.abc.Iterable[global___Dataset] | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   ListDatasetsByOrganizationIDResponse returns all the dataset metadata for the organization.


   .. py:property:: datasets
      :type: google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Dataset]



.. py:class:: MergeDatasetsRequest(*, dataset_ids: collections.abc.Iterable[str] | None = ..., name: str = ..., organization_id: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   MergeDatasetsRequest merges multiple datasets specified by their dataset IDs into a new dataset.


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: organization_id
      :type:  str


   .. py:property:: dataset_ids
      :type: google.protobuf.internal.containers.RepeatedScalarFieldContainer[str]



.. py:class:: MergeDatasetsResponse(*, dataset_id: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   MergeDatasetsResponse returns the dataset ID of the newly created merged dataset.


   .. py:attribute:: dataset_id
      :type:  str


.. py:class:: RenameDatasetRequest(*, id: str = ..., name: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   RenameDatasetRequest applies the new name to the dataset specified by the dataset ID.


   .. py:attribute:: id
      :type:  str


   .. py:attribute:: name
      :type:  str


.. py:class:: RenameDatasetResponse

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


