:py:mod:`viam.services.slam.client`
===================================

.. py:module:: viam.services.slam.client


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.services.slam.client.SLAMClient




.. py:class:: SLAMClient(name: str, channel: grpclib.client.Channel)


   Bases: :py:obj:`viam.services.slam.slam.SLAM`, :py:obj:`viam.resource.rpc_client_base.ReconfigurableResourceRPCClientBase`

   Connect to the SLAMService, which allows the robot to create a map of its surroundings and find its location in that map.

   .. py:attribute:: client
      :type: viam.proto.service.slam.SLAMServiceStub

      

   .. py:method:: get_position(*, timeout: Optional[float] = None) -> viam.services.slam.Pose
      :async:

      Get current position of the specified component in the SLAM Map.

      :returns: The current position of the specified component
      :rtype: Pose


   .. py:method:: get_point_cloud_map(*, timeout: Optional[float] = None) -> List[viam.proto.service.slam.GetPointCloudMapResponse]
      :async:

      Get the point cloud map.

      :returns:

                Complete pointcloud in standard PCD format. Chunks of the PointCloud, concatenating all
                    GetPointCloudMapResponse.point_cloud_pcd_chunk values
      :rtype: List[GetPointCloudMapResponse]


   .. py:method:: get_internal_state(*, timeout: Optional[float] = None) -> List[viam.proto.service.slam.GetInternalStateResponse]
      :async:

      Get the internal state of the SLAM algorithm required to continue mapping/localization.

      :returns: Chunks of the internal state of the SLAM algorithm
      :rtype: List[GetInternalStateResponse]


   .. py:method:: get_latest_map_info(*, timeout: Optional[float] = None) -> datetime.datetime
      :async:

      Get the timestamp of the last update to the point cloud SLAM map.

      :returns: The timestamp of the last update.
      :rtype: datetime


   .. py:method:: get_properties(*, timeout: Optional[float] = None) -> Tuple[bool, viam.services.slam.MappingMode.ValueType]
      :async:

      Get information regarding the current SLAM session.

      :returns: A tuple of a boolean value representing if the SLAM session is being run in
                the cloud and the mapping mode of said session
      :rtype: Tuple[bool, MappingMode.ValueType]


   .. py:method:: do_command(command: Mapping[str, viam.utils.ValueTypes], *, timeout: Optional[float] = None) -> Mapping[str, viam.utils.ValueTypes]
      :async:

      Send/Receive arbitrary commands to the Resource

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]


   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:

      Get the service named ``name`` from the provided robot.

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the service
      :type name: str

      :returns: The service, if it exists on the robot
      :rtype: Self


   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:

      Get the ResourceName for this Resource with the given name

      :param name: The name of the Resource
      :type name: str


   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation


   .. py:method:: close()
      :async:

      Safely shut down the resource and prevent further use.

      Close must be idempotent. Later configuration may allow a resource to be "open" again.
      If a resource does not want or need a close function, it is assumed that the resource does not need to retun errors when future
      non-Close methods are called.



