:py:mod:`viam.services.sensors`
===============================

.. py:module:: viam.services.sensors


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   client/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   viam.services.sensors.SensorsServiceClient




.. py:class:: SensorsServiceClient(name: str, channel: grpclib.client.Channel)



   Connect to the SensorService, which centralizes all Sensors in a single place

   .. py:attribute:: SUBTYPE
      :type: Final

      

   .. py:method:: get_sensors(*, extra: Optional[Mapping[str, Any]] = None, timeout: Optional[float] = None) -> List[viam.proto.common.ResourceName]
      :async:

      Get the ``ResourceName`` of all the ``Sensor`` resources connected to this Robot

      :returns: The list of all Sensors
      :rtype: List[ResourceName]


   .. py:method:: get_readings(sensors: List[viam.proto.common.ResourceName], *, extra: Optional[Mapping[str, Any]] = None, timeout: Optional[float] = None) -> Mapping[viam.proto.common.ResourceName, Mapping[str, Any]]
      :async:

      Get the readings from the specific sensors provided

      :param sensors: The ``ResourceName`` of the the ``Sensor`` resources to get readings from
      :type sensors: List[ResourceName]

      :returns: The readings from the sensors, mapped by ``ResourceName``
      :rtype: Mapping[ResourceName, Mapping[str, Any]]


   .. py:method:: do_command(command: Mapping[str, viam.utils.ValueTypes], *, timeout: Optional[float] = None) -> Mapping[str, viam.utils.ValueTypes]
      :async:

      Send/receive arbitrary commands

      :param command: The command to execute
      :type command: Dict[str, ValueTypes]

      :returns: Result of the executed command
      :rtype: Dict[str, ValueTypes]



