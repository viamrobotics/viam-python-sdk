:py:mod:`viam.services.navigation`
==================================

.. py:module:: viam.services.navigation


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   client/index.rst
   navigation/index.rst
   service/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   viam.services.navigation.GeoObstacle
   viam.services.navigation.GeoPoint
   viam.services.navigation.MapType
   viam.services.navigation.Mode
   viam.services.navigation.Path
   viam.services.navigation.Waypoint
   viam.services.navigation.Navigation




.. py:class:: GeoObstacle(*, location: global___GeoPoint | None = ..., geometries: collections.abc.Iterable[global___Geometry] | None = ...)


   Bases: :py:obj:`google.protobuf.message.Message`

   GeoObstacle contains information about the geometric structure of an obstacle and the location of the obstacle,
   captured in latitude and longitude.

   .. py:property:: location
      :type: global___GeoPoint

      Location of the obstacle

   .. py:property:: geometries
      :type: google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Geometry]

      Geometries that describe the obstacle, where embedded Pose data is with respect to the specified location

   .. py:method:: HasField(field_name: Literal[location, b'location']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: GeoPoint(*, latitude: float = ..., longitude: float = ...)


   Bases: :py:obj:`google.protobuf.message.Message`

   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.

   .. py:attribute:: latitude
      :type: float

      

   .. py:attribute:: longitude
      :type: float

      


.. py:class:: MapType


   Bases: :py:obj:`_MapType`

   MapType represents the various types of map the navigation service can ingest.


.. py:class:: Mode


   Bases: :py:obj:`_Mode`


.. py:class:: Path(*, destination_waypoint_id: str = ..., geopoints: collections.abc.Iterable[viam.gen.common.v1.common_pb2.GeoPoint] | None = ...)


   Bases: :py:obj:`google.protobuf.message.Message`

   A user provided destination and the set of geopoints that
   the robot is expected to take to get there

   .. py:property:: geopoints
      :type: google.protobuf.internal.containers.RepeatedCompositeFieldContainer[viam.gen.common.v1.common_pb2.GeoPoint]

      List of geopoints that the motion planner output to reach the destination
      The first geopoint is the starting position of the robot for that path

   .. py:attribute:: destination_waypoint_id
      :type: str

      The id of the user specified waypoint


.. py:class:: Waypoint(*, id: str = ..., location: viam.gen.common.v1.common_pb2.GeoPoint | None = ...)


   Bases: :py:obj:`google.protobuf.message.Message`

   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.

   .. py:property:: location
      :type: viam.gen.common.v1.common_pb2.GeoPoint


   .. py:attribute:: id
      :type: str

      

   .. py:method:: HasField(field_name: Literal[location, b'location']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: Navigation(name: str)


   Bases: :py:obj:`viam.services.service_base.ServiceBase`

   Navigation represents a Navigation service.

   This acts as an abstract base class for any drivers representing specific
   navigation service implementations. This cannot be used on its own. If the ``__init__()`` function is
   overridden, it must call the ``super().__init__()`` function.

   .. py:attribute:: SUBTYPE
      :type: Final

      

   .. py:method:: get_paths(*, timeout: Optional[float]) -> List[viam.services.navigation.Path]
      :abstractmethod:
      :async:


   .. py:method:: get_location(*, timeout: Optional[float]) -> viam.services.navigation.GeoPoint
      :abstractmethod:
      :async:


   .. py:method:: get_obstacles(*, timeout: Optional[float]) -> List[viam.services.navigation.GeoObstacle]
      :abstractmethod:
      :async:


   .. py:method:: get_waypoints(*, timeout: Optional[float]) -> List[viam.services.navigation.Waypoint]
      :abstractmethod:
      :async:


   .. py:method:: add_waypoint(point: viam.services.navigation.GeoPoint, *, timeout: Optional[float])
      :abstractmethod:
      :async:


   .. py:method:: remove_waypoint(id: str, *, timeout: Optional[float])
      :abstractmethod:
      :async:


   .. py:method:: get_mode(*, timeout: Optional[float]) -> viam.services.navigation.Mode.ValueType
      :abstractmethod:
      :async:


   .. py:method:: set_mode(mode: viam.services.navigation.Mode.ValueType, *, timeout: Optional[float])
      :abstractmethod:
      :async:


   .. py:method:: get_properties(*, timeout: Optional[float]) -> viam.services.navigation.MapType.ValueType
      :abstractmethod:
      :async:


   .. py:method:: from_robot(robot: viam.robot.client.RobotClient, name: str) -> typing_extensions.Self
      :classmethod:

      Get the service named ``name`` from the provided robot.

      :param robot: The robot
      :type robot: RobotClient
      :param name: The name of the service
      :type name: str

      :returns: The service, if it exists on the robot
      :rtype: Self


   .. py:method:: do_command(command: Mapping[str, viam.utils.ValueTypes], *, timeout: Optional[float] = None, **kwargs) -> Mapping[str, viam.utils.ValueTypes]
      :abstractmethod:
      :async:

      Send/Receive arbitrary commands to the Resource

      :param command: The command to execute
      :type command: Mapping[str, ValueTypes]

      :raises NotImplementedError: Raised if the Resource does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Mapping[str, ValueTypes]


   .. py:method:: get_resource_name(name: str) -> viam.proto.common.ResourceName
      :classmethod:

      Get the ResourceName for this Resource with the given name

      :param name: The name of the Resource
      :type name: str


   .. py:method:: get_operation(kwargs: Mapping[str, Any]) -> viam.operations.Operation

      Get the ``Operation`` associated with the currently running function.

      When writing custom resources, you should get the ``Operation`` by calling this function and check to see if it's cancelled.
      If the ``Operation`` is cancelled, then you can perform any necessary (terminating long running tasks, cleaning up connections, etc.
      ).

      :param kwargs: The kwargs object containing the operation
      :type kwargs: Mapping[str, Any]

      :returns: The operation associated with this function
      :rtype: viam.operations.Operation


   .. py:method:: close()
      :async:

      Safely shut down the resource and prevent further use.

      Close must be idempotent. Later configuration may allow a resource to be "open" again.
      If a resource does not want or need a close function, it is assumed that the resource does not need to retun errors when future
      non-Close methods are called.



