:py:mod:`viam.services.vision.service`
======================================

.. py:module:: viam.services.vision.service


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.services.vision.service.VisionRPCService




.. py:class:: VisionRPCService(manager: viam.resource.manager.ResourceManager)

   Bases: :py:obj:`viam.proto.service.vision.VisionServiceBase`, :py:obj:`viam.resource.rpc_service_base.ResourceRPCServiceBase`\ [\ :py:obj:`viam.services.vision.vision.Vision`\ ]

   gRPC service for a Vision service

   .. py:attribute:: RESOURCE_TYPE

      

   .. py:method:: GetDetectionsFromCamera(stream: grpclib.server.Stream[viam.proto.service.vision.GetDetectionsFromCameraRequest, viam.proto.service.vision.GetDetectionsFromCameraResponse]) -> None
      :async:


   .. py:method:: GetDetections(stream: grpclib.server.Stream[viam.proto.service.vision.GetDetectionsRequest, viam.proto.service.vision.GetDetectionsResponse]) -> None
      :async:


   .. py:method:: GetClassificationsFromCamera(stream: grpclib.server.Stream[viam.proto.service.vision.GetClassificationsFromCameraRequest, viam.proto.service.vision.GetClassificationsFromCameraResponse]) -> None
      :async:


   .. py:method:: GetClassifications(stream: grpclib.server.Stream[viam.proto.service.vision.GetClassificationsRequest, viam.proto.service.vision.GetClassificationsResponse]) -> None
      :async:


   .. py:method:: GetObjectPointClouds(stream: grpclib.server.Stream[viam.proto.service.vision.GetObjectPointCloudsRequest, viam.proto.service.vision.GetObjectPointCloudsResponse]) -> None
      :async:


   .. py:method:: DoCommand(stream: grpclib.server.Stream[viam.proto.common.DoCommandRequest, viam.proto.common.DoCommandResponse]) -> None
      :async:



