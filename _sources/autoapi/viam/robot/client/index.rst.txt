:py:mod:`viam.robot.client`
===========================

.. py:module:: viam.robot.client


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.robot.client.RobotClient




Attributes
~~~~~~~~~~

.. autoapisummary::

   viam.robot.client.LOGGER


.. py:data:: LOGGER

   

.. py:class:: RobotClient


   gRPC client for a Robot. This class should be used for all interactions with a robot.

   There are 2 ways to instantiate a robot client::

       RobotClient.at_address(...)
       RobotClient.with_channel(...)

   You can use the client standalone or within a context::

       robot = await RobotClient.at_address(...)
       async with await RobotClient.with_channel(...) as robot: ...

   You must ``close()`` the robot to release resources.

   Note: Robots used within a context are automatically closed UNLESS created with a channel. Robots created using ``with_channel`` are
   not automatically closed.

   .. py:class:: Options


      .. py:attribute:: refresh_interval
         :type: int
         :value: 0

         How often to refresh the status/parts of the robot in seconds.
         If not set, the robot will not be refreshed automatically

      .. py:attribute:: dial_options
         :type: Optional[viam.rpc.dial.DialOptions]

         Options used to connect clients to gRPC servers

      .. py:attribute:: log_level
         :type: int

         The log level to output

      .. py:attribute:: check_connection_interval
         :type: int
         :value: 10

         The frequency (in seconds) at which to check if the robot is still connected. 0 (zero) signifies no connection checks

      .. py:attribute:: attempt_reconnect_interval
         :type: int
         :value: 1

         The frequency (in seconds) at which to attempt to reconnect a disconnected robot. 0 (zero) signifies no reconnection attempts

      .. py:attribute:: disable_sessions
         :type: bool
         :value: False

         Whether sessions are disabled


   .. py:property:: resource_names
      :type: List[viam.proto.common.ResourceName]

      Get a list of all resource names

      :returns: The list of resource names
      :rtype: List[viam.proto.common.ResourceName]

   .. py:method:: at_address(address: str, options: Options) -> typing_extensions.Self
      :classmethod:
      :async:

      Create a robot client that is connected to the robot at the provided address.

      :param address: Address of the robot (IP address, URL, etc.)
      :type address: str
      :param options: Options for connecting and refreshing
      :type options: Options

      :returns: the RobotClient
      :rtype: Self


   .. py:method:: with_channel(channel: Union[grpclib.client.Channel, viam.rpc.dial.ViamChannel], options: Options) -> typing_extensions.Self
      :classmethod:
      :async:

      Create a robot that is connected to a robot over the given channel.

      Any robots created using this method will *NOT* automatically close the channel upon exit.

      :param channel: The channel that is connected to a robot, obtained by ``viam.rpc.dial``
      :type channel: ViamChannel
      :param options: Options for refreshing. Any connection options will be ignored.
      :type options: Options

      :returns: the RobotClient
      :rtype: Self


   .. py:method:: refresh()
      :async:

      Manually refresh the underlying parts of this robot


   .. py:method:: get_component(name: viam.proto.common.ResourceName) -> viam.components.component_base.ComponentBase

      Get a component using its ResourceName.

      This function should not be called directly except in specific cases. The method ``Component.from_robot(...)`` is the preferred
      method for obtaining components.
      ::

          arm = Arm.from_robot(robot=robot, name="my_arm")

      Because this function returns a generic ``ComponentBase`` rather than the specific
      component type, it will be necessary to cast the returned component to the desired component. This can be done using a few
      different methods:

      - Assertion::

          arm = robot.get_component(Arm.get_resource_name("my_arm"))
          assert isinstance(arm, Arm)
          end_pos = await arm.get_end_position()

      - Explicit cast::

          from typing import cast
          arm = robot.get_component(Arm.get_resource_name("my_arm"))
          arm = cast(Arm, arm)
          end_pos = await arm.get_end_position()

      - Declare type on variable assignment.

          - Note: If using an IDE, a type error may be shown which can be ignored.
          ::

              arm: Arm = robot.get_component(Arm.get_resource_name("my_arm"))  # type: ignore
              end_pos = await arm.get_end_position()

      :param name: The component's ResourceName
      :type name: viam.proto.common.ResourceName

      :raises ValueError: Raised if the requested resource is not a component
      :raises ComponentNotFoundError: Error if component with the given type and name does not exist in the registry

      :returns: The component
      :rtype: ComponentBase


   .. py:method:: get_service(name: viam.proto.common.ResourceName) -> viam.services.service_base.ServiceBase

      Get a service using its ResourceName

      This function should not be called directly except in specific cases. The method ``Service.from_robot(...)`` is the preferred
      method for obtaining services.
      ::

          service = MyService.from_robot(robot=robot, name="my_service")

      Because this function returns a generic ``ServiceBase`` rather than a specific service type, it will be necessary to cast the
      returned service to the desired service. This can be done using a few methods:

      - Assertion::

          service = robot.get_service(MyService.get_resource_name("my_service"))
          assert isinstance(service, MyService)

      - Explicit cast::

          from typing import cast
          service = robot.get_service(MyService.get_resource_name("my_service"))
          service = cast(MyService, my_service)

      - Declare type on variable assignment

          - Note: If using an IDE, a type error may be shown which can be ignored.
          ::

              service: MyService = robot.get_service(MyService.get_resource_name("my_service"))  # type: ignore

      :param name: The service's ResourceName
      :type name: viam.proto.common.ResourceName

      :raises ValueError: Raised if the requested resource is not a component
      :raises ComponentNotFoundError: Error if component with the given type and name does not exist in the registry

      :returns: The service
      :rtype: ServiceBase


   .. py:method:: close()
      :async:

      Cleanly close the underlying connections and stop any periodic tasks


   .. py:method:: __aenter__()
      :async:


   .. py:method:: __aexit__(exc_type, exc_value, traceback)
      :async:


   .. py:method:: get_status(components: Optional[List[viam.proto.common.ResourceName]] = None)
      :async:

      Get the status of the robot's components. You can optionally
      provide a list of ``ResourceName`` for which you want statuses.

      :param components: Optional list of
                         ``ResourceName`` for components you want statuses.
      :type components: Optional[List[viam.proto.common.ResourceName]]


   .. py:method:: get_operations() -> List[viam.proto.robot.Operation]
      :async:

      Get the list of operations currently running on the robot.

      :returns: The list of operations currently running on a given robot.
      :rtype: List[viam.proto.robot.Operation]


   .. py:method:: cancel_operation(id: str)
      :async:

      Cancels the specified operation on the robot.

      :param id: ID of operation to kill.
      :type id: str


   .. py:method:: block_for_operation(id: str)
      :async:

      Blocks on the specified operation on the robot. This function will only return when the specific operation
      has finished or has been cancelled.

      :param id: ID of operation to block on.
      :type id: str


   .. py:method:: get_frame_system_config(additional_transforms: Optional[List[viam.proto.common.Transform]] = None) -> List[viam.proto.robot.FrameSystemConfig]
      :async:

      Get the configuration of the frame system of a given robot.

      :returns: The configuration of a given robot's frame system.
      :rtype: List[viam.proto.robot.FrameSystemConfig]


   .. py:method:: transform_pose(query: viam.proto.common.PoseInFrame, destination: str, additional_transforms: Optional[List[viam.proto.common.Transform]] = None) -> viam.proto.common.PoseInFrame
      :async:

      Transform a given source Pose from the reference frame to a new specified destination which is a reference frame.

      :param query: The pose that should be transformed.
      :type query: viam.proto.common.PoseInFrame
      :param destination: The name of the reference frame to transform the given pose to.
      :type destination: str


   .. py:method:: transform_point_cloud()
      :abstractmethod:
      :async:


   .. py:method:: discover_components(queries: List[viam.proto.robot.DiscoveryQuery]) -> List[viam.proto.robot.Discovery]
      :async:

      Get the list of discovered component configurations.

      :param queries: The list of component models to lookup configurations for.
      :type queries: List[viam.proto.robot.DiscoveryQuery]


   .. py:method:: stop_all(extra: Dict[viam.proto.common.ResourceName, Dict[str, Any]] = {})
      :async:

      Cancel all current and outstanding operations for the robot and stop all actuators and movement

      :param extra: Any extra parameters to pass to the resources' ``stop`` methods,
                    keyed on the resource's ``ResourceName``
      :type extra: Dict[viam.proto.common.ResourceName, Dict[str, Any]]



