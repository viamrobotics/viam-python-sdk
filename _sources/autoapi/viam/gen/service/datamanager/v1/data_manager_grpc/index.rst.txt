:py:mod:`viam.gen.service.datamanager.v1.data_manager_grpc`
===========================================================

.. py:module:: viam.gen.service.datamanager.v1.data_manager_grpc


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.gen.service.datamanager.v1.data_manager_grpc.DataManagerServiceBase
   viam.gen.service.datamanager.v1.data_manager_grpc.UnimplementedDataManagerServiceBase
   viam.gen.service.datamanager.v1.data_manager_grpc.DataManagerServiceStub




.. py:class:: DataManagerServiceBase


   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: Sync(stream: grpclib.server.Stream[service.datamanager.v1.data_manager_pb2.SyncRequest, service.datamanager.v1.data_manager_pb2.SyncResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: DoCommand(stream: grpclib.server.Stream[common.v1.common_pb2.DoCommandRequest, common.v1.common_pb2.DoCommandResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: __mapping__() -> Dict[str, grpclib.const.Handler]



.. py:class:: UnimplementedDataManagerServiceBase


   Bases: :py:obj:`DataManagerServiceBase`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: Sync(stream: grpclib.server.Stream[service.datamanager.v1.data_manager_pb2.SyncRequest, service.datamanager.v1.data_manager_pb2.SyncResponse]) -> None
      :async:


   .. py:method:: DoCommand(stream: grpclib.server.Stream[common.v1.common_pb2.DoCommandRequest, common.v1.common_pb2.DoCommandResponse]) -> None
      :async:



.. py:class:: DataManagerServiceStub(channel: grpclib.client.Channel)



