viam.gen.service.mlmodel.v1.mlmodel_grpc
========================================

.. py:module:: viam.gen.service.mlmodel.v1.mlmodel_grpc


Classes
-------

.. autoapisummary::

   viam.gen.service.mlmodel.v1.mlmodel_grpc.MLModelServiceBase
   viam.gen.service.mlmodel.v1.mlmodel_grpc.UnimplementedMLModelServiceBase
   viam.gen.service.mlmodel.v1.mlmodel_grpc.MLModelServiceStub


Module Contents
---------------

.. py:class:: MLModelServiceBase

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: Infer(stream: grpclib.server.Stream[service.mlmodel.v1.mlmodel_pb2.InferRequest, service.mlmodel.v1.mlmodel_pb2.InferResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: Metadata(stream: grpclib.server.Stream[service.mlmodel.v1.mlmodel_pb2.MetadataRequest, service.mlmodel.v1.mlmodel_pb2.MetadataResponse]) -> None
      :abstractmethod:

      :async:



   .. py:method:: __mapping__() -> Dict[str, grpclib.const.Handler]


.. py:class:: UnimplementedMLModelServiceBase

   Bases: :py:obj:`MLModelServiceBase`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: Infer(stream: grpclib.server.Stream[service.mlmodel.v1.mlmodel_pb2.InferRequest, service.mlmodel.v1.mlmodel_pb2.InferResponse]) -> None
      :async:



   .. py:method:: Metadata(stream: grpclib.server.Stream[service.mlmodel.v1.mlmodel_pb2.MetadataRequest, service.mlmodel.v1.mlmodel_pb2.MetadataResponse]) -> None
      :async:



.. py:class:: MLModelServiceStub(channel: grpclib.client.Channel)

   .. py:attribute:: Infer


   .. py:attribute:: Metadata


