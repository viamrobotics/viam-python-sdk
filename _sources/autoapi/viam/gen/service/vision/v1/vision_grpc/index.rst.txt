:py:mod:`viam.gen.service.vision.v1.vision_grpc`
================================================

.. py:module:: viam.gen.service.vision.v1.vision_grpc


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.gen.service.vision.v1.vision_grpc.VisionServiceBase
   viam.gen.service.vision.v1.vision_grpc.VisionServiceStub




.. py:class:: VisionServiceBase

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: GetModelParameterSchema(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.GetModelParameterSchemaRequest, service.vision.v1.vision_pb2.GetModelParameterSchemaResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: GetDetectorNames(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.GetDetectorNamesRequest, service.vision.v1.vision_pb2.GetDetectorNamesResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: AddDetector(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.AddDetectorRequest, service.vision.v1.vision_pb2.AddDetectorResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: RemoveDetector(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.RemoveDetectorRequest, service.vision.v1.vision_pb2.RemoveDetectorResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: GetDetectionsFromCamera(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.GetDetectionsFromCameraRequest, service.vision.v1.vision_pb2.GetDetectionsFromCameraResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: GetDetections(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.GetDetectionsRequest, service.vision.v1.vision_pb2.GetDetectionsResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: GetClassifierNames(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.GetClassifierNamesRequest, service.vision.v1.vision_pb2.GetClassifierNamesResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: AddClassifier(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.AddClassifierRequest, service.vision.v1.vision_pb2.AddClassifierResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: RemoveClassifier(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.RemoveClassifierRequest, service.vision.v1.vision_pb2.RemoveClassifierResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: GetClassificationsFromCamera(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.GetClassificationsFromCameraRequest, service.vision.v1.vision_pb2.GetClassificationsFromCameraResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: GetClassifications(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.GetClassificationsRequest, service.vision.v1.vision_pb2.GetClassificationsResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: GetSegmenterNames(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.GetSegmenterNamesRequest, service.vision.v1.vision_pb2.GetSegmenterNamesResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: AddSegmenter(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.AddSegmenterRequest, service.vision.v1.vision_pb2.AddSegmenterResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: RemoveSegmenter(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.RemoveSegmenterRequest, service.vision.v1.vision_pb2.RemoveSegmenterResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: GetObjectPointClouds(stream: grpclib.server.Stream[service.vision.v1.vision_pb2.GetObjectPointCloudsRequest, service.vision.v1.vision_pb2.GetObjectPointCloudsResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: DoCommand(stream: grpclib.server.Stream[common.v1.common_pb2.DoCommandRequest, common.v1.common_pb2.DoCommandResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: __mapping__() -> Dict[str, grpclib.const.Handler]



.. py:class:: VisionServiceStub(channel: grpclib.client.Channel)


