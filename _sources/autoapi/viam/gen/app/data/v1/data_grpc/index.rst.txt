:py:mod:`viam.gen.app.data.v1.data_grpc`
========================================

.. py:module:: viam.gen.app.data.v1.data_grpc


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.gen.app.data.v1.data_grpc.DataServiceBase
   viam.gen.app.data.v1.data_grpc.DataServiceStub




.. py:class:: DataServiceBase


   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: TabularDataByFilter(stream: grpclib.server.Stream[app.data.v1.data_pb2.TabularDataByFilterRequest, app.data.v1.data_pb2.TabularDataByFilterResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: BinaryDataByFilter(stream: grpclib.server.Stream[app.data.v1.data_pb2.BinaryDataByFilterRequest, app.data.v1.data_pb2.BinaryDataByFilterResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: BinaryDataByIDs(stream: grpclib.server.Stream[app.data.v1.data_pb2.BinaryDataByIDsRequest, app.data.v1.data_pb2.BinaryDataByIDsResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: DeleteTabularDataByFilter(stream: grpclib.server.Stream[app.data.v1.data_pb2.DeleteTabularDataByFilterRequest, app.data.v1.data_pb2.DeleteTabularDataByFilterResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: DeleteTabularData(stream: grpclib.server.Stream[app.data.v1.data_pb2.DeleteTabularDataRequest, app.data.v1.data_pb2.DeleteTabularDataResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: DeleteBinaryDataByFilter(stream: grpclib.server.Stream[app.data.v1.data_pb2.DeleteBinaryDataByFilterRequest, app.data.v1.data_pb2.DeleteBinaryDataByFilterResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: DeleteBinaryDataByIDs(stream: grpclib.server.Stream[app.data.v1.data_pb2.DeleteBinaryDataByIDsRequest, app.data.v1.data_pb2.DeleteBinaryDataByIDsResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: AddTagsToBinaryDataByIDs(stream: grpclib.server.Stream[app.data.v1.data_pb2.AddTagsToBinaryDataByIDsRequest, app.data.v1.data_pb2.AddTagsToBinaryDataByIDsResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: AddTagsToBinaryDataByFilter(stream: grpclib.server.Stream[app.data.v1.data_pb2.AddTagsToBinaryDataByFilterRequest, app.data.v1.data_pb2.AddTagsToBinaryDataByFilterResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: RemoveTagsFromBinaryDataByIDs(stream: grpclib.server.Stream[app.data.v1.data_pb2.RemoveTagsFromBinaryDataByIDsRequest, app.data.v1.data_pb2.RemoveTagsFromBinaryDataByIDsResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: RemoveTagsFromBinaryDataByFilter(stream: grpclib.server.Stream[app.data.v1.data_pb2.RemoveTagsFromBinaryDataByFilterRequest, app.data.v1.data_pb2.RemoveTagsFromBinaryDataByFilterResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: TagsByFilter(stream: grpclib.server.Stream[app.data.v1.data_pb2.TagsByFilterRequest, app.data.v1.data_pb2.TagsByFilterResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: AddBoundingBoxToImageByID(stream: grpclib.server.Stream[app.data.v1.data_pb2.AddBoundingBoxToImageByIDRequest, app.data.v1.data_pb2.AddBoundingBoxToImageByIDResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: RemoveBoundingBoxFromImageByID(stream: grpclib.server.Stream[app.data.v1.data_pb2.RemoveBoundingBoxFromImageByIDRequest, app.data.v1.data_pb2.RemoveBoundingBoxFromImageByIDResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: BoundingBoxLabelsByFilter(stream: grpclib.server.Stream[app.data.v1.data_pb2.BoundingBoxLabelsByFilterRequest, app.data.v1.data_pb2.BoundingBoxLabelsByFilterResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: GetDatabaseConnection(stream: grpclib.server.Stream[app.data.v1.data_pb2.GetDatabaseConnectionRequest, app.data.v1.data_pb2.GetDatabaseConnectionResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: ConfigureDatabaseUser(stream: grpclib.server.Stream[app.data.v1.data_pb2.ConfigureDatabaseUserRequest, app.data.v1.data_pb2.ConfigureDatabaseUserResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: __mapping__() -> Dict[str, grpclib.const.Handler]



.. py:class:: DataServiceStub(channel: grpclib.client.Channel)



