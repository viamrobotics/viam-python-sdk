:py:mod:`viam.gen.component.gantry.v1.gantry_grpc`
==================================================

.. py:module:: viam.gen.component.gantry.v1.gantry_grpc


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.gen.component.gantry.v1.gantry_grpc.GantryServiceBase
   viam.gen.component.gantry.v1.gantry_grpc.GantryServiceStub




.. py:class:: GantryServiceBase


   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: GetPosition(stream: grpclib.server.Stream[component.gantry.v1.gantry_pb2.GetPositionRequest, component.gantry.v1.gantry_pb2.GetPositionResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: MoveToPosition(stream: grpclib.server.Stream[component.gantry.v1.gantry_pb2.MoveToPositionRequest, component.gantry.v1.gantry_pb2.MoveToPositionResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: Home(stream: grpclib.server.Stream[component.gantry.v1.gantry_pb2.HomeRequest, component.gantry.v1.gantry_pb2.HomeResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: GetLengths(stream: grpclib.server.Stream[component.gantry.v1.gantry_pb2.GetLengthsRequest, component.gantry.v1.gantry_pb2.GetLengthsResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: Stop(stream: grpclib.server.Stream[component.gantry.v1.gantry_pb2.StopRequest, component.gantry.v1.gantry_pb2.StopResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: IsMoving(stream: grpclib.server.Stream[component.gantry.v1.gantry_pb2.IsMovingRequest, component.gantry.v1.gantry_pb2.IsMovingResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: DoCommand(stream: grpclib.server.Stream[common.v1.common_pb2.DoCommandRequest, common.v1.common_pb2.DoCommandResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: GetGeometries(stream: grpclib.server.Stream[common.v1.common_pb2.GetGeometriesRequest, common.v1.common_pb2.GetGeometriesResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: __mapping__() -> Dict[str, grpclib.const.Handler]



.. py:class:: GantryServiceStub(channel: grpclib.client.Channel)



