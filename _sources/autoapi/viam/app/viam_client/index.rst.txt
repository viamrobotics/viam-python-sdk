viam.app.viam_client
====================

.. py:module:: viam.app.viam_client


Attributes
----------

.. autoapisummary::

   viam.app.viam_client.LOGGER


Classes
-------

.. autoapisummary::

   viam.app.viam_client.ViamClient


Module Contents
---------------

.. py:data:: LOGGER

.. py:class:: ViamClient

   gRPC client for all communication and interaction with app.

   `ViamClient` class for creating and managing specialized client instances.
   There is currently 1 way to instantiate a `ViamClient` object::

       ViamClient.create_from_dial_options(...)


   .. py:method:: create_from_env_vars(dial_options: Optional[viam.rpc.dial.DialOptions] = None, app_url: Optional[str] = None) -> typing_extensions.Self
      :classmethod:

      :async:


      Create `ViamClient` using credentials set in the environment as `VIAM_API_KEY` and `VIAM_API_KEY_ID`.

      ::

          client = await ViamClient.create_from_env_vars()

      :param dial_options: Options for authorization and connection to app.
                           If not provided, default options will be selected. Note that `creds` and `auth_entity`
                           fields will be overwritten by the values set by a module.
      :type dial_options: Optional[viam.rpc.dial.DialOptions]
      :param app_url: (Optional[str]): URL of app. Uses app.viam.com if not specified.

      :raises ValueError: If there are no env vars set by the module, or if they are set improperly



   .. py:method:: create_from_dial_options(dial_options: viam.rpc.dial.DialOptions, app_url: Optional[str] = None) -> typing_extensions.Self
      :classmethod:

      :async:


      Create `ViamClient` that establishes a connection to Viam.

      ::

          dial_options = DialOptions.with_api_key("<API-KEY>", "<API-KEY-ID>")
          client = await ViamClient.create_from_dial_options(dial_options)

      :param dial_options: Required information for authorization and connection to app.
                           `creds` and `auth_entity` fields are required.
      :type dial_options: viam.rpc.dial.DialOptions
      :param app_url: (Optional[str]): URL of app. Uses app.viam.com if not specified.

      :raises ValueError: If the input parameters are missing a required field or simply invalid.

      :returns: The `ViamClient`.
      :rtype: Self



   .. py:property:: data_client
      :type: viam.app.data_client.DataClient

      Instantiate and return a `DataClient` object used to make `data` and `data_sync` method calls.
      To use the `DataClient`, you must first instantiate a `ViamClient`.

      ::

          async def connect() -> ViamClient:
              # Replace "<API-KEY>" (including brackets) with your API key and "<API-KEY-ID>" with your API key ID
              dial_options = DialOptions.with_api_key("<API-KEY>", "<API-KEY-ID>")
              return await ViamClient.create_from_dial_options(dial_options)

          async def main():
              viam_client = await connect()

              # Instantiate a DataClient to run data client API methods on
              data_client = viam_client.data_client


   .. py:property:: app_client
      :type: viam.app.app_client.AppClient

      Instantiate and return an `AppClient` used to make  `app` method calls.
      To use the `AppClient`, you must first instantiate a `ViamClient`.

      ::

          async def connect() -> ViamClient:
              # Replace "<API-KEY>" (including brackets) with your API key and "<API-KEY-ID>" with your API key ID
              dial_options = DialOptions.with_api_key("<API-KEY>", "<API-KEY-ID>")
              return await ViamClient.create_from_dial_options(dial_options)


          async def main():
              viam_client = await connect()

              # Instantiate an AppClient called "fleet" to run fleet management API methods on
              fleet = viam_client.app_client


   .. py:property:: ml_training_client
      :type: viam.app.ml_training_client.MLTrainingClient

      Instantiate and return a `MLTrainingClient` used to make `ml_training` method calls.
      To use the `MLTrainingClient`, you must first instantiate a `ViamClient`.

      ::

          async def connect() -> ViamClient:
              # Replace "<API-KEY>" (including brackets) with your API key and "<API-KEY-ID>" with your API key ID
              dial_options = DialOptions.with_api_key("<API-KEY>", "<API-KEY-ID>")
              return await ViamClient.create_from_dial_options(dial_options)


          async def main():
              viam_client = await connect()

              # Instantiate an MLTrainingClient to run ML training client API methods on
              ml_training_client = viam_client.ml_training_client


   .. py:property:: billing_client
      :type: viam.app.billing_client.BillingClient

      



      Instantiate and return a `BillingClient` used to make `billing` method calls.
          To use the `BillingClient`, you must first instantiate a `ViamClient`.

      ::

          async def connect() -> ViamClient:
              # Replace "<API-KEY>" (including brackets) with your API key and "<API-KEY-ID>" with your API key ID
              dial_options = DialOptions.with_api_key("<API-KEY>", "<API-KEY-ID>")
              return await ViamClient.create_from_dial_options(dial_options)


          async def main():
              viam_client = await connect()

              # Instantiate a BillingClient to run billing client API methods on
              billing_client = viam_client.billing_client


   .. py:property:: provisioning_client
      :type: viam.app.provisioning_client.ProvisioningClient

      Instantiate and return a `ProvisioningClient` used to make  `provisioning` method calls.
      To use the `ProvisioningClient`, you must first instantiate a `ViamClient`.

      ::

          async def connect() -> ViamClient:
              # Replace "<API-KEY>" (including brackets) with your API key and "<API-KEY-ID>" with your API key ID
              dial_options = DialOptions.with_api_key("<API-KEY>", "<API-KEY-ID>")
              return await ViamClient.create_from_dial_options(dial_options)


          async def main():
              viam_client = await connect()

              # Instantiate a ProvisioningClient to run provisioning API methods on
              provisioning_client = viam_client.provisioning_client


   .. py:method:: __aenter__() -> ViamClient
      :async:


      A ViamClient can act as an asynchronous context manager. It will do nothing special when
      the context is entered.



   .. py:method:: __aexit__(exc_type: Optional[type], exc_value: Optional[BaseException], traceback: Optional[Any]) -> None
      :async:


      A ViamClient can act as an asynchronous context manager. It will close itself when
      the context is exited.

      ::

          async with ViamClient.create_from_dial_options(...) as client:
              await do_something_with(client)
          # client is closed here



   .. py:method:: close() -> None

      Close opened channels used for the various service stubs initialized.



   .. py:method:: connect_to_machine(*, address: Optional[str] = None, id: Optional[str] = None) -> viam.robot.client.RobotClient
      :async:


      Connect to a machine using existing credentials.

      A connection can be attempted using either the machine's address or its ID.
      If both an address and ID are provided, the address will take precedence and the ID will be ignored.

      ::

          async def connect() -> ViamClient:
              # Replace "<API-KEY>" (including brackets) with your API key and "<API-KEY-ID>" with your API key ID
              dial_options = DialOptions.with_api_key("<API-KEY>", "<API-KEY-ID>")
              return await ViamClient.create_from_dial_options(dial_options)


          async def main():
              viam_client = await connect()

              # Connect to a machine and obtain a RobotClient
              # Replace "<MACHINE_ADDRESS>" (including brackets) with your machine's connection address
              machine = await viam_client.connect_to_machine(address="<MACHINE_ADDRESS>")

      :param address: The address (FQDN) of the machine. Defaults to None.
      :type address: Optional[str]
      :param id: The ID (as a UUID) of the machine. Defaults to None.
      :type id: Optional[str]

      :raises ValueError: If neither an address nor ID is provided.

      :returns: The active connection to the machine.
      :rtype: RobotClient



