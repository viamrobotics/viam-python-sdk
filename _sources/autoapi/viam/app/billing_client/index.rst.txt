viam.app.billing_client
=======================

.. py:module:: viam.app.billing_client


Attributes
----------

.. autoapisummary::

   viam.app.billing_client.LOGGER


Classes
-------

.. autoapisummary::

   viam.app.billing_client.BillingServiceStub
   viam.app.billing_client.GetCurrentMonthUsageRequest
   viam.app.billing_client.GetCurrentMonthUsageResponse
   viam.app.billing_client.GetInvoicePdfRequest
   viam.app.billing_client.GetInvoicePdfResponse
   viam.app.billing_client.GetInvoicesSummaryRequest
   viam.app.billing_client.GetInvoicesSummaryResponse
   viam.app.billing_client.GetOrgBillingInformationRequest
   viam.app.billing_client.GetOrgBillingInformationResponse
   viam.app.billing_client.BillingClient


Module Contents
---------------

.. py:class:: BillingServiceStub(channel: grpclib.client.Channel)

.. py:class:: GetCurrentMonthUsageRequest(*, org_id: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: org_id
      :type:  str


.. py:class:: GetCurrentMonthUsageResponse(*, start_date: google.protobuf.timestamp_pb2.Timestamp | None = ..., end_date: google.protobuf.timestamp_pb2.Timestamp | None = ..., cloud_storage_usage_cost: float = ..., data_upload_usage_cost: float = ..., data_egres_usage_cost: float = ..., remote_control_usage_cost: float = ..., standard_compute_usage_cost: float = ..., discount_amount: float = ..., total_usage_with_discount: float = ..., total_usage_without_discount: float = ..., per_machine_usage_cost: float = ..., binary_data_cloud_storage_usage_cost: float = ..., other_cloud_storage_usage_cost: float = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: cloud_storage_usage_cost
      :type:  float


   .. py:attribute:: data_upload_usage_cost
      :type:  float


   .. py:attribute:: data_egres_usage_cost
      :type:  float


   .. py:attribute:: remote_control_usage_cost
      :type:  float


   .. py:attribute:: standard_compute_usage_cost
      :type:  float


   .. py:attribute:: discount_amount
      :type:  float


   .. py:attribute:: total_usage_with_discount
      :type:  float


   .. py:attribute:: total_usage_without_discount
      :type:  float


   .. py:attribute:: per_machine_usage_cost
      :type:  float


   .. py:attribute:: binary_data_cloud_storage_usage_cost
      :type:  float


   .. py:attribute:: other_cloud_storage_usage_cost
      :type:  float


   .. py:property:: start_date
      :type: google.protobuf.timestamp_pb2.Timestamp



   .. py:property:: end_date
      :type: google.protobuf.timestamp_pb2.Timestamp



   .. py:method:: HasField(field_name: Literal['end_date', b'end_date', 'start_date', b'start_date']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: GetInvoicePdfRequest(*, id: str = ..., org_id: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: id
      :type:  str


   .. py:attribute:: org_id
      :type:  str


.. py:class:: GetInvoicePdfResponse(*, chunk: bytes = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: chunk
      :type:  bytes


.. py:class:: GetInvoicesSummaryRequest(*, org_id: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: org_id
      :type:  str


.. py:class:: GetInvoicesSummaryResponse(*, outstanding_balance: float = ..., invoices: collections.abc.Iterable[global___InvoiceSummary] | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: outstanding_balance
      :type:  float

      all unpaid balances at the end of the last billing cycle


   .. py:property:: invoices
      :type: google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InvoiceSummary]

      all previous invoices


.. py:class:: GetOrgBillingInformationRequest(*, org_id: str = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: org_id
      :type:  str


.. py:class:: GetOrgBillingInformationResponse(*, type: global___PaymentMethodType = ..., billing_email: str = ..., method: global___PaymentMethodCard | None = ..., billing_tier: str | None = ...)

   Bases: :py:obj:`google.protobuf.message.Message`


   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


   .. py:attribute:: type
      :type:  global___PaymentMethodType


   .. py:attribute:: billing_email
      :type:  str


   .. py:attribute:: billing_tier
      :type:  str

      Only return billing_tier for billing dashboard admin users


   .. py:property:: method
      :type: global___PaymentMethodCard

      defined if type is PAYMENT_METHOD_TYPE_CARD


   .. py:method:: HasField(field_name: Literal['_billing_tier', b'_billing_tier', '_method', b'_method', 'billing_tier', b'billing_tier', 'method', b'method']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



   .. py:method:: WhichOneof(oneof_group: Literal['_billing_tier', b'_billing_tier']) -> Literal['billing_tier'] | None
                  WhichOneof(oneof_group: Literal['_method', b'_method']) -> Literal['method'] | None

      Returns the name of the field that is set inside a oneof group.

      If no field is set, returns None.

      :param oneof_group: the name of the oneof group to check.
      :type oneof_group: str

      :returns: The name of the group that is set, or None.
      :rtype: str or None

      :raises ValueError: no group with the given name exists



.. py:data:: LOGGER

.. py:class:: BillingClient(channel: grpclib.client.Channel, metadata: Mapping[str, str])

   gRPC client for retrieving billing data from app.

   Constructor is used by `ViamClient` to instantiate relevant service stubs. Calls to
   `BillingClient` methods should be made through `ViamClient`.

   Establish a Connection::

       import asyncio

       from viam.rpc.dial import DialOptions, Credentials
       from viam.app.viam_client import ViamClient


       async def connect() -> ViamClient:
           # Replace "<API-KEY>" (including brackets) with your API key and "<API-KEY-ID>" with your API key ID
           dial_options = DialOptions.with_api_key("<API-KEY>", "<API-KEY-ID>")
           return await ViamClient.create_from_dial_options(dial_options)


       async def main():
           # Make a ViamClient
           viam_client = await connect()
           # Instantiate a BillingClient to run billing client API methods on
           billing_client = viam_client.billing_client

           viam_client.close()

       if __name__ == '__main__':
           asyncio.run(main())

   For more information, see `Billing Client API <https://docs.viam.com/appendix/apis/billing-client/>`_.


   .. py:method:: get_current_month_usage(org_id: str, timeout: Optional[float] = None) -> viam.proto.app.billing.GetCurrentMonthUsageResponse
      :async:


      Access data usage information for the current month for a given organization.

      ::

         usage = await viam_client.billing_client.get_current_month_usage("<ORG-ID>")

      :param org_id: the ID of the organization to request usage data for
      :type org_id: str

      :returns: Current month usage information
      :rtype: viam.proto.app.billing.GetCurrentMonthUsageResponse

      For more information, see `Billing Client API <https://docs.viam.com/appendix/apis/billing-client/>`_.



   .. py:method:: get_invoice_pdf(invoice_id: str, org_id: str, dest: str, timeout: Optional[float] = None) -> None
      :async:


      Access invoice PDF data and optionally save it to a provided file path.

      ::

          await viam_client.billing_client.get_invoice_pdf("<INVOICE-ID>", "<ORG-ID>", "<FILENAME>")

      :param invoice_id: the ID of the invoice being requested
      :type invoice_id: str
      :param org_id: the ID of the org to request data from
      :type org_id: str
      :param dest: filepath to save the invoice to
      :type dest: str

      For more information, see `Billing Client API <https://docs.viam.com/appendix/apis/billing-client/>`_.



   .. py:method:: get_invoices_summary(org_id: str, timeout: Optional[float] = None) -> viam.proto.app.billing.GetInvoicesSummaryResponse
      :async:


      Access total outstanding balance plus invoice summaries for a given org.

      ::

          summary = await viam_client.billing_client.get_invoices_summary("<ORG-ID>")

      :param org_id: the ID of the org to request data for
      :type org_id: str

      :returns: Summary of org invoices
      :rtype: viam.proto.app.billing.GetInvoicesSummaryResponse

      For more information, see `Billing Client API <https://docs.viam.com/appendix/apis/billing-client/>`_.



   .. py:method:: get_org_billing_information(org_id: str, timeout: Optional[float] = None) -> viam.proto.app.billing.GetOrgBillingInformationResponse
      :async:


      Access billing information (payment method, billing tier, etc.) for a given org.

      ::

          information = await viam_client.billing_client.get_org_billing_information("<ORG-ID>")

      :param org_id: the ID of the org to request data for
      :type org_id: str

      :returns: The org billing information
      :rtype: viam.proto.app.billing.GetOrgBillingInformationResponse

      For more information, see `Billing Client API <https://docs.viam.com/appendix/apis/billing-client/>`_.



