:py:mod:`viam.app.app_client`
=============================

.. py:module:: viam.app.app_client


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.app.app_client.RobotPart
   viam.app.app_client.LogEntry
   viam.app.app_client.Fragment
   viam.app.app_client.RobotPartHistoryEntry
   viam.app.app_client.AppClient




Attributes
~~~~~~~~~~

.. autoapisummary::

   viam.app.app_client.LOGGER


.. py:data:: LOGGER

   

.. py:class:: RobotPart


   A class that mirrors the `RobotPart` proto message.

   Use this class to make the attributes of a `viam.proto.app.RobotPart` more accessible and easier to read/interpret.

   .. py:property:: proto
      :type: viam.proto.app.RobotPart


   .. py:attribute:: id
      :type: str

      

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: dns_name
      :type: str

      

   .. py:attribute:: secret
      :type: str

      

   .. py:attribute:: robot
      :type: str

      

   .. py:attribute:: location_id
      :type: str

      

   .. py:attribute:: robot_config
      :type: Optional[Mapping[str, Any]]

      

   .. py:attribute:: last_access
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: user_supplied_info
      :type: Optional[Mapping[str, Any]]

      

   .. py:attribute:: main_part
      :type: bool

      

   .. py:attribute:: fqdn
      :type: str

      

   .. py:attribute:: local_fqdn
      :type: str

      

   .. py:attribute:: created_on
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: secrets
      :type: Optional[List[viam.proto.app.SharedSecret]]

      

   .. py:method:: from_proto(robot_part: viam.proto.app.RobotPart) -> typing_extensions.Self
      :classmethod:

      Create a `RobotPart` from the .proto defined `RobotPart`.

      :param robot_part: The object to copy from.
      :type robot_part: viam.proto.app.RobotPart

      :returns: The `RobotPart`.
      :rtype: RobotPart



.. py:class:: LogEntry


   A class that mirrors the `LogEntry` proto message.

   Use this class to make the attributes of a `viam.proto.app.LogEntry` more accessible and easier to read/interpret.

   .. py:property:: proto
      :type: viam.proto.app.LogEntry


   .. py:attribute:: host
      :type: str

      

   .. py:attribute:: level
      :type: str

      

   .. py:attribute:: time
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: logger_name
      :type: str

      

   .. py:attribute:: message
      :type: str

      

   .. py:attribute:: caller
      :type: Optional[Mapping[str, Any]]

      

   .. py:attribute:: stack
      :type: str

      

   .. py:attribute:: fields
      :type: Optional[List[Mapping[str, Any]]]

      

   .. py:method:: from_proto(log_entry: viam.proto.app.LogEntry) -> typing_extensions.Self
      :classmethod:

      Create a `LogEntry` from the .proto defined `LogEntry`.

      :param log_entry: The object to copy from.
      :type log_entry: viam.proto.app.LogEntry

      :returns: The `LogEntry`.
      :rtype: LogEntry



.. py:class:: Fragment


   A class that mirrors the `Fragment` proto message.

   Use this class to make the attributes of a `viam.proto.app.RobotPart` more accessible and easier to read/interpret.

   .. py:property:: proto
      :type: viam.proto.app.Fragment


   .. py:attribute:: id
      :type: str

      

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: fragment
      :type: Optional[Mapping[str, Any]]

      

   .. py:attribute:: organization_owner
      :type: str

      

   .. py:attribute:: public
      :type: bool

      

   .. py:attribute:: created_on
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: organization_name
      :type: str

      

   .. py:attribute:: robot_part_count
      :type: int

      

   .. py:attribute:: organization_count
      :type: int

      

   .. py:attribute:: only_used_by_owner
      :type: bool

      

   .. py:method:: from_proto(fragment: viam.proto.app.Fragment) -> typing_extensions.Self
      :classmethod:

      Create a `Fragment` from the .proto defined `Fragment`.

      :param fragment: The object to copy from.
      :type fragment: viam.proto.app.Fragment

      :returns: The `Fragment`.
      :rtype: Fragment



.. py:class:: RobotPartHistoryEntry


   A class that mirrors the `RobotPartHistoryEntry` proto message.

   Use this class to make the attributes of a `viam.proto.app.RobotPartHistoryEntry` more accessible and easier to read/interpret.

   .. py:property:: proto
      :type: viam.proto.app.RobotPartHistoryEntry


   .. py:attribute:: part
      :type: str

      

   .. py:attribute:: robot
      :type: str

      

   .. py:attribute:: when
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: old
      :type: Optional[RobotPart]

      

   .. py:method:: from_proto(robot_part_history_entry: viam.proto.app.RobotPartHistoryEntry) -> typing_extensions.Self
      :classmethod:

      Create a `RobotPartHistoryEntry` from the .proto defined `RobotPartHistoryEntry`.

      :param robo_part_history_entry: The object to copy from.
      :type robo_part_history_entry: viam.proto.app.RobotPartHistoryEntry

      :returns: The `RobotPartHistoryEntry`.
      :rtype: RobotPartHistoryEntry



.. py:class:: AppClient(channel: grpclib.client.Channel, metadata: Mapping[str, str], location_id: Optional[str] = None)


   gRPC client for method calls to app.

   Constructor is used by `ViamClient` to instantiate relevant service stub. Calls to `AppClient`  methods should be made through
   `ViamClient`.

   .. py:method:: get_user_id_by_email(email: str) -> str
      :abstractmethod:
      :async:


   .. py:method:: create_organization(name: str) -> viam.proto.app.Organization
      :abstractmethod:
      :async:


   .. py:method:: list_organizations() -> List[viam.proto.app.Organization]
      :async:

      List the organization(s) the user is an authorized owner of.

      :returns: The list of organizations.
      :rtype: List[viam.proto.app.Organization]


   .. py:method:: list_organizations_by_user(user_id: str) -> List[viam.proto.app.OrgDetails]
      :abstractmethod:
      :async:


   .. py:method:: get_organization() -> viam.proto.app.Organization
      :abstractmethod:
      :async:


   .. py:method:: get_organization_namespace_availability(public_namespace: str) -> bool
      :async:

      Check the availability of an organization namespace.

      :param public_namespace: Organization namespace to check. Namespaces can only contain lowercase lowercase alphanumeric and dash
                               characters.
      :type public_namespace: str

      :raises GRPCError: If an invalid namespace (e.g., "") is provided.

      :returns: True if the provided namespace is available.
      :rtype: bool


   .. py:method:: update_organization(name: Optional[str] = None, public_namespace: Optional[str] = None, region: Optional[str] = None) -> viam.proto.app.Organization
      :abstractmethod:
      :async:


   .. py:method:: delete_organization(organization_id: str) -> None
      :abstractmethod:
      :async:


   .. py:method:: list_organization_members() -> Tuple[List[viam.proto.app.OrganizationMember], List[viam.proto.app.OrganizationInvite]]
      :async:

      List the members and invites of the currently authed-to organization.

      :returns:

                A tuple containing two lists; the first
                    [0] of organization members, and the second [1] of organization invites.
      :rtype: Tuple[List[viam.proto.app.OrganizationMember], List[viam.proto.app.OrganizationInvite]]


   .. py:method:: create_organization_invite(email: str, authorizations: Optional[List[viam.proto.app.Authorization]] = None) -> viam.proto.app.OrganizationInvite
      :abstractmethod:
      :async:


   .. py:method:: update_organization_invite_authorizations(email: str, add_authorizations: Optional[List[viam.proto.app.Authorization]] = None, remove_authorizations: Optional[List[viam.proto.app.Authorization]] = None) -> viam.proto.app.OrganizationInvite
      :async:

      Update the authorizations attached to an organization invite that has already been created.

      Note that an invite can only have one authorization at each resource (e.g., organization, location, robot, etc.) level and must have
      at least one authorization overall.

      :param email: Email of the user the invite was sent to.
      :type email: str
      :param add_authorizations: Optional list of authorizations to add to the invite.
      :type add_authorizations: Optional[List[viam.proto.app.Authorization]]
      :param remove_authorizations: Optional list of authorizations to remove from the invite.
      :type remove_authorizations: Optional[List[viam.proto.app.Authorization]]

      :raises GRPCError: If no authorizations are passed or if an invalid combination of authorizations is passed (e.g. an authorization to
          remove when the invite only contains one authorization).

      :returns: The updated invite.
      :rtype: viam.proto.app.OrganizationInvite


   .. py:method:: delete_organization_member(user_id: str) -> None
      :abstractmethod:
      :async:


   .. py:method:: delete_organization_invite(email: str) -> None
      :abstractmethod:
      :async:


   .. py:method:: resend_organization_invite(email: str) -> viam.proto.app.OrganizationInvite
      :abstractmethod:
      :async:


   .. py:method:: create_location(name: str, parent_location_id: Optional[str] = None) -> viam.proto.app.Location
      :async:

      Create and name a location under the currently authed-to organization and the specified parent location.

      :param name: Name of the location.
      :type name: str
      :param parent_location_id: Optional parent location to put the location under. Defaults to a root-level location if no
                                 location ID is provided.
      :type parent_location_id: Optional[str]

      :raises GRPCError: If either an invalid name (e.g., ""), or parent location ID (e.g., a nonexistent ID) is passed.

      :returns: The newly created location.
      :rtype: viam.proto.app.Location


   .. py:method:: get_location(location_id: Optional[str] = None) -> viam.proto.app.Location
      :async:

      Get a location.

      :param location_id: ID of the location to get. Defaults to the location ID provided at `AppClient` instantiation.
      :type location_id: Optional[str]

      :raises GRPCError: If an invalid location ID is passed or if one isn't passed and there was no location ID provided at `AppClient`
          instantiation.

      :returns: The location.
      :rtype: viam.proto.app.Location


   .. py:method:: update_location(location_id: str, name: Optional[str] = None, parent_location_id: Optional[str] = None) -> viam.proto.app.Location
      :async:

      Change the name of a location and/or assign it a new parent location.

      :param location_id: ID of the location to update. Must be specified.
      :type location_id: str
      :param name: Optional new name to be updated on the location. Defaults to the empty string "" (i.e., the name doesn't
                   change).
      :type name: Optional[str]
      :param parent_location_id: Optional ID of new parent location to move the location under. Defaults to the empty string
                                 "" (i.e., no new parent location is assigned).
      :type parent_location_id: Optional[str]

      :raises GRPCError: If either an invalid location ID, name, or parent location ID is passed.

      :returns: The newly updated location.
      :rtype: viam.proto.app.Location


   .. py:method:: delete_location(location_id: str) -> None
      :async:

      Delete a location.

      :param location_id: ID of the location to delete. Must be specified.
      :type location_id: str

      :raises GRPCError: If an invalid location ID is passed.


   .. py:method:: list_locations() -> List[viam.proto.app.Location]
      :async:

      Get a list of all locations under the currently authed-to organization.

      :returns: The list of locations.
      :rtype: List[viam.proto.app.Location]


   .. py:method:: share_location()
      :abstractmethod:
      :async:


   .. py:method:: unshare_location()
      :abstractmethod:
      :async:


   .. py:method:: location_auth(location_id: Optional[str] = None) -> viam.proto.app.LocationAuth
      :async:

      Get a location's `LocationAuth` (location secret(s)).

      :param location_id: ID of the location to retrieve `LocationAuth` from. Defaults to the location ID provided at `AppClient`
                          instantiation.
      :type location_id: str

      :raises GRPCError: If an invalid location ID is passed or if one isn't passed and there was no location ID provided at `AppClient`
          instantiation.

      :returns: The `LocationAuth` containing location secrets.
      :rtype: LocationAuth


   .. py:method:: create_location_secret(location_id: Optional[str] = None) -> viam.proto.app.LocationAuth
      :async:

      Create a new location secret.

      :param location_id: ID of the location to generate a new secret for. Defaults to the location ID provided at
                          `AppClient` instantiation.
      :type location_id: Optional[str]

      :raises GRPCError: If an invalid location ID is passed or one isn't passed and there was no location ID provided at `AppClient`
          instantiation.

      :returns: The specified location's `LocationAuth` containing the newly created secret.
      :rtype: viam.proto.app.LocationAuth


   .. py:method:: delete_location_secret(secret_id: str, location_id: Optional[str] = None) -> None
      :async:

      Delete a location secret.

      :param location_id: ID of the location to delete secret from. Defaults to the location ID provided at `AppClient` instantiation.
      :type location_id: str
      :param secret_id: ID of the secret to delete.
      :type secret_id: str

      :raises GRPCError: If either an invalid location ID or secret ID is passed or a location ID isn't passed and there was no location
          ID provided at `AppClient` instantiation.


   .. py:method:: get_robot(robot_id: str) -> viam.proto.app.Robot
      :async:

      Get a robot.

      :param id: ID of the robot to get.
      :type id: str

      :raises GRPCError: If an invalid robot ID is passed.

      :returns: The robot.
      :rtype: viam.proto.app.Robot


   .. py:method:: get_rover_rental_parts()
      :abstractmethod:
      :async:


   .. py:method:: get_robot_parts(robot_id: str) -> List[RobotPart]
      :async:

      Get a list of all the parts under a specific robot.

      :param robot_id: ID of the robot to get parts from.
      :type robot_id: str

      :raises GRPCError: If an invalid robot ID is passed.

      :returns: The list of robot parts.
      :rtype: List[viam.app.app_client.RobotPart]


   .. py:method:: get_robot_part(robot_part_id: str, dest: Optional[str] = None, indent: int = 4) -> RobotPart
      :async:

      Get a robot part.

      :param robot_part_id: ID of the robot part to get.
      :type robot_part_id: str
      :param dest: Optional filepath to write the robot part's config file in JSON format to.
      :type dest: Optional[str]
      :param indent: Size (in number of spaces) of indent when writing config to `dest`. Defaults to 4.
      :type indent: int

      :raises GRPCError: If an invalid robot part ID is passed.

      :returns: The robot part.
      :rtype: viam.app.app_client.RobotPart


   .. py:method:: get_robot_part_logs(robot_part_id: str, filter: Optional[str] = None, dest: Optional[str] = None, errors_only: bool = True, num_log_entries: int = 100) -> List[LogEntry]
      :async:

      Get the logs associated with a robot part.

      :param robot_part_id: ID of the robot part to get logs from.
      :type robot_part_id: str
      :param filter: Only include logs with messages that contain the string `filter`. Defaults to empty string "" (i.e., no
                     filter).
      :type filter: Optional[str]
      :param dest: Optional filepath to write the log entries to.
      :type dest: Optional[str]
      :param errors_only: Boolean specifying whether or not to only include error logs. Defaults to True.
      :type errors_only: bool
      :param num_log_entries: Number of log entries to return. Passing 0 returns all logs. Defaults to 100. All logs or the first
                              `num_log_entries` logs will be returned, whichever comes first.
      :type num_log_entries: int

      :raises GRPCError: If an invalid robot part ID is passed.

      :returns: The list of log entries.
      :rtype: List[viam.app.app_client.LogEntry]


   .. py:method:: tail_robot_part_logs(robot_part_id: str, errors_only: bool = True, filter: Optional[str] = None) -> viam.app._logs._LogsStream[List[LogEntry]]
      :async:

      Get an asynchronous iterator that recieves live robot part logs.

      :param robot_part_id: ID of the robot part to retrieve lgos from.
      :type robot_part_id: str
      :param errors_only: Boolean specifying whether or not to only include error logs. Defaults to True.
      :type errors_only: bool
      :param filter: Only include logs with messages that contain the string `filter`. Defaults to empty string "" (i.e., no
                     filter).
      :type filter: Optional[str]

      :returns: The asynchronous iterator recieving live robot part logs.
      :rtype: _LogsStream[List[LogEntry]]


   .. py:method:: get_robot_part_history(robot_part_id: str) -> List[RobotPartHistoryEntry]
      :async:

      Get a list containing the history of a robot part.

      :param robot_part_id: ID of the robot part to retrieve history from.
      :type robot_part_id: str

      :raises GRPCError: If an invalid robot part ID is provided.

      :returns: The list of the robot part's history.
      :rtype: List[viam.app.app_client.RobotPartHistoryEntry]


   .. py:method:: update_robot_part(robot_part_id: str, name: str, robot_config: Optional[Mapping[str, Any]] = None) -> RobotPart
      :async:

      Change the name and assign an optional new configuration to a robot part.

      :param robot_part_id: ID of the robot part to update.
      :type robot_part_id: str
      :param name: New name to be updated on the robot part.
      :type name: str
      :param robot_config: Optional new config represented as a dictionary to be updated on the robot part. The robot
                           part's config will remain as is (no change) if one isn't passed.
      :type robot_config: Mapping[str, Any]

      :raises GRPCError: If either an invalid robot part ID, name, or config is passed.

      :returns: The newly updated robot part.
      :rtype: viam.app.app_client.RobotPart


   .. py:method:: new_robot_part(robot_id: str, part_name: str) -> str
      :async:

      Create a new robot part.

      :param robot_id: ID of the the robot to create a new part for.
      :type robot_id: str
      :param part_name: Name of the new part.
      :type part_name: str

      :raises GRPCError: If either an invalid robot ID or name is passed.

      :returns: The new robot part's ID.
      :rtype: str


   .. py:method:: delete_robot_part(robot_part_id: str) -> None
      :async:

      Delete the specified robot part.

      :param robot_part_id: ID of the robot part to delete. Must be specified.
      :type robot_part_id: str

      :raises GRPCError: If an invalid robot part ID is passed.


   .. py:method:: mark_part_as_main(robot_part_id: str) -> None
      :async:

      Mark a robot part as the main part of a robot.

      :param robot_part_id: ID of the robot part to mark as main.
      :type robot_part_id: str

      :raises GRPCError: If an invalid robot part ID is passed.


   .. py:method:: mark_part_for_restart(robot_part_id: str) -> None
      :async:

      Mark the specified robot part for restart.

      :param robot_part_id: ID of the robot part to mark for restart.
      :type robot_part_id: str

      :raises GRPCError: If an invalid robot part ID is passed.


   .. py:method:: create_robot_part_secret(robot_part_id: str) -> RobotPart
      :async:

      Create a robot part secret.

      :param robot_part_id: ID of the robot part to create a secret for.
      :type robot_part_id: str

      :raises GRPCError: If an invalid robot part ID is passed.

      :returns: The robot part the new secret was generated for.
      :rtype: viam.app.app_client.RobotPart


   .. py:method:: delete_robot_part_secret(robot_part_id: str, secret_id: str) -> None
      :async:

      Delete a robot part secret.

      :param robot_part_id: ID of the robot part to delete the secret from.
      :type robot_part_id: str
      :param secret_id: ID of the secret to delete.
      :type secret_id: str

      :raises GRPCError: If an invalid robot part ID or secret ID is passed.


   .. py:method:: list_robots(location_id: Optional[str] = None) -> List[viam.proto.app.Robot]
      :async:

      Get a list of all robots under the specified location.

      :param location_id: ID of the location to retrieve the robots from. Defaults to the location ID provided at
                          `AppClient` instantiation.
      :type location_id: Optional[str]

      :raises GRPCError: If an invalid location ID is passed or one isn't passed and there was no location ID provided at `AppClient`
          instantiation.

      :returns: The list of robots.
      :rtype: List[viam.proto.app.Robot]


   .. py:method:: new_robot(name: str, location_id: Optional[str] = None) -> str
      :async:

      Create a new robot.

      :param name: Name of the new robot.
      :type name: str
      :param location_id: ID of the location under which to create the robot. Defaults to the current authorized location.
      :type location_id: Optional[str]

      :raises GRPCError: If an invalid location ID is passed or one isn't passed and there was no location ID provided at `AppClient`
          instantiation.

      :returns: The new robot's ID.
      :rtype: str


   .. py:method:: update_robot(robot_id: str, name: str, location_id: Optional[str] = None) -> viam.proto.app.Robot
      :async:

      Change the name of an existing robot.

      :param robot_id: ID of the robot to update.
      :type robot_id: str
      :param name: New name to be updated on the robot.
      :type name: str
      :param location_id: ID of the location under which the robot exists. Defaults to the location ID provided at
                          `AppClient` instantiation
      :type location_id: Optional[str]

      :raises GRPCError: If either an invalid robot ID, name, or location ID is passed or a location ID isn't passed and there was no location
          ID provided at `AppClient` instantiation.

      :returns: The newly updated robot.
      :rtype: viam.proto.app.Robot


   .. py:method:: delete_robot(robot_id: str) -> None
      :async:

      Delete the specified robot.

      :param robot_id: ID of the robot to delete.
      :type robot_id: str

      :raises GRPCError: If an invalid robot ID is passed.


   .. py:method:: list_fragments(show_public: bool = True) -> List[Fragment]
      :async:

      Get a list of fragments under the currently authed-to organization.

      :param show_public: Optional boolean specifiying whether or not to only show public fragments. If True, only public fragments will
                          return. If False, only private fragments will return. Defaults to True.

      :returns: The list of fragments.
      :rtype: List[viam.app.app_client.Fragment]


   .. py:method:: get_fragment(fragment_id: str) -> Fragment
      :async:

      Get a fragment.

      :param fragment_id: ID of the fragment to get.
      :type fragment_id: str

      :raises GRPCError: If an invalid fragment ID is passed.

      :returns: The fragment.
      :rtype: viam.app.app_client.Fragment


   .. py:method:: create_fragment(name: str, config: Optional[Mapping[str, Any]] = None) -> Fragment
      :async:

      Create a new private fragment.

      :param name: Name of the fragment.
      :type name: str
      :param config: Optional Dictionary representation of new config to assign to specified fragment. Can be
                     assigned by updating the fragment.
      :type config: Optional[Mapping[str, Any]]

      :raises GRPCError: If an invalid name is passed.

      :returns: The newly created fragment.
      :rtype: viam.app.app_client.Fragment


   .. py:method:: update_fragment(fragment_id: str, name: str, config: Optional[Mapping[str, Any]] = None, public: Optional[bool] = None) -> Fragment
      :async:

      Update a fragment name AND its config and/or visibility.

      :param fragment_id: ID of the fragment to update.
      :type fragment_id: str
      :param name: New name to associate with the fragment.
      :type name: str
      :param config: Optional Dictionary representation of new config to assign to specified fragment. Not
                     passing this parameter will leave the fragment's config unchanged.
      :type config: Optional[Mapping[str, Any]]
      :param public: Boolean specifying whether the fragment is public. Not passing this parameter will leave the fragment's
                     visibility unchanged. A fragment is private by default when created.
      :type public: bool

      :raises GRPCError: if an invalid ID, name, or config is passed.

      :returns: The newly updated fragment.
      :rtype: viam.app.app_client.Fragment


   .. py:method:: delete_fragment(fragment_id) -> None
      :async:

      Delete a fragment.

      :param fragment_id: ID of the fragment to delete.
      :type fragment_id: str

      :raises GRPCError: If an invalid fragment ID is passed.


   .. py:method:: add_role(identity_id: str, role: str, resource_type: str, resource_id: str) -> None
      :async:

      Add a role under the currently authed-to organization.

      :param identity_id: ID of the entity the role belongs to (e.g., a user ID).
      :type identity_id: str
      :param role: The role to add (i.e., either "owner" or "operator").
      :type role: str
      :param resource_type: Type of the resource to add role to (i.e., either "organization", "location", or "robot"). Must match
                            `resource_id`.
      :type resource_type: str
      :param resource_id: ID of the resource the role applies to (i.e., either an organization, location, or robot ID).
      :type resource_id: str

      :raises GRPCError: If either an invalid identity ID, role ID, resource type, or resource ID is passed.


   .. py:method:: remove_role(identity_id: str, role: str, resource_type: str, resource_id: str) -> None
      :async:

      Remove a role under the currently authed-to organization.

      :param identity_id: ID of the entity the role belongs to (e.g., a user ID).
      :type identity_id: str
      :param role: The role to remove (i.e., either "owner" or "operator").
      :type role: str
      :param resource_type: Type of the resource to remove role from (i.e., either "organization", "location", or "robot"). Must match
                            `resource_id`.
      :type resource_type: str
      :param resource_id: ID of the resource the role applies to (i.e., either an organization, location, or robot ID).
      :type resource_id: str

      :raises GRPCError: If either an invalid identity ID, role ID, resource type, or resource ID or is passed.


   .. py:method:: list_authorizations(resource_ids: Optional[List[str]] = None) -> List[viam.proto.app.Authorization]
      :async:

      List all authorizations under a specific resource (or resources) within the currently authed-to organization. If no resource IDs
      are provided, all resource authorizations within the organizations are returned.

      :param resource_ids: IDs of the resources to retrieve authorizations from. Defaults to None.
      :type resource_ids: Optional[List[str]]

      :raises GRPCError: If an invalid resource ID is passed.

      :returns: The list of authorizations.
      :rtype: List[Authorization]


   .. py:method:: check_permissions(permissions: Optional[List[viam.proto.app.AuthorizedPermissions]] = None) -> List[viam.proto.app.AuthorizedPermissions]
      :abstractmethod:
      :async:


   .. py:method:: create_module(name: str) -> Tuple[str, str]
      :async:

      Create a module under the currently authed-to organization.

      :param name: The name of the module. Must be unique within your organization.
      :type name: str

      :raises GRPCError: If an invalid name (e.g., "") is passed.

      :returns: A tuple containing the ID [0] of the new module and its URL [1].
      :rtype: Tuple[str, str]


   .. py:method:: update_module(module_id: str, url: str, description: str, models: Optional[List[viam.proto.app.Model]], entrypoint: str, organization_id: Optional[str] = None, public: bool = False) -> str
      :async:

      Update the documentation URL, description, models, entrypoint, and/or the visibility of a module.

      :param module_id: ID of the module being updated, containing module name (e.g., "my-module") or namespace and module name (e.g.,
                        "my-org:my-module").
      :type module_id: str
      :param url: The url to reference for documentation and code (NOT the url of the module itself).
      :type url: str
      :param description: A short description of the module that explains its purpose.
      :type description: str
      :param models: list of models that are available in the module.
      :type models: Optional[List[viam.proto.app.Model]]
      :param entrypoint: The executable to run to start the module program.
      :type entrypoint: str
      :param organization_id: ID of organization of the module being updated, required if no namespace exists in the
                              module ID.
      :type organization_id: Optional[str]
      :param public: The visibility that should be set for the module. Defaults to False (private).
      :type public: bool

      :raises GRPCError: If either an invalid module ID, URL, list of models, or organization ID is passed.

      :returns: The URL of the newly updated module.
      :rtype: str


   .. py:method:: upload_module_file(module_file_info: Optional[viam.proto.app.ModuleFileInfo], file: bytes) -> str
      :async:

      Upload a module file

      :param module_file_info: Relevant metadata.
      :type module_file_info: Optional[viam.proto.app.ModuleFileInfo]
      :param file: Bytes of file to upload.
      :type file: bytes

      :returns: ID of uploaded file.
      :rtype: str


   .. py:method:: get_module(module_id: str) -> viam.proto.app.Module
      :async:

      Get a module.

      :param module_id: ID of the module being retrieved, containing module name or namespace and module name.
      :type module_id: str

      :raises GRPCError: If an invalid module ID is passed.

      :returns: The module.
      :rtype: viam.proto.app.Module


   .. py:method:: list_modules() -> List[viam.proto.app.Module]
      :async:

      List the modules under the currently authed-to organization.

      :returns: The list of modules.
      :rtype: List[viam.proto.app.Module]



