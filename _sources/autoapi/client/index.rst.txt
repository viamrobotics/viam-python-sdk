:py:mod:`client`
================

.. py:module:: client


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   client.DataClient




Attributes
~~~~~~~~~~

.. autoapisummary::

   client.LOGGER


.. py:data:: LOGGER

   

.. py:class:: DataClient(channel: grpclib.client.Channel, metadata: Mapping[str, str])

   gRPC client for uploading and retreiving data from app

   Constructor is used by AppClient to instantiate relevant service stubs. Calls to DataClient methods should be made through AppClient

   .. py:method:: tabular_data_by_filter(filter: Optional[viam.proto.app.data.Filter] = None, dest: Optional[str] = None) -> List[Mapping[str, Any]]
      :async:

      Filter and download tabular data

      :param filter: When supplied, the tabular data will be
      :type filter: viam.app.data.Filter
      :param filtered based on the provided constraints. Otherwise:
      :param all data is returned.:
      :param dest: When supplied, the tabular data will be saved to the provided file path.
      :type dest: str

      :returns: A list of tabular data
      :rtype: List[Mapping[str, Any]]


   .. py:method:: binary_data_by_filter(filter: Optional[viam.proto.app.data.Filter] = None, dest: Optional[str] = None) -> List[bytes]
      :async:

      Filter and download binary data

      :param filter: When supplied, the binary data will be
      :type filter: viam.app.data.Filter
      :param filtered based on the provided constraints. Otherwise:
      :param all data is returned.:
      :param dest: When supplied, the binary data will be saved to the provided file path
      :type dest: str

      :returns: The binary data
      :rtype: List[bytes]


   .. py:method:: binary_data_by_ids(binary_ids: List[viam.proto.app.data.BinaryID], dest: Optional[str] = None) -> List[bytes]
      :async:

      Filter and download binary data

      :param binary_ids: IDs of the desired data. Must be non-empty.
      :type binary_ids: List[viam.proto.app.BinaryID]
      :param dest: When supplied, the binary data will be saved to the provided file path.
      :type dest: str

      :returns: The binary data.
      :rtype: List[bytes]

      :raises GRPCError: if no binary_ids are provided.


   .. py:method:: delete_tabular_data_by_filter(filter: Optional[viam.proto.app.data.Filter]) -> None
      :async:

      Delete tabular data

      :param filter: When supplied, the tabular data to delete will be filtered based on the provided constraints.
                     If not provided, all data will be deleted. Exercise caution before using this option.
      :type filter: viam.app.data.Filter


   .. py:method:: delete_binary_data_by_filter(filter: Optional[viam.proto.app.data.Filter]) -> None
      :async:

      Delete binary data

      :param filter: When supplied, the binary data to delete will be filtered based on the provided constraints.
      :type filter: viam.app.data.Filter
      :param If not provided:
      :param all data will be deleted. Exercise caution before using this option.:


   .. py:method:: delete_binary_data_by_ids(binary_ids: List[viam.proto.app.data.BinaryID]) -> None
      :async:

      Delete binary data

      :param binary_ids: The binary IDs of the data to be deleted. Must be non-empty.
      :type binary_ids: List[viam.proto.app.BinaryID]

      :raises GRPCError: if no binary_ids are provided.


   .. py:method:: add_tags_to_binary_data_by_ids(tags: List[str], binary_ids: List[viam.proto.app.data.BinaryID]) -> None
      :async:

      Add tags to binary data using BinaryIDs

      :param tags: List of tags to add to specified binary data. Must be non-empty
      :type tags: List[str]
      :param binary_ids: List of BinaryIDs specifying binary data to tag. Must be non-empty
      :type binary_ids: List[viam.app.proto.BinaryID]

      :raises GRPCError: if no binary_ids or tags are provided


   .. py:method:: add_tags_to_binary_data_by_filter(tags: List[str], filter: Optional[viam.proto.app.data.Filter] = None) -> None
      :async:

      Add tags to binary data using a filter

      :param tags: List of tags to add to specified binary data. Must be non-empty
      :type tags: List[str]
      :param filter: Filter specifying binary data to tag. If no filter is provided, all data will be tagged
      :type filter: viam.app.proto.Filter

      :raises GRPCError: if no tags are provided


   .. py:method:: remove_tags_from_binary_data_by_ids(tags: List[str], binary_ids: List[viam.proto.app.data.BinaryID]) -> None
      :async:

      Remove tags from binary data using BinaryIDs

      :param tags: List of tags to remove from specified binary data. Must be non-empty
      :type tags: List[str]
      :param file_ids: List of BinaryIDs specifying binary data to untag. Must be non-empty
      :type file_ids: List[str]

      :raises GRPCError: if no binary_ids or tags are provided


   .. py:method:: remove_tags_from_binary_data_by_filter(tags: List[str], filter: Optional[viam.proto.app.data.Filter] = None) -> None
      :async:

      Remove tags from binary data using a filter

      :param tags: List of tags to remove from specified binary data
      :type tags: List[str]
      :param filter: Filter specifying binary data to untag. If no filter is provided, all data will be tagged
      :type filter: viam.app.proto.Filter

      :raises GRPCError: if no tags are provided


   .. py:method:: tags_by_filter(filter: Optional[viam.proto.app.data.Filter] = None) -> List[str]
      :async:

      Get a list of tags using a filter

      :param filter: Filter specifying data to retreive from. If no filter is provided, all data tags will return
      :type filter: viam.app.proto.Filter

      :returns: The list of tags
      :rtype: List[str]


   .. py:method:: add_bounding_box_to_image_by_id()
      :abstractmethod:
      :async:


   .. py:method:: remove_bounding_box_from_image_by_id()
      :abstractmethod:
      :async:


   .. py:method:: bounding_box_labels_by_filter(filter: Optional[viam.proto.app.data.Filter] = None) -> List[str]
      :async:

      Get a list of bounding box labels using a filter

      :param filter: Filter specifying data to retreive from. If no filter is provided, all labels will return
      :type filter: viam.app.proto.Filter

      :returns: The list of bounding box labels
      :rtype: List[str]


   .. py:method:: data_capture_upload(metadata: viam.proto.app.datasync.UploadMetadata, sensor_contents: Optional[List[viam.proto.app.datasync.SensorData]] = None) -> None
      :abstractmethod:
      :async:


   .. py:method:: file_upload(metadata: viam.proto.app.datasync.UploadMetadata, file_contents: Optional[viam.proto.app.datasync.FileData]) -> None
      :abstractmethod:
      :async:



